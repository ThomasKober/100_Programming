// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_SDKTemplate_H
#define WINRT_SDKTemplate_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240405.15"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240405.15"
#include "winrt/impl/Windows.ApplicationModel.Background.2.h"
#include "winrt/impl/Windows.Devices.Enumeration.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/Windows.UI.Xaml.Data.2.h"
#include "winrt/impl/Windows.UI.Xaml.Interop.2.h"
#include "winrt/impl/Windows.UI.Xaml.Markup.2.h"
#include "winrt/impl/Windows.UI.Xaml.Media.Imaging.2.h"
#include "winrt/impl/SDKTemplate.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_SDKTemplate_IBluetoothLEDeviceDisplay<D>::DeviceInformation() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IBluetoothLEDeviceDisplay)->get_DeviceInformation(&value));
        return winrt::Windows::Devices::Enumeration::DeviceInformation{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_SDKTemplate_IBluetoothLEDeviceDisplay<D>::Id() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IBluetoothLEDeviceDisplay)->get_Id(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_SDKTemplate_IBluetoothLEDeviceDisplay<D>::Name() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IBluetoothLEDeviceDisplay)->get_Name(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_SDKTemplate_IBluetoothLEDeviceDisplay<D>::IsPaired() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IBluetoothLEDeviceDisplay)->get_IsPaired(&value));
        return value;
    }
    template <typename D> auto consume_SDKTemplate_IBluetoothLEDeviceDisplay<D>::IsConnected() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IBluetoothLEDeviceDisplay)->get_IsConnected(&value));
        return value;
    }
    template <typename D> auto consume_SDKTemplate_IBluetoothLEDeviceDisplay<D>::IsConnectable() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IBluetoothLEDeviceDisplay)->get_IsConnectable(&value));
        return value;
    }
    template <typename D> auto consume_SDKTemplate_IBluetoothLEDeviceDisplay<D>::Properties() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IBluetoothLEDeviceDisplay)->get_Properties(&value));
        return winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Windows::Foundation::IInspectable>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_SDKTemplate_IBluetoothLEDeviceDisplay<D>::GlyphBitmapImage() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IBluetoothLEDeviceDisplay)->get_GlyphBitmapImage(&value));
        return winrt::Windows::UI::Xaml::Media::Imaging::BitmapImage{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_SDKTemplate_IBluetoothLEDeviceDisplay<D>::Update(winrt::Windows::Devices::Enumeration::DeviceInformationUpdate const& deviceInfoUpdate) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IBluetoothLEDeviceDisplay)->Update(*(void**)(&deviceInfoUpdate)));
    }
    template <typename D> auto consume_SDKTemplate_IMainPage<D>::NotifyUser(param::hstring const& strMessage, winrt::SDKTemplate::NotifyType const& type) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IMainPage)->NotifyUser(*(void**)(&strMessage), static_cast<int32_t>(type)));
    }
    template <typename D> auto consume_SDKTemplate_IMainPage<D>::Navigate(winrt::Windows::UI::Xaml::Interop::TypeName const& name, winrt::Windows::Foundation::IInspectable const& parameter) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IMainPage)->Navigate(impl::bind_in(name), *(void**)(&parameter)));
    }
    template <typename D> auto consume_SDKTemplate_IMainPageStatics<D>::FEATURE_NAME() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IMainPageStatics)->get_FEATURE_NAME(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_SDKTemplate_IMainPageStatics<D>::scenarios() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IMainPageStatics)->get_scenarios(&value));
        return winrt::Windows::Foundation::Collections::IVector<winrt::SDKTemplate::Scenario>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_SDKTemplate_IMainPageStatics<D>::Current() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IMainPageStatics)->get_Current(&value));
        return winrt::SDKTemplate::MainPage{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_SDKTemplate_IScenario1_Discovery<D>::KnownDevices() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IScenario1_Discovery)->get_KnownDevices(&value));
        return winrt::Windows::Foundation::Collections::IObservableVector<winrt::Windows::Foundation::IInspectable>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_SDKTemplate_IScenario1_Discovery<D>::ResultsListView() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IScenario1_Discovery)->get_ResultsListView(&value));
        return winrt::Windows::UI::Xaml::Controls::ListView{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_SDKTemplate_IScenario1_Discovery<D>::Not(bool value) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::SDKTemplate::IScenario1_Discovery)->Not(value, &result));
        return result;
    }
    template <typename D>
    struct produce<D, winrt::SDKTemplate::IBluetoothLEDeviceDisplay> : produce_base<D, winrt::SDKTemplate::IBluetoothLEDeviceDisplay>
    {
        int32_t __stdcall get_DeviceInformation(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Enumeration::DeviceInformation>(this->shim().DeviceInformation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsPaired(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsPaired());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsConnected(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsConnected());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsConnectable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsConnectable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Properties(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Windows::Foundation::IInspectable>>(this->shim().Properties());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GlyphBitmapImage(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Xaml::Media::Imaging::BitmapImage>(this->shim().GlyphBitmapImage());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Update(void* deviceInfoUpdate) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Update(*reinterpret_cast<winrt::Windows::Devices::Enumeration::DeviceInformationUpdate const*>(&deviceInfoUpdate));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::SDKTemplate::IMainPage> : produce_base<D, winrt::SDKTemplate::IMainPage>
    {
        int32_t __stdcall NotifyUser(void* strMessage, int32_t type) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyUser(*reinterpret_cast<hstring const*>(&strMessage), *reinterpret_cast<winrt::SDKTemplate::NotifyType const*>(&type));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Navigate(struct struct_Windows_UI_Xaml_Interop_TypeName name, void* parameter) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Navigate(*reinterpret_cast<winrt::Windows::UI::Xaml::Interop::TypeName const*>(&name), *reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&parameter));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::SDKTemplate::IMainPageStatics> : produce_base<D, winrt::SDKTemplate::IMainPageStatics>
    {
        int32_t __stdcall get_FEATURE_NAME(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FEATURE_NAME());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_scenarios(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::SDKTemplate::Scenario>>(this->shim().scenarios());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Current(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::SDKTemplate::MainPage>(this->shim().Current());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::SDKTemplate::IScenario1_Discovery> : produce_base<D, winrt::SDKTemplate::IScenario1_Discovery>
    {
        int32_t __stdcall get_KnownDevices(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IObservableVector<winrt::Windows::Foundation::IInspectable>>(this->shim().KnownDevices());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ResultsListView(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Xaml::Controls::ListView>(this->shim().ResultsListView());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Not(bool value, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().Not(value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::SDKTemplate::IScenario2_Client> : produce_base<D, winrt::SDKTemplate::IScenario2_Client>
    {
    };
    template <typename D>
    struct produce<D, winrt::SDKTemplate::IScenario3_ServerForeground> : produce_base<D, winrt::SDKTemplate::IScenario3_ServerForeground>
    {
    };
    template <typename D>
    struct produce<D, winrt::SDKTemplate::IScenario4_ServerBackground> : produce_base<D, winrt::SDKTemplate::IScenario4_ServerBackground>
    {
    };
    template <typename D>
    struct produce<D, winrt::SDKTemplate::IStyles> : produce_base<D, winrt::SDKTemplate::IStyles>
    {
    };
}
WINRT_EXPORT namespace winrt::SDKTemplate
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::SDKTemplate::IBluetoothLEDeviceDisplay> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IMainPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IMainPageStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IScenario1_Discovery> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IScenario2_Client> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IScenario3_ServerForeground> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IScenario4_ServerBackground> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::IStyles> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::BluetoothLEDeviceDisplay> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::CalculatorServerBackgroundTask> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::MainPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::Scenario1_Discovery> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::Scenario2_Client> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::Scenario3_ServerForeground> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::Scenario4_ServerBackground> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::Styles> : winrt::impl::hash_base {};
    template<> struct hash<winrt::SDKTemplate::XamlMetaDataProvider> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
