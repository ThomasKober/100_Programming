// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_SDKTemplate_0_H
#define WINRT_SDKTemplate_0_H
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Background
{
    struct IBackgroundTask;
}
WINRT_EXPORT namespace winrt::Windows::Devices::Enumeration
{
    struct DeviceInformation;
    struct DeviceInformationUpdate;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Controls
{
    struct ListView;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Interop
{
    enum class TypeKind : int32_t;
    struct TypeName;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Markup
{
    struct IXamlMetadataProvider;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media::Imaging
{
    struct BitmapImage;
}
WINRT_EXPORT namespace winrt::SDKTemplate
{
    enum class NotifyType : int32_t
    {
        StatusMessage = 0,
        ErrorMessage = 1,
    };
    struct IBluetoothLEDeviceDisplay;
    struct IMainPage;
    struct IMainPageStatics;
    struct IScenario1_Discovery;
    struct IScenario2_Client;
    struct IScenario3_ServerForeground;
    struct IScenario4_ServerBackground;
    struct IStyles;
    struct BluetoothLEDeviceDisplay;
    struct CalculatorServerBackgroundTask;
    struct MainPage;
    struct Scenario1_Discovery;
    struct Scenario2_Client;
    struct Scenario3_ServerForeground;
    struct Scenario4_ServerBackground;
    struct Styles;
    struct XamlMetaDataProvider;
    struct Scenario;
}
namespace winrt::impl
{
    template <> struct category<winrt::SDKTemplate::IBluetoothLEDeviceDisplay>{ using type = interface_category; };
    template <> struct category<winrt::SDKTemplate::IMainPage>{ using type = interface_category; };
    template <> struct category<winrt::SDKTemplate::IMainPageStatics>{ using type = interface_category; };
    template <> struct category<winrt::SDKTemplate::IScenario1_Discovery>{ using type = interface_category; };
    template <> struct category<winrt::SDKTemplate::IScenario2_Client>{ using type = interface_category; };
    template <> struct category<winrt::SDKTemplate::IScenario3_ServerForeground>{ using type = interface_category; };
    template <> struct category<winrt::SDKTemplate::IScenario4_ServerBackground>{ using type = interface_category; };
    template <> struct category<winrt::SDKTemplate::IStyles>{ using type = interface_category; };
    template <> struct category<winrt::SDKTemplate::BluetoothLEDeviceDisplay>{ using type = class_category; };
    template <> struct category<winrt::SDKTemplate::CalculatorServerBackgroundTask>{ using type = class_category; };
    template <> struct category<winrt::SDKTemplate::MainPage>{ using type = class_category; };
    template <> struct category<winrt::SDKTemplate::Scenario1_Discovery>{ using type = class_category; };
    template <> struct category<winrt::SDKTemplate::Scenario2_Client>{ using type = class_category; };
    template <> struct category<winrt::SDKTemplate::Scenario3_ServerForeground>{ using type = class_category; };
    template <> struct category<winrt::SDKTemplate::Scenario4_ServerBackground>{ using type = class_category; };
    template <> struct category<winrt::SDKTemplate::Styles>{ using type = class_category; };
    template <> struct category<winrt::SDKTemplate::XamlMetaDataProvider>{ using type = class_category; };
    template <> struct category<winrt::SDKTemplate::NotifyType>{ using type = enum_category; };
    template <> struct category<winrt::SDKTemplate::Scenario>{ using type = struct_category<hstring, winrt::Windows::UI::Xaml::Interop::TypeName>; };
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::BluetoothLEDeviceDisplay> = L"SDKTemplate.BluetoothLEDeviceDisplay";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::CalculatorServerBackgroundTask> = L"SDKTemplate.CalculatorServerBackgroundTask";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::MainPage> = L"SDKTemplate.MainPage";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::Scenario1_Discovery> = L"SDKTemplate.Scenario1_Discovery";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::Scenario2_Client> = L"SDKTemplate.Scenario2_Client";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::Scenario3_ServerForeground> = L"SDKTemplate.Scenario3_ServerForeground";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::Scenario4_ServerBackground> = L"SDKTemplate.Scenario4_ServerBackground";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::Styles> = L"SDKTemplate.Styles";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::XamlMetaDataProvider> = L"SDKTemplate.XamlMetaDataProvider";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::NotifyType> = L"SDKTemplate.NotifyType";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::Scenario> = L"SDKTemplate.Scenario";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::IBluetoothLEDeviceDisplay> = L"SDKTemplate.IBluetoothLEDeviceDisplay";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::IMainPage> = L"SDKTemplate.IMainPage";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::IMainPageStatics> = L"SDKTemplate.IMainPageStatics";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::IScenario1_Discovery> = L"SDKTemplate.IScenario1_Discovery";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::IScenario2_Client> = L"SDKTemplate.IScenario2_Client";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::IScenario3_ServerForeground> = L"SDKTemplate.IScenario3_ServerForeground";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::IScenario4_ServerBackground> = L"SDKTemplate.IScenario4_ServerBackground";
    template <> inline constexpr auto& name_v<winrt::SDKTemplate::IStyles> = L"SDKTemplate.IStyles";
    template <> inline constexpr guid guid_v<winrt::SDKTemplate::IBluetoothLEDeviceDisplay>{ 0x2AD0118C,0xEDF0,0x5F94,{ 0xBF,0x81,0x76,0x6C,0x06,0x0B,0x3B,0xDD } }; // 2AD0118C-EDF0-5F94-BF81-766C060B3BDD
    template <> inline constexpr guid guid_v<winrt::SDKTemplate::IMainPage>{ 0xBCD280E2,0xD1F0,0x5851,{ 0xA0,0xFA,0x4B,0xA8,0xFF,0x3A,0x26,0x32 } }; // BCD280E2-D1F0-5851-A0FA-4BA8FF3A2632
    template <> inline constexpr guid guid_v<winrt::SDKTemplate::IMainPageStatics>{ 0x42CD93B7,0xA486,0x5BB8,{ 0x81,0xA0,0xF5,0x17,0x62,0xF8,0xA1,0x6F } }; // 42CD93B7-A486-5BB8-81A0-F51762F8A16F
    template <> inline constexpr guid guid_v<winrt::SDKTemplate::IScenario1_Discovery>{ 0xA18E98D0,0x023B,0x5E3D,{ 0xA0,0xB3,0x2D,0xAF,0xFD,0xFF,0x31,0x00 } }; // A18E98D0-023B-5E3D-A0B3-2DAFFDFF3100
    template <> inline constexpr guid guid_v<winrt::SDKTemplate::IScenario2_Client>{ 0x45CB0248,0x7A35,0x5366,{ 0x8C,0x62,0x6F,0xF1,0x94,0xF5,0xC6,0xED } }; // 45CB0248-7A35-5366-8C62-6FF194F5C6ED
    template <> inline constexpr guid guid_v<winrt::SDKTemplate::IScenario3_ServerForeground>{ 0x77640132,0x30C1,0x57B0,{ 0x8B,0xCC,0xC7,0xB6,0xF8,0xBA,0xFF,0x4B } }; // 77640132-30C1-57B0-8BCC-C7B6F8BAFF4B
    template <> inline constexpr guid guid_v<winrt::SDKTemplate::IScenario4_ServerBackground>{ 0x8EB3CB54,0x4E68,0x5499,{ 0x9F,0xAB,0xD7,0x5C,0x19,0x9E,0x16,0x84 } }; // 8EB3CB54-4E68-5499-9FAB-D75C199E1684
    template <> inline constexpr guid guid_v<winrt::SDKTemplate::IStyles>{ 0x8E5E3789,0x10EF,0x57FA,{ 0xBC,0xD8,0x29,0x19,0x54,0x6D,0x2E,0x24 } }; // 8E5E3789-10EF-57FA-BCD8-2919546D2E24
    template <> struct default_interface<winrt::SDKTemplate::BluetoothLEDeviceDisplay>{ using type = winrt::SDKTemplate::IBluetoothLEDeviceDisplay; };
    template <> struct default_interface<winrt::SDKTemplate::CalculatorServerBackgroundTask>{ using type = winrt::Windows::ApplicationModel::Background::IBackgroundTask; };
    template <> struct default_interface<winrt::SDKTemplate::MainPage>{ using type = winrt::SDKTemplate::IMainPage; };
    template <> struct default_interface<winrt::SDKTemplate::Scenario1_Discovery>{ using type = winrt::SDKTemplate::IScenario1_Discovery; };
    template <> struct default_interface<winrt::SDKTemplate::Scenario2_Client>{ using type = winrt::SDKTemplate::IScenario2_Client; };
    template <> struct default_interface<winrt::SDKTemplate::Scenario3_ServerForeground>{ using type = winrt::SDKTemplate::IScenario3_ServerForeground; };
    template <> struct default_interface<winrt::SDKTemplate::Scenario4_ServerBackground>{ using type = winrt::SDKTemplate::IScenario4_ServerBackground; };
    template <> struct default_interface<winrt::SDKTemplate::Styles>{ using type = winrt::SDKTemplate::IStyles; };
    template <> struct default_interface<winrt::SDKTemplate::XamlMetaDataProvider>{ using type = winrt::Windows::UI::Xaml::Markup::IXamlMetadataProvider; };
    template <> struct abi<winrt::SDKTemplate::IBluetoothLEDeviceDisplay>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DeviceInformation(void**) noexcept = 0;
            virtual int32_t __stdcall get_Id(void**) noexcept = 0;
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPaired(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsConnected(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsConnectable(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Properties(void**) noexcept = 0;
            virtual int32_t __stdcall get_GlyphBitmapImage(void**) noexcept = 0;
            virtual int32_t __stdcall Update(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::SDKTemplate::IMainPage>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall NotifyUser(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall Navigate(struct struct_Windows_UI_Xaml_Interop_TypeName, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::SDKTemplate::IMainPageStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FEATURE_NAME(void**) noexcept = 0;
            virtual int32_t __stdcall get_scenarios(void**) noexcept = 0;
            virtual int32_t __stdcall get_Current(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::SDKTemplate::IScenario1_Discovery>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KnownDevices(void**) noexcept = 0;
            virtual int32_t __stdcall get_ResultsListView(void**) noexcept = 0;
            virtual int32_t __stdcall Not(bool, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::SDKTemplate::IScenario2_Client>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::SDKTemplate::IScenario3_ServerForeground>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::SDKTemplate::IScenario4_ServerBackground>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::SDKTemplate::IStyles>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <typename D>
    struct consume_SDKTemplate_IBluetoothLEDeviceDisplay
    {
        [[nodiscard]] auto DeviceInformation() const;
        [[nodiscard]] auto Id() const;
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto IsPaired() const;
        [[nodiscard]] auto IsConnected() const;
        [[nodiscard]] auto IsConnectable() const;
        [[nodiscard]] auto Properties() const;
        [[nodiscard]] auto GlyphBitmapImage() const;
        auto Update(winrt::Windows::Devices::Enumeration::DeviceInformationUpdate const& deviceInfoUpdate) const;
    };
    template <> struct consume<winrt::SDKTemplate::IBluetoothLEDeviceDisplay>
    {
        template <typename D> using type = consume_SDKTemplate_IBluetoothLEDeviceDisplay<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IMainPage
    {
        auto NotifyUser(param::hstring const& strMessage, winrt::SDKTemplate::NotifyType const& type) const;
        auto Navigate(winrt::Windows::UI::Xaml::Interop::TypeName const& name, winrt::Windows::Foundation::IInspectable const& parameter) const;
    };
    template <> struct consume<winrt::SDKTemplate::IMainPage>
    {
        template <typename D> using type = consume_SDKTemplate_IMainPage<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IMainPageStatics
    {
        [[nodiscard]] auto FEATURE_NAME() const;
        [[nodiscard]] auto scenarios() const;
        [[nodiscard]] auto Current() const;
    };
    template <> struct consume<winrt::SDKTemplate::IMainPageStatics>
    {
        template <typename D> using type = consume_SDKTemplate_IMainPageStatics<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IScenario1_Discovery
    {
        [[nodiscard]] auto KnownDevices() const;
        [[nodiscard]] auto ResultsListView() const;
        auto Not(bool value) const;
    };
    template <> struct consume<winrt::SDKTemplate::IScenario1_Discovery>
    {
        template <typename D> using type = consume_SDKTemplate_IScenario1_Discovery<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IScenario2_Client
    {
    };
    template <> struct consume<winrt::SDKTemplate::IScenario2_Client>
    {
        template <typename D> using type = consume_SDKTemplate_IScenario2_Client<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IScenario3_ServerForeground
    {
    };
    template <> struct consume<winrt::SDKTemplate::IScenario3_ServerForeground>
    {
        template <typename D> using type = consume_SDKTemplate_IScenario3_ServerForeground<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IScenario4_ServerBackground
    {
    };
    template <> struct consume<winrt::SDKTemplate::IScenario4_ServerBackground>
    {
        template <typename D> using type = consume_SDKTemplate_IScenario4_ServerBackground<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IStyles
    {
    };
    template <> struct consume<winrt::SDKTemplate::IStyles>
    {
        template <typename D> using type = consume_SDKTemplate_IStyles<D>;
    };
    struct struct_SDKTemplate_Scenario
    {
        void* Title;
        struct{ void* Name; int32_t Kind; } ClassName;
    };
    template <> struct abi<SDKTemplate::Scenario>
    {
        using type = struct_SDKTemplate_Scenario;
    };
}
#endif
