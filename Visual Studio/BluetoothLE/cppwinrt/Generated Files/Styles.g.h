// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#include "winrt/SDKTemplate.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/Windows.UI.Xaml.h"
namespace winrt::SDKTemplate::implementation
{
    template <typename D, typename... I>
    struct WINRT_IMPL_EMPTY_BASES Styles_base : implements<D, SDKTemplate::Styles, composing, I...>,
        impl::require<D, winrt::Windows::UI::Xaml::IResourceDictionary, winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::Windows::Foundation::IInspectable, winrt::Windows::Foundation::IInspectable>>, winrt::Windows::Foundation::Collections::IMap<winrt::Windows::Foundation::IInspectable, winrt::Windows::Foundation::IInspectable>, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>,
        impl::base<D, winrt::Windows::UI::Xaml::ResourceDictionary, winrt::Windows::UI::Xaml::DependencyObject>
    {
        using base_type = Styles_base;
        using class_type = SDKTemplate::Styles;
        using implements_type = typename Styles_base::implements_type;
        using implements_type::implements_type;
        using composable_base = winrt::Windows::UI::Xaml::ResourceDictionary;
        hstring GetRuntimeClassName() const
        {
            return L"SDKTemplate.Styles";
        }
        Styles_base()
        {
            impl::call_factory<winrt::Windows::UI::Xaml::ResourceDictionary, winrt::Windows::UI::Xaml::IResourceDictionaryFactory>([&](winrt::Windows::UI::Xaml::IResourceDictionaryFactory const& f) { [[maybe_unused]] auto winrt_impl_discarded = f.CreateInstance(*this, this->m_inner); });
        }
    };
}
namespace winrt::SDKTemplate::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_IMPL_EMPTY_BASES StylesT : implements<D, winrt::Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = SDKTemplate::Styles;

        hstring GetRuntimeClassName() const
        {
            return L"SDKTemplate.Styles";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_STYLES_XAML_G_H) || __has_include("Styles.xaml.g.h")

#include "Styles.xaml.g.h"

#else

namespace winrt::SDKTemplate::implementation
{
    template <typename D, typename... I>
    using StylesT = Styles_base<D, I...>;
}

#endif
