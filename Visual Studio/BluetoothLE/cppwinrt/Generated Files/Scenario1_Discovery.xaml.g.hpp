//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"
#include "Scenario1_Discovery.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

namespace winrt::SDKTemplate::implementation
{
    using Application = ::winrt::Windows::UI::Xaml::Application;
    using ComponentResourceLocation = ::winrt::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation;
    using DataTemplate = ::winrt::Windows::UI::Xaml::DataTemplate;
    using DependencyObject = ::winrt::Windows::UI::Xaml::DependencyObject;
    using DependencyProperty = ::winrt::Windows::UI::Xaml::DependencyProperty;
    using IComponentConnector = ::winrt::Windows::UI::Xaml::Markup::IComponentConnector;
    using Uri = ::winrt::Windows::Foundation::Uri;
    using XamlBindingHelper = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper;

    template <typename D, typename ... I>
    void Scenario1_DiscoveryT<D, I...>::InitializeComponent()
    {
        if (!_contentLoaded)
        {
            _contentLoaded = true;
            Uri resourceLocator{ L"ms-appx:///Scenario1_Discovery.xaml" };
            Application::LoadComponent(*this, resourceLocator, ComponentResourceLocation::Application);
        }
    }

    template <typename D, typename ... I>
    void Scenario1_DiscoveryT<D, I...>::Connect(int32_t connectionId, IInspectable const& target)
    {
        switch (connectionId)
        {
        case 9:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ListView>();
                this->ResultsListView(targetElement);
            }
            break;
        case 10:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->EnumerateButton(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->EnumerateButton_Click(p0, p1);
                    }
                });
            }
            break;
        case 11:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->PairButton(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->PairButton_Click(p0, p1);
                    }
                });
            }
            break;
        }
        _contentLoaded = true;
    }

    template <typename D, typename ... I>
    void Scenario1_DiscoveryT<D, I...>::DisconnectUnloadedObject(int32_t)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects to disconnect." };
    }

    template <typename D, typename ... I>
    void Scenario1_DiscoveryT<D, I...>::UnloadObject(DependencyObject const&)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects." };
    }

    template <typename D, typename... I>
    IComponentConnector Scenario1_DiscoveryT<D, I...>::GetBindingConnector(int32_t connectionId, IInspectable const& target)
    {
        ::winrt::com_ptr<::winrt::SDKTemplate::implementation::XamlBindings> bindings;
        switch (connectionId)
        {
            case 1: // Scenario1_Discovery.xaml line 13
                {
                    auto element1 = target.as<::winrt::Windows::UI::Xaml::Controls::Page>();
                    auto objBindings = std::make_unique<Scenario1_Discovery_obj1_Bindings>();
                    objBindings->SetDataRoot(*this);
                    bindings = ::winrt::make_self<::winrt::SDKTemplate::implementation::XamlBindings>(std::move(objBindings));
                    Bindings = bindings;
                    element1.Loading({&*bindings, &::winrt::SDKTemplate::implementation::XamlBindings::Loading});
                }
                break;
            case 3: // Scenario1_Discovery.xaml line 23
                {
                    auto element3 = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                    auto objBindings = std::make_unique<Scenario1_Discovery_obj3_Bindings>();
                    objBindings->SetDataRoot(element3.DataContext());
                    bindings = ::winrt::make_self<::winrt::SDKTemplate::implementation::XamlBindings>(std::move(objBindings));
                    bindings->SubscribeForDataContextChanged(element3);
                    DataTemplate::SetExtensionInstance(element3, bindings.as<::winrt::Windows::UI::Xaml::IDataTemplateExtension>());
                    XamlBindingHelper::SetDataTemplateComponent(element3, bindings.as<::winrt::Windows::UI::Xaml::Markup::IDataTemplateComponent>());
                }
                break;
        }
        return bindings ? bindings.as<::winrt::Windows::UI::Xaml::Markup::IComponentConnector>() : nullptr;
    }

    template <typename D, typename ... I>
    struct Scenario1_DiscoveryT<D, I...>::Scenario1_Discovery_obj3_Bindings
        : public ::winrt::SDKTemplate::implementation::ReferenceTypeXamlBindings<::winrt::SDKTemplate::BluetoothLEDeviceDisplay, ::winrt::SDKTemplate::implementation::XamlBindingTrackingBase>
        , public ::winrt::SDKTemplate::implementation::IXamlBindingTracking
{
        Scenario1_Discovery_obj3_Bindings()
        {
            InitializeTracking(this);
        }

        ~Scenario1_Discovery_obj3_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 3: // Scenario1_Discovery.xaml line 23
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                    obj3 = targetElement;
                }
                break;
            case 4: // Scenario1_Discovery.xaml line 28
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Image>();
                    obj4 = targetElement;
                }
                break;
            case 5: // Scenario1_Discovery.xaml line 34
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Documents::Run>();
                    obj5 = targetElement;
                }
                break;
            case 6: // Scenario1_Discovery.xaml line 34
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Documents::Run>();
                    obj6 = targetElement;
                }
                break;
            case 7: // Scenario1_Discovery.xaml line 34
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Documents::Run>();
                    obj7 = targetElement;
                }
                break;
            case 8: // Scenario1_Discovery.xaml line 31
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Documents::Run>();
                    obj8 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }

        void Recycle() override
        {
            ReleaseAllListeners();
        }

        void ProcessBindings(IInspectable const& item, int itemIndex, int phase, int32_t& nextPhase)
        {
            nextPhase = -1;
            switch (phase)
            {
            case 0:
                {
                    nextPhase = -1;
                    SetDataRoot(item);
                    if (_dataContextChangedToken.value != 0)
                    {
                        this->obj3.get().DataContextChanged(_dataContextChangedToken);
                        _dataContextChangedToken.value = 0;
                    }
                    _isInitialized = true;
                 }
                 break;
            }
            Update_(::winrt::unbox_value<::winrt::SDKTemplate::BluetoothLEDeviceDisplay>(item) , 1 << phase);
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Controls::Grid> obj3;
        ::winrt::Windows::UI::Xaml::Controls::Image obj4 { nullptr };
        ::winrt::Windows::UI::Xaml::Documents::Run obj5 { nullptr };
        ::winrt::Windows::UI::Xaml::Documents::Run obj6 { nullptr };
        ::winrt::Windows::UI::Xaml::Documents::Run obj7 { nullptr };
        ::winrt::Windows::UI::Xaml::Documents::Run obj8 { nullptr };

        // Fields for binding tracking.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged> cachePC_;
        ::winrt::event_token tokenPC_ {};

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::SDKTemplate::BluetoothLEDeviceDisplay obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_, tokenPC_);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_GlyphBitmapImage(obj.GlyphBitmapImage(), phase);
                    Update_IsPaired(obj.IsPaired(), phase);
                    Update_IsConnected(obj.IsConnected(), phase);
                    Update_IsConnectable(obj.IsConnectable(), phase);
                    Update_Name(obj.Name(), phase);
                }
            }
        }

        void Update_GlyphBitmapImage(::winrt::Windows::UI::Xaml::Media::Imaging::BitmapImage obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Scenario1_Discovery.xaml line 28
                Set_Windows_UI_Xaml_Controls_Image_Source(obj4, obj, std::nullopt);
            }
        }

        void Update_IsPaired(bool obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Scenario1_Discovery.xaml line 34
                Set_Windows_UI_Xaml_Documents_Run_Text(obj5, ::winrt::to_hstring(obj));
            }
        }

        void Update_IsConnected(bool obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Scenario1_Discovery.xaml line 34
                Set_Windows_UI_Xaml_Documents_Run_Text(obj6, ::winrt::to_hstring(obj));
            }
        }

        void Update_IsConnectable(bool obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Scenario1_Discovery.xaml line 34
                Set_Windows_UI_Xaml_Documents_Run_Text(obj7, ::winrt::to_hstring(obj));
            }
        }

        void Update_Name(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Scenario1_Discovery.xaml line 31
                Set_Windows_UI_Xaml_Documents_Run_Text(obj8, obj);
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_, tokenPC_);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
            if (GetDataRoot() && GetDataRoot() == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::SDKTemplate::BluetoothLEDeviceDisplay>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_GlyphBitmapImage(obj.GlyphBitmapImage(), DATA_CHANGED);
                        Update_IsPaired(obj.IsPaired(), DATA_CHANGED);
                        Update_IsConnected(obj.IsConnected(), DATA_CHANGED);
                        Update_IsConnectable(obj.IsConnectable(), DATA_CHANGED);
                        Update_Name(obj.Name(), DATA_CHANGED);
                    }
                }
                else if (propName == L"GlyphBitmapImage")
                {
                    if (obj)
                    {
                        Update_GlyphBitmapImage(obj.GlyphBitmapImage(), DATA_CHANGED);
                    }
                }
                else if (propName == L"IsPaired")
                {
                    if (obj)
                    {
                        Update_IsPaired(obj.IsPaired(), DATA_CHANGED);
                    }
                }
                else if (propName == L"IsConnected")
                {
                    if (obj)
                    {
                        Update_IsConnected(obj.IsConnected(), DATA_CHANGED);
                    }
                }
                else if (propName == L"IsConnectable")
                {
                    if (obj)
                    {
                        Update_IsConnectable(obj.IsConnectable(), DATA_CHANGED);
                    }
                }
                else if (propName == L"Name")
                {
                    if (obj)
                    {
                        Update_Name(obj.Name(), DATA_CHANGED);
                    }
                }
            }
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
            }
        }


        static void Set_Windows_UI_Xaml_Controls_Image_Source(::winrt::Windows::UI::Xaml::Controls::Image const& obj, ::winrt::Windows::UI::Xaml::Media::ImageSource value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::UI::Xaml::Media::ImageSource>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::UI::Xaml::Media::ImageSource>();
            }
            obj.Source(value);
        }

        static void Set_Windows_UI_Xaml_Documents_Run_Text(::winrt::Windows::UI::Xaml::Documents::Run const& obj, ::winrt::hstring const& value)
        {
            obj.Text(value);
        }
    }; 

    struct Scenario1_Discovery_obj1_BindingsTracking : public ::winrt::SDKTemplate::implementation::XamlBindingTrackingBase
    {
        Scenario1_Discovery_obj1_BindingsTracking()
        {}

        // Event handlers

        void VectorChanged_Object(
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> const& sender,
            ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e)
        {
            VectorChanged(sender, e);
        }

        // Listener update functions

        void UpdateVectorChangedListener_Object(
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> const& obj,
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> & cache,
            ::winrt::event_token & token)
        {
            if (cache && cache != obj)
            {
                cache.VectorChanged(token);
                cache = nullptr;
            }
            if (!cache && obj)
            {
                cache = obj;
                token = obj.VectorChanged({this, &Scenario1_Discovery_obj1_BindingsTracking::VectorChanged_Object});
            }
        }
    };

    template <typename D, typename ... I>
    struct Scenario1_DiscoveryT<D, I...>::Scenario1_Discovery_obj1_Bindings
        : public ::winrt::SDKTemplate::implementation::ReferenceTypeXamlBindings<::winrt::SDKTemplate::Scenario1_Discovery, Scenario1_Discovery_obj1_BindingsTracking>
        , public ::winrt::SDKTemplate::implementation::IXamlBindingTracking
{
        Scenario1_Discovery_obj1_Bindings()
        {
            InitializeTracking(this);
        }

        ~Scenario1_Discovery_obj1_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 9: // Scenario1_Discovery.xaml line 61
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ListView>();
                    obj9 = targetElement;
                }
                break;
            case 11: // Scenario1_Discovery.xaml line 55
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                    obj11 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::Windows::UI::Xaml::Controls::ListView obj9 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::Button obj11 { nullptr };

        // Fields for binding tracking.
        ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> cacheVC_KnownDevices{nullptr};
        ::winrt::Windows::UI::Xaml::DependencyObject cacheDPC_ResultsListView_SelectedItem{nullptr};
        ::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged cachePC_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay{nullptr};
        ::winrt::event_token tokenVC_KnownDevices {};
        ::winrt::event_token tokenPC_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay {};
        __int64 tokenDPC_ResultsListView_SelectedItem{0};

        bool TryGet_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay_IsPaired(bool& val)
        {
            ::winrt::SDKTemplate::BluetoothLEDeviceDisplay obj{nullptr};
            if (TryGet_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay(obj) && obj)
            {
                val = obj.IsPaired();
                return true;
            }
            else
            {
                return false;
            }
        }

        bool TryGet_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay(::winrt::SDKTemplate::BluetoothLEDeviceDisplay& val)
        {
            ::winrt::Windows::Foundation::IInspectable obj{nullptr};
            if (TryGet_ResultsListView_SelectedItem(obj) && obj)
            {
                val = obj.as<::winrt::SDKTemplate::BluetoothLEDeviceDisplay>();
                return true;
            }
            else
            {
                return false;
            }
        }

        bool TryGet_ResultsListView_SelectedItem(::winrt::Windows::Foundation::IInspectable& val)
        {
            ::winrt::Windows::UI::Xaml::Controls::ListView obj{nullptr};
            if (TryGet_ResultsListView(obj) && obj)
            {
                val = obj.SelectedItem();
                return true;
            }
            else
            {
                return false;
            }
        }

        bool TryGet_ResultsListView(::winrt::Windows::UI::Xaml::Controls::ListView& val)
        {
            ::winrt::SDKTemplate::Scenario1_Discovery obj{nullptr};
            if (TryGet_(obj) && obj)
            {
                val = obj.ResultsListView();
                return true;
            }
            else
            {
                return false;
            }
        }

        bool TryGet_(::winrt::SDKTemplate::Scenario1_Discovery& val)
        {
            val = GetDataRoot();
            return true;
        }
        std::map<::std::wstring, std::function<void (int)>> PendingFunctionBindings;


        void Invoke_M_Not_3472884143(int phase)
        {
            bool p0;
            if (!TryGet_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay_IsPaired(p0)) { return; }
            bool result = GetDataRoot().Not(p0);
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Scenario1_Discovery.xaml line 55
                Set_Windows_UI_Xaml_Controls_Control_IsEnabled(obj11, result);
            }
        }

        void CompleteUpdate(int phase)
        {
        auto copiedBindings = std::move(PendingFunctionBindings);
        PendingFunctionBindings = std::map<::std::wstring, std::function<void (int)>>();

        for(auto& pair : copiedBindings)
        {
            pair.second(phase);
        }
        }

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::SDKTemplate::Scenario1_Discovery obj, int32_t phase)
        {
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_KnownDevices(obj.KnownDevices(), phase);
                    Update_ResultsListView(obj.ResultsListView(), phase);
                    Update_M_Not_3472884143(phase);
                }
            }
            else
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    UpdateFallback_ResultsListView(phase);
                }
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    UpdateFallback_M_Not_3472884143(phase);
                }
            }
            CompleteUpdate(phase);
        }

        void Update_KnownDevices(::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> obj, int32_t phase)
        {
            _bindingsTracking->UpdateVectorChangedListener_Object(obj, cacheVC_KnownDevices, tokenVC_KnownDevices);
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Scenario1_Discovery.xaml line 61
                Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(obj9, obj, std::nullopt);
            }
        }

        void Update_ResultsListView(::winrt::Windows::UI::Xaml::Controls::ListView obj, int32_t phase)
        {
            _bindingsTracking->UpdateDependencyPropertyChangedListener(obj, ::winrt::Windows::UI::Xaml::Controls::Primitives::Selector::SelectedItemProperty(), cacheDPC_ResultsListView_SelectedItem, tokenDPC_ResultsListView_SelectedItem);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ResultsListView_SelectedItem(obj.SelectedItem(), phase);
                }
            }
            else
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    UpdateFallback_ResultsListView_SelectedItem(phase);
                }
            }
        }

        void Update_ResultsListView_SelectedItem(::winrt::Windows::Foundation::IInspectable obj, int32_t phase)
        {
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay(obj.as<::winrt::SDKTemplate::BluetoothLEDeviceDisplay>(), phase);
                }
            }
            else
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    UpdateFallback_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay(phase);
                }
            }
        }

        void Update_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay(::winrt::SDKTemplate::BluetoothLEDeviceDisplay obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay, tokenPC_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay_IsPaired(obj.IsPaired(), phase);
                }
            }
            else
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    UpdateFallback_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay_IsPaired(phase);
                }
            }
        }

        void Update_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay_IsPaired(bool obj, int32_t phase)
        {
                Update_M_Not_3472884143(phase);
        }

        void Update_M_Not_3472884143(int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                PendingFunctionBindings[L"M_Not_3472884143"] = std::bind(&Scenario1_Discovery_obj1_Bindings::Invoke_M_Not_3472884143, this, std::placeholders::_1);
            }
        }

        void UpdateFallback_ResultsListView(int phase)
        {
            UpdateFallback_ResultsListView_SelectedItem(phase);
        }

        void UpdateFallback_ResultsListView_SelectedItem(int phase)
        {
            UpdateFallback_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay(phase);
        }

        void UpdateFallback_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay(int phase)
        {
            UpdateFallback_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay_IsPaired(phase);
        }

        void UpdateFallback_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay_IsPaired(int phase)
        {
            UpdateFallback_M_Not_3472884143(phase);
        }

        void UpdateFallback_M_Not_3472884143(int phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Scenario1_Discovery.xaml line 55
                Set_Windows_UI_Xaml_Controls_Control_IsEnabled(obj11, ::winrt::unbox_value<bool>(::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<bool>(), ::winrt::box_value(::winrt::hstring(L"False")))));
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdateVectorChangedListener_Object(nullptr, cacheVC_KnownDevices, tokenVC_KnownDevices);
            _bindingsTracking->UpdateDependencyPropertyChangedListener(nullptr, ::winrt::Windows::UI::Xaml::Controls::Primitives::Selector::SelectedItemProperty(), cacheDPC_ResultsListView_SelectedItem, tokenDPC_ResultsListView_SelectedItem);
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay, tokenPC_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
            if (cachePC_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay && cachePC_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::SDKTemplate::BluetoothLEDeviceDisplay>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay_IsPaired(obj.IsPaired(), DATA_CHANGED);
                    }
                    else
                    {
                        UpdateFallback_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay_IsPaired(DATA_CHANGED);
                    }
                }
                else if (propName == L"IsPaired")
                {
                    if (obj)
                    {
                        Update_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay_IsPaired(obj.IsPaired(), DATA_CHANGED);
                    }
                    else
                    {
                        UpdateFallback_ResultsListView_SelectedItem_Cast_SelectedItem_To_BluetoothLEDeviceDisplay_IsPaired(DATA_CHANGED);
                    }
                }
            }
            CompleteUpdate(DATA_CHANGED);
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
            CompleteUpdate(DATA_CHANGED);
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
            if (cacheVC_KnownDevices && cacheVC_KnownDevices == sender)
            {
                ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> obj = sender.as<::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable>>();
            }
            CompleteUpdate(DATA_CHANGED);
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
            CompleteUpdate(DATA_CHANGED);
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
                if (sender == cacheDPC_ResultsListView_SelectedItem && ::winrt::Windows::UI::Xaml::Controls::Primitives::Selector::SelectedItemProperty() == prop)
                {
                    auto obj = sender.as<::winrt::Windows::UI::Xaml::Controls::ListView>();
                    if (obj)
                    {
                        Update_ResultsListView_SelectedItem(obj.SelectedItem(), DATA_CHANGED);
                    }
                    else
                    {
                        UpdateFallback_ResultsListView_SelectedItem(DATA_CHANGED);
                    }
                }
                CompleteUpdate(DATA_CHANGED);
            }
        }


        static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(::winrt::Windows::UI::Xaml::Controls::ItemsControl const& obj, ::winrt::Windows::Foundation::IInspectable value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::Foundation::IInspectable>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::Foundation::IInspectable>();
            }
            obj.ItemsSource(value);
        }

        static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(::winrt::Windows::UI::Xaml::Controls::Control const& obj, bool const& value)
        {
            obj.IsEnabled(value);
        }
    }; 

    template struct Scenario1_DiscoveryT<struct Scenario1_Discovery>;
}


#pragma warning(pop)


