// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#include "winrt/SDKTemplate.h"
#include "winrt/Windows.ApplicationModel.Background.h"
namespace winrt::SDKTemplate::implementation
{
    template <typename D, typename... I>
    struct WINRT_IMPL_EMPTY_BASES CalculatorServerBackgroundTask_base : implements<D, SDKTemplate::CalculatorServerBackgroundTask, I...>
    {
        using base_type = CalculatorServerBackgroundTask_base;
        using class_type = SDKTemplate::CalculatorServerBackgroundTask;
        using implements_type = typename CalculatorServerBackgroundTask_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"SDKTemplate.CalculatorServerBackgroundTask";
        }
    };
}
namespace winrt::SDKTemplate::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_IMPL_EMPTY_BASES CalculatorServerBackgroundTaskT : implements<D, winrt::Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = SDKTemplate::CalculatorServerBackgroundTask;

        hstring GetRuntimeClassName() const
        {
            return L"SDKTemplate.CalculatorServerBackgroundTask";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_CALCULATORSERVERBACKGROUNDTASK_XAML_G_H) || __has_include("CalculatorServerBackgroundTask.xaml.g.h")

#include "CalculatorServerBackgroundTask.xaml.g.h"

#else

namespace winrt::SDKTemplate::implementation
{
    template <typename D, typename... I>
    using CalculatorServerBackgroundTaskT = CalculatorServerBackgroundTask_base<D, I...>;
}

#endif
