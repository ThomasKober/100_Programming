//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.3.0-prerelease.250720.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Windows.Devices.Enumeration.Pnp
{
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("95C66258-733B-4A8F-93A3-DB078AC870C1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObject))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IPnpObject
    {
        void Update(PnpObjectUpdate updateInfo);
        string Id { get; }
        global::System.Collections.Generic.IReadOnlyDictionary<string, object> Properties { get; }
        PnpObjectType Type { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("B3C32A3D-D168-4660-BBF3-A733B14B6E01")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IPnpObjectStatics
    {
        global::Windows.Foundation.IAsyncOperation<PnpObject> CreateFromIdAsync(PnpObjectType type, string id, global::System.Collections.Generic.IEnumerable<string> requestedProperties);
        [global::Windows.Foundation.Metadata.Overload(@"FindAllAsync")]
        global::Windows.Foundation.IAsyncOperation<PnpObjectCollection> FindAllAsync(PnpObjectType type, global::System.Collections.Generic.IEnumerable<string> requestedProperties);
        [global::Windows.Foundation.Metadata.Overload(@"FindAllAsyncAqsFilter")]
        global::Windows.Foundation.IAsyncOperation<PnpObjectCollection> FindAllAsync(PnpObjectType type, global::System.Collections.Generic.IEnumerable<string> requestedProperties, string aqsFilter);
        [global::Windows.Foundation.Metadata.Overload(@"CreateWatcher")]
        PnpObjectWatcher CreateWatcher(PnpObjectType type, global::System.Collections.Generic.IEnumerable<string> requestedProperties);
        [global::Windows.Foundation.Metadata.Overload(@"CreateWatcherAqsFilter")]
        PnpObjectWatcher CreateWatcher(PnpObjectType type, global::System.Collections.Generic.IEnumerable<string> requestedProperties, string aqsFilter);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("6F59E812-001E-4844-BCC6-432886856A17")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectUpdate))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IPnpObjectUpdate
    {
        string Id { get; }
        global::System.Collections.Generic.IReadOnlyDictionary<string, object> Properties { get; }
        PnpObjectType Type { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("83C95CA8-4772-4A7A-ACA8-E48C42A89C44")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcher))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IPnpObjectWatcher
    {
        void Start();
        void Stop();
        global::Windows.Devices.Enumeration.DeviceWatcherStatus Status { get; }
        event global::Windows.Foundation.TypedEventHandler<PnpObjectWatcher, PnpObject> Added;
        event global::Windows.Foundation.TypedEventHandler<PnpObjectWatcher, object> EnumerationCompleted;
        event global::Windows.Foundation.TypedEventHandler<PnpObjectWatcher, PnpObjectUpdate> Removed;
        event global::Windows.Foundation.TypedEventHandler<PnpObjectWatcher, object> Stopped;
        event global::Windows.Foundation.TypedEventHandler<PnpObjectWatcher, PnpObjectUpdate> Updated;
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.Pnp.PnpObject))]
    [global::ABI.Windows.Devices.Enumeration.Pnp.PnpObjectRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPnpObject))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class PnpObject : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PnpObject>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObject => _inner;


        public static I As<I>() => ActivationFactory.Get("Windows.Devices.Enumeration.Pnp.PnpObject").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectStatics;
        private static IObjectReference _objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectStatics
        {
            get
            { 
                var factory = ___objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectStatics = ActivationFactory.Get("Windows.Devices.Enumeration.Pnp.PnpObject", global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.Foundation.IAsyncOperation<PnpObject> CreateFromIdAsync(PnpObjectType type, string id, global::System.Collections.Generic.IEnumerable<string> requestedProperties) => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectStaticsMethods.CreateFromIdAsync(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectStatics, type, id, requestedProperties);

        public static global::Windows.Foundation.IAsyncOperation<PnpObjectCollection> FindAllAsync(PnpObjectType type, global::System.Collections.Generic.IEnumerable<string> requestedProperties) => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectStaticsMethods.FindAllAsync(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectStatics, type, requestedProperties);

        public static global::Windows.Foundation.IAsyncOperation<PnpObjectCollection> FindAllAsync(PnpObjectType type, global::System.Collections.Generic.IEnumerable<string> requestedProperties, string aqsFilter) => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectStaticsMethods.FindAllAsync(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectStatics, type, requestedProperties, aqsFilter);

        public static PnpObjectWatcher CreateWatcher(PnpObjectType type, global::System.Collections.Generic.IEnumerable<string> requestedProperties) => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectStaticsMethods.CreateWatcher(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectStatics, type, requestedProperties);

        public static PnpObjectWatcher CreateWatcher(PnpObjectType type, global::System.Collections.Generic.IEnumerable<string> requestedProperties, string aqsFilter) => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectStaticsMethods.CreateWatcher(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectStatics, type, requestedProperties, aqsFilter);

        public static PnpObject FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PnpObject>.FromAbi(thisPtr);
        }

        internal PnpObject(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectMethods.IID);

        }


        public static bool operator ==(PnpObject x, PnpObject y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PnpObject x, PnpObject y) => !(x == y);
        public bool Equals(PnpObject other) => this == other;
        public override bool Equals(object obj) => obj is PnpObject that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Update(PnpObjectUpdate updateInfo) => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectMethods.Update(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObject, updateInfo);

        public string Id => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectMethods.get_Id(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObject);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, object> Properties => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectMethods.get_Properties(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObject);

        public PnpObjectType Type => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectMethods.get_Type(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObject);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.Pnp.PnpObjectCollection))]
    [global::ABI.Windows.Devices.Enumeration.Pnp.PnpObjectCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::System.Collections.Generic.IReadOnlyList<PnpObject>))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class PnpObjectCollection : global::System.Collections.Generic.IReadOnlyList<PnpObject>, global::System.Collections.Generic.IEnumerable<PnpObject>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PnpObjectCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IReadOnlyList_PnpObject_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IReadOnlyList_PnpObject_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Devices_Enumeration_Pnp_PnpObject.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IReadOnlyList_PnpObject_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IReadOnlyListMethods<PnpObject>.IID), null);
            return ___objRef_global__System_Collections_Generic_IReadOnlyList_PnpObject_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IReadOnlyList_PnpObject_ => ___objRef_global__System_Collections_Generic_IReadOnlyList_PnpObject_ ?? Make___objRef_global__System_Collections_Generic_IReadOnlyList_PnpObject_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_PnpObject_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_PnpObject_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Devices_Enumeration_Pnp_PnpObject.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_PnpObject_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<PnpObject>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_PnpObject_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_PnpObject_ => ___objRef_global__System_Collections_Generic_IEnumerable_PnpObject_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_PnpObject_();



        public static PnpObjectCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PnpObjectCollection>.FromAbi(thisPtr);
        }

        internal PnpObjectCollection(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.System.Collections.Generic.IReadOnlyListMethods<PnpObject>.IID);

        }


        public static bool operator ==(PnpObjectCollection x, PnpObjectCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PnpObjectCollection x, PnpObjectCollection y) => !(x == y);
        public bool Equals(PnpObjectCollection other) => this == other;
        public override bool Equals(object obj) => obj is PnpObjectCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Count => global::ABI.System.Collections.Generic.IReadOnlyListMethods<PnpObject>.get_Count(_objRef_global__System_Collections_Generic_IReadOnlyList_PnpObject_);
        [global::System.Runtime.CompilerServices.IndexerName("ReadOnlyListItem")]
        public PnpObject this[int index] => global::ABI.System.Collections.Generic.IReadOnlyListMethods<PnpObject>.Indexer_Get(_objRef_global__System_Collections_Generic_IReadOnlyList_PnpObject_, index);

        public IEnumerator<PnpObject> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<PnpObject>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_PnpObject_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PnpObjectType>))][global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public enum PnpObjectType : int
    {
        Unknown = unchecked((int)0),
        DeviceInterface = unchecked((int)0x1),
        DeviceContainer = unchecked((int)0x2),
        Device = unchecked((int)0x3),
        DeviceInterfaceClass = unchecked((int)0x4),
        AssociationEndpoint = unchecked((int)0x5),
        AssociationEndpointContainer = unchecked((int)0x6),
        AssociationEndpointService = unchecked((int)0x7),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.17763.0")]
        DevicePanel = unchecked((int)0x8),
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.Pnp.PnpObjectUpdate))]
    [global::ABI.Windows.Devices.Enumeration.Pnp.PnpObjectUpdateRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPnpObjectUpdate))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class PnpObjectUpdate : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PnpObjectUpdate>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectUpdate => _inner;


        public static PnpObjectUpdate FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PnpObjectUpdate>.FromAbi(thisPtr);
        }

        internal PnpObjectUpdate(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectUpdateMethods.IID);

        }


        public static bool operator ==(PnpObjectUpdate x, PnpObjectUpdate y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PnpObjectUpdate x, PnpObjectUpdate y) => !(x == y);
        public bool Equals(PnpObjectUpdate other) => this == other;
        public override bool Equals(object obj) => obj is PnpObjectUpdate that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string Id => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectUpdateMethods.get_Id(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectUpdate);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, object> Properties => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectUpdateMethods.get_Properties(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectUpdate);

        public PnpObjectType Type => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectUpdateMethods.get_Type(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectUpdate);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.Pnp.PnpObjectWatcher))]
    [global::ABI.Windows.Devices.Enumeration.Pnp.PnpObjectWatcherRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPnpObjectWatcher))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class PnpObjectWatcher : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PnpObjectWatcher>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher => _inner;


        public static PnpObjectWatcher FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PnpObjectWatcher>.FromAbi(thisPtr);
        }

        internal PnpObjectWatcher(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.IID);

        }


        public static bool operator ==(PnpObjectWatcher x, PnpObjectWatcher y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PnpObjectWatcher x, PnpObjectWatcher y) => !(x == y);
        public bool Equals(PnpObjectWatcher other) => this == other;
        public override bool Equals(object obj) => obj is PnpObjectWatcher that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Start() => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.Start(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher);

        public void Stop() => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.Stop(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher);

        public event global::Windows.Foundation.TypedEventHandler<PnpObjectWatcher, PnpObject> Added
        {
            add => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.Get_Added2(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.Get_Added2(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<PnpObjectWatcher, object> EnumerationCompleted
        {
            add => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.Get_EnumerationCompleted2(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.Get_EnumerationCompleted2(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<PnpObjectWatcher, PnpObjectUpdate> Removed
        {
            add => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.Get_Removed2(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.Get_Removed2(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<PnpObjectWatcher, object> Stopped
        {
            add => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.Get_Stopped2(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.Get_Stopped2(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<PnpObjectWatcher, PnpObjectUpdate> Updated
        {
            add => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.Get_Updated2(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.Get_Updated2(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Windows.Devices.Enumeration.DeviceWatcherStatus Status => global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.get_Status(_objRef_global__Windows_Devices_Enumeration_Pnp_IPnpObjectWatcher);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Windows.Devices.Enumeration.Pnp
{
    internal static class IPnpObjectMethods
    {


        internal static unsafe void Update(IObjectReference _obj, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate updateInfo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __updateInfo = default;
            try
            {
                __updateInfo = global::ABI.Windows.Devices.Enumeration.Pnp.PnpObjectUpdate.CreateMarshaler2(updateInfo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__updateInfo)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__updateInfo);
            }
        }
        internal static unsafe string get_Id(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyDictionary<string, object> get_Properties(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__object.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, object>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, object>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.Pnp.PnpObjectType get_Type(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.Pnp.PnpObjectType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.Pnp.PnpObjectType*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x58, 0x62, 0xC6, 0x95, 0x3B, 0x73, 0x8F, 0x4A, 0x93, 0xA3, 0xDB, 0x7, 0x8A, 0xC8, 0x70, 0xC1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("95C66258-733B-4A8F-93A3-DB078AC870C1")]
    internal interface IPnpObject : global::Windows.Devices.Enumeration.Pnp.IPnpObject
    {
    }
    internal static class IPnpObjectStaticsMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.Pnp.PnpObject> CreateFromIdAsync(IObjectReference _obj, global::Windows.Devices.Enumeration.Pnp.PnpObjectType type, string id, global::System.Collections.Generic.IEnumerable<string> requestedProperties)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __requestedProperties = default;
            IntPtr __retval = default;
            try
            {
                __requestedProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(requestedProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                MarshalString.Pinnable __id = new(id);
                fixed(void* ___id = __id)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.Pnp.PnpObjectType, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, type, MarshalString.GetAbi(ref __id), MarshalInspectable<object>.GetAbi(__requestedProperties), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_Pnp_PnpObject.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.Pnp.PnpObject>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__requestedProperties);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.Pnp.PnpObject>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection> FindAllAsync(IObjectReference _obj, global::Windows.Devices.Enumeration.Pnp.PnpObjectType type, global::System.Collections.Generic.IEnumerable<string> requestedProperties)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __requestedProperties = default;
            IntPtr __retval = default;
            try
            {
                __requestedProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(requestedProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.Pnp.PnpObjectType, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, type, MarshalInspectable<object>.GetAbi(__requestedProperties), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_Pnp_PnpObjectCollection.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__requestedProperties);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection> FindAllAsync(IObjectReference _obj, global::Windows.Devices.Enumeration.Pnp.PnpObjectType type, global::System.Collections.Generic.IEnumerable<string> requestedProperties, string aqsFilter)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __requestedProperties = default;
            IntPtr __retval = default;
            try
            {
                __requestedProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(requestedProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                MarshalString.Pinnable __aqsFilter = new(aqsFilter);
                fixed(void* ___aqsFilter = __aqsFilter)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.Pnp.PnpObjectType, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, type, MarshalInspectable<object>.GetAbi(__requestedProperties), MarshalString.GetAbi(ref __aqsFilter), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_Pnp_PnpObjectCollection.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__requestedProperties);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher CreateWatcher(IObjectReference _obj, global::Windows.Devices.Enumeration.Pnp.PnpObjectType type, global::System.Collections.Generic.IEnumerable<string> requestedProperties)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __requestedProperties = default;
            IntPtr __retval = default;
            try
            {
                __requestedProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(requestedProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.Pnp.PnpObjectType, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, type, MarshalInspectable<object>.GetAbi(__requestedProperties), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.Pnp.PnpObjectWatcher.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__requestedProperties);
                global::ABI.Windows.Devices.Enumeration.Pnp.PnpObjectWatcher.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher CreateWatcher(IObjectReference _obj, global::Windows.Devices.Enumeration.Pnp.PnpObjectType type, global::System.Collections.Generic.IEnumerable<string> requestedProperties, string aqsFilter)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __requestedProperties = default;
            IntPtr __retval = default;
            try
            {
                __requestedProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(requestedProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                MarshalString.Pinnable __aqsFilter = new(aqsFilter);
                fixed(void* ___aqsFilter = __aqsFilter)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.Pnp.PnpObjectType, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, type, MarshalInspectable<object>.GetAbi(__requestedProperties), MarshalString.GetAbi(ref __aqsFilter), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Windows.Devices.Enumeration.Pnp.PnpObjectWatcher.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__requestedProperties);
                global::ABI.Windows.Devices.Enumeration.Pnp.PnpObjectWatcher.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3D, 0x2A, 0xC3, 0xB3, 0x68, 0xD1, 0x60, 0x46, 0xBB, 0xF3, 0xA7, 0x33, 0xB1, 0x4B, 0x6E, 0x1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B3C32A3D-D168-4660-BBF3-A733B14B6E01")]
    internal interface IPnpObjectStatics : global::Windows.Devices.Enumeration.Pnp.IPnpObjectStatics
    {
    }
    internal static class IPnpObjectUpdateMethods
    {

        internal static unsafe string get_Id(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyDictionary<string, object> get_Properties(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__object.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, object>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, object>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.Pnp.PnpObjectType get_Type(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.Pnp.PnpObjectType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.Pnp.PnpObjectType*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x12, 0xE8, 0x59, 0x6F, 0x1E, 0x0, 0x44, 0x48, 0xBC, 0xC6, 0x43, 0x28, 0x86, 0x85, 0x6A, 0x17 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6F59E812-001E-4844-BCC6-432886856A17")]
    internal interface IPnpObjectUpdate : global::Windows.Devices.Enumeration.Pnp.IPnpObjectUpdate
    {
    }
    internal static class IPnpObjectWatcherMethods
    {


        internal static unsafe void Start(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[17](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Stop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[18](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Windows.Devices.Enumeration.DeviceWatcherStatus get_Status(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DeviceWatcherStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DeviceWatcherStatus*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObject>>> _Added_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObject>>> MakeAddedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Added_, new(), null);
            return _Added_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObject>>> _Added => _Added_ ?? MakeAddedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObject>> Get_Added2(IObjectReference _obj, object _thisObj)
        {
            return _Added.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_Pnp_PnpObjectWatcher__global__Windows_Devices_Enumeration_Pnp_PnpObject_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, object>>> _EnumerationCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, object>>> MakeEnumerationCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _EnumerationCompleted_, new(), null);
            return _EnumerationCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, object>>> _EnumerationCompleted => _EnumerationCompleted_ ?? MakeEnumerationCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, object>> Get_EnumerationCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _EnumerationCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_Pnp_PnpObjectWatcher__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>>> _Removed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>>> MakeRemovedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Removed_, new(), null);
            return _Removed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>>> _Removed => _Removed_ ?? MakeRemovedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>> Get_Removed2(IObjectReference _obj, object _thisObj)
        {
            return _Removed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_Pnp_PnpObjectWatcher__global__Windows_Devices_Enumeration_Pnp_PnpObjectUpdate_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, object>>> _Stopped_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, object>>> MakeStoppedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Stopped_, new(), null);
            return _Stopped_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, object>>> _Stopped => _Stopped_ ?? MakeStoppedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, object>> Get_Stopped2(IObjectReference _obj, object _thisObj)
        {
            return _Stopped.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_Pnp_PnpObjectWatcher__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[14],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[15],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>>> _Updated_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>>> MakeUpdatedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Updated_, new(), null);
            return _Updated_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>>> _Updated => _Updated_ ?? MakeUpdatedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher, global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>> Get_Updated2(IObjectReference _obj, object _thisObj)
        {
            return _Updated.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_Pnp_PnpObjectWatcher__global__Windows_Devices_Enumeration_Pnp_PnpObjectUpdate_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                4);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA8, 0x5C, 0xC9, 0x83, 0x72, 0x47, 0x7A, 0x4A, 0xAC, 0xA8, 0xE4, 0x8C, 0x42, 0xA8, 0x9C, 0x44 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("83C95CA8-4772-4A7A-ACA8-E48C42A89C44")]
    internal interface IPnpObjectWatcher : global::Windows.Devices.Enumeration.Pnp.IPnpObjectWatcher
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PnpObject
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.Pnp.PnpObject obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.Pnp.PnpObject>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.Pnp.PnpObject obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.Pnp.PnpObject FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.Pnp.PnpObject.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.Pnp.PnpObject obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObject>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.Pnp.PnpObject[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObject>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObject>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.Pnp.PnpObject[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObject>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.Pnp.PnpObject[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObject>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.Pnp.PnpObject[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObject>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObject>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObject>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PnpObjectRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.Pnp.PnpObject(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PnpObjectCollection
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection obj) => obj is null ? null : MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Enumeration.Pnp.PnpObject>>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection obj) => MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Enumeration.Pnp.PnpObject>>.CreateMarshaler2(obj, global::ABI.System.Collections.Generic.IReadOnlyListMethods<global::Windows.Devices.Enumeration.Pnp.PnpObject>.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PnpObjectCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.Pnp.PnpObjectCollection(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PnpObjectUpdate
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectUpdateMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectUpdateMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PnpObjectUpdateRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.Pnp.PnpObjectUpdate(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PnpObjectWatcher
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.Pnp.IPnpObjectWatcherMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PnpObjectWatcherRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.Pnp.PnpObjectWatcher(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
