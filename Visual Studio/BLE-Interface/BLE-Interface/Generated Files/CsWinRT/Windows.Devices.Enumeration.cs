//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.3.0-prerelease.250720.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Windows.Devices.Enumeration
{
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceAccessChangedEventArgs))]
    [global::ABI.Windows.Devices.Enumeration.DeviceAccessChangedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceAccessChangedEventArgs))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceAccessChangedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceAccessChangedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceAccessChangedEventArgs => _inner;
        private volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_IDeviceAccessChangedEventArgs2;
        private IObjectReference Make___objRef_global__Windows_Devices_Enumeration_IDeviceAccessChangedEventArgs2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Devices_Enumeration_IDeviceAccessChangedEventArgs2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Devices.Enumeration.IDeviceAccessChangedEventArgs2Methods.IID), null);
            return ___objRef_global__Windows_Devices_Enumeration_IDeviceAccessChangedEventArgs2;
        }
        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceAccessChangedEventArgs2 => ___objRef_global__Windows_Devices_Enumeration_IDeviceAccessChangedEventArgs2 ?? Make___objRef_global__Windows_Devices_Enumeration_IDeviceAccessChangedEventArgs2();



        public static DeviceAccessChangedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceAccessChangedEventArgs>.FromAbi(thisPtr);
        }

        internal DeviceAccessChangedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceAccessChangedEventArgsMethods.IID);

        }


        public static bool operator ==(DeviceAccessChangedEventArgs x, DeviceAccessChangedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceAccessChangedEventArgs x, DeviceAccessChangedEventArgs y) => !(x == y);
        public bool Equals(DeviceAccessChangedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DeviceAccessChangedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.14393.0")]
        public string Id => global::ABI.Windows.Devices.Enumeration.IDeviceAccessChangedEventArgs2Methods.get_Id(_objRef_global__Windows_Devices_Enumeration_IDeviceAccessChangedEventArgs2);

        public DeviceAccessStatus Status => global::ABI.Windows.Devices.Enumeration.IDeviceAccessChangedEventArgsMethods.get_Status(_objRef_global__Windows_Devices_Enumeration_IDeviceAccessChangedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceAccessInformation))]
    [global::ABI.Windows.Devices.Enumeration.DeviceAccessInformationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceAccessInformation))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceAccessInformation : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceAccessInformation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceAccessInformation => _inner;


        public static I As<I>() => ActivationFactory.Get("Windows.Devices.Enumeration.DeviceAccessInformation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_IDeviceAccessInformationStatics;
        private static IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceAccessInformationStatics
        {
            get
            { 
                var factory = ___objRef_global__Windows_Devices_Enumeration_IDeviceAccessInformationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Windows_Devices_Enumeration_IDeviceAccessInformationStatics = ActivationFactory.Get("Windows.Devices.Enumeration.DeviceAccessInformation", global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformationStaticsMethods.IID);
                }
            }
        }

        public static DeviceAccessInformation CreateFromId(string deviceId) => global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformationStaticsMethods.CreateFromId(_objRef_global__Windows_Devices_Enumeration_IDeviceAccessInformationStatics, deviceId);

        public static DeviceAccessInformation CreateFromDeviceClassId(Guid deviceClassId) => global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformationStaticsMethods.CreateFromDeviceClassId(_objRef_global__Windows_Devices_Enumeration_IDeviceAccessInformationStatics, deviceClassId);

        public static DeviceAccessInformation CreateFromDeviceClass(DeviceClass deviceClass) => global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformationStaticsMethods.CreateFromDeviceClass(_objRef_global__Windows_Devices_Enumeration_IDeviceAccessInformationStatics, deviceClass);

        public static DeviceAccessInformation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceAccessInformation>.FromAbi(thisPtr);
        }

        internal DeviceAccessInformation(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformationMethods.IID);

        }


        public static bool operator ==(DeviceAccessInformation x, DeviceAccessInformation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceAccessInformation x, DeviceAccessInformation y) => !(x == y);
        public bool Equals(DeviceAccessInformation other) => this == other;
        public override bool Equals(object obj) => obj is DeviceAccessInformation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<DeviceAccessInformation, DeviceAccessChangedEventArgs> AccessChanged
        {
            add => global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformationMethods.Get_AccessChanged2(_objRef_global__Windows_Devices_Enumeration_IDeviceAccessInformation, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformationMethods.Get_AccessChanged2(_objRef_global__Windows_Devices_Enumeration_IDeviceAccessInformation, (IWinRTObject)this).Unsubscribe(value);
        }

        public DeviceAccessStatus CurrentStatus => global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformationMethods.get_CurrentStatus(_objRef_global__Windows_Devices_Enumeration_IDeviceAccessInformation);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DeviceAccessStatus>))][global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public enum DeviceAccessStatus : int
    {
        Unspecified = unchecked((int)0),
        Allowed = unchecked((int)0x1),
        DeniedByUser = unchecked((int)0x2),
        DeniedBySystem = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DeviceClass>))][global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public enum DeviceClass : int
    {
        All = unchecked((int)0),
        AudioCapture = unchecked((int)0x1),
        AudioRender = unchecked((int)0x2),
        PortableStorageDevice = unchecked((int)0x3),
        VideoCapture = unchecked((int)0x4),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        ImageScanner = unchecked((int)0x5),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        Location = unchecked((int)0x6),
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails))]
    [global::ABI.Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetailsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceConnectionChangeTriggerDetails))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceConnectionChangeTriggerDetails : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceConnectionChangeTriggerDetails>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceConnectionChangeTriggerDetails => _inner;


        public static DeviceConnectionChangeTriggerDetails FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceConnectionChangeTriggerDetails>.FromAbi(thisPtr);
        }

        internal DeviceConnectionChangeTriggerDetails(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceConnectionChangeTriggerDetailsMethods.IID);

        }


        public static bool operator ==(DeviceConnectionChangeTriggerDetails x, DeviceConnectionChangeTriggerDetails y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceConnectionChangeTriggerDetails x, DeviceConnectionChangeTriggerDetails y) => !(x == y);
        public bool Equals(DeviceConnectionChangeTriggerDetails other) => this == other;
        public override bool Equals(object obj) => obj is DeviceConnectionChangeTriggerDetails that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string DeviceId => global::ABI.Windows.Devices.Enumeration.IDeviceConnectionChangeTriggerDetailsMethods.get_DeviceId(_objRef_global__Windows_Devices_Enumeration_IDeviceConnectionChangeTriggerDetails);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs))]
    [global::ABI.Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceDisconnectButtonClickedEventArgs))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceDisconnectButtonClickedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceDisconnectButtonClickedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceDisconnectButtonClickedEventArgs => _inner;


        public static DeviceDisconnectButtonClickedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceDisconnectButtonClickedEventArgs>.FromAbi(thisPtr);
        }

        internal DeviceDisconnectButtonClickedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceDisconnectButtonClickedEventArgsMethods.IID);

        }


        public static bool operator ==(DeviceDisconnectButtonClickedEventArgs x, DeviceDisconnectButtonClickedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceDisconnectButtonClickedEventArgs x, DeviceDisconnectButtonClickedEventArgs y) => !(x == y);
        public bool Equals(DeviceDisconnectButtonClickedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DeviceDisconnectButtonClickedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public DeviceInformation Device => global::ABI.Windows.Devices.Enumeration.IDeviceDisconnectButtonClickedEventArgsMethods.get_Device(_objRef_global__Windows_Devices_Enumeration_IDeviceDisconnectButtonClickedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceInformation))]
    [global::ABI.Windows.Devices.Enumeration.DeviceInformationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceInformation))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceInformation : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceInformation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceInformation => _inner;
        private volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_IDeviceInformation2;
        private IObjectReference Make___objRef_global__Windows_Devices_Enumeration_IDeviceInformation2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Devices_Enumeration_IDeviceInformation2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Devices.Enumeration.IDeviceInformation2Methods.IID), null);
            return ___objRef_global__Windows_Devices_Enumeration_IDeviceInformation2;
        }
        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceInformation2 => ___objRef_global__Windows_Devices_Enumeration_IDeviceInformation2 ?? Make___objRef_global__Windows_Devices_Enumeration_IDeviceInformation2();



        public static I As<I>() => ActivationFactory.Get("Windows.Devices.Enumeration.DeviceInformation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics;
        private static IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics
        {
            get
            { 
                var factory = ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics = ActivationFactory.Get("Windows.Devices.Enumeration.DeviceInformation", global::ABI.Windows.Devices.Enumeration.IDeviceInformationStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.Foundation.IAsyncOperation<DeviceInformation> CreateFromIdAsync(string deviceId) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStaticsMethods.CreateFromIdAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics, deviceId);

        public static global::Windows.Foundation.IAsyncOperation<DeviceInformation> CreateFromIdAsync(string deviceId, global::System.Collections.Generic.IEnumerable<string> additionalProperties) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStaticsMethods.CreateFromIdAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics, deviceId, additionalProperties);

        public static global::Windows.Foundation.IAsyncOperation<DeviceInformationCollection> FindAllAsync() => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStaticsMethods.FindAllAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics);

        public static global::Windows.Foundation.IAsyncOperation<DeviceInformationCollection> FindAllAsync(DeviceClass deviceClass) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStaticsMethods.FindAllAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics, deviceClass);

        public static global::Windows.Foundation.IAsyncOperation<DeviceInformationCollection> FindAllAsync(string aqsFilter) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStaticsMethods.FindAllAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics, aqsFilter);

        public static global::Windows.Foundation.IAsyncOperation<DeviceInformationCollection> FindAllAsync(string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStaticsMethods.FindAllAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics, aqsFilter, additionalProperties);

        public static DeviceWatcher CreateWatcher() => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStaticsMethods.CreateWatcher(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics);

        public static DeviceWatcher CreateWatcher(DeviceClass deviceClass) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStaticsMethods.CreateWatcher(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics, deviceClass);

        public static DeviceWatcher CreateWatcher(string aqsFilter) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStaticsMethods.CreateWatcher(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics, aqsFilter);

        public static DeviceWatcher CreateWatcher(string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStaticsMethods.CreateWatcher(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics, aqsFilter, additionalProperties);

        private static volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics2;
        private static IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics2
        {
            get
            { 
                var factory = ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics2 = ActivationFactory.Get("Windows.Devices.Enumeration.DeviceInformation", global::ABI.Windows.Devices.Enumeration.IDeviceInformationStatics2Methods.IID);
                }
            }
        }

        public static string GetAqsFilterFromDeviceClass(DeviceClass deviceClass) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStatics2Methods.GetAqsFilterFromDeviceClass(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics2, deviceClass);

        public static global::Windows.Foundation.IAsyncOperation<DeviceInformation> CreateFromIdAsync(string deviceId, global::System.Collections.Generic.IEnumerable<string> additionalProperties, DeviceInformationKind kind) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStatics2Methods.CreateFromIdAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics2, deviceId, additionalProperties, kind);

        public static global::Windows.Foundation.IAsyncOperation<DeviceInformationCollection> FindAllAsync(string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties, DeviceInformationKind kind) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStatics2Methods.FindAllAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics2, aqsFilter, additionalProperties, kind);

        public static DeviceWatcher CreateWatcher(string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties, DeviceInformationKind kind) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationStatics2Methods.CreateWatcher(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationStatics2, aqsFilter, additionalProperties, kind);

        public static DeviceInformation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceInformation>.FromAbi(thisPtr);
        }

        internal DeviceInformation(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceInformationMethods.IID);

        }


        public static bool operator ==(DeviceInformation x, DeviceInformation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceInformation x, DeviceInformation y) => !(x == y);
        public bool Equals(DeviceInformation other) => this == other;
        public override bool Equals(object obj) => obj is DeviceInformation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Update(DeviceInformationUpdate updateInfo) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationMethods.Update(_objRef_global__Windows_Devices_Enumeration_IDeviceInformation, updateInfo);

        public global::Windows.Foundation.IAsyncOperation<DeviceThumbnail> GetThumbnailAsync() => global::ABI.Windows.Devices.Enumeration.IDeviceInformationMethods.GetThumbnailAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformation);

        public global::Windows.Foundation.IAsyncOperation<DeviceThumbnail> GetGlyphThumbnailAsync() => global::ABI.Windows.Devices.Enumeration.IDeviceInformationMethods.GetGlyphThumbnailAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformation);

        public EnclosureLocation EnclosureLocation => global::ABI.Windows.Devices.Enumeration.IDeviceInformationMethods.get_EnclosureLocation(_objRef_global__Windows_Devices_Enumeration_IDeviceInformation);

        public string Id => global::ABI.Windows.Devices.Enumeration.IDeviceInformationMethods.get_Id(_objRef_global__Windows_Devices_Enumeration_IDeviceInformation);

        public bool IsDefault => global::ABI.Windows.Devices.Enumeration.IDeviceInformationMethods.get_IsDefault(_objRef_global__Windows_Devices_Enumeration_IDeviceInformation);

        public bool IsEnabled => global::ABI.Windows.Devices.Enumeration.IDeviceInformationMethods.get_IsEnabled(_objRef_global__Windows_Devices_Enumeration_IDeviceInformation);

        public DeviceInformationKind Kind => global::ABI.Windows.Devices.Enumeration.IDeviceInformation2Methods.get_Kind(_objRef_global__Windows_Devices_Enumeration_IDeviceInformation2);

        public string Name => global::ABI.Windows.Devices.Enumeration.IDeviceInformationMethods.get_Name(_objRef_global__Windows_Devices_Enumeration_IDeviceInformation);

        public DeviceInformationPairing Pairing => global::ABI.Windows.Devices.Enumeration.IDeviceInformation2Methods.get_Pairing(_objRef_global__Windows_Devices_Enumeration_IDeviceInformation2);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, object> Properties => global::ABI.Windows.Devices.Enumeration.IDeviceInformationMethods.get_Properties(_objRef_global__Windows_Devices_Enumeration_IDeviceInformation);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceInformationCollection))]
    [global::ABI.Windows.Devices.Enumeration.DeviceInformationCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::System.Collections.Generic.IReadOnlyList<DeviceInformation>))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceInformationCollection : global::System.Collections.Generic.IReadOnlyList<DeviceInformation>, global::System.Collections.Generic.IEnumerable<DeviceInformation>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceInformationCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IReadOnlyList_DeviceInformation_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IReadOnlyList_DeviceInformation_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Devices_Enumeration_DeviceInformation.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IReadOnlyList_DeviceInformation_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IReadOnlyListMethods<DeviceInformation>.IID), null);
            return ___objRef_global__System_Collections_Generic_IReadOnlyList_DeviceInformation_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IReadOnlyList_DeviceInformation_ => ___objRef_global__System_Collections_Generic_IReadOnlyList_DeviceInformation_ ?? Make___objRef_global__System_Collections_Generic_IReadOnlyList_DeviceInformation_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_DeviceInformation_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_DeviceInformation_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Devices_Enumeration_DeviceInformation.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_DeviceInformation_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<DeviceInformation>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_DeviceInformation_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_DeviceInformation_ => ___objRef_global__System_Collections_Generic_IEnumerable_DeviceInformation_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_DeviceInformation_();



        public static DeviceInformationCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceInformationCollection>.FromAbi(thisPtr);
        }

        internal DeviceInformationCollection(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.System.Collections.Generic.IReadOnlyListMethods<DeviceInformation>.IID);

        }


        public static bool operator ==(DeviceInformationCollection x, DeviceInformationCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceInformationCollection x, DeviceInformationCollection y) => !(x == y);
        public bool Equals(DeviceInformationCollection other) => this == other;
        public override bool Equals(object obj) => obj is DeviceInformationCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Count => global::ABI.System.Collections.Generic.IReadOnlyListMethods<DeviceInformation>.get_Count(_objRef_global__System_Collections_Generic_IReadOnlyList_DeviceInformation_);
        [global::System.Runtime.CompilerServices.IndexerName("ReadOnlyListItem")]
        public DeviceInformation this[int index] => global::ABI.System.Collections.Generic.IReadOnlyListMethods<DeviceInformation>.Indexer_Get(_objRef_global__System_Collections_Generic_IReadOnlyList_DeviceInformation_, index);

        public IEnumerator<DeviceInformation> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<DeviceInformation>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_DeviceInformation_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceInformationCustomPairing))]
    [global::ABI.Windows.Devices.Enumeration.DeviceInformationCustomPairingRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceInformationCustomPairing))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 131072u)]
    public sealed class DeviceInformationCustomPairing : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceInformationCustomPairing>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceInformationCustomPairing => _inner;


        public static DeviceInformationCustomPairing FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceInformationCustomPairing>.FromAbi(thisPtr);
        }

        internal DeviceInformationCustomPairing(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceInformationCustomPairingMethods.IID);

        }


        public static bool operator ==(DeviceInformationCustomPairing x, DeviceInformationCustomPairing y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceInformationCustomPairing x, DeviceInformationCustomPairing y) => !(x == y);
        public bool Equals(DeviceInformationCustomPairing other) => this == other;
        public override bool Equals(object obj) => obj is DeviceInformationCustomPairing that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<DevicePairingResult> PairAsync(DevicePairingKinds pairingKindsSupported) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationCustomPairingMethods.PairAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationCustomPairing, pairingKindsSupported);

        public global::Windows.Foundation.IAsyncOperation<DevicePairingResult> PairAsync(DevicePairingKinds pairingKindsSupported, DevicePairingProtectionLevel minProtectionLevel) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationCustomPairingMethods.PairAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationCustomPairing, pairingKindsSupported, minProtectionLevel);

        public global::Windows.Foundation.IAsyncOperation<DevicePairingResult> PairAsync(DevicePairingKinds pairingKindsSupported, DevicePairingProtectionLevel minProtectionLevel, IDevicePairingSettings devicePairingSettings) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationCustomPairingMethods.PairAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationCustomPairing, pairingKindsSupported, minProtectionLevel, devicePairingSettings);

        public event global::Windows.Foundation.TypedEventHandler<DeviceInformationCustomPairing, DevicePairingRequestedEventArgs> PairingRequested
        {
            add => global::ABI.Windows.Devices.Enumeration.IDeviceInformationCustomPairingMethods.Get_PairingRequested2(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationCustomPairing, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.IDeviceInformationCustomPairingMethods.Get_PairingRequested2(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationCustomPairing, (IWinRTObject)this).Unsubscribe(value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DeviceInformationKind>))][global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public enum DeviceInformationKind : int
    {
        Unknown = unchecked((int)0),
        DeviceInterface = unchecked((int)0x1),
        DeviceContainer = unchecked((int)0x2),
        Device = unchecked((int)0x3),
        DeviceInterfaceClass = unchecked((int)0x4),
        AssociationEndpoint = unchecked((int)0x5),
        AssociationEndpointContainer = unchecked((int)0x6),
        AssociationEndpointService = unchecked((int)0x7),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.17763.0")]
        DevicePanel = unchecked((int)0x8),
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceInformationPairing))]
    [global::ABI.Windows.Devices.Enumeration.DeviceInformationPairingRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceInformationPairing))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceInformationPairing : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceInformationPairing>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing => _inner;
        private volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing2;
        private IObjectReference Make___objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairing2Methods.IID), null);
            return ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing2;
        }
        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing2 => ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing2 ?? Make___objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing2();



        public static I As<I>() => ActivationFactory.Get("Windows.Devices.Enumeration.DeviceInformationPairing").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairingStatics;
        private static IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairingStatics
        {
            get
            { 
                var factory = ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairingStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairingStatics = ActivationFactory.Get("Windows.Devices.Enumeration.DeviceInformationPairing", global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingStaticsMethods.IID);
                }
            }
        }

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
        public static bool TryRegisterForAllInboundPairingRequests(DevicePairingKinds pairingKindsSupported) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingStaticsMethods.TryRegisterForAllInboundPairingRequests(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairingStatics, pairingKindsSupported);

        private static volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairingStatics2;
        private static IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairingStatics2
        {
            get
            { 
                var factory = ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairingStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairingStatics2 = ActivationFactory.Get("Windows.Devices.Enumeration.DeviceInformationPairing", global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingStatics2Methods.IID);
                }
            }
        }

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.17763.0")]
        public static bool TryRegisterForAllInboundPairingRequestsWithProtectionLevel(DevicePairingKinds pairingKindsSupported, DevicePairingProtectionLevel minProtectionLevel) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingStatics2Methods.TryRegisterForAllInboundPairingRequestsWithProtectionLevel(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairingStatics2, pairingKindsSupported, minProtectionLevel);

        public static DeviceInformationPairing FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceInformationPairing>.FromAbi(thisPtr);
        }

        internal DeviceInformationPairing(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingMethods.IID);

        }


        public static bool operator ==(DeviceInformationPairing x, DeviceInformationPairing y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceInformationPairing x, DeviceInformationPairing y) => !(x == y);
        public bool Equals(DeviceInformationPairing other) => this == other;
        public override bool Equals(object obj) => obj is DeviceInformationPairing that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<DevicePairingResult> PairAsync() => global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingMethods.PairAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing);

        public global::Windows.Foundation.IAsyncOperation<DevicePairingResult> PairAsync(DevicePairingProtectionLevel minProtectionLevel) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingMethods.PairAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing, minProtectionLevel);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
        public global::Windows.Foundation.IAsyncOperation<DevicePairingResult> PairAsync(DevicePairingProtectionLevel minProtectionLevel, IDevicePairingSettings devicePairingSettings) => global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairing2Methods.PairAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing2, minProtectionLevel, devicePairingSettings);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
        public global::Windows.Foundation.IAsyncOperation<DeviceUnpairingResult> UnpairAsync() => global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairing2Methods.UnpairAsync(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing2);

        public bool CanPair => global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingMethods.get_CanPair(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
        public DeviceInformationCustomPairing Custom => global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairing2Methods.get_Custom(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing2);

        public bool IsPaired => global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingMethods.get_IsPaired(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
        public DevicePairingProtectionLevel ProtectionLevel => global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairing2Methods.get_ProtectionLevel(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationPairing2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceInformationUpdate))]
    [global::ABI.Windows.Devices.Enumeration.DeviceInformationUpdateRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceInformationUpdate))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceInformationUpdate : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceInformationUpdate>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceInformationUpdate => _inner;
        private volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationUpdate2;
        private IObjectReference Make___objRef_global__Windows_Devices_Enumeration_IDeviceInformationUpdate2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationUpdate2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Devices.Enumeration.IDeviceInformationUpdate2Methods.IID), null);
            return ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationUpdate2;
        }
        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceInformationUpdate2 => ___objRef_global__Windows_Devices_Enumeration_IDeviceInformationUpdate2 ?? Make___objRef_global__Windows_Devices_Enumeration_IDeviceInformationUpdate2();



        public static DeviceInformationUpdate FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceInformationUpdate>.FromAbi(thisPtr);
        }

        internal DeviceInformationUpdate(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceInformationUpdateMethods.IID);

        }


        public static bool operator ==(DeviceInformationUpdate x, DeviceInformationUpdate y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceInformationUpdate x, DeviceInformationUpdate y) => !(x == y);
        public bool Equals(DeviceInformationUpdate other) => this == other;
        public override bool Equals(object obj) => obj is DeviceInformationUpdate that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string Id => global::ABI.Windows.Devices.Enumeration.IDeviceInformationUpdateMethods.get_Id(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationUpdate);

        public DeviceInformationKind Kind => global::ABI.Windows.Devices.Enumeration.IDeviceInformationUpdate2Methods.get_Kind(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationUpdate2);

        public global::System.Collections.Generic.IReadOnlyDictionary<string, object> Properties => global::ABI.Windows.Devices.Enumeration.IDeviceInformationUpdateMethods.get_Properties(_objRef_global__Windows_Devices_Enumeration_IDeviceInformationUpdate);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DevicePairingAddPairingSetMemberStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 1245184u)]
    public enum DevicePairingAddPairingSetMemberStatus : int
    {
        AddedToSet = unchecked((int)0),
        CouldNotBeAddedToSet = unchecked((int)0x1),
        SetDiscoveryNotAttemptedByProtocol = unchecked((int)0x2),
        SetDiscoveryCompletedByProtocol = unchecked((int)0x3),
        SetDiscoveryPartiallyCompletedByProtocol = unchecked((int)0x4),
        Failed = unchecked((int)0x5),
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DevicePairingKinds>))][global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 131072u)]
    public enum DevicePairingKinds : uint
    {
        None = unchecked((uint)0),
        ConfirmOnly = unchecked((uint)0x1),
        DisplayPin = unchecked((uint)0x2),
        ProvidePin = unchecked((uint)0x4),
        ConfirmPinMatch = unchecked((uint)0x8),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.18362.0")]
        ProvidePasswordCredential = unchecked((uint)0x10),
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DevicePairingProtectionLevel>))][global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public enum DevicePairingProtectionLevel : int
    {
        Default = unchecked((int)0),
        None = unchecked((int)0x1),
        Encryption = unchecked((int)0x2),
        EncryptionAndAuthentication = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DevicePairingRequestedEventArgs))]
    [global::ABI.Windows.Devices.Enumeration.DevicePairingRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDevicePairingRequestedEventArgs))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 131072u)]
    public sealed class DevicePairingRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DevicePairingRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs => _inner;
        private volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs2;
        private IObjectReference Make___objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs2Methods.IID), null);
            return ___objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs2;
        }
        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs2 => ___objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs2 ?? Make___objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs2();



        public static DevicePairingRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DevicePairingRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal DevicePairingRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(DevicePairingRequestedEventArgs x, DevicePairingRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DevicePairingRequestedEventArgs x, DevicePairingRequestedEventArgs y) => !(x == y);
        public bool Equals(DevicePairingRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DevicePairingRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Accept() => global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgsMethods.Accept(_objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs);

        public void Accept(string pin) => global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgsMethods.Accept(_objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs, pin);

        public global::Windows.Foundation.Deferral GetDeferral() => global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgsMethods.GetDeferral(_objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.18362.0")]
        public void AcceptWithPasswordCredential(global::Windows.Security.Credentials.PasswordCredential passwordCredential) => global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs2Methods.AcceptWithPasswordCredential(_objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs2, passwordCredential);

        public DeviceInformation DeviceInformation => global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgsMethods.get_DeviceInformation(_objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs);

        public DevicePairingKinds PairingKind => global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgsMethods.get_PairingKind(_objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs);

        public string Pin => global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgsMethods.get_Pin(_objRef_global__Windows_Devices_Enumeration_IDevicePairingRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DevicePairingResult))]
    [global::ABI.Windows.Devices.Enumeration.DevicePairingResultRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDevicePairingResult))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DevicePairingResult : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DevicePairingResult>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDevicePairingResult => _inner;


        public static DevicePairingResult FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DevicePairingResult>.FromAbi(thisPtr);
        }

        internal DevicePairingResult(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDevicePairingResultMethods.IID);

        }


        public static bool operator ==(DevicePairingResult x, DevicePairingResult y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DevicePairingResult x, DevicePairingResult y) => !(x == y);
        public bool Equals(DevicePairingResult other) => this == other;
        public override bool Equals(object obj) => obj is DevicePairingResult that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public DevicePairingProtectionLevel ProtectionLevelUsed => global::ABI.Windows.Devices.Enumeration.IDevicePairingResultMethods.get_ProtectionLevelUsed(_objRef_global__Windows_Devices_Enumeration_IDevicePairingResult);

        public DevicePairingResultStatus Status => global::ABI.Windows.Devices.Enumeration.IDevicePairingResultMethods.get_Status(_objRef_global__Windows_Devices_Enumeration_IDevicePairingResult);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DevicePairingResultStatus>))][global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public enum DevicePairingResultStatus : int
    {
        Paired = unchecked((int)0),
        NotReadyToPair = unchecked((int)0x1),
        NotPaired = unchecked((int)0x2),
        AlreadyPaired = unchecked((int)0x3),
        ConnectionRejected = unchecked((int)0x4),
        TooManyConnections = unchecked((int)0x5),
        HardwareFailure = unchecked((int)0x6),
        AuthenticationTimeout = unchecked((int)0x7),
        AuthenticationNotAllowed = unchecked((int)0x8),
        AuthenticationFailure = unchecked((int)0x9),
        NoSupportedProfiles = unchecked((int)0xa),
        ProtectionLevelCouldNotBeMet = unchecked((int)0xb),
        AccessDenied = unchecked((int)0xc),
        InvalidCeremonyData = unchecked((int)0xd),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
        PairingCanceled = unchecked((int)0xe),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
        OperationAlreadyInProgress = unchecked((int)0xf),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
        RequiredHandlerNotRegistered = unchecked((int)0x10),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
        RejectedByHandler = unchecked((int)0x11),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
        RemoteDeviceHasAssociation = unchecked((int)0x12),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
        Failed = unchecked((int)0x13),
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs))]
    [global::ABI.Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDevicePairingSetMembersRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 1245184u)]
    public sealed class DevicePairingSetMembersRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DevicePairingSetMembersRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDevicePairingSetMembersRequestedEventArgs => _inner;


        public static DevicePairingSetMembersRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DevicePairingSetMembersRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal DevicePairingSetMembersRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDevicePairingSetMembersRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(DevicePairingSetMembersRequestedEventArgs x, DevicePairingSetMembersRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DevicePairingSetMembersRequestedEventArgs x, DevicePairingSetMembersRequestedEventArgs y) => !(x == y);
        public bool Equals(DevicePairingSetMembersRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DevicePairingSetMembersRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IReadOnlyList<DeviceInformation> PairingSetMembers => global::ABI.Windows.Devices.Enumeration.IDevicePairingSetMembersRequestedEventArgsMethods.get_PairingSetMembers(_objRef_global__Windows_Devices_Enumeration_IDevicePairingSetMembersRequestedEventArgs);

        public DeviceInformation ParentDeviceInformation => global::ABI.Windows.Devices.Enumeration.IDevicePairingSetMembersRequestedEventArgsMethods.get_ParentDeviceInformation(_objRef_global__Windows_Devices_Enumeration_IDevicePairingSetMembersRequestedEventArgs);

        public DevicePairingAddPairingSetMemberStatus Status => global::ABI.Windows.Devices.Enumeration.IDevicePairingSetMembersRequestedEventArgsMethods.get_Status(_objRef_global__Windows_Devices_Enumeration_IDevicePairingSetMembersRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DevicePicker))]
    [global::ABI.Windows.Devices.Enumeration.DevicePickerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDevicePicker))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DevicePicker : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DevicePicker>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDevicePicker => _inner;


        private static volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_DevicePicker;
        private static IObjectReference _objRef_global__Windows_Devices_Enumeration_DevicePicker
        {
            get
            { 
                var factory = ___objRef_global__Windows_Devices_Enumeration_DevicePicker;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Windows_Devices_Enumeration_DevicePicker = ActivationFactory.Get("Windows.Devices.Enumeration.DevicePicker");
                }
            }
        }

        public DevicePicker() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Windows_Devices_Enumeration_DevicePicker, global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static DevicePicker FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DevicePicker>.FromAbi(thisPtr);
        }

        internal DevicePicker(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.IID);

        }


        public static bool operator ==(DevicePicker x, DevicePicker y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DevicePicker x, DevicePicker y) => !(x == y);
        public bool Equals(DevicePicker other) => this == other;
        public override bool Equals(object obj) => obj is DevicePicker that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Show(global::Windows.Foundation.Rect selection) => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.Show(_objRef_global__Windows_Devices_Enumeration_IDevicePicker, selection);

        public void Show(global::Windows.Foundation.Rect selection, global::Windows.UI.Popups.Placement placement) => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.Show(_objRef_global__Windows_Devices_Enumeration_IDevicePicker, selection, placement);

        public global::Windows.Foundation.IAsyncOperation<DeviceInformation> PickSingleDeviceAsync(global::Windows.Foundation.Rect selection) => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.PickSingleDeviceAsync(_objRef_global__Windows_Devices_Enumeration_IDevicePicker, selection);

        public global::Windows.Foundation.IAsyncOperation<DeviceInformation> PickSingleDeviceAsync(global::Windows.Foundation.Rect selection, global::Windows.UI.Popups.Placement placement) => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.PickSingleDeviceAsync(_objRef_global__Windows_Devices_Enumeration_IDevicePicker, selection, placement);

        public void Hide() => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.Hide(_objRef_global__Windows_Devices_Enumeration_IDevicePicker);

        public void SetDisplayStatus(DeviceInformation device, string status, DevicePickerDisplayStatusOptions options) => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.SetDisplayStatus(_objRef_global__Windows_Devices_Enumeration_IDevicePicker, device, status, options);

        public event global::Windows.Foundation.TypedEventHandler<DevicePicker, object> DevicePickerDismissed
        {
            add => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.Get_DevicePickerDismissed2(_objRef_global__Windows_Devices_Enumeration_IDevicePicker, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.Get_DevicePickerDismissed2(_objRef_global__Windows_Devices_Enumeration_IDevicePicker, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DevicePicker, DeviceSelectedEventArgs> DeviceSelected
        {
            add => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.Get_DeviceSelected2(_objRef_global__Windows_Devices_Enumeration_IDevicePicker, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.Get_DeviceSelected2(_objRef_global__Windows_Devices_Enumeration_IDevicePicker, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DevicePicker, DeviceDisconnectButtonClickedEventArgs> DisconnectButtonClicked
        {
            add => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.Get_DisconnectButtonClicked2(_objRef_global__Windows_Devices_Enumeration_IDevicePicker, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.Get_DisconnectButtonClicked2(_objRef_global__Windows_Devices_Enumeration_IDevicePicker, (IWinRTObject)this).Unsubscribe(value);
        }

        public DevicePickerAppearance Appearance => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.get_Appearance(_objRef_global__Windows_Devices_Enumeration_IDevicePicker);

        public DevicePickerFilter Filter => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.get_Filter(_objRef_global__Windows_Devices_Enumeration_IDevicePicker);

        public global::System.Collections.Generic.IList<string> RequestedProperties => global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.get_RequestedProperties(_objRef_global__Windows_Devices_Enumeration_IDevicePicker);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DevicePickerAppearance))]
    [global::ABI.Windows.Devices.Enumeration.DevicePickerAppearanceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDevicePickerAppearance))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DevicePickerAppearance : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DevicePickerAppearance>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance => _inner;


        public static DevicePickerAppearance FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DevicePickerAppearance>.FromAbi(thisPtr);
        }

        internal DevicePickerAppearance(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.IID);

        }


        public static bool operator ==(DevicePickerAppearance x, DevicePickerAppearance y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DevicePickerAppearance x, DevicePickerAppearance y) => !(x == y);
        public bool Equals(DevicePickerAppearance other) => this == other;
        public override bool Equals(object obj) => obj is DevicePickerAppearance that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.UI.Color AccentColor
        {
            get => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.get_AccentColor(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance);
            set => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.set_AccentColor(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance, value);
        }

        public global::Windows.UI.Color BackgroundColor
        {
            get => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.get_BackgroundColor(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance);
            set => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.set_BackgroundColor(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance, value);
        }

        public global::Windows.UI.Color ForegroundColor
        {
            get => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.get_ForegroundColor(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance);
            set => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.set_ForegroundColor(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance, value);
        }

        public global::Windows.UI.Color SelectedAccentColor
        {
            get => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.get_SelectedAccentColor(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance);
            set => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.set_SelectedAccentColor(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance, value);
        }

        public global::Windows.UI.Color SelectedBackgroundColor
        {
            get => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.get_SelectedBackgroundColor(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance);
            set => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.set_SelectedBackgroundColor(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance, value);
        }

        public global::Windows.UI.Color SelectedForegroundColor
        {
            get => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.get_SelectedForegroundColor(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance);
            set => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.set_SelectedForegroundColor(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance, value);
        }

        public string Title
        {
            get => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.get_Title(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance);
            set => global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.set_Title(_objRef_global__Windows_Devices_Enumeration_IDevicePickerAppearance, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DevicePickerDisplayStatusOptions>))][global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public enum DevicePickerDisplayStatusOptions : uint
    {
        None = unchecked((uint)0),
        ShowProgress = unchecked((uint)0x1),
        ShowDisconnectButton = unchecked((uint)0x2),
        ShowRetryButton = unchecked((uint)0x4),
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DevicePickerFilter))]
    [global::ABI.Windows.Devices.Enumeration.DevicePickerFilterRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDevicePickerFilter))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DevicePickerFilter : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DevicePickerFilter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDevicePickerFilter => _inner;


        public static DevicePickerFilter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DevicePickerFilter>.FromAbi(thisPtr);
        }

        internal DevicePickerFilter(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDevicePickerFilterMethods.IID);

        }


        public static bool operator ==(DevicePickerFilter x, DevicePickerFilter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DevicePickerFilter x, DevicePickerFilter y) => !(x == y);
        public bool Equals(DevicePickerFilter other) => this == other;
        public override bool Equals(object obj) => obj is DevicePickerFilter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IList<DeviceClass> SupportedDeviceClasses => global::ABI.Windows.Devices.Enumeration.IDevicePickerFilterMethods.get_SupportedDeviceClasses(_objRef_global__Windows_Devices_Enumeration_IDevicePickerFilter);

        public global::System.Collections.Generic.IList<string> SupportedDeviceSelectors => global::ABI.Windows.Devices.Enumeration.IDevicePickerFilterMethods.get_SupportedDeviceSelectors(_objRef_global__Windows_Devices_Enumeration_IDevicePickerFilter);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceSelectedEventArgs))]
    [global::ABI.Windows.Devices.Enumeration.DeviceSelectedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceSelectedEventArgs))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceSelectedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceSelectedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceSelectedEventArgs => _inner;


        public static DeviceSelectedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceSelectedEventArgs>.FromAbi(thisPtr);
        }

        internal DeviceSelectedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceSelectedEventArgsMethods.IID);

        }


        public static bool operator ==(DeviceSelectedEventArgs x, DeviceSelectedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceSelectedEventArgs x, DeviceSelectedEventArgs y) => !(x == y);
        public bool Equals(DeviceSelectedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DeviceSelectedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public DeviceInformation SelectedDevice => global::ABI.Windows.Devices.Enumeration.IDeviceSelectedEventArgsMethods.get_SelectedDevice(_objRef_global__Windows_Devices_Enumeration_IDeviceSelectedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceThumbnail))]
    [global::ABI.Windows.Devices.Enumeration.DeviceThumbnailRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::Windows.Storage.Streams.IRandomAccessStreamWithContentType))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceThumbnail : global::Windows.Storage.Streams.IRandomAccessStreamWithContentType, global::Windows.Storage.Streams.IContentTypeProvider, global::Windows.Storage.Streams.IRandomAccessStream, global::Windows.Storage.Streams.IOutputStream, global::System.IDisposable, global::Windows.Storage.Streams.IInputStream, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceThumbnail>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Storage_Streams_IRandomAccessStreamWithContentType => _inner;
        private volatile IObjectReference ___objRef_global__Windows_Storage_Streams_IContentTypeProvider;
        private IObjectReference Make___objRef_global__Windows_Storage_Streams_IContentTypeProvider()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Storage_Streams_IContentTypeProvider, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Storage.Streams.IContentTypeProviderMethods.IID), null);
            return ___objRef_global__Windows_Storage_Streams_IContentTypeProvider;
        }
        private IObjectReference _objRef_global__Windows_Storage_Streams_IContentTypeProvider => ___objRef_global__Windows_Storage_Streams_IContentTypeProvider ?? Make___objRef_global__Windows_Storage_Streams_IContentTypeProvider();

        private volatile IObjectReference ___objRef_global__Windows_Storage_Streams_IRandomAccessStream;
        private IObjectReference Make___objRef_global__Windows_Storage_Streams_IRandomAccessStream()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Storage_Streams_IRandomAccessStream, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.IID), null);
            return ___objRef_global__Windows_Storage_Streams_IRandomAccessStream;
        }
        private IObjectReference _objRef_global__Windows_Storage_Streams_IRandomAccessStream => ___objRef_global__Windows_Storage_Streams_IRandomAccessStream ?? Make___objRef_global__Windows_Storage_Streams_IRandomAccessStream();

        private volatile IObjectReference ___objRef_global__Windows_Storage_Streams_IOutputStream;
        private IObjectReference Make___objRef_global__Windows_Storage_Streams_IOutputStream()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Storage_Streams_IOutputStream, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Storage.Streams.IOutputStreamMethods.IID), null);
            return ___objRef_global__Windows_Storage_Streams_IOutputStream;
        }
        private IObjectReference _objRef_global__Windows_Storage_Streams_IOutputStream => ___objRef_global__Windows_Storage_Streams_IOutputStream ?? Make___objRef_global__Windows_Storage_Streams_IOutputStream();

        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();

        private volatile IObjectReference ___objRef_global__Windows_Storage_Streams_IInputStream;
        private IObjectReference Make___objRef_global__Windows_Storage_Streams_IInputStream()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Storage_Streams_IInputStream, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Storage.Streams.IInputStreamMethods.IID), null);
            return ___objRef_global__Windows_Storage_Streams_IInputStream;
        }
        private IObjectReference _objRef_global__Windows_Storage_Streams_IInputStream => ___objRef_global__Windows_Storage_Streams_IInputStream ?? Make___objRef_global__Windows_Storage_Streams_IInputStream();



        public static DeviceThumbnail FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceThumbnail>.FromAbi(thisPtr);
        }

        internal DeviceThumbnail(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Storage.Streams.IRandomAccessStreamWithContentTypeMethods.IID);

        }


        public static bool operator ==(DeviceThumbnail x, DeviceThumbnail y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceThumbnail x, DeviceThumbnail y) => !(x == y);
        public bool Equals(DeviceThumbnail other) => this == other;
        public override bool Equals(object obj) => obj is DeviceThumbnail that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Storage.Streams.IInputStream GetInputStreamAt(ulong position) => global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.GetInputStreamAt(_objRef_global__Windows_Storage_Streams_IRandomAccessStream, position);

        public global::Windows.Storage.Streams.IOutputStream GetOutputStreamAt(ulong position) => global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.GetOutputStreamAt(_objRef_global__Windows_Storage_Streams_IRandomAccessStream, position);

        public void Seek(ulong position) => global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.Seek(_objRef_global__Windows_Storage_Streams_IRandomAccessStream, position);

        public global::Windows.Storage.Streams.IRandomAccessStream CloneStream() => global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.CloneStream(_objRef_global__Windows_Storage_Streams_IRandomAccessStream);

        public global::Windows.Foundation.IAsyncOperationWithProgress<uint, uint> WriteAsync(global::Windows.Storage.Streams.IBuffer buffer) => global::ABI.Windows.Storage.Streams.IOutputStreamMethods.WriteAsync(_objRef_global__Windows_Storage_Streams_IOutputStream, buffer);

        public global::Windows.Foundation.IAsyncOperation<bool> FlushAsync() => global::ABI.Windows.Storage.Streams.IOutputStreamMethods.FlushAsync(_objRef_global__Windows_Storage_Streams_IOutputStream);

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        public global::Windows.Foundation.IAsyncOperationWithProgress<global::Windows.Storage.Streams.IBuffer, uint> ReadAsync(global::Windows.Storage.Streams.IBuffer buffer, uint count, global::Windows.Storage.Streams.InputStreamOptions options) => global::ABI.Windows.Storage.Streams.IInputStreamMethods.ReadAsync(_objRef_global__Windows_Storage_Streams_IInputStream, buffer, count, options);

        public bool CanRead => global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.get_CanRead(_objRef_global__Windows_Storage_Streams_IRandomAccessStream);

        public bool CanWrite => global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.get_CanWrite(_objRef_global__Windows_Storage_Streams_IRandomAccessStream);

        public string ContentType => global::ABI.Windows.Storage.Streams.IContentTypeProviderMethods.get_ContentType(_objRef_global__Windows_Storage_Streams_IContentTypeProvider);

        public ulong Position => global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.get_Position(_objRef_global__Windows_Storage_Streams_IRandomAccessStream);

        public ulong Size
        {
            get => global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.get_Size(_objRef_global__Windows_Storage_Streams_IRandomAccessStream);
            set => global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.set_Size(_objRef_global__Windows_Storage_Streams_IRandomAccessStream, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceUnpairingResult))]
    [global::ABI.Windows.Devices.Enumeration.DeviceUnpairingResultRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceUnpairingResult))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 131072u)]
    public sealed class DeviceUnpairingResult : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceUnpairingResult>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceUnpairingResult => _inner;


        public static DeviceUnpairingResult FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceUnpairingResult>.FromAbi(thisPtr);
        }

        internal DeviceUnpairingResult(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceUnpairingResultMethods.IID);

        }


        public static bool operator ==(DeviceUnpairingResult x, DeviceUnpairingResult y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceUnpairingResult x, DeviceUnpairingResult y) => !(x == y);
        public bool Equals(DeviceUnpairingResult other) => this == other;
        public override bool Equals(object obj) => obj is DeviceUnpairingResult that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public DeviceUnpairingResultStatus Status => global::ABI.Windows.Devices.Enumeration.IDeviceUnpairingResultMethods.get_Status(_objRef_global__Windows_Devices_Enumeration_IDeviceUnpairingResult);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DeviceUnpairingResultStatus>))][global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 131072u)]
    public enum DeviceUnpairingResultStatus : int
    {
        Unpaired = unchecked((int)0),
        AlreadyUnpaired = unchecked((int)0x1),
        OperationAlreadyInProgress = unchecked((int)0x2),
        AccessDenied = unchecked((int)0x3),
        Failed = unchecked((int)0x4),
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceWatcher))]
    [global::ABI.Windows.Devices.Enumeration.DeviceWatcherRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceWatcher))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceWatcher : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceWatcher>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceWatcher => _inner;
        private volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_IDeviceWatcher2;
        private IObjectReference Make___objRef_global__Windows_Devices_Enumeration_IDeviceWatcher2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Devices_Enumeration_IDeviceWatcher2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Devices.Enumeration.IDeviceWatcher2Methods.IID), null);
            return ___objRef_global__Windows_Devices_Enumeration_IDeviceWatcher2;
        }
        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceWatcher2 => ___objRef_global__Windows_Devices_Enumeration_IDeviceWatcher2 ?? Make___objRef_global__Windows_Devices_Enumeration_IDeviceWatcher2();



        public static DeviceWatcher FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceWatcher>.FromAbi(thisPtr);
        }

        internal DeviceWatcher(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.IID);

        }


        public static bool operator ==(DeviceWatcher x, DeviceWatcher y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceWatcher x, DeviceWatcher y) => !(x == y);
        public bool Equals(DeviceWatcher other) => this == other;
        public override bool Equals(object obj) => obj is DeviceWatcher that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Start() => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.Start(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher);

        public void Stop() => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.Stop(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher);

        public event global::Windows.Foundation.TypedEventHandler<DeviceWatcher, DeviceInformation> Added
        {
            add => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.Get_Added2(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.Get_Added2(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DeviceWatcher, object> EnumerationCompleted
        {
            add => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.Get_EnumerationCompleted2(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.Get_EnumerationCompleted2(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DeviceWatcher, DeviceInformationUpdate> Removed
        {
            add => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.Get_Removed2(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.Get_Removed2(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DeviceWatcher, object> Stopped
        {
            add => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.Get_Stopped2(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.Get_Stopped2(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DeviceWatcher, DeviceInformationUpdate> Updated
        {
            add => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.Get_Updated2(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.Get_Updated2(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher, (IWinRTObject)this).Unsubscribe(value);
        }

        public global::Windows.ApplicationModel.Background.DeviceWatcherTrigger GetBackgroundTrigger(global::System.Collections.Generic.IEnumerable<DeviceWatcherEventKind> requestedEventKinds) => global::ABI.Windows.Devices.Enumeration.IDeviceWatcher2Methods.GetBackgroundTrigger(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher2, requestedEventKinds);

        public DeviceWatcherStatus Status => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.get_Status(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcher);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceWatcherEvent))]
    [global::ABI.Windows.Devices.Enumeration.DeviceWatcherEventRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceWatcherEvent))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceWatcherEvent : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceWatcherEvent>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceWatcherEvent => _inner;


        public static DeviceWatcherEvent FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceWatcherEvent>.FromAbi(thisPtr);
        }

        internal DeviceWatcherEvent(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceWatcherEventMethods.IID);

        }


        public static bool operator ==(DeviceWatcherEvent x, DeviceWatcherEvent y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceWatcherEvent x, DeviceWatcherEvent y) => !(x == y);
        public bool Equals(DeviceWatcherEvent other) => this == other;
        public override bool Equals(object obj) => obj is DeviceWatcherEvent that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public DeviceInformation DeviceInformation => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherEventMethods.get_DeviceInformation(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcherEvent);

        public DeviceInformationUpdate DeviceInformationUpdate => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherEventMethods.get_DeviceInformationUpdate(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcherEvent);

        public DeviceWatcherEventKind Kind => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherEventMethods.get_Kind(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcherEvent);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DeviceWatcherEventKind>))][global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public enum DeviceWatcherEventKind : int
    {
        Add = unchecked((int)0),
        Update = unchecked((int)0x1),
        Remove = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DeviceWatcherStatus>))][global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public enum DeviceWatcherStatus : int
    {
        Created = unchecked((int)0),
        Started = unchecked((int)0x1),
        EnumerationCompleted = unchecked((int)0x2),
        Stopping = unchecked((int)0x3),
        Stopped = unchecked((int)0x4),
        Aborted = unchecked((int)0x5),
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.DeviceWatcherTriggerDetails))]
    [global::ABI.Windows.Devices.Enumeration.DeviceWatcherTriggerDetailsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDeviceWatcherTriggerDetails))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class DeviceWatcherTriggerDetails : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DeviceWatcherTriggerDetails>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IDeviceWatcherTriggerDetails => _inner;


        public static DeviceWatcherTriggerDetails FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DeviceWatcherTriggerDetails>.FromAbi(thisPtr);
        }

        internal DeviceWatcherTriggerDetails(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IDeviceWatcherTriggerDetailsMethods.IID);

        }


        public static bool operator ==(DeviceWatcherTriggerDetails x, DeviceWatcherTriggerDetails y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DeviceWatcherTriggerDetails x, DeviceWatcherTriggerDetails y) => !(x == y);
        public bool Equals(DeviceWatcherTriggerDetails other) => this == other;
        public override bool Equals(object obj) => obj is DeviceWatcherTriggerDetails that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::System.Collections.Generic.IReadOnlyList<DeviceWatcherEvent> DeviceWatcherEvents => global::ABI.Windows.Devices.Enumeration.IDeviceWatcherTriggerDetailsMethods.get_DeviceWatcherEvents(_objRef_global__Windows_Devices_Enumeration_IDeviceWatcherTriggerDetails);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.EnclosureLocation))]
    [global::ABI.Windows.Devices.Enumeration.EnclosureLocationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEnclosureLocation))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class EnclosureLocation : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EnclosureLocation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IEnclosureLocation => _inner;
        private volatile IObjectReference ___objRef_global__Windows_Devices_Enumeration_IEnclosureLocation2;
        private IObjectReference Make___objRef_global__Windows_Devices_Enumeration_IEnclosureLocation2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Devices_Enumeration_IEnclosureLocation2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Devices.Enumeration.IEnclosureLocation2Methods.IID), null);
            return ___objRef_global__Windows_Devices_Enumeration_IEnclosureLocation2;
        }
        private IObjectReference _objRef_global__Windows_Devices_Enumeration_IEnclosureLocation2 => ___objRef_global__Windows_Devices_Enumeration_IEnclosureLocation2 ?? Make___objRef_global__Windows_Devices_Enumeration_IEnclosureLocation2();



        public static EnclosureLocation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EnclosureLocation>.FromAbi(thisPtr);
        }

        internal EnclosureLocation(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Enumeration.IEnclosureLocationMethods.IID);

        }


        public static bool operator ==(EnclosureLocation x, EnclosureLocation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EnclosureLocation x, EnclosureLocation y) => !(x == y);
        public bool Equals(EnclosureLocation other) => this == other;
        public override bool Equals(object obj) => obj is EnclosureLocation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool InDock => global::ABI.Windows.Devices.Enumeration.IEnclosureLocationMethods.get_InDock(_objRef_global__Windows_Devices_Enumeration_IEnclosureLocation);

        public bool InLid => global::ABI.Windows.Devices.Enumeration.IEnclosureLocationMethods.get_InLid(_objRef_global__Windows_Devices_Enumeration_IEnclosureLocation);

        public Panel Panel => global::ABI.Windows.Devices.Enumeration.IEnclosureLocationMethods.get_Panel(_objRef_global__Windows_Devices_Enumeration_IEnclosureLocation);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.14393.0")]
        public uint RotationAngleInDegreesClockwise => global::ABI.Windows.Devices.Enumeration.IEnclosureLocation2Methods.get_RotationAngleInDegreesClockwise(_objRef_global__Windows_Devices_Enumeration_IEnclosureLocation2);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("DEDA0BCC-4F9D-4F58-9DBA-A9BC800408D5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceAccessChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceAccessChangedEventArgs
    {
        DeviceAccessStatus Status { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("82523262-934B-4B30-A178-ADC39F2F2BE3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceAccessChangedEventArgs2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 196608u)]
    internal interface IDeviceAccessChangedEventArgs2
    {
        string Id { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("7580A878-7FD9-5CD7-8560-3C644B9B10DB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceAccessChangedEventArgs3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 1245184u)]
    internal interface IDeviceAccessChangedEventArgs3
    {
        bool UserPromptRequired { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("0BAA9A73-6DE5-4915-8DDD-9A0554A6F545")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceAccessInformation
    {
        DeviceAccessStatus CurrentStatus { get; }
        event global::Windows.Foundation.TypedEventHandler<DeviceAccessInformation, DeviceAccessChangedEventArgs> AccessChanged;
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("E2B9DFF6-E88F-5D0A-9C1E-D788808DF47B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformation2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 1245184u)]
    internal interface IDeviceAccessInformation2
    {
        bool UserPromptRequired { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("574BD3D3-5F30-45CD-8A94-724FE5973084")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceAccessInformationStatics
    {
        DeviceAccessInformation CreateFromId(string deviceId);
        DeviceAccessInformation CreateFromDeviceClassId(Guid deviceClassId);
        DeviceAccessInformation CreateFromDeviceClass(DeviceClass deviceClass);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("B8578C0C-BBC1-484B-BFFA-7B31DCC200B2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceConnectionChangeTriggerDetails))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceConnectionChangeTriggerDetails
    {
        string DeviceId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("8E44B56D-F902-4A00-B536-F37992E6A2A7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceDisconnectButtonClickedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceDisconnectButtonClickedEventArgs
    {
        DeviceInformation Device { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("F7710F66-9FF3-41C8-85EB-87F81148A30F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceEnumerationSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 1245184u)]
    public interface IDeviceEnumerationSettings
    {
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("ABA0FB95-4398-489D-8E44-E6130927011F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceInformation
    {
        void Update(DeviceInformationUpdate updateInfo);
        global::Windows.Foundation.IAsyncOperation<DeviceThumbnail> GetThumbnailAsync();
        global::Windows.Foundation.IAsyncOperation<DeviceThumbnail> GetGlyphThumbnailAsync();
        EnclosureLocation EnclosureLocation { get; }
        string Id { get; }
        bool IsDefault { get; }
        bool IsEnabled { get; }
        string Name { get; }
        global::System.Collections.Generic.IReadOnlyDictionary<string, object> Properties { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("F156A638-7997-48D9-A10C-269D46533F48")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformation2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceInformation2
    {
        DeviceInformationKind Kind { get; }
        DeviceInformationPairing Pairing { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("85138C02-4EE6-4914-8370-107A39144C0E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformationCustomPairing))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 131072u)]
    internal interface IDeviceInformationCustomPairing
    {
        [global::Windows.Foundation.Metadata.Overload(@"PairAsync")]
        global::Windows.Foundation.IAsyncOperation<DevicePairingResult> PairAsync(DevicePairingKinds pairingKindsSupported);
        [global::Windows.Foundation.Metadata.Overload(@"PairWithProtectionLevelAsync")]
        global::Windows.Foundation.IAsyncOperation<DevicePairingResult> PairAsync(DevicePairingKinds pairingKindsSupported, DevicePairingProtectionLevel minProtectionLevel);
        [global::Windows.Foundation.Metadata.Overload(@"PairWithProtectionLevelAndSettingsAsync")]
        global::Windows.Foundation.IAsyncOperation<DevicePairingResult> PairAsync(DevicePairingKinds pairingKindsSupported, DevicePairingProtectionLevel minProtectionLevel, IDevicePairingSettings devicePairingSettings);
        event global::Windows.Foundation.TypedEventHandler<DeviceInformationCustomPairing, DevicePairingRequestedEventArgs> PairingRequested;
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("0EBDA662-E696-5FA9-8F72-80CFEBCD851D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformationCustomPairing2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 1245184u)]
    internal interface IDeviceInformationCustomPairing2
    {
        void AddPairingSetMember(DeviceInformation device);
        event global::Windows.Foundation.TypedEventHandler<DeviceInformationCustomPairing, DevicePairingSetMembersRequestedEventArgs> PairingSetMembersRequested;
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("2C4769F5-F684-40D5-8469-E8DBAAB70485")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairing))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceInformationPairing
    {
        [global::Windows.Foundation.Metadata.Overload(@"PairAsync")]
        global::Windows.Foundation.IAsyncOperation<DevicePairingResult> PairAsync();
        [global::Windows.Foundation.Metadata.Overload(@"PairWithProtectionLevelAsync")]
        global::Windows.Foundation.IAsyncOperation<DevicePairingResult> PairAsync(DevicePairingProtectionLevel minProtectionLevel);
        bool CanPair { get; }
        bool IsPaired { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("F68612FD-0AEE-4328-85CC-1C742BB1790D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairing2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 131072u)]
    internal interface IDeviceInformationPairing2
    {
        [global::Windows.Foundation.Metadata.Overload(@"PairWithProtectionLevelAndSettingsAsync")]
        global::Windows.Foundation.IAsyncOperation<DevicePairingResult> PairAsync(DevicePairingProtectionLevel minProtectionLevel, IDevicePairingSettings devicePairingSettings);
        [global::Windows.Foundation.Metadata.Overload(@"UnpairAsync")]
        global::Windows.Foundation.IAsyncOperation<DeviceUnpairingResult> UnpairAsync();
        DeviceInformationCustomPairing Custom { get; }
        DevicePairingProtectionLevel ProtectionLevel { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("E915C408-36D4-49A1-BF13-514173799B6B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 131072u)]
    internal interface IDeviceInformationPairingStatics
    {
        bool TryRegisterForAllInboundPairingRequests(DevicePairingKinds pairingKindsSupported);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("04DE5372-B7B7-476B-A74F-C5836A704D98")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 458752u)]
    internal interface IDeviceInformationPairingStatics2
    {
        bool TryRegisterForAllInboundPairingRequestsWithProtectionLevel(DevicePairingKinds pairingKindsSupported, DevicePairingProtectionLevel minProtectionLevel);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("C17F100E-3A46-4A78-8013-769DC9B97390")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceInformationStatics
    {
        [global::Windows.Foundation.Metadata.Overload(@"CreateFromIdAsync")]
        global::Windows.Foundation.IAsyncOperation<DeviceInformation> CreateFromIdAsync(string deviceId);
        [global::Windows.Foundation.Metadata.Overload(@"CreateFromIdAsyncAdditionalProperties")]
        global::Windows.Foundation.IAsyncOperation<DeviceInformation> CreateFromIdAsync(string deviceId, global::System.Collections.Generic.IEnumerable<string> additionalProperties);
        [global::Windows.Foundation.Metadata.Overload(@"FindAllAsync")]
        global::Windows.Foundation.IAsyncOperation<DeviceInformationCollection> FindAllAsync();
        [global::Windows.Foundation.Metadata.DefaultOverload]
        [global::Windows.Foundation.Metadata.Overload(@"FindAllAsyncDeviceClass")]
        global::Windows.Foundation.IAsyncOperation<DeviceInformationCollection> FindAllAsync(DeviceClass deviceClass);
        [global::Windows.Foundation.Metadata.Overload(@"FindAllAsyncAqsFilter")]
        global::Windows.Foundation.IAsyncOperation<DeviceInformationCollection> FindAllAsync(string aqsFilter);
        [global::Windows.Foundation.Metadata.Overload(@"FindAllAsyncAqsFilterAndAdditionalProperties")]
        global::Windows.Foundation.IAsyncOperation<DeviceInformationCollection> FindAllAsync(string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties);
        [global::Windows.Foundation.Metadata.Overload(@"CreateWatcher")]
        DeviceWatcher CreateWatcher();
        [global::Windows.Foundation.Metadata.DefaultOverload]
        [global::Windows.Foundation.Metadata.Overload(@"CreateWatcherDeviceClass")]
        DeviceWatcher CreateWatcher(DeviceClass deviceClass);
        [global::Windows.Foundation.Metadata.Overload(@"CreateWatcherAqsFilter")]
        DeviceWatcher CreateWatcher(string aqsFilter);
        [global::Windows.Foundation.Metadata.Overload(@"CreateWatcherAqsFilterAndAdditionalProperties")]
        DeviceWatcher CreateWatcher(string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("493B4F34-A84F-45FD-9167-15D1CB1BD1F9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformationStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceInformationStatics2
    {
        string GetAqsFilterFromDeviceClass(DeviceClass deviceClass);
        [global::Windows.Foundation.Metadata.Overload(@"CreateFromIdAsyncWithKindAndAdditionalProperties")]
        global::Windows.Foundation.IAsyncOperation<DeviceInformation> CreateFromIdAsync(string deviceId, global::System.Collections.Generic.IEnumerable<string> additionalProperties, DeviceInformationKind kind);
        [global::Windows.Foundation.Metadata.Overload(@"FindAllAsyncWithKindAqsFilterAndAdditionalProperties")]
        global::Windows.Foundation.IAsyncOperation<DeviceInformationCollection> FindAllAsync(string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties, DeviceInformationKind kind);
        [global::Windows.Foundation.Metadata.Overload(@"CreateWatcherWithKindAqsFilterAndAdditionalProperties")]
        DeviceWatcher CreateWatcher(string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties, DeviceInformationKind kind);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("25F06279-9364-5A6C-8A54-5D4A6D3D922A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformationStatics3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 1245184u)]
    internal interface IDeviceInformationStatics3
    {
        [global::Windows.Foundation.Metadata.Overload(@"CreateFromIdAsyncWithAdditionalPropertiesKindAndSettings")]
        global::Windows.Foundation.IAsyncOperation<DeviceInformation> CreateFromIdAsync(string deviceId, global::System.Collections.Generic.IEnumerable<string> additionalProperties, DeviceInformationKind kind, IDeviceEnumerationSettings settings);
        [global::Windows.Foundation.Metadata.Overload(@"FindAllAsyncWithAqsFilterAdditionalPropertiesKindAndSettings")]
        global::Windows.Foundation.IAsyncOperation<DeviceInformationCollection> FindAllAsync(string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties, DeviceInformationKind kind, IDeviceEnumerationSettings settings);
        [global::Windows.Foundation.Metadata.Overload(@"CreateWatcherWithAqsFilterAdditionalPropertiesKindAndSettings")]
        DeviceWatcher CreateWatcher(string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties, DeviceInformationKind kind, IDeviceEnumerationSettings settings);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("8F315305-D972-44B7-A37E-9E822C78213B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformationUpdate))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceInformationUpdate
    {
        string Id { get; }
        global::System.Collections.Generic.IReadOnlyDictionary<string, object> Properties { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("5D9D148C-A873-485E-BAA6-AA620788E3CC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceInformationUpdate2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceInformationUpdate2
    {
        DeviceInformationKind Kind { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("F717FC56-DE6B-487F-8376-0180ACA69963")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 131072u)]
    internal interface IDevicePairingRequestedEventArgs
    {
        [global::Windows.Foundation.Metadata.Overload(@"Accept")]
        void Accept();
        [global::Windows.Foundation.Metadata.Overload(@"AcceptWithPin")]
        void Accept(string pin);
        global::Windows.Foundation.Deferral GetDeferral();
        DeviceInformation DeviceInformation { get; }
        DevicePairingKinds PairingKind { get; }
        string Pin { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("C83752D9-E4D3-4DB0-A360-A105E437DBDC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 524288u)]
    internal interface IDevicePairingRequestedEventArgs2
    {
        void AcceptWithPasswordCredential(global::Windows.Security.Credentials.PasswordCredential passwordCredential);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("195E5A38-43DC-562F-BABE-EFC8B110088B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 1245184u)]
    internal interface IDevicePairingRequestedEventArgs3
    {
        void AcceptWithAddress(string address);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("072B02BF-DD95-4025-9B37-DE51ADBA37B7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDevicePairingResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDevicePairingResult
    {
        DevicePairingProtectionLevel ProtectionLevelUsed { get; }
        DevicePairingResultStatus Status { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("7FB42CFF-ECAC-5012-8D7D-A1894680A349")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDevicePairingSetMembersRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 1245184u)]
    internal interface IDevicePairingSetMembersRequestedEventArgs
    {
        global::System.Collections.Generic.IReadOnlyList<DeviceInformation> PairingSetMembers { get; }
        DeviceInformation ParentDeviceInformation { get; }
        DevicePairingAddPairingSetMemberStatus Status { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("482CB27C-83BB-420E-BE51-6602B222DE54")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDevicePairingSettings))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 131072u)]
    public interface IDevicePairingSettings
    {
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("84997AA2-034A-4440-8813-7D0BD479BF5A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDevicePicker))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDevicePicker
    {
        [global::Windows.Foundation.Metadata.Overload(@"Show")]
        void Show(global::Windows.Foundation.Rect selection);
        [global::Windows.Foundation.Metadata.Overload(@"ShowWithPlacement")]
        void Show(global::Windows.Foundation.Rect selection, global::Windows.UI.Popups.Placement placement);
        [global::Windows.Foundation.Metadata.Overload(@"PickSingleDeviceAsync")]
        global::Windows.Foundation.IAsyncOperation<DeviceInformation> PickSingleDeviceAsync(global::Windows.Foundation.Rect selection);
        [global::Windows.Foundation.Metadata.Overload(@"PickSingleDeviceAsyncWithPlacement")]
        global::Windows.Foundation.IAsyncOperation<DeviceInformation> PickSingleDeviceAsync(global::Windows.Foundation.Rect selection, global::Windows.UI.Popups.Placement placement);
        void Hide();
        void SetDisplayStatus(DeviceInformation device, string status, DevicePickerDisplayStatusOptions options);
        DevicePickerAppearance Appearance { get; }
        DevicePickerFilter Filter { get; }
        global::System.Collections.Generic.IList<string> RequestedProperties { get; }
        event global::Windows.Foundation.TypedEventHandler<DevicePicker, object> DevicePickerDismissed;
        event global::Windows.Foundation.TypedEventHandler<DevicePicker, DeviceSelectedEventArgs> DeviceSelected;
        event global::Windows.Foundation.TypedEventHandler<DevicePicker, DeviceDisconnectButtonClickedEventArgs> DisconnectButtonClicked;
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("E69A12C6-E627-4ED8-9B6C-460AF445E56D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearance))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDevicePickerAppearance
    {
        global::Windows.UI.Color AccentColor { get; set; }
        global::Windows.UI.Color BackgroundColor { get; set; }
        global::Windows.UI.Color ForegroundColor { get; set; }
        global::Windows.UI.Color SelectedAccentColor { get; set; }
        global::Windows.UI.Color SelectedBackgroundColor { get; set; }
        global::Windows.UI.Color SelectedForegroundColor { get; set; }
        string Title { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("91DB92A2-57CB-48F1-9B59-A59B7A1F02A2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDevicePickerFilter))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDevicePickerFilter
    {
        global::System.Collections.Generic.IList<DeviceClass> SupportedDeviceClasses { get; }
        global::System.Collections.Generic.IList<string> SupportedDeviceSelectors { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("269EDADE-1D2F-4940-8402-4156B81D3C77")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceSelectedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceSelectedEventArgs
    {
        DeviceInformation SelectedDevice { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("66F44AD3-79D9-444B-92CF-A92EF72571C7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceUnpairingResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 131072u)]
    internal interface IDeviceUnpairingResult
    {
        DeviceUnpairingResultStatus Status { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("C9EAB97D-8F6B-4F96-A9F4-ABC814E22271")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceWatcher))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceWatcher
    {
        void Start();
        void Stop();
        DeviceWatcherStatus Status { get; }
        event global::Windows.Foundation.TypedEventHandler<DeviceWatcher, DeviceInformation> Added;
        event global::Windows.Foundation.TypedEventHandler<DeviceWatcher, object> EnumerationCompleted;
        event global::Windows.Foundation.TypedEventHandler<DeviceWatcher, DeviceInformationUpdate> Removed;
        event global::Windows.Foundation.TypedEventHandler<DeviceWatcher, object> Stopped;
        event global::Windows.Foundation.TypedEventHandler<DeviceWatcher, DeviceInformationUpdate> Updated;
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("FF08456E-ED14-49E9-9A69-8117C54AE971")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceWatcher2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceWatcher2
    {
        global::Windows.ApplicationModel.Background.DeviceWatcherTrigger GetBackgroundTrigger(global::System.Collections.Generic.IEnumerable<DeviceWatcherEventKind> requestedEventKinds);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("74AA9C0B-1DBD-47FD-B635-3CC556D0FF8B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceWatcherEvent))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceWatcherEvent
    {
        DeviceInformation DeviceInformation { get; }
        DeviceInformationUpdate DeviceInformationUpdate { get; }
        DeviceWatcherEventKind Kind { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("38808119-4CB7-4E57-A56D-776D07CBFEF9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IDeviceWatcherTriggerDetails))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDeviceWatcherTriggerDetails
    {
        global::System.Collections.Generic.IReadOnlyList<DeviceWatcherEvent> DeviceWatcherEvents { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("42340A27-5810-459C-AABB-C65E1F813ECF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IEnclosureLocation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IEnclosureLocation
    {
        bool InDock { get; }
        bool InLid { get; }
        Panel Panel { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("2885995B-E07D-485D-8A9E-BDF29AEF4F66")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Enumeration.IEnclosureLocation2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 196608u)]
    internal interface IEnclosureLocation2
    {
        uint RotationAngleInDegreesClockwise { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<Panel>))][global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public enum Panel : int
    {
        Unknown = unchecked((int)0),
        Front = unchecked((int)0x1),
        Back = unchecked((int)0x2),
        Top = unchecked((int)0x3),
        Bottom = unchecked((int)0x4),
        Left = unchecked((int)0x5),
        Right = unchecked((int)0x6),
    }
}

#pragma warning disable CA1416
namespace ABI.Windows.Devices.Enumeration
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceAccessChangedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceAccessChangedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceAccessChangedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceAccessChangedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceAccessInformation
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceAccessInformation obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceAccessInformation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceAccessInformation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceAccessInformationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceAccessInformation FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceAccessInformation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceAccessInformation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessInformation>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceAccessInformation[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessInformation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessInformation>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceAccessInformation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessInformation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceAccessInformation[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessInformation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceAccessInformation[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessInformation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessInformation>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceAccessInformation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceAccessInformationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceAccessInformation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceConnectionChangeTriggerDetails
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceConnectionChangeTriggerDetailsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceConnectionChangeTriggerDetailsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceConnectionChangeTriggerDetailsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceDisconnectButtonClickedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceDisconnectButtonClickedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceDisconnectButtonClickedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceDisconnectButtonClickedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceInformation
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceInformation obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceInformation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceInformationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceInformation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceInformationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceInformation FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceInformation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceInformation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformation>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceInformation[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformation>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceInformation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceInformation[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceInformation[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformation>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceInformationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceInformation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceInformationCollection
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceInformationCollection obj) => obj is null ? null : MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Enumeration.DeviceInformation>>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceInformationCollection obj) => MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Enumeration.DeviceInformation>>.CreateMarshaler2(obj, global::ABI.System.Collections.Generic.IReadOnlyListMethods<global::Windows.Devices.Enumeration.DeviceInformation>.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceInformationCollection FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceInformationCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceInformationCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCollection>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceInformationCollection[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCollection>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceInformationCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceInformationCollection[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceInformationCollection[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceInformationCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceInformationCollection(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceInformationCustomPairing
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceInformationCustomPairing obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceInformationCustomPairingMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceInformationCustomPairing obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceInformationCustomPairingMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceInformationCustomPairing FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceInformationCustomPairing.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceInformationCustomPairing obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceInformationCustomPairing[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceInformationCustomPairing[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceInformationCustomPairing[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceInformationCustomPairing[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceInformationCustomPairingRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceInformationCustomPairing(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceInformationPairing
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceInformationPairing obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceInformationPairing>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceInformationPairing obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceInformationPairingMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceInformationPairing FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceInformationPairing.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceInformationPairing obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationPairing>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceInformationPairing[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationPairing>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationPairing>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceInformationPairing[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationPairing>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceInformationPairing[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationPairing>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceInformationPairing[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationPairing>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationPairing>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationPairing>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceInformationPairingRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceInformationPairing(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceInformationUpdate
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceInformationUpdate obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceInformationUpdate>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceInformationUpdateMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceInformationUpdate obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceInformationUpdateMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceInformationUpdate FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceInformationUpdate.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceInformationUpdate obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationUpdate>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceInformationUpdate[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationUpdate>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationUpdate>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceInformationUpdate[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationUpdate>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceInformationUpdate[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationUpdate>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceInformationUpdate[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationUpdate>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationUpdate>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceInformationUpdate>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceInformationUpdateRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceInformationUpdate(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DevicePairingRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DevicePairingRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DevicePairingResult
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DevicePairingResult obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DevicePairingResult>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDevicePairingResultMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DevicePairingResult obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDevicePairingResultMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DevicePairingResult FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DevicePairingResult.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DevicePairingResult obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingResult>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DevicePairingResult[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingResult>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingResult>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DevicePairingResult[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingResult>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DevicePairingResult[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingResult>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DevicePairingResult[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingResult>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingResult>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingResult>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DevicePairingResultRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DevicePairingResult(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DevicePairingSetMembersRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDevicePairingSetMembersRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDevicePairingSetMembersRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DevicePairingSetMembersRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DevicePicker
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DevicePicker obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DevicePicker>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DevicePicker obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDevicePickerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DevicePicker FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DevicePicker.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DevicePicker obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePicker>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DevicePicker[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePicker>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePicker>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DevicePicker[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePicker>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DevicePicker[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePicker>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DevicePicker[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePicker>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePicker>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePicker>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DevicePickerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DevicePicker(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DevicePickerAppearance
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DevicePickerAppearance obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DevicePickerAppearance>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DevicePickerAppearance obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDevicePickerAppearanceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DevicePickerAppearance FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DevicePickerAppearance.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DevicePickerAppearance obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerAppearance>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DevicePickerAppearance[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerAppearance>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerAppearance>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DevicePickerAppearance[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerAppearance>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DevicePickerAppearance[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerAppearance>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DevicePickerAppearance[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerAppearance>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerAppearance>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerAppearance>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DevicePickerAppearanceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DevicePickerAppearance(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DevicePickerFilter
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DevicePickerFilter obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DevicePickerFilter>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDevicePickerFilterMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DevicePickerFilter obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDevicePickerFilterMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DevicePickerFilter FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DevicePickerFilter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DevicePickerFilter obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerFilter>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DevicePickerFilter[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerFilter>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerFilter>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DevicePickerFilter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerFilter>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DevicePickerFilter[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerFilter>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DevicePickerFilter[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerFilter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerFilter>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DevicePickerFilter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DevicePickerFilterRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DevicePickerFilter(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceSelectedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceSelectedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceSelectedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceSelectedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceSelectedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceSelectedEventArgs FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceSelectedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceSelectedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceSelectedEventArgs[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceSelectedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceSelectedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceSelectedEventArgs[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceSelectedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceSelectedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceThumbnail
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceThumbnail obj) => obj is null ? null : MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStreamWithContentType>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceThumbnail obj) => MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStreamWithContentType>.CreateMarshaler2(obj, global::ABI.Windows.Storage.Streams.IRandomAccessStreamWithContentTypeMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceThumbnail FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceThumbnail.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceThumbnail obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceThumbnail>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceThumbnail[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceThumbnail>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceThumbnail>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceThumbnail[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceThumbnail>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceThumbnail[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceThumbnail>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceThumbnail[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceThumbnail>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceThumbnail>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceThumbnail>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceThumbnailRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceThumbnail(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceUnpairingResult
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceUnpairingResult obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceUnpairingResult>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceUnpairingResultMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceUnpairingResult obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceUnpairingResultMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceUnpairingResult FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceUnpairingResult.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceUnpairingResult obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceUnpairingResult>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceUnpairingResult[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceUnpairingResult>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceUnpairingResult>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceUnpairingResult[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceUnpairingResult>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceUnpairingResult[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceUnpairingResult>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceUnpairingResult[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceUnpairingResult>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceUnpairingResult>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceUnpairingResult>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceUnpairingResultRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceUnpairingResult(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceWatcher
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceWatcher obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceWatcher>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceWatcher obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceWatcherMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceWatcher FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceWatcher.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceWatcher obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcher>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceWatcher[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcher>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcher>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceWatcher[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcher>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceWatcher[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcher>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceWatcher[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcher>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcher>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcher>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceWatcherRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceWatcher(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceWatcherEvent
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceWatcherEvent obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceWatcherEvent>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceWatcherEventMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceWatcherEvent obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceWatcherEventMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceWatcherEvent FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceWatcherEvent.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceWatcherEvent obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherEvent>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceWatcherEvent[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherEvent>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherEvent>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceWatcherEvent[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherEvent>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceWatcherEvent[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherEvent>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceWatcherEvent[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherEvent>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherEvent>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherEvent>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceWatcherEventRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceWatcherEvent(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DeviceWatcherTriggerDetails
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IDeviceWatcherTriggerDetailsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IDeviceWatcherTriggerDetailsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DeviceWatcherTriggerDetailsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.DeviceWatcherTriggerDetails(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EnclosureLocation
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Enumeration.EnclosureLocation obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Enumeration.EnclosureLocation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Enumeration.IEnclosureLocationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Enumeration.EnclosureLocation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Enumeration.IEnclosureLocationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Enumeration.EnclosureLocation FromAbi(IntPtr thisPtr) => global::Windows.Devices.Enumeration.EnclosureLocation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Enumeration.EnclosureLocation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Enumeration.EnclosureLocation>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Enumeration.EnclosureLocation[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.EnclosureLocation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.EnclosureLocation>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Enumeration.EnclosureLocation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.EnclosureLocation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Enumeration.EnclosureLocation[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.EnclosureLocation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Enumeration.EnclosureLocation[] array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.EnclosureLocation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Enumeration.EnclosureLocation>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Enumeration.EnclosureLocation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EnclosureLocationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Enumeration.EnclosureLocation(inspectable.ObjRef);
    }
    internal static class IDeviceAccessChangedEventArgsMethods
    {

        internal static unsafe global::Windows.Devices.Enumeration.DeviceAccessStatus get_Status(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DeviceAccessStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DeviceAccessStatus*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCC, 0xB, 0xDA, 0xDE, 0x9D, 0x4F, 0x58, 0x4F, 0x9D, 0xBA, 0xA9, 0xBC, 0x80, 0x4, 0x8, 0xD5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DEDA0BCC-4F9D-4F58-9DBA-A9BC800408D5")]
    internal interface IDeviceAccessChangedEventArgs : global::Windows.Devices.Enumeration.IDeviceAccessChangedEventArgs
    {
    }
    internal static class IDeviceAccessChangedEventArgs2Methods
    {

        internal static unsafe string get_Id(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x62, 0x32, 0x52, 0x82, 0x4B, 0x93, 0x30, 0x4B, 0xA1, 0x78, 0xAD, 0xC3, 0x9F, 0x2F, 0x2B, 0xE3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("82523262-934B-4B30-A178-ADC39F2F2BE3")]
    internal interface IDeviceAccessChangedEventArgs2 : global::Windows.Devices.Enumeration.IDeviceAccessChangedEventArgs2
    {
    }
    internal static class IDeviceAccessChangedEventArgs3Methods
    {

        internal static unsafe bool get_UserPromptRequired(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x78, 0xA8, 0x80, 0x75, 0xD9, 0x7F, 0xD7, 0x5C, 0x85, 0x60, 0x3C, 0x64, 0x4B, 0x9B, 0x10, 0xDB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7580A878-7FD9-5CD7-8560-3C644B9B10DB")]
    internal interface IDeviceAccessChangedEventArgs3 : global::Windows.Devices.Enumeration.IDeviceAccessChangedEventArgs3
    {
    }
    internal static class IDeviceAccessInformationMethods
    {

        internal static unsafe global::Windows.Devices.Enumeration.DeviceAccessStatus get_CurrentStatus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DeviceAccessStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DeviceAccessStatus*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceAccessInformation, global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>>> _AccessChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceAccessInformation, global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>>> MakeAccessChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _AccessChanged_, new(), null);
            return _AccessChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceAccessInformation, global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>>> _AccessChanged => _AccessChanged_ ?? MakeAccessChangedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceAccessInformation, global::Windows.Devices.Enumeration.DeviceAccessChangedEventArgs>> Get_AccessChanged2(IObjectReference _obj, object _thisObj)
        {
            return _AccessChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_DeviceAccessInformation__global__Windows_Devices_Enumeration_DeviceAccessChangedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x73, 0x9A, 0xAA, 0xB, 0xE5, 0x6D, 0x15, 0x49, 0x8D, 0xDD, 0x9A, 0x5, 0x54, 0xA6, 0xF5, 0x45 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0BAA9A73-6DE5-4915-8DDD-9A0554A6F545")]
    internal interface IDeviceAccessInformation : global::Windows.Devices.Enumeration.IDeviceAccessInformation
    {
    }
    internal static class IDeviceAccessInformation2Methods
    {

        internal static unsafe bool get_UserPromptRequired(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF6, 0xDF, 0xB9, 0xE2, 0x8F, 0xE8, 0xA, 0x5D, 0x9C, 0x1E, 0xD7, 0x88, 0x80, 0x8D, 0xF4, 0x7B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E2B9DFF6-E88F-5D0A-9C1E-D788808DF47B")]
    internal interface IDeviceAccessInformation2 : global::Windows.Devices.Enumeration.IDeviceAccessInformation2
    {
    }
    internal static class IDeviceAccessInformationStaticsMethods
    {


        internal static unsafe global::Windows.Devices.Enumeration.DeviceAccessInformation CreateFromId(IObjectReference _obj, string deviceId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __deviceId = new(deviceId);
                fixed(void* ___deviceId = __deviceId)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __deviceId), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Windows.Devices.Enumeration.DeviceAccessInformation.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceAccessInformation.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DeviceAccessInformation CreateFromDeviceClassId(IObjectReference _obj, Guid deviceClassId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid, IntPtr*, int>**)ThisPtr)[7](ThisPtr, deviceClassId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceAccessInformation.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceAccessInformation.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DeviceAccessInformation CreateFromDeviceClass(IObjectReference _obj, global::Windows.Devices.Enumeration.DeviceClass deviceClass)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DeviceClass, IntPtr*, int>**)ThisPtr)[8](ThisPtr, deviceClass, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceAccessInformation.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceAccessInformation.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD3, 0xD3, 0x4B, 0x57, 0x30, 0x5F, 0xCD, 0x45, 0x8A, 0x94, 0x72, 0x4F, 0xE5, 0x97, 0x30, 0x84 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("574BD3D3-5F30-45CD-8A94-724FE5973084")]
    internal interface IDeviceAccessInformationStatics : global::Windows.Devices.Enumeration.IDeviceAccessInformationStatics
    {
    }
    internal static class IDeviceConnectionChangeTriggerDetailsMethods
    {

        internal static unsafe string get_DeviceId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC, 0x8C, 0x57, 0xB8, 0xC1, 0xBB, 0x4B, 0x48, 0xBF, 0xFA, 0x7B, 0x31, 0xDC, 0xC2, 0x0, 0xB2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B8578C0C-BBC1-484B-BFFA-7B31DCC200B2")]
    internal interface IDeviceConnectionChangeTriggerDetails : global::Windows.Devices.Enumeration.IDeviceConnectionChangeTriggerDetails
    {
    }
    internal static class IDeviceDisconnectButtonClickedEventArgsMethods
    {

        internal static unsafe global::Windows.Devices.Enumeration.DeviceInformation get_Device(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceInformation.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceInformation.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6D, 0xB5, 0x44, 0x8E, 0x2, 0xF9, 0x0, 0x4A, 0xB5, 0x36, 0xF3, 0x79, 0x92, 0xE6, 0xA2, 0xA7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8E44B56D-F902-4A00-B536-F37992E6A2A7")]
    internal interface IDeviceDisconnectButtonClickedEventArgs : global::Windows.Devices.Enumeration.IDeviceDisconnectButtonClickedEventArgs
    {
    }
    public static class IDeviceEnumerationSettingsMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x66, 0xF, 0x71, 0xF7, 0xF3, 0x9F, 0xC8, 0x41, 0x85, 0xEB, 0x87, 0xF8, 0x11, 0x48, 0xA3, 0xF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IDeviceEnumerationSettings.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("F7710F66-9FF3-41C8-85EB-87F81148A30F")]
    internal unsafe interface IDeviceEnumerationSettings : global::Windows.Devices.Enumeration.IDeviceEnumerationSettings
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IDeviceEnumerationSettings()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IDeviceEnumerationSettings), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 0);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;

        }

    }

    internal static class IDeviceInformationMethods
    {


        internal static unsafe void Update(IObjectReference _obj, global::Windows.Devices.Enumeration.DeviceInformationUpdate updateInfo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __updateInfo = default;
            try
            {
                __updateInfo = global::ABI.Windows.Devices.Enumeration.DeviceInformationUpdate.CreateMarshaler2(updateInfo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__updateInfo)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__updateInfo);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceThumbnail> GetThumbnailAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceThumbnail.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceThumbnail>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceThumbnail>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceThumbnail> GetGlyphThumbnailAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceThumbnail.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceThumbnail>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceThumbnail>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Windows.Devices.Enumeration.EnclosureLocation get_EnclosureLocation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.EnclosureLocation.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.EnclosureLocation.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_Id(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe bool get_IsDefault(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyDictionary<string, object> get_Properties(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__object.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, object>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, object>>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x95, 0xFB, 0xA0, 0xAB, 0x98, 0x43, 0x9D, 0x48, 0x8E, 0x44, 0xE6, 0x13, 0x9, 0x27, 0x1, 0x1F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("ABA0FB95-4398-489D-8E44-E6130927011F")]
    internal interface IDeviceInformation : global::Windows.Devices.Enumeration.IDeviceInformation
    {
    }
    internal static class IDeviceInformation2Methods
    {

        internal static unsafe global::Windows.Devices.Enumeration.DeviceInformationKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DeviceInformationKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DeviceInformationKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Devices.Enumeration.DeviceInformationPairing get_Pairing(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceInformationPairing.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceInformationPairing.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x38, 0xA6, 0x56, 0xF1, 0x97, 0x79, 0xD9, 0x48, 0xA1, 0xC, 0x26, 0x9D, 0x46, 0x53, 0x3F, 0x48 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F156A638-7997-48D9-A10C-269D46533F48")]
    internal interface IDeviceInformation2 : global::Windows.Devices.Enumeration.IDeviceInformation2
    {
    }
    internal static class IDeviceInformationCustomPairingMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult> PairAsync(IObjectReference _obj, global::Windows.Devices.Enumeration.DevicePairingKinds pairingKindsSupported)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DevicePairingKinds, IntPtr*, int>**)ThisPtr)[6](ThisPtr, pairingKindsSupported, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DevicePairingResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult> PairAsync(IObjectReference _obj, global::Windows.Devices.Enumeration.DevicePairingKinds pairingKindsSupported, global::Windows.Devices.Enumeration.DevicePairingProtectionLevel minProtectionLevel)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DevicePairingKinds, global::Windows.Devices.Enumeration.DevicePairingProtectionLevel, IntPtr*, int>**)ThisPtr)[7](ThisPtr, pairingKindsSupported, minProtectionLevel, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DevicePairingResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult> PairAsync(IObjectReference _obj, global::Windows.Devices.Enumeration.DevicePairingKinds pairingKindsSupported, global::Windows.Devices.Enumeration.DevicePairingProtectionLevel minProtectionLevel, global::Windows.Devices.Enumeration.IDevicePairingSettings devicePairingSettings)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __devicePairingSettings = default;
            IntPtr __retval = default;
            try
            {
                __devicePairingSettings = MarshalInterface<global::Windows.Devices.Enumeration.IDevicePairingSettings>.CreateMarshaler2(devicePairingSettings, global::ABI.Windows.Devices.Enumeration.IDevicePairingSettingsMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DevicePairingKinds, global::Windows.Devices.Enumeration.DevicePairingProtectionLevel, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, pairingKindsSupported, minProtectionLevel, MarshalInspectable<object>.GetAbi(__devicePairingSettings), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DevicePairingResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__devicePairingSettings);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult>>.DisposeAbi(__retval);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing, global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>>> _PairingRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing, global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>>> MakePairingRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PairingRequested_, new(), null);
            return _PairingRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing, global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>>> _PairingRequested => _PairingRequested_ ?? MakePairingRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing, global::Windows.Devices.Enumeration.DevicePairingRequestedEventArgs>> Get_PairingRequested2(IObjectReference _obj, object _thisObj)
        {
            return _PairingRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_DeviceInformationCustomPairing__global__Windows_Devices_Enumeration_DevicePairingRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2, 0x8C, 0x13, 0x85, 0xE6, 0x4E, 0x14, 0x49, 0x83, 0x70, 0x10, 0x7A, 0x39, 0x14, 0x4C, 0xE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("85138C02-4EE6-4914-8370-107A39144C0E")]
    internal interface IDeviceInformationCustomPairing : global::Windows.Devices.Enumeration.IDeviceInformationCustomPairing
    {
    }
    internal static class IDeviceInformationCustomPairing2Methods
    {


        internal static unsafe void AddPairingSetMember(IObjectReference _obj, global::Windows.Devices.Enumeration.DeviceInformation device)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __device = default;
            try
            {
                __device = global::ABI.Windows.Devices.Enumeration.DeviceInformation.CreateMarshaler2(device);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__device)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__device);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing, global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>>> _PairingSetMembersRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing, global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>>> MakePairingSetMembersRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PairingSetMembersRequested_, new(), null);
            return _PairingSetMembersRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing, global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>>> _PairingSetMembersRequested => _PairingSetMembersRequested_ ?? MakePairingSetMembersRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceInformationCustomPairing, global::Windows.Devices.Enumeration.DevicePairingSetMembersRequestedEventArgs>> Get_PairingSetMembersRequested2(IObjectReference _obj, object _thisObj)
        {
            return _PairingSetMembersRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_DeviceInformationCustomPairing__global__Windows_Devices_Enumeration_DevicePairingSetMembersRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[7],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[8],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x62, 0xA6, 0xBD, 0xE, 0x96, 0xE6, 0xA9, 0x5F, 0x8F, 0x72, 0x80, 0xCF, 0xEB, 0xCD, 0x85, 0x1D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0EBDA662-E696-5FA9-8F72-80CFEBCD851D")]
    internal interface IDeviceInformationCustomPairing2 : global::Windows.Devices.Enumeration.IDeviceInformationCustomPairing2
    {
    }
    internal static class IDeviceInformationPairingMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult> PairAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DevicePairingResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult> PairAsync(IObjectReference _obj, global::Windows.Devices.Enumeration.DevicePairingProtectionLevel minProtectionLevel)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DevicePairingProtectionLevel, IntPtr*, int>**)ThisPtr)[9](ThisPtr, minProtectionLevel, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DevicePairingResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_CanPair(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsPaired(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF5, 0x69, 0x47, 0x2C, 0x84, 0xF6, 0xD5, 0x40, 0x84, 0x69, 0xE8, 0xDB, 0xAA, 0xB7, 0x4, 0x85 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2C4769F5-F684-40D5-8469-E8DBAAB70485")]
    internal interface IDeviceInformationPairing : global::Windows.Devices.Enumeration.IDeviceInformationPairing
    {
    }
    internal static class IDeviceInformationPairing2Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult> PairAsync(IObjectReference _obj, global::Windows.Devices.Enumeration.DevicePairingProtectionLevel minProtectionLevel, global::Windows.Devices.Enumeration.IDevicePairingSettings devicePairingSettings)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __devicePairingSettings = default;
            IntPtr __retval = default;
            try
            {
                __devicePairingSettings = MarshalInterface<global::Windows.Devices.Enumeration.IDevicePairingSettings>.CreateMarshaler2(devicePairingSettings, global::ABI.Windows.Devices.Enumeration.IDevicePairingSettingsMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DevicePairingProtectionLevel, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, minProtectionLevel, MarshalInspectable<object>.GetAbi(__devicePairingSettings), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DevicePairingResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__devicePairingSettings);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DevicePairingResult>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceUnpairingResult> UnpairAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceUnpairingResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceUnpairingResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceUnpairingResult>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Windows.Devices.Enumeration.DeviceInformationCustomPairing get_Custom(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceInformationCustomPairing.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceInformationCustomPairing.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DevicePairingProtectionLevel get_ProtectionLevel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DevicePairingProtectionLevel __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DevicePairingProtectionLevel*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFD, 0x12, 0x86, 0xF6, 0xEE, 0xA, 0x28, 0x43, 0x85, 0xCC, 0x1C, 0x74, 0x2B, 0xB1, 0x79, 0xD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F68612FD-0AEE-4328-85CC-1C742BB1790D")]
    internal interface IDeviceInformationPairing2 : global::Windows.Devices.Enumeration.IDeviceInformationPairing2
    {
    }
    internal static class IDeviceInformationPairingStaticsMethods
    {


        internal static unsafe bool TryRegisterForAllInboundPairingRequests(IObjectReference _obj, global::Windows.Devices.Enumeration.DevicePairingKinds pairingKindsSupported)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DevicePairingKinds, byte*, int>**)ThisPtr)[6](ThisPtr, pairingKindsSupported, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8, 0xC4, 0x15, 0xE9, 0xD4, 0x36, 0xA1, 0x49, 0xBF, 0x13, 0x51, 0x41, 0x73, 0x79, 0x9B, 0x6B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E915C408-36D4-49A1-BF13-514173799B6B")]
    internal interface IDeviceInformationPairingStatics : global::Windows.Devices.Enumeration.IDeviceInformationPairingStatics
    {
    }
    internal static class IDeviceInformationPairingStatics2Methods
    {


        internal static unsafe bool TryRegisterForAllInboundPairingRequestsWithProtectionLevel(IObjectReference _obj, global::Windows.Devices.Enumeration.DevicePairingKinds pairingKindsSupported, global::Windows.Devices.Enumeration.DevicePairingProtectionLevel minProtectionLevel)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DevicePairingKinds, global::Windows.Devices.Enumeration.DevicePairingProtectionLevel, byte*, int>**)ThisPtr)[6](ThisPtr, pairingKindsSupported, minProtectionLevel, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x72, 0x53, 0xDE, 0x4, 0xB7, 0xB7, 0x6B, 0x47, 0xA7, 0x4F, 0xC5, 0x83, 0x6A, 0x70, 0x4D, 0x98 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("04DE5372-B7B7-476B-A74F-C5836A704D98")]
    internal interface IDeviceInformationPairingStatics2 : global::Windows.Devices.Enumeration.IDeviceInformationPairingStatics2
    {
    }
    internal static class IDeviceInformationStaticsMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation> CreateFromIdAsync(IObjectReference _obj, string deviceId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __deviceId = new(deviceId);
                fixed(void* ___deviceId = __deviceId)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __deviceId), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceInformation.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation> CreateFromIdAsync(IObjectReference _obj, string deviceId, global::System.Collections.Generic.IEnumerable<string> additionalProperties)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __additionalProperties = default;
            IntPtr __retval = default;
            try
            {
                __additionalProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(additionalProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                MarshalString.Pinnable __deviceId = new(deviceId);
                fixed(void* ___deviceId = __deviceId)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __deviceId), MarshalInspectable<object>.GetAbi(__additionalProperties), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceInformation.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__additionalProperties);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection> FindAllAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceInformationCollection.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection> FindAllAsync(IObjectReference _obj, global::Windows.Devices.Enumeration.DeviceClass deviceClass)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DeviceClass, IntPtr*, int>**)ThisPtr)[9](ThisPtr, deviceClass, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceInformationCollection.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection> FindAllAsync(IObjectReference _obj, string aqsFilter)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __aqsFilter = new(aqsFilter);
                fixed(void* ___aqsFilter = __aqsFilter)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, MarshalString.GetAbi(ref __aqsFilter), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceInformationCollection.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection> FindAllAsync(IObjectReference _obj, string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __additionalProperties = default;
            IntPtr __retval = default;
            try
            {
                __additionalProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(additionalProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                MarshalString.Pinnable __aqsFilter = new(aqsFilter);
                fixed(void* ___aqsFilter = __aqsFilter)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __aqsFilter), MarshalInspectable<object>.GetAbi(__additionalProperties), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceInformationCollection.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__additionalProperties);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DeviceWatcher CreateWatcher(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceWatcher.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceWatcher.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DeviceWatcher CreateWatcher(IObjectReference _obj, global::Windows.Devices.Enumeration.DeviceClass deviceClass)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DeviceClass, IntPtr*, int>**)ThisPtr)[13](ThisPtr, deviceClass, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceWatcher.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceWatcher.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DeviceWatcher CreateWatcher(IObjectReference _obj, string aqsFilter)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __aqsFilter = new(aqsFilter);
                fixed(void* ___aqsFilter = __aqsFilter)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, MarshalString.GetAbi(ref __aqsFilter), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Windows.Devices.Enumeration.DeviceWatcher.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceWatcher.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DeviceWatcher CreateWatcher(IObjectReference _obj, string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __additionalProperties = default;
            IntPtr __retval = default;
            try
            {
                __additionalProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(additionalProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                MarshalString.Pinnable __aqsFilter = new(aqsFilter);
                fixed(void* ___aqsFilter = __aqsFilter)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, MarshalString.GetAbi(ref __aqsFilter), MarshalInspectable<object>.GetAbi(__additionalProperties), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Windows.Devices.Enumeration.DeviceWatcher.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__additionalProperties);
                global::ABI.Windows.Devices.Enumeration.DeviceWatcher.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE, 0x10, 0x7F, 0xC1, 0x46, 0x3A, 0x78, 0x4A, 0x80, 0x13, 0x76, 0x9D, 0xC9, 0xB9, 0x73, 0x90 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C17F100E-3A46-4A78-8013-769DC9B97390")]
    internal interface IDeviceInformationStatics : global::Windows.Devices.Enumeration.IDeviceInformationStatics
    {
    }
    internal static class IDeviceInformationStatics2Methods
    {


        internal static unsafe string GetAqsFilterFromDeviceClass(IObjectReference _obj, global::Windows.Devices.Enumeration.DeviceClass deviceClass)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DeviceClass, IntPtr*, int>**)ThisPtr)[6](ThisPtr, deviceClass, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation> CreateFromIdAsync(IObjectReference _obj, string deviceId, global::System.Collections.Generic.IEnumerable<string> additionalProperties, global::Windows.Devices.Enumeration.DeviceInformationKind kind)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __additionalProperties = default;
            IntPtr __retval = default;
            try
            {
                __additionalProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(additionalProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                MarshalString.Pinnable __deviceId = new(deviceId);
                fixed(void* ___deviceId = __deviceId)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Devices.Enumeration.DeviceInformationKind, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __deviceId), MarshalInspectable<object>.GetAbi(__additionalProperties), kind, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceInformation.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__additionalProperties);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection> FindAllAsync(IObjectReference _obj, string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties, global::Windows.Devices.Enumeration.DeviceInformationKind kind)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __additionalProperties = default;
            IntPtr __retval = default;
            try
            {
                __additionalProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(additionalProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                MarshalString.Pinnable __aqsFilter = new(aqsFilter);
                fixed(void* ___aqsFilter = __aqsFilter)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Devices.Enumeration.DeviceInformationKind, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __aqsFilter), MarshalInspectable<object>.GetAbi(__additionalProperties), kind, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceInformationCollection.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__additionalProperties);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DeviceWatcher CreateWatcher(IObjectReference _obj, string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties, global::Windows.Devices.Enumeration.DeviceInformationKind kind)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __additionalProperties = default;
            IntPtr __retval = default;
            try
            {
                __additionalProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(additionalProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                MarshalString.Pinnable __aqsFilter = new(aqsFilter);
                fixed(void* ___aqsFilter = __aqsFilter)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Devices.Enumeration.DeviceInformationKind, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __aqsFilter), MarshalInspectable<object>.GetAbi(__additionalProperties), kind, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Windows.Devices.Enumeration.DeviceWatcher.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__additionalProperties);
                global::ABI.Windows.Devices.Enumeration.DeviceWatcher.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x34, 0x4F, 0x3B, 0x49, 0x4F, 0xA8, 0xFD, 0x45, 0x91, 0x67, 0x15, 0xD1, 0xCB, 0x1B, 0xD1, 0xF9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("493B4F34-A84F-45FD-9167-15D1CB1BD1F9")]
    internal interface IDeviceInformationStatics2 : global::Windows.Devices.Enumeration.IDeviceInformationStatics2
    {
    }
    internal static class IDeviceInformationStatics3Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation> CreateFromIdAsync(IObjectReference _obj, string deviceId, global::System.Collections.Generic.IEnumerable<string> additionalProperties, global::Windows.Devices.Enumeration.DeviceInformationKind kind, global::Windows.Devices.Enumeration.IDeviceEnumerationSettings settings)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __additionalProperties = default;
            ObjectReferenceValue __settings = default;
            IntPtr __retval = default;
            try
            {
                __additionalProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(additionalProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                __settings = MarshalInterface<global::Windows.Devices.Enumeration.IDeviceEnumerationSettings>.CreateMarshaler2(settings, global::ABI.Windows.Devices.Enumeration.IDeviceEnumerationSettingsMethods.IID);
                MarshalString.Pinnable __deviceId = new(deviceId);
                fixed(void* ___deviceId = __deviceId)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Devices.Enumeration.DeviceInformationKind, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __deviceId), MarshalInspectable<object>.GetAbi(__additionalProperties), kind, MarshalInspectable<object>.GetAbi(__settings), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceInformation.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__additionalProperties);
                MarshalInspectable<object>.DisposeMarshaler(__settings);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection> FindAllAsync(IObjectReference _obj, string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties, global::Windows.Devices.Enumeration.DeviceInformationKind kind, global::Windows.Devices.Enumeration.IDeviceEnumerationSettings settings)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __additionalProperties = default;
            ObjectReferenceValue __settings = default;
            IntPtr __retval = default;
            try
            {
                __additionalProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(additionalProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                __settings = MarshalInterface<global::Windows.Devices.Enumeration.IDeviceEnumerationSettings>.CreateMarshaler2(settings, global::ABI.Windows.Devices.Enumeration.IDeviceEnumerationSettingsMethods.IID);
                MarshalString.Pinnable __aqsFilter = new(aqsFilter);
                fixed(void* ___aqsFilter = __aqsFilter)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Devices.Enumeration.DeviceInformationKind, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __aqsFilter), MarshalInspectable<object>.GetAbi(__additionalProperties), kind, MarshalInspectable<object>.GetAbi(__settings), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceInformationCollection.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__additionalProperties);
                MarshalInspectable<object>.DisposeMarshaler(__settings);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformationCollection>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DeviceWatcher CreateWatcher(IObjectReference _obj, string aqsFilter, global::System.Collections.Generic.IEnumerable<string> additionalProperties, global::Windows.Devices.Enumeration.DeviceInformationKind kind, global::Windows.Devices.Enumeration.IDeviceEnumerationSettings settings)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __additionalProperties = default;
            ObjectReferenceValue __settings = default;
            IntPtr __retval = default;
            try
            {
                __additionalProperties = MarshalInterface<global::System.Collections.Generic.IEnumerable<string>>.CreateMarshaler2(additionalProperties, global::ABI.System.Collections.Generic.IEnumerableMethods<string>.IID);
                __settings = MarshalInterface<global::Windows.Devices.Enumeration.IDeviceEnumerationSettings>.CreateMarshaler2(settings, global::ABI.Windows.Devices.Enumeration.IDeviceEnumerationSettingsMethods.IID);
                MarshalString.Pinnable __aqsFilter = new(aqsFilter);
                fixed(void* ___aqsFilter = __aqsFilter)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Devices.Enumeration.DeviceInformationKind, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __aqsFilter), MarshalInspectable<object>.GetAbi(__additionalProperties), kind, MarshalInspectable<object>.GetAbi(__settings), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Windows.Devices.Enumeration.DeviceWatcher.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__additionalProperties);
                MarshalInspectable<object>.DisposeMarshaler(__settings);
                global::ABI.Windows.Devices.Enumeration.DeviceWatcher.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x79, 0x62, 0xF0, 0x25, 0x64, 0x93, 0x6C, 0x5A, 0x8A, 0x54, 0x5D, 0x4A, 0x6D, 0x3D, 0x92, 0x2A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("25F06279-9364-5A6C-8A54-5D4A6D3D922A")]
    internal interface IDeviceInformationStatics3 : global::Windows.Devices.Enumeration.IDeviceInformationStatics3
    {
    }
    internal static class IDeviceInformationUpdateMethods
    {

        internal static unsafe string get_Id(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyDictionary<string, object> get_Properties(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__object.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, object>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyDictionary<string, object>>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5, 0x53, 0x31, 0x8F, 0x72, 0xD9, 0xB7, 0x44, 0xA3, 0x7E, 0x9E, 0x82, 0x2C, 0x78, 0x21, 0x3B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8F315305-D972-44B7-A37E-9E822C78213B")]
    internal interface IDeviceInformationUpdate : global::Windows.Devices.Enumeration.IDeviceInformationUpdate
    {
    }
    internal static class IDeviceInformationUpdate2Methods
    {

        internal static unsafe global::Windows.Devices.Enumeration.DeviceInformationKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DeviceInformationKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DeviceInformationKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8C, 0x14, 0x9D, 0x5D, 0x73, 0xA8, 0x5E, 0x48, 0xBA, 0xA6, 0xAA, 0x62, 0x7, 0x88, 0xE3, 0xCC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5D9D148C-A873-485E-BAA6-AA620788E3CC")]
    internal interface IDeviceInformationUpdate2 : global::Windows.Devices.Enumeration.IDeviceInformationUpdate2
    {
    }
    internal static class IDevicePairingRequestedEventArgsMethods
    {


        internal static unsafe void Accept(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[9](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Accept(IObjectReference _obj, string pin)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __pin = new(pin);
            fixed(void* ___pin = __pin)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalString.GetAbi(ref __pin)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Windows.Foundation.Deferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Windows.Devices.Enumeration.DeviceInformation get_DeviceInformation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceInformation.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceInformation.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DevicePairingKinds get_PairingKind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DevicePairingKinds __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DevicePairingKinds*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_Pin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x56, 0xFC, 0x17, 0xF7, 0x6B, 0xDE, 0x7F, 0x48, 0x83, 0x76, 0x1, 0x80, 0xAC, 0xA6, 0x99, 0x63 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F717FC56-DE6B-487F-8376-0180ACA69963")]
    internal interface IDevicePairingRequestedEventArgs : global::Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs
    {
    }
    internal static class IDevicePairingRequestedEventArgs2Methods
    {


        internal static unsafe void AcceptWithPasswordCredential(IObjectReference _obj, global::Windows.Security.Credentials.PasswordCredential passwordCredential)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __passwordCredential = default;
            try
            {
                __passwordCredential = global::ABI.Windows.Security.Credentials.PasswordCredential.CreateMarshaler2(passwordCredential);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__passwordCredential)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__passwordCredential);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD9, 0x52, 0x37, 0xC8, 0xD3, 0xE4, 0xB0, 0x4D, 0xA3, 0x60, 0xA1, 0x5, 0xE4, 0x37, 0xDB, 0xDC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C83752D9-E4D3-4DB0-A360-A105E437DBDC")]
    internal interface IDevicePairingRequestedEventArgs2 : global::Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs2
    {
    }
    internal static class IDevicePairingRequestedEventArgs3Methods
    {


        internal static unsafe void AcceptWithAddress(IObjectReference _obj, string address)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __address = new(address);
            fixed(void* ___address = __address)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __address)));
                global::System.GC.KeepAlive(_obj);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x38, 0x5A, 0x5E, 0x19, 0xDC, 0x43, 0x2F, 0x56, 0xBA, 0xBE, 0xEF, 0xC8, 0xB1, 0x10, 0x8, 0x8B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("195E5A38-43DC-562F-BABE-EFC8B110088B")]
    internal interface IDevicePairingRequestedEventArgs3 : global::Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs3
    {
    }
    internal static class IDevicePairingResultMethods
    {

        internal static unsafe global::Windows.Devices.Enumeration.DevicePairingProtectionLevel get_ProtectionLevelUsed(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DevicePairingProtectionLevel __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DevicePairingProtectionLevel*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Devices.Enumeration.DevicePairingResultStatus get_Status(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DevicePairingResultStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DevicePairingResultStatus*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBF, 0x2, 0x2B, 0x7, 0x95, 0xDD, 0x25, 0x40, 0x9B, 0x37, 0xDE, 0x51, 0xAD, 0xBA, 0x37, 0xB7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("072B02BF-DD95-4025-9B37-DE51ADBA37B7")]
    internal interface IDevicePairingResult : global::Windows.Devices.Enumeration.IDevicePairingResult
    {
    }
    internal static class IDevicePairingSetMembersRequestedEventArgsMethods
    {

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Enumeration.DeviceInformation> get_PairingSetMembers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Devices_Enumeration_DeviceInformation.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Enumeration.DeviceInformation>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Enumeration.DeviceInformation>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DeviceInformation get_ParentDeviceInformation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceInformation.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceInformation.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DevicePairingAddPairingSetMemberStatus get_Status(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DevicePairingAddPairingSetMemberStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DevicePairingAddPairingSetMemberStatus*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFF, 0x2C, 0xB4, 0x7F, 0xAC, 0xEC, 0x12, 0x50, 0x8D, 0x7D, 0xA1, 0x89, 0x46, 0x80, 0xA3, 0x49 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7FB42CFF-ECAC-5012-8D7D-A1894680A349")]
    internal interface IDevicePairingSetMembersRequestedEventArgs : global::Windows.Devices.Enumeration.IDevicePairingSetMembersRequestedEventArgs
    {
    }
    public static class IDevicePairingSettingsMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7C, 0xB2, 0x2C, 0x48, 0xBB, 0x83, 0xE, 0x42, 0xBE, 0x51, 0x66, 0x2, 0xB2, 0x22, 0xDE, 0x54 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IDevicePairingSettings.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("482CB27C-83BB-420E-BE51-6602B222DE54")]
    internal unsafe interface IDevicePairingSettings : global::Windows.Devices.Enumeration.IDevicePairingSettings
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IDevicePairingSettings()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IDevicePairingSettings), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 0);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;

        }

    }

    internal static class IDevicePickerMethods
    {


        internal static unsafe void Show(IObjectReference _obj, global::Windows.Foundation.Rect selection)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, int>**)ThisPtr)[15](ThisPtr, selection));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Show(IObjectReference _obj, global::Windows.Foundation.Rect selection, global::Windows.UI.Popups.Placement placement)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, global::Windows.UI.Popups.Placement, int>**)ThisPtr)[16](ThisPtr, selection, placement));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation> PickSingleDeviceAsync(IObjectReference _obj, global::Windows.Foundation.Rect selection)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, IntPtr*, int>**)ThisPtr)[17](ThisPtr, selection, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceInformation.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation> PickSingleDeviceAsync(IObjectReference _obj, global::Windows.Foundation.Rect selection, global::Windows.UI.Popups.Placement placement)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect, global::Windows.UI.Popups.Placement, IntPtr*, int>**)ThisPtr)[18](ThisPtr, selection, placement, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceInformation.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceInformation>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe void Hide(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[19](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetDisplayStatus(IObjectReference _obj, global::Windows.Devices.Enumeration.DeviceInformation device, string status, global::Windows.Devices.Enumeration.DevicePickerDisplayStatusOptions options)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __device = default;
            try
            {
                __device = global::ABI.Windows.Devices.Enumeration.DeviceInformation.CreateMarshaler2(device);
                MarshalString.Pinnable __status = new(status);
                fixed(void* ___status = __status)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Devices.Enumeration.DevicePickerDisplayStatusOptions, int>**)ThisPtr)[20](ThisPtr, MarshalInspectable<object>.GetAbi(__device), MarshalString.GetAbi(ref __status), options));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__device);
            }
        }
        internal static unsafe global::Windows.Devices.Enumeration.DevicePickerAppearance get_Appearance(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DevicePickerAppearance.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DevicePickerAppearance.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DevicePickerFilter get_Filter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DevicePickerFilter.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DevicePickerFilter.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<string> get_RequestedProperties(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<string>>.DisposeAbi(__retval);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, object>>> _DevicePickerDismissed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, object>>> MakeDevicePickerDismissedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DevicePickerDismissed_, new(), null);
            return _DevicePickerDismissed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, object>>> _DevicePickerDismissed => _DevicePickerDismissed_ ?? MakeDevicePickerDismissedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, object>> Get_DevicePickerDismissed2(IObjectReference _obj, object _thisObj)
        {
            return _DevicePickerDismissed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_DevicePicker__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[13],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[14],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>>> _DeviceSelected_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>>> MakeDeviceSelectedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DeviceSelected_, new(), null);
            return _DeviceSelected_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>>> _DeviceSelected => _DeviceSelected_ ?? MakeDeviceSelectedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, global::Windows.Devices.Enumeration.DeviceSelectedEventArgs>> Get_DeviceSelected2(IObjectReference _obj, object _thisObj)
        {
            return _DeviceSelected.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_DevicePicker__global__Windows_Devices_Enumeration_DeviceSelectedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>>> _DisconnectButtonClicked_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>>> MakeDisconnectButtonClickedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DisconnectButtonClicked_, new(), null);
            return _DisconnectButtonClicked_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>>> _DisconnectButtonClicked => _DisconnectButtonClicked_ ?? MakeDisconnectButtonClickedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DevicePicker, global::Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>> Get_DisconnectButtonClicked2(IObjectReference _obj, object _thisObj)
        {
            return _DisconnectButtonClicked.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_DevicePicker__global__Windows_Devices_Enumeration_DeviceDisconnectButtonClickedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[11],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                2);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA2, 0x7A, 0x99, 0x84, 0x4A, 0x3, 0x40, 0x44, 0x88, 0x13, 0x7D, 0xB, 0xD4, 0x79, 0xBF, 0x5A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("84997AA2-034A-4440-8813-7D0BD479BF5A")]
    internal interface IDevicePicker : global::Windows.Devices.Enumeration.IDevicePicker
    {
    }
    internal static class IDevicePickerAppearanceMethods
    {

        internal static unsafe global::Windows.UI.Color get_AccentColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_AccentColor(IObjectReference _obj, global::Windows.UI.Color value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.UI.Color get_BackgroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_BackgroundColor(IObjectReference _obj, global::Windows.UI.Color value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.UI.Color get_ForegroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ForegroundColor(IObjectReference _obj, global::Windows.UI.Color value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.UI.Color get_SelectedAccentColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SelectedAccentColor(IObjectReference _obj, global::Windows.UI.Color value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color, int>**)ThisPtr)[19](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.UI.Color get_SelectedBackgroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SelectedBackgroundColor(IObjectReference _obj, global::Windows.UI.Color value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color, int>**)ThisPtr)[17](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.UI.Color get_SelectedForegroundColor(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SelectedForegroundColor(IObjectReference _obj, global::Windows.UI.Color value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_Title(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Title(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC6, 0x12, 0x9A, 0xE6, 0x27, 0xE6, 0xD8, 0x4E, 0x9B, 0x6C, 0x46, 0xA, 0xF4, 0x45, 0xE5, 0x6D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E69A12C6-E627-4ED8-9B6C-460AF445E56D")]
    internal interface IDevicePickerAppearance : global::Windows.Devices.Enumeration.IDevicePickerAppearance
    {
    }
    internal static class IDevicePickerFilterMethods
    {

        internal static unsafe global::System.Collections.Generic.IList<global::Windows.Devices.Enumeration.DeviceClass> get_SupportedDeviceClasses(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Windows_Devices_Enumeration_DeviceClass.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Windows.Devices.Enumeration.DeviceClass>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Windows.Devices.Enumeration.DeviceClass>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<string> get_SupportedDeviceSelectors(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<string>>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA2, 0x92, 0xDB, 0x91, 0xCB, 0x57, 0xF1, 0x48, 0x9B, 0x59, 0xA5, 0x9B, 0x7A, 0x1F, 0x2, 0xA2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("91DB92A2-57CB-48F1-9B59-A59B7A1F02A2")]
    internal interface IDevicePickerFilter : global::Windows.Devices.Enumeration.IDevicePickerFilter
    {
    }
    internal static class IDeviceSelectedEventArgsMethods
    {

        internal static unsafe global::Windows.Devices.Enumeration.DeviceInformation get_SelectedDevice(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceInformation.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceInformation.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDE, 0xDA, 0x9E, 0x26, 0x2F, 0x1D, 0x40, 0x49, 0x84, 0x2, 0x41, 0x56, 0xB8, 0x1D, 0x3C, 0x77 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("269EDADE-1D2F-4940-8402-4156B81D3C77")]
    internal interface IDeviceSelectedEventArgs : global::Windows.Devices.Enumeration.IDeviceSelectedEventArgs
    {
    }
    internal static class IDeviceUnpairingResultMethods
    {

        internal static unsafe global::Windows.Devices.Enumeration.DeviceUnpairingResultStatus get_Status(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DeviceUnpairingResultStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DeviceUnpairingResultStatus*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD3, 0x4A, 0xF4, 0x66, 0xD9, 0x79, 0x4B, 0x44, 0x92, 0xCF, 0xA9, 0x2E, 0xF7, 0x25, 0x71, 0xC7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("66F44AD3-79D9-444B-92CF-A92EF72571C7")]
    internal interface IDeviceUnpairingResult : global::Windows.Devices.Enumeration.IDeviceUnpairingResult
    {
    }
    internal static class IDeviceWatcherMethods
    {


        internal static unsafe void Start(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[17](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Stop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[18](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Windows.Devices.Enumeration.DeviceWatcherStatus get_Status(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DeviceWatcherStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DeviceWatcherStatus*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformation>>> _Added_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformation>>> MakeAddedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Added_, new(), null);
            return _Added_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformation>>> _Added => _Added_ ?? MakeAddedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformation>> Get_Added2(IObjectReference _obj, object _thisObj)
        {
            return _Added.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_DeviceWatcher__global__Windows_Devices_Enumeration_DeviceInformation_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, object>>> _EnumerationCompleted_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, object>>> MakeEnumerationCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _EnumerationCompleted_, new(), null);
            return _EnumerationCompleted_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, object>>> _EnumerationCompleted => _EnumerationCompleted_ ?? MakeEnumerationCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, object>> Get_EnumerationCompleted2(IObjectReference _obj, object _thisObj)
        {
            return _EnumerationCompleted.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_DeviceWatcher__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformationUpdate>>> _Removed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformationUpdate>>> MakeRemovedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Removed_, new(), null);
            return _Removed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformationUpdate>>> _Removed => _Removed_ ?? MakeRemovedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformationUpdate>> Get_Removed2(IObjectReference _obj, object _thisObj)
        {
            return _Removed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_DeviceWatcher__global__Windows_Devices_Enumeration_DeviceInformationUpdate_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                2);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, object>>> _Stopped_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, object>>> MakeStoppedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Stopped_, new(), null);
            return _Stopped_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, object>>> _Stopped => _Stopped_ ?? MakeStoppedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, object>> Get_Stopped2(IObjectReference _obj, object _thisObj)
        {
            return _Stopped.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_DeviceWatcher__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[14],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[15],
                3);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformationUpdate>>> _Updated_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformationUpdate>>> MakeUpdatedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Updated_, new(), null);
            return _Updated_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformationUpdate>>> _Updated => _Updated_ ?? MakeUpdatedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Enumeration.DeviceWatcher, global::Windows.Devices.Enumeration.DeviceInformationUpdate>> Get_Updated2(IObjectReference _obj, object _thisObj)
        {
            return _Updated.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Windows_Devices_Enumeration_DeviceWatcher__global__Windows_Devices_Enumeration_DeviceInformationUpdate_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                4);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7D, 0xB9, 0xEA, 0xC9, 0x6B, 0x8F, 0x96, 0x4F, 0xA9, 0xF4, 0xAB, 0xC8, 0x14, 0xE2, 0x22, 0x71 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C9EAB97D-8F6B-4F96-A9F4-ABC814E22271")]
    internal interface IDeviceWatcher : global::Windows.Devices.Enumeration.IDeviceWatcher
    {
    }
    internal static class IDeviceWatcher2Methods
    {


        internal static unsafe global::Windows.ApplicationModel.Background.DeviceWatcherTrigger GetBackgroundTrigger(IObjectReference _obj, global::System.Collections.Generic.IEnumerable<global::Windows.Devices.Enumeration.DeviceWatcherEventKind> requestedEventKinds)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __requestedEventKinds = default;
            IntPtr __retval = default;
            try
            {
                __requestedEventKinds = MarshalInterface<global::System.Collections.Generic.IEnumerable<global::Windows.Devices.Enumeration.DeviceWatcherEventKind>>.CreateMarshaler2(requestedEventKinds, global::ABI.System.Collections.Generic.IEnumerableMethods<global::Windows.Devices.Enumeration.DeviceWatcherEventKind>.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__requestedEventKinds), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.ApplicationModel.Background.DeviceWatcherTrigger.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__requestedEventKinds);
                global::ABI.Windows.ApplicationModel.Background.DeviceWatcherTrigger.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6E, 0x45, 0x8, 0xFF, 0x14, 0xED, 0xE9, 0x49, 0x9A, 0x69, 0x81, 0x17, 0xC5, 0x4A, 0xE9, 0x71 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FF08456E-ED14-49E9-9A69-8117C54AE971")]
    internal interface IDeviceWatcher2 : global::Windows.Devices.Enumeration.IDeviceWatcher2
    {
    }
    internal static class IDeviceWatcherEventMethods
    {

        internal static unsafe global::Windows.Devices.Enumeration.DeviceInformation get_DeviceInformation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceInformation.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceInformation.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DeviceInformationUpdate get_DeviceInformationUpdate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceInformationUpdate.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceInformationUpdate.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Enumeration.DeviceWatcherEventKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.DeviceWatcherEventKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.DeviceWatcherEventKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB, 0x9C, 0xAA, 0x74, 0xBD, 0x1D, 0xFD, 0x47, 0xB6, 0x35, 0x3C, 0xC5, 0x56, 0xD0, 0xFF, 0x8B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("74AA9C0B-1DBD-47FD-B635-3CC556D0FF8B")]
    internal interface IDeviceWatcherEvent : global::Windows.Devices.Enumeration.IDeviceWatcherEvent
    {
    }
    internal static class IDeviceWatcherTriggerDetailsMethods
    {

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Enumeration.DeviceWatcherEvent> get_DeviceWatcherEvents(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Devices_Enumeration_DeviceWatcherEvent.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Enumeration.DeviceWatcherEvent>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Enumeration.DeviceWatcherEvent>>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x19, 0x81, 0x80, 0x38, 0xB7, 0x4C, 0x57, 0x4E, 0xA5, 0x6D, 0x77, 0x6D, 0x7, 0xCB, 0xFE, 0xF9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("38808119-4CB7-4E57-A56D-776D07CBFEF9")]
    internal interface IDeviceWatcherTriggerDetails : global::Windows.Devices.Enumeration.IDeviceWatcherTriggerDetails
    {
    }
    internal static class IEnclosureLocationMethods
    {

        internal static unsafe bool get_InDock(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_InLid(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Windows.Devices.Enumeration.Panel get_Panel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Enumeration.Panel __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Enumeration.Panel*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x27, 0xA, 0x34, 0x42, 0x10, 0x58, 0x9C, 0x45, 0xAA, 0xBB, 0xC6, 0x5E, 0x1F, 0x81, 0x3E, 0xCF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("42340A27-5810-459C-AABB-C65E1F813ECF")]
    internal interface IEnclosureLocation : global::Windows.Devices.Enumeration.IEnclosureLocation
    {
    }
    internal static class IEnclosureLocation2Methods
    {

        internal static unsafe uint get_RotationAngleInDegreesClockwise(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5B, 0x99, 0x85, 0x28, 0x7D, 0xE0, 0x5D, 0x48, 0x8A, 0x9E, 0xBD, 0xF2, 0x9A, 0xEF, 0x4F, 0x66 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2885995B-E07D-485D-8A9E-BDF29AEF4F66")]
    internal interface IEnclosureLocation2 : global::Windows.Devices.Enumeration.IEnclosureLocation2
    {
    }
}
#pragma warning restore CA1416
