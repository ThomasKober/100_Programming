//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.3.0-prerelease.250720.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Windows.Devices.Bluetooth.Rfcomm
{
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("AE81FF1F-C5A1-4C40-8C28-F3EFD69062F3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IRfcommDeviceService
    {
        [global::Windows.Foundation.Metadata.Overload(@"GetSdpRawAttributesAsync")]
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyDictionary<uint, global::Windows.Storage.Streams.IBuffer>> GetSdpRawAttributesAsync();
        [global::Windows.Foundation.Metadata.Overload(@"GetSdpRawAttributesWithCacheModeAsync")]
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyDictionary<uint, global::Windows.Storage.Streams.IBuffer>> GetSdpRawAttributesAsync(global::Windows.Devices.Bluetooth.BluetoothCacheMode cacheMode);
        global::Windows.Networking.HostName ConnectionHostName { get; }
        string ConnectionServiceName { get; }
        global::Windows.Networking.Sockets.SocketProtectionLevel MaxProtectionLevel { get; }
        global::Windows.Networking.Sockets.SocketProtectionLevel ProtectionLevel { get; }
        RfcommServiceId ServiceId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("536CED14-EBCD-49FE-BF9F-40EFC689B20D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IRfcommDeviceService2
    {
        global::Windows.Devices.Bluetooth.BluetoothDevice Device { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("1C22ACE6-DD44-4D23-866D-8F3486EE6490")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 196608u)]
    internal interface IRfcommDeviceService3
    {
        global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceAccessStatus> RequestAccessAsync();
        global::Windows.Devices.Enumeration.DeviceAccessInformation DeviceAccessInformation { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("A4A149EF-626D-41AC-B253-87AC5C27E28A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IRfcommDeviceServiceStatics
    {
        global::Windows.Foundation.IAsyncOperation<RfcommDeviceService> FromIdAsync(string deviceId);
        string GetDeviceSelector(RfcommServiceId serviceId);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("AA8CB1C9-E78D-4BE4-8076-0A3D87A0A05F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 196608u)]
    internal interface IRfcommDeviceServiceStatics2
    {
        [global::Windows.Foundation.Metadata.Overload(@"GetDeviceSelectorForBluetoothDevice")]
        string GetDeviceSelectorForBluetoothDevice(global::Windows.Devices.Bluetooth.BluetoothDevice bluetoothDevice);
        [global::Windows.Foundation.Metadata.Overload(@"GetDeviceSelectorForBluetoothDeviceWithCacheMode")]
        string GetDeviceSelectorForBluetoothDevice(global::Windows.Devices.Bluetooth.BluetoothDevice bluetoothDevice, global::Windows.Devices.Bluetooth.BluetoothCacheMode cacheMode);
        [global::Windows.Foundation.Metadata.Overload(@"GetDeviceSelectorForBluetoothDeviceAndServiceId")]
        string GetDeviceSelectorForBluetoothDeviceAndServiceId(global::Windows.Devices.Bluetooth.BluetoothDevice bluetoothDevice, RfcommServiceId serviceId);
        [global::Windows.Foundation.Metadata.Overload(@"GetDeviceSelectorForBluetoothDeviceAndServiceIdWithCacheMode")]
        string GetDeviceSelectorForBluetoothDeviceAndServiceId(global::Windows.Devices.Bluetooth.BluetoothDevice bluetoothDevice, RfcommServiceId serviceId, global::Windows.Devices.Bluetooth.BluetoothCacheMode cacheMode);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("3B48388C-7CCF-488E-9625-D259A5732D55")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 196608u)]
    internal interface IRfcommDeviceServicesResult
    {
        global::Windows.Devices.Bluetooth.BluetoothError Error { get; }
        global::System.Collections.Generic.IReadOnlyList<RfcommDeviceService> Services { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("22629204-7E02-4017-8136-DA1B6A1B9BBF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IRfcommServiceId
    {
        uint AsShortId();
        string AsString();
        Guid Uuid { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("2A179EBA-A975-46E3-B56B-08FFD783A5FE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IRfcommServiceIdStatics
    {
        RfcommServiceId FromUuid(Guid uuid);
        RfcommServiceId FromShortId(uint shortId);
        RfcommServiceId GenericFileTransfer { get; }
        RfcommServiceId ObexFileTransfer { get; }
        RfcommServiceId ObexObjectPush { get; }
        RfcommServiceId PhoneBookAccessPce { get; }
        RfcommServiceId PhoneBookAccessPse { get; }
        RfcommServiceId SerialPort { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("EADBFDC4-B1F6-44FF-9F7C-E7A82AB86821")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IRfcommServiceProvider
    {
        void StartAdvertising(global::Windows.Networking.Sockets.StreamSocketListener listener);
        void StopAdvertising();
        global::System.Collections.Generic.IDictionary<uint, global::Windows.Storage.Streams.IBuffer> SdpRawAttributes { get; }
        RfcommServiceId ServiceId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("736BDFC6-3C81-4D1E-BAF2-DDBB81284512")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 131072u)]
    internal interface IRfcommServiceProvider2
    {
        [global::Windows.Foundation.Metadata.Overload(@"StartAdvertisingWithRadioDiscoverability")]
        void StartAdvertising(global::Windows.Networking.Sockets.StreamSocketListener listener, bool radioDiscoverable);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")][Guid("98888303-69CA-413A-84F7-4344C7292997")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IRfcommServiceProviderStatics
    {
        global::Windows.Foundation.IAsyncOperation<RfcommServiceProvider> CreateAsync(RfcommServiceId serviceId);
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService))]
    [global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServiceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRfcommDeviceService))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class RfcommDeviceService : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RfcommDeviceService>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService => _inner;
        private volatile IObjectReference ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService2;
        private IObjectReference Make___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService2Methods.IID), null);
            return ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService2;
        }
        private IObjectReference _objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService2 => ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService2 ?? Make___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService2();

        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();

        private volatile IObjectReference ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService3;
        private IObjectReference Make___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService3()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService3, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService3Methods.IID), null);
            return ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService3;
        }
        private IObjectReference _objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService3 => ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService3 ?? Make___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService3();



        public static I As<I>() => ActivationFactory.Get("Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics;
        private static IObjectReference _objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics
        {
            get
            { 
                var factory = ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics = ActivationFactory.Get("Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService", global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.Foundation.IAsyncOperation<RfcommDeviceService> FromIdAsync(string deviceId) => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStaticsMethods.FromIdAsync(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics, deviceId);

        public static string GetDeviceSelector(RfcommServiceId serviceId) => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStaticsMethods.GetDeviceSelector(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics, serviceId);

        private static volatile IObjectReference ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics2;
        private static IObjectReference _objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics2
        {
            get
            { 
                var factory = ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics2 = ActivationFactory.Get("Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService", global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics2Methods.IID);
                }
            }
        }

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.14393.0")]
        public static string GetDeviceSelectorForBluetoothDevice(global::Windows.Devices.Bluetooth.BluetoothDevice bluetoothDevice) => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics2Methods.GetDeviceSelectorForBluetoothDevice(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics2, bluetoothDevice);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.14393.0")]
        public static string GetDeviceSelectorForBluetoothDevice(global::Windows.Devices.Bluetooth.BluetoothDevice bluetoothDevice, global::Windows.Devices.Bluetooth.BluetoothCacheMode cacheMode) => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics2Methods.GetDeviceSelectorForBluetoothDevice(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics2, bluetoothDevice, cacheMode);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.14393.0")]
        public static string GetDeviceSelectorForBluetoothDeviceAndServiceId(global::Windows.Devices.Bluetooth.BluetoothDevice bluetoothDevice, RfcommServiceId serviceId) => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics2Methods.GetDeviceSelectorForBluetoothDeviceAndServiceId(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics2, bluetoothDevice, serviceId);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.14393.0")]
        public static string GetDeviceSelectorForBluetoothDeviceAndServiceId(global::Windows.Devices.Bluetooth.BluetoothDevice bluetoothDevice, RfcommServiceId serviceId, global::Windows.Devices.Bluetooth.BluetoothCacheMode cacheMode) => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics2Methods.GetDeviceSelectorForBluetoothDeviceAndServiceId(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServiceStatics2, bluetoothDevice, serviceId, cacheMode);

        public static RfcommDeviceService FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RfcommDeviceService>.FromAbi(thisPtr);
        }

        internal RfcommDeviceService(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceMethods.IID);

        }


        public static bool operator ==(RfcommDeviceService x, RfcommDeviceService y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RfcommDeviceService x, RfcommDeviceService y) => !(x == y);
        public bool Equals(RfcommDeviceService other) => this == other;
        public override bool Equals(object obj) => obj is RfcommDeviceService that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyDictionary<uint, global::Windows.Storage.Streams.IBuffer>> GetSdpRawAttributesAsync() => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceMethods.GetSdpRawAttributesAsync(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService);

        public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyDictionary<uint, global::Windows.Storage.Streams.IBuffer>> GetSdpRawAttributesAsync(global::Windows.Devices.Bluetooth.BluetoothCacheMode cacheMode) => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceMethods.GetSdpRawAttributesAsync(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService, cacheMode);

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.14393.0")]
        public global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceAccessStatus> RequestAccessAsync() => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService3Methods.RequestAccessAsync(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService3);

        public global::Windows.Networking.HostName ConnectionHostName => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceMethods.get_ConnectionHostName(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService);

        public string ConnectionServiceName => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceMethods.get_ConnectionServiceName(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService);

        public global::Windows.Devices.Bluetooth.BluetoothDevice Device => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService2Methods.get_Device(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService2);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.14393.0")]
        public global::Windows.Devices.Enumeration.DeviceAccessInformation DeviceAccessInformation => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService3Methods.get_DeviceAccessInformation(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService3);

        public global::Windows.Networking.Sockets.SocketProtectionLevel MaxProtectionLevel => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceMethods.get_MaxProtectionLevel(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService);

        public global::Windows.Networking.Sockets.SocketProtectionLevel ProtectionLevel => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceMethods.get_ProtectionLevel(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService);

        public RfcommServiceId ServiceId => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceMethods.get_ServiceId(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceService);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult))]
    [global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResultRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRfcommDeviceServicesResult))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.14393.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 196608u)]
    public sealed class RfcommDeviceServicesResult : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RfcommDeviceServicesResult>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServicesResult => _inner;


        public static RfcommDeviceServicesResult FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RfcommDeviceServicesResult>.FromAbi(thisPtr);
        }

        internal RfcommDeviceServicesResult(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResultMethods.IID);

        }


        public static bool operator ==(RfcommDeviceServicesResult x, RfcommDeviceServicesResult y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RfcommDeviceServicesResult x, RfcommDeviceServicesResult y) => !(x == y);
        public bool Equals(RfcommDeviceServicesResult other) => this == other;
        public override bool Equals(object obj) => obj is RfcommDeviceServicesResult that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Devices.Bluetooth.BluetoothError Error => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResultMethods.get_Error(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServicesResult);

        public global::System.Collections.Generic.IReadOnlyList<RfcommDeviceService> Services => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResultMethods.get_Services(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommDeviceServicesResult);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId))]
    [global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceIdRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRfcommServiceId))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class RfcommServiceId : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RfcommServiceId>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceId => _inner;


        public static I As<I>() => ActivationFactory.Get("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceIdStatics;
        private static IObjectReference _objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceIdStatics
        {
            get
            { 
                var factory = ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceIdStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceIdStatics = ActivationFactory.Get("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId", global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStaticsMethods.IID);
                }
            }
        }

        public static RfcommServiceId FromUuid(Guid uuid) => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStaticsMethods.FromUuid(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceIdStatics, uuid);

        public static RfcommServiceId FromShortId(uint shortId) => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStaticsMethods.FromShortId(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceIdStatics, shortId);

        public static RfcommServiceId GenericFileTransfer => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStaticsMethods.get_GenericFileTransfer(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceIdStatics);

        public static RfcommServiceId ObexFileTransfer => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStaticsMethods.get_ObexFileTransfer(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceIdStatics);

        public static RfcommServiceId ObexObjectPush => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStaticsMethods.get_ObexObjectPush(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceIdStatics);

        public static RfcommServiceId PhoneBookAccessPce => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStaticsMethods.get_PhoneBookAccessPce(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceIdStatics);

        public static RfcommServiceId PhoneBookAccessPse => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStaticsMethods.get_PhoneBookAccessPse(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceIdStatics);

        public static RfcommServiceId SerialPort => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStaticsMethods.get_SerialPort(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceIdStatics);

        public static RfcommServiceId FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RfcommServiceId>.FromAbi(thisPtr);
        }

        internal RfcommServiceId(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdMethods.IID);

        }


        public static bool operator ==(RfcommServiceId x, RfcommServiceId y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RfcommServiceId x, RfcommServiceId y) => !(x == y);
        public bool Equals(RfcommServiceId other) => this == other;
        public override bool Equals(object obj) => obj is RfcommServiceId that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public uint AsShortId() => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdMethods.AsShortId(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceId);

        public string AsString() => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdMethods.AsString(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceId);

        public Guid Uuid => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdMethods.get_Uuid(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceId);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows.Foundation.UniversalApiContract")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider))]
    [global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProviderRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRfcommServiceProvider))]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public sealed class RfcommServiceProvider : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RfcommServiceProvider>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider => _inner;
        private volatile IObjectReference ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider2;
        private IObjectReference Make___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider2Methods.IID), null);
            return ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider2;
        }
        private IObjectReference _objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider2 => ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider2 ?? Make___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider2();



        public static I As<I>() => ActivationFactory.Get("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProviderStatics;
        private static IObjectReference _objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProviderStatics
        {
            get
            { 
                var factory = ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProviderStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProviderStatics = ActivationFactory.Get("Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider", global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderStaticsMethods.IID);
                }
            }
        }

        public static global::Windows.Foundation.IAsyncOperation<RfcommServiceProvider> CreateAsync(RfcommServiceId serviceId) => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderStaticsMethods.CreateAsync(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProviderStatics, serviceId);

        public static RfcommServiceProvider FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RfcommServiceProvider>.FromAbi(thisPtr);
        }

        internal RfcommServiceProvider(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderMethods.IID);

        }


        public static bool operator ==(RfcommServiceProvider x, RfcommServiceProvider y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RfcommServiceProvider x, RfcommServiceProvider y) => !(x == y);
        public bool Equals(RfcommServiceProvider other) => this == other;
        public override bool Equals(object obj) => obj is RfcommServiceProvider that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void StartAdvertising(global::Windows.Networking.Sockets.StreamSocketListener listener) => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderMethods.StartAdvertising(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider, listener);

        public void StopAdvertising() => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderMethods.StopAdvertising(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10586.0")]
        public void StartAdvertising(global::Windows.Networking.Sockets.StreamSocketListener listener, bool radioDiscoverable) => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider2Methods.StartAdvertising(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider2, listener, radioDiscoverable);

        public global::System.Collections.Generic.IDictionary<uint, global::Windows.Storage.Streams.IBuffer> SdpRawAttributes => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderMethods.get_SdpRawAttributes(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider);

        public RfcommServiceId ServiceId => global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderMethods.get_ServiceId(_objRef_global__Windows_Devices_Bluetooth_Rfcomm_IRfcommServiceProvider);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid || global::WinRT.Interop.IID.IID_IWeakReferenceSource == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Windows.Devices.Bluetooth.Rfcomm
{
    internal static class IRfcommDeviceServiceMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyDictionary<uint, global::Windows.Storage.Streams.IBuffer>> GetSdpRawAttributesAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IMapView_2_UInt32__Windows_Storage_Streams_IBuffer_.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyDictionary<uint, global::Windows.Storage.Streams.IBuffer>>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyDictionary<uint, global::Windows.Storage.Streams.IBuffer>>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyDictionary<uint, global::Windows.Storage.Streams.IBuffer>> GetSdpRawAttributesAsync(IObjectReference _obj, global::Windows.Devices.Bluetooth.BluetoothCacheMode cacheMode)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Bluetooth.BluetoothCacheMode, IntPtr*, int>**)ThisPtr)[12](ThisPtr, cacheMode, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IMapView_2_UInt32__Windows_Storage_Streams_IBuffer_.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyDictionary<uint, global::Windows.Storage.Streams.IBuffer>>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyDictionary<uint, global::Windows.Storage.Streams.IBuffer>>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Windows.Networking.HostName get_ConnectionHostName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Networking.HostName.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Networking.HostName.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_ConnectionServiceName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Networking.Sockets.SocketProtectionLevel get_MaxProtectionLevel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Networking.Sockets.SocketProtectionLevel __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Sockets.SocketProtectionLevel*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Networking.Sockets.SocketProtectionLevel get_ProtectionLevel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Networking.Sockets.SocketProtectionLevel __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Sockets.SocketProtectionLevel*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId get_ServiceId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1F, 0xFF, 0x81, 0xAE, 0xA1, 0xC5, 0x40, 0x4C, 0x8C, 0x28, 0xF3, 0xEF, 0xD6, 0x90, 0x62, 0xF3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AE81FF1F-C5A1-4C40-8C28-F3EFD69062F3")]
    internal interface IRfcommDeviceService : global::Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService
    {
    }
    internal static class IRfcommDeviceService2Methods
    {

        internal static unsafe global::Windows.Devices.Bluetooth.BluetoothDevice get_Device(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Bluetooth.BluetoothDevice.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Bluetooth.BluetoothDevice.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x14, 0xED, 0x6C, 0x53, 0xCD, 0xEB, 0xFE, 0x49, 0xBF, 0x9F, 0x40, 0xEF, 0xC6, 0x89, 0xB2, 0xD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("536CED14-EBCD-49FE-BF9F-40EFC689B20D")]
    internal interface IRfcommDeviceService2 : global::Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService2
    {
    }
    internal static class IRfcommDeviceService3Methods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceAccessStatus> RequestAccessAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Enumeration_DeviceAccessStatus.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceAccessStatus>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Enumeration.DeviceAccessStatus>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Windows.Devices.Enumeration.DeviceAccessInformation get_DeviceAccessInformation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Enumeration.DeviceAccessInformation.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Enumeration.DeviceAccessInformation.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE6, 0xAC, 0x22, 0x1C, 0x44, 0xDD, 0x23, 0x4D, 0x86, 0x6D, 0x8F, 0x34, 0x86, 0xEE, 0x64, 0x90 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1C22ACE6-DD44-4D23-866D-8F3486EE6490")]
    internal interface IRfcommDeviceService3 : global::Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService3
    {
    }
    internal static class IRfcommDeviceServiceStaticsMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService> FromIdAsync(IObjectReference _obj, string deviceId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __deviceId = new(deviceId);
                fixed(void* ___deviceId = __deviceId)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __deviceId), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Bluetooth_Rfcomm_RfcommDeviceService.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string GetDeviceSelector(IObjectReference _obj, global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId serviceId)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __serviceId = default;
            IntPtr __retval = default;
            try
            {
                __serviceId = global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.CreateMarshaler2(serviceId);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__serviceId), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__serviceId);
                MarshalString.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEF, 0x49, 0xA1, 0xA4, 0x6D, 0x62, 0xAC, 0x41, 0xB2, 0x53, 0x87, 0xAC, 0x5C, 0x27, 0xE2, 0x8A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A4A149EF-626D-41AC-B253-87AC5C27E28A")]
    internal interface IRfcommDeviceServiceStatics : global::Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics
    {
    }
    internal static class IRfcommDeviceServiceStatics2Methods
    {


        internal static unsafe string GetDeviceSelectorForBluetoothDevice(IObjectReference _obj, global::Windows.Devices.Bluetooth.BluetoothDevice bluetoothDevice)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bluetoothDevice = default;
            IntPtr __retval = default;
            try
            {
                __bluetoothDevice = global::ABI.Windows.Devices.Bluetooth.BluetoothDevice.CreateMarshaler2(bluetoothDevice);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__bluetoothDevice), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bluetoothDevice);
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string GetDeviceSelectorForBluetoothDevice(IObjectReference _obj, global::Windows.Devices.Bluetooth.BluetoothDevice bluetoothDevice, global::Windows.Devices.Bluetooth.BluetoothCacheMode cacheMode)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bluetoothDevice = default;
            IntPtr __retval = default;
            try
            {
                __bluetoothDevice = global::ABI.Windows.Devices.Bluetooth.BluetoothDevice.CreateMarshaler2(bluetoothDevice);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Devices.Bluetooth.BluetoothCacheMode, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__bluetoothDevice), cacheMode, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bluetoothDevice);
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string GetDeviceSelectorForBluetoothDeviceAndServiceId(IObjectReference _obj, global::Windows.Devices.Bluetooth.BluetoothDevice bluetoothDevice, global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId serviceId)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bluetoothDevice = default;
            ObjectReferenceValue __serviceId = default;
            IntPtr __retval = default;
            try
            {
                __bluetoothDevice = global::ABI.Windows.Devices.Bluetooth.BluetoothDevice.CreateMarshaler2(bluetoothDevice);
                __serviceId = global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.CreateMarshaler2(serviceId);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__bluetoothDevice), MarshalInspectable<object>.GetAbi(__serviceId), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bluetoothDevice);
                MarshalInspectable<object>.DisposeMarshaler(__serviceId);
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe string GetDeviceSelectorForBluetoothDeviceAndServiceId(IObjectReference _obj, global::Windows.Devices.Bluetooth.BluetoothDevice bluetoothDevice, global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId serviceId, global::Windows.Devices.Bluetooth.BluetoothCacheMode cacheMode)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bluetoothDevice = default;
            ObjectReferenceValue __serviceId = default;
            IntPtr __retval = default;
            try
            {
                __bluetoothDevice = global::ABI.Windows.Devices.Bluetooth.BluetoothDevice.CreateMarshaler2(bluetoothDevice);
                __serviceId = global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.CreateMarshaler2(serviceId);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Devices.Bluetooth.BluetoothCacheMode, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__bluetoothDevice), MarshalInspectable<object>.GetAbi(__serviceId), cacheMode, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bluetoothDevice);
                MarshalInspectable<object>.DisposeMarshaler(__serviceId);
                MarshalString.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC9, 0xB1, 0x8C, 0xAA, 0x8D, 0xE7, 0xE4, 0x4B, 0x80, 0x76, 0xA, 0x3D, 0x87, 0xA0, 0xA0, 0x5F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AA8CB1C9-E78D-4BE4-8076-0A3D87A0A05F")]
    internal interface IRfcommDeviceServiceStatics2 : global::Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics2
    {
    }
    internal static class IRfcommDeviceServicesResultMethods
    {

        internal static unsafe global::Windows.Devices.Bluetooth.BluetoothError get_Error(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Devices.Bluetooth.BluetoothError __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Devices.Bluetooth.BluetoothError*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService> get_Services(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Devices_Bluetooth_Rfcomm_RfcommDeviceService.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8C, 0x38, 0x48, 0x3B, 0xCF, 0x7C, 0x8E, 0x48, 0x96, 0x25, 0xD2, 0x59, 0xA5, 0x73, 0x2D, 0x55 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3B48388C-7CCF-488E-9625-D259A5732D55")]
    internal interface IRfcommDeviceServicesResult : global::Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResult
    {
    }
    internal static class IRfcommServiceIdMethods
    {


        internal static unsafe uint AsShortId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string AsString(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe Guid get_Uuid(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            Guid __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4, 0x92, 0x62, 0x22, 0x2, 0x7E, 0x17, 0x40, 0x81, 0x36, 0xDA, 0x1B, 0x6A, 0x1B, 0x9B, 0xBF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("22629204-7E02-4017-8136-DA1B6A1B9BBF")]
    internal interface IRfcommServiceId : global::Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId
    {
    }
    internal static class IRfcommServiceIdStaticsMethods
    {


        internal static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId FromUuid(IObjectReference _obj, Guid uuid)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid, IntPtr*, int>**)ThisPtr)[6](ThisPtr, uuid, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId FromShortId(IObjectReference _obj, uint shortId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, IntPtr*, int>**)ThisPtr)[7](ThisPtr, shortId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId get_GenericFileTransfer(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId get_ObexFileTransfer(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId get_ObexObjectPush(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId get_PhoneBookAccessPce(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId get_PhoneBookAccessPse(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId get_SerialPort(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBA, 0x9E, 0x17, 0x2A, 0x75, 0xA9, 0xE3, 0x46, 0xB5, 0x6B, 0x8, 0xFF, 0xD7, 0x83, 0xA5, 0xFE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2A179EBA-A975-46E3-B56B-08FFD783A5FE")]
    internal interface IRfcommServiceIdStatics : global::Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdStatics
    {
    }
    internal static class IRfcommServiceProviderMethods
    {


        internal static unsafe void StartAdvertising(IObjectReference _obj, global::Windows.Networking.Sockets.StreamSocketListener listener)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __listener = default;
            try
            {
                __listener = global::ABI.Windows.Networking.Sockets.StreamSocketListener.CreateMarshaler2(listener);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__listener)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__listener);
            }
        }

        internal static unsafe void StopAdvertising(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[9](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::System.Collections.Generic.IDictionary<uint, global::Windows.Storage.Streams.IBuffer> get_SdpRawAttributes(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_UInt32__Windows_Storage_Streams_IBuffer.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IDictionary<uint, global::Windows.Storage.Streams.IBuffer>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IDictionary<uint, global::Windows.Storage.Streams.IBuffer>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId get_ServiceId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC4, 0xFD, 0xDB, 0xEA, 0xF6, 0xB1, 0xFF, 0x44, 0x9F, 0x7C, 0xE7, 0xA8, 0x2A, 0xB8, 0x68, 0x21 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EADBFDC4-B1F6-44FF-9F7C-E7A82AB86821")]
    internal interface IRfcommServiceProvider : global::Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider
    {
    }
    internal static class IRfcommServiceProvider2Methods
    {


        internal static unsafe void StartAdvertising(IObjectReference _obj, global::Windows.Networking.Sockets.StreamSocketListener listener, bool radioDiscoverable)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __listener = default;
            try
            {
                __listener = global::ABI.Windows.Networking.Sockets.StreamSocketListener.CreateMarshaler2(listener);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__listener), (byte)(radioDiscoverable ? 1 : 0)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__listener);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC6, 0xDF, 0x6B, 0x73, 0x81, 0x3C, 0x1E, 0x4D, 0xBA, 0xF2, 0xDD, 0xBB, 0x81, 0x28, 0x45, 0x12 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("736BDFC6-3C81-4D1E-BAF2-DDBB81284512")]
    internal interface IRfcommServiceProvider2 : global::Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider2
    {
    }
    internal static class IRfcommServiceProviderStaticsMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider> CreateAsync(IObjectReference _obj, global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId serviceId)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __serviceId = default;
            IntPtr __retval = default;
            try
            {
                __serviceId = global::ABI.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.CreateMarshaler2(serviceId);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__serviceId), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Devices_Bluetooth_Rfcomm_RfcommServiceProvider.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__serviceId);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3, 0x83, 0x88, 0x98, 0xCA, 0x69, 0x3A, 0x41, 0x84, 0xF7, 0x43, 0x44, 0xC7, 0x29, 0x29, 0x97 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("98888303-69CA-413A-84F7-4344C7292997")]
    internal interface IRfcommServiceProviderStatics : global::Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderStatics
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RfcommDeviceService
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService FromAbi(IntPtr thisPtr) => global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService[] array) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService[] array) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RfcommDeviceServiceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RfcommDeviceServicesResult
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResultMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServicesResultMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult FromAbi(IntPtr thisPtr) => global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult[] array) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult[] array) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RfcommDeviceServicesResultRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RfcommServiceId
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceIdMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId FromAbi(IntPtr thisPtr) => global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId[] array) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId[] array) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RfcommServiceIdRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RfcommServiceProvider
    {

        public static IObjectReference CreateMarshaler(global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider obj) => obj is null ? null : MarshalInspectable<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider FromAbi(IntPtr thisPtr) => global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider>.MarshalerArray CreateMarshalerArray(global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider[] array) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider>.GetAbiArray(box);
        public static unsafe global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider[] array, object box) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider[] array) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RfcommServiceProviderRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
