
gTACTILEbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08020000  08020000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .gInfoHeader  00000080  08020300  08020300  00001300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c014  08020380  08020380  00001380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001fc0  0802c394  0802c394  0000d394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 CMOX_CTA_PROTECTED_DATA 00000500  0802e354  0802e354  0000f354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0802e854  0802e854  00010088  2**0
                  CONTENTS
  6 .ARM          00000008  0802e854  0802e854  0000f854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0802e85c  0802e85c  00010088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0802e85c  0802e85c  0000f85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  0802e860  0802e860  0000f860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         00000088  20000000  0802e864  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000445ac  20000088  0802e8ec  00010088  2**2
                  ALLOC
 12 ._user_heap_stack 00002404  20044634  0802e8ec  00010634  2**0
                  ALLOC
 13 .ARM.attributes 0000003a  00000000  00000000  00010088  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003a8b4  00000000  00000000  000100c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007b88  00000000  00000000  0004a976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0001415f  00000000  00000000  000524fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000021a8  00000000  00000000  00066660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000227a  00000000  00000000  00068808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00038697  00000000  00000000  0006aa82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00040d04  00000000  00000000  000a3119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001520d2  00000000  00000000  000e3e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00235eef  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 00000020  00000000  00000000  00235f34  2**2
                  CONTENTS, READONLY
 24 .debug_frame  00006444  00000000  00000000  00235f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000008a  00000000  00000000  0023c398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020380 <__do_global_dtors_aux>:
 8020380:	b510      	push	{r4, lr}
 8020382:	4c05      	ldr	r4, [pc, #20]	@ (8020398 <__do_global_dtors_aux+0x18>)
 8020384:	7823      	ldrb	r3, [r4, #0]
 8020386:	b933      	cbnz	r3, 8020396 <__do_global_dtors_aux+0x16>
 8020388:	4b04      	ldr	r3, [pc, #16]	@ (802039c <__do_global_dtors_aux+0x1c>)
 802038a:	b113      	cbz	r3, 8020392 <__do_global_dtors_aux+0x12>
 802038c:	4804      	ldr	r0, [pc, #16]	@ (80203a0 <__do_global_dtors_aux+0x20>)
 802038e:	f3af 8000 	nop.w
 8020392:	2301      	movs	r3, #1
 8020394:	7023      	strb	r3, [r4, #0]
 8020396:	bd10      	pop	{r4, pc}
 8020398:	20000088 	.word	0x20000088
 802039c:	00000000 	.word	0x00000000
 80203a0:	0802c37c 	.word	0x0802c37c

080203a4 <frame_dummy>:
 80203a4:	b508      	push	{r3, lr}
 80203a6:	4b03      	ldr	r3, [pc, #12]	@ (80203b4 <frame_dummy+0x10>)
 80203a8:	b11b      	cbz	r3, 80203b2 <frame_dummy+0xe>
 80203aa:	4903      	ldr	r1, [pc, #12]	@ (80203b8 <frame_dummy+0x14>)
 80203ac:	4803      	ldr	r0, [pc, #12]	@ (80203bc <frame_dummy+0x18>)
 80203ae:	f3af 8000 	nop.w
 80203b2:	bd08      	pop	{r3, pc}
 80203b4:	00000000 	.word	0x00000000
 80203b8:	2000008c 	.word	0x2000008c
 80203bc:	0802c37c 	.word	0x0802c37c

080203c0 <cmox_cipher_encrypt>:
 80203c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80203c2:	460c      	mov	r4, r1
 80203c4:	4611      	mov	r1, r2
 80203c6:	461a      	mov	r2, r3
 80203c8:	b084      	sub	sp, #16
 80203ca:	0005      	movs	r5, r0
 80203cc:	4b10      	ldr	r3, [pc, #64]	@ (8020410 <cmox_cipher_encrypt+0x50>)
 80203ce:	d01b      	beq.n	8020408 <cmox_cipher_encrypt+0x48>
 80203d0:	6868      	ldr	r0, [r5, #4]
 80203d2:	283a      	cmp	r0, #58	@ 0x3a
 80203d4:	bf18      	it	ne
 80203d6:	4b0f      	ldrne	r3, [pc, #60]	@ (8020414 <cmox_cipher_encrypt+0x54>)
 80203d8:	d116      	bne.n	8020408 <cmox_cipher_encrypt+0x48>
 80203da:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80203dc:	b90c      	cbnz	r4, 80203e2 <cmox_cipher_encrypt+0x22>
 80203de:	b109      	cbz	r1, 80203e4 <cmox_cipher_encrypt+0x24>
 80203e0:	e012      	b.n	8020408 <cmox_cipher_encrypt+0x48>
 80203e2:	b188      	cbz	r0, 8020408 <cmox_cipher_encrypt+0x48>
 80203e4:	b182      	cbz	r2, 8020408 <cmox_cipher_encrypt+0x48>
 80203e6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80203e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80203ea:	b907      	cbnz	r7, 80203ee <cmox_cipher_encrypt+0x2e>
 80203ec:	b966      	cbnz	r6, 8020408 <cmox_cipher_encrypt+0x48>
 80203ee:	b158      	cbz	r0, 8020408 <cmox_cipher_encrypt+0x48>
 80203f0:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 80203f4:	9002      	str	r0, [sp, #8]
 80203f6:	9601      	str	r6, [sp, #4]
 80203f8:	f8cd c00c 	str.w	ip, [sp, #12]
 80203fc:	9700      	str	r7, [sp, #0]
 80203fe:	4620      	mov	r0, r4
 8020400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020402:	682c      	ldr	r4, [r5, #0]
 8020404:	47a0      	blx	r4
 8020406:	4603      	mov	r3, r0
 8020408:	4618      	mov	r0, r3
 802040a:	b005      	add	sp, #20
 802040c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802040e:	bf00      	nop
 8020410:	00010003 	.word	0x00010003
 8020414:	00010002 	.word	0x00010002

08020418 <cmox_cipher_decrypt>:
 8020418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802041a:	460c      	mov	r4, r1
 802041c:	4611      	mov	r1, r2
 802041e:	461a      	mov	r2, r3
 8020420:	b084      	sub	sp, #16
 8020422:	0005      	movs	r5, r0
 8020424:	4b10      	ldr	r3, [pc, #64]	@ (8020468 <cmox_cipher_decrypt+0x50>)
 8020426:	d01c      	beq.n	8020462 <cmox_cipher_decrypt+0x4a>
 8020428:	6868      	ldr	r0, [r5, #4]
 802042a:	f110 0f3b 	cmn.w	r0, #59	@ 0x3b
 802042e:	bf18      	it	ne
 8020430:	4b0e      	ldrne	r3, [pc, #56]	@ (802046c <cmox_cipher_decrypt+0x54>)
 8020432:	d116      	bne.n	8020462 <cmox_cipher_decrypt+0x4a>
 8020434:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020436:	b90c      	cbnz	r4, 802043c <cmox_cipher_decrypt+0x24>
 8020438:	b109      	cbz	r1, 802043e <cmox_cipher_decrypt+0x26>
 802043a:	e012      	b.n	8020462 <cmox_cipher_decrypt+0x4a>
 802043c:	b188      	cbz	r0, 8020462 <cmox_cipher_decrypt+0x4a>
 802043e:	b182      	cbz	r2, 8020462 <cmox_cipher_decrypt+0x4a>
 8020440:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020442:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020444:	b907      	cbnz	r7, 8020448 <cmox_cipher_decrypt+0x30>
 8020446:	b966      	cbnz	r6, 8020462 <cmox_cipher_decrypt+0x4a>
 8020448:	b158      	cbz	r0, 8020462 <cmox_cipher_decrypt+0x4a>
 802044a:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 802044e:	9002      	str	r0, [sp, #8]
 8020450:	9601      	str	r6, [sp, #4]
 8020452:	f8cd c00c 	str.w	ip, [sp, #12]
 8020456:	9700      	str	r7, [sp, #0]
 8020458:	4620      	mov	r0, r4
 802045a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802045c:	682c      	ldr	r4, [r5, #0]
 802045e:	47a0      	blx	r4
 8020460:	4603      	mov	r3, r0
 8020462:	4618      	mov	r0, r3
 8020464:	b005      	add	sp, #20
 8020466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020468:	00010003 	.word	0x00010003
 802046c:	00010002 	.word	0x00010002

08020470 <cmox_cipher_innerCompute>:
 8020470:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8020474:	4604      	mov	r4, r0
 8020476:	460d      	mov	r5, r1
 8020478:	6821      	ldr	r1, [r4, #0]
 802047a:	4616      	mov	r6, r2
 802047c:	461f      	mov	r7, r3
 802047e:	684a      	ldr	r2, [r1, #4]
 8020480:	4790      	blx	r2
 8020482:	4680      	mov	r8, r0
 8020484:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 8020488:	d11d      	bne.n	80204c6 <cmox_cipher_innerCompute+0x56>
 802048a:	6823      	ldr	r3, [r4, #0]
 802048c:	4639      	mov	r1, r7
 802048e:	9a08      	ldr	r2, [sp, #32]
 8020490:	689f      	ldr	r7, [r3, #8]
 8020492:	4620      	mov	r0, r4
 8020494:	47b8      	blx	r7
 8020496:	4680      	mov	r8, r0
 8020498:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 802049c:	d113      	bne.n	80204c6 <cmox_cipher_innerCompute+0x56>
 802049e:	6823      	ldr	r3, [r4, #0]
 80204a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80204a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80204a4:	68df      	ldr	r7, [r3, #12]
 80204a6:	4620      	mov	r0, r4
 80204a8:	47b8      	blx	r7
 80204aa:	4680      	mov	r8, r0
 80204ac:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 80204b0:	d109      	bne.n	80204c6 <cmox_cipher_innerCompute+0x56>
 80204b2:	4629      	mov	r1, r5
 80204b4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80204b6:	4632      	mov	r2, r6
 80204b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80204ba:	9000      	str	r0, [sp, #0]
 80204bc:	6825      	ldr	r5, [r4, #0]
 80204be:	4620      	mov	r0, r4
 80204c0:	6a2e      	ldr	r6, [r5, #32]
 80204c2:	47b0      	blx	r6
 80204c4:	4680      	mov	r8, r0
 80204c6:	6821      	ldr	r1, [r4, #0]
 80204c8:	4620      	mov	r0, r4
 80204ca:	680a      	ldr	r2, [r1, #0]
 80204cc:	4790      	blx	r2
 80204ce:	4640      	mov	r0, r8
 80204d0:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

080204d4 <CMOX_CTR_ENC_AESFAST_IMPL>:
 80204d4:	099d 0802 c3f4 0802                         ........

080204dc <cmox_ctr_compute>:
 80204dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204de:	b0cb      	sub	sp, #300	@ 0x12c
 80204e0:	4604      	mov	r4, r0
 80204e2:	460d      	mov	r5, r1
 80204e4:	4616      	mov	r6, r2
 80204e6:	461f      	mov	r7, r3
 80204e8:	4909      	ldr	r1, [pc, #36]	@ (8020510 <cmox_ctr_compute+0x34>)
 80204ea:	a805      	add	r0, sp, #20
 80204ec:	f000 fa66 	bl	80209bc <cmox_ctr_construct>
 80204f0:	9953      	ldr	r1, [sp, #332]	@ 0x14c
 80204f2:	9a52      	ldr	r2, [sp, #328]	@ 0x148
 80204f4:	9104      	str	r1, [sp, #16]
 80204f6:	9951      	ldr	r1, [sp, #324]	@ 0x144
 80204f8:	9203      	str	r2, [sp, #12]
 80204fa:	9a50      	ldr	r2, [sp, #320]	@ 0x140
 80204fc:	9102      	str	r1, [sp, #8]
 80204fe:	9700      	str	r7, [sp, #0]
 8020500:	9201      	str	r2, [sp, #4]
 8020502:	4633      	mov	r3, r6
 8020504:	462a      	mov	r2, r5
 8020506:	4621      	mov	r1, r4
 8020508:	f7ff ffb2 	bl	8020470 <cmox_cipher_innerCompute>
 802050c:	b04b      	add	sp, #300	@ 0x12c
 802050e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020510:	080204d4 	.word	0x080204d4

08020514 <cmox_initialize>:
 8020514:	b140      	cbz	r0, 8020528 <cmox_initialize+0x14>
 8020516:	6801      	ldr	r1, [r0, #0]
 8020518:	b129      	cbz	r1, 8020526 <cmox_initialize+0x12>
 802051a:	4a04      	ldr	r2, [pc, #16]	@ (802052c <cmox_initialize+0x18>)
 802051c:	4291      	cmp	r1, r2
 802051e:	d102      	bne.n	8020526 <cmox_initialize+0x12>
 8020520:	2101      	movs	r1, #1
 8020522:	4b03      	ldr	r3, [pc, #12]	@ (8020530 <cmox_initialize+0x1c>)
 8020524:	7019      	strb	r1, [r3, #0]
 8020526:	6840      	ldr	r0, [r0, #4]
 8020528:	f009 be18 	b.w	802a15c <cmox_ll_init>
 802052c:	48370000 	.word	0x48370000
 8020530:	200000a4 	.word	0x200000a4

08020534 <cmox_aesFast_encrypt>:
 8020534:	f100 030c 	add.w	r3, r0, #12
 8020538:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802053c:	b08c      	sub	sp, #48	@ 0x30
 802053e:	681a      	ldr	r2, [r3, #0]
 8020540:	684c      	ldr	r4, [r1, #4]
 8020542:	6845      	ldr	r5, [r0, #4]
 8020544:	6808      	ldr	r0, [r1, #0]
 8020546:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 802054a:	688f      	ldr	r7, [r1, #8]
 802054c:	4050      	eors	r0, r2
 802054e:	685a      	ldr	r2, [r3, #4]
 8020550:	68d9      	ldr	r1, [r3, #12]
 8020552:	08ed      	lsrs	r5, r5, #3
 8020554:	4054      	eors	r4, r2
 8020556:	689a      	ldr	r2, [r3, #8]
 8020558:	1ced      	adds	r5, r5, #3
 802055a:	ea81 0e0e 	eor.w	lr, r1, lr
 802055e:	4057      	eors	r7, r2
 8020560:	4ab9      	ldr	r2, [pc, #740]	@ (8020848 <cmox_aesFast_encrypt+0x314>)
 8020562:	9500      	str	r5, [sp, #0]
 8020564:	4621      	mov	r1, r4
 8020566:	e061      	b.n	802062c <cmox_aesFast_encrypt+0xf8>
 8020568:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802056a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802056e:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
 8020572:	f852 c020 	ldr.w	ip, [r2, r0, lsl #2]
 8020576:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 802057a:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 802057e:	ea4f 203c 	mov.w	r0, ip, ror #8
 8020582:	f852 c02a 	ldr.w	ip, [r2, sl, lsl #2]
 8020586:	ea80 0008 	eor.w	r0, r0, r8
 802058a:	9c03      	ldr	r4, [sp, #12]
 802058c:	ea80 403c 	eor.w	r0, r0, ip, ror #16
 8020590:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8020594:	9d02      	ldr	r5, [sp, #8]
 8020596:	ea90 6031 	eors.w	r0, r0, r1, ror #24
 802059a:	6819      	ldr	r1, [r3, #0]
 802059c:	9e01      	ldr	r6, [sp, #4]
 802059e:	4048      	eors	r0, r1
 80205a0:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80205a4:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 80205a8:	f852 e029 	ldr.w	lr, [r2, r9, lsl #2]
 80205ac:	ea97 2131 	eors.w	r1, r7, r1, ror #8
 80205b0:	9f08      	ldr	r7, [sp, #32]
 80205b2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80205b6:	ea81 413c 	eor.w	r1, r1, ip, ror #16
 80205ba:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80205be:	ea81 613e 	eor.w	r1, r1, lr, ror #24
 80205c2:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80205c6:	ea8c 0101 	eor.w	r1, ip, r1
 80205ca:	f852 c027 	ldr.w	ip, [r2, r7, lsl #2]
 80205ce:	ea4f 273c 	mov.w	r7, ip, ror #8
 80205d2:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 80205d6:	f8dd e018 	ldr.w	lr, [sp, #24]
 80205da:	f852 802e 	ldr.w	r8, [r2, lr, lsl #2]
 80205de:	ea4f 6e38 	mov.w	lr, r8, ror #24
 80205e2:	f852 8029 	ldr.w	r8, [r2, r9, lsl #2]
 80205e6:	ea87 0708 	eor.w	r7, r7, r8
 80205ea:	ea87 473c 	eor.w	r7, r7, ip, ror #16
 80205ee:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80205f2:	ea8e 0707 	eor.w	r7, lr, r7
 80205f6:	f8dd e010 	ldr.w	lr, [sp, #16]
 80205fa:	ea8c 0707 	eor.w	r7, ip, r7
 80205fe:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 8020602:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8020606:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
 802060a:	ea4f 443c 	mov.w	r4, ip, ror #16
 802060e:	f852 c025 	ldr.w	ip, [r2, r5, lsl #2]
 8020612:	ea4f 653c 	mov.w	r5, ip, ror #24
 8020616:	f852 c026 	ldr.w	ip, [r2, r6, lsl #2]
 802061a:	ea8e 0e0c 	eor.w	lr, lr, ip
 802061e:	ea84 0e0e 	eor.w	lr, r4, lr
 8020622:	68dc      	ldr	r4, [r3, #12]
 8020624:	ea85 0e0e 	eor.w	lr, r5, lr
 8020628:	ea84 0e0e 	eor.w	lr, r4, lr
 802062c:	020d      	lsls	r5, r1, #8
 802062e:	fa5f f88e 	uxtb.w	r8, lr
 8020632:	0e2d      	lsrs	r5, r5, #24
 8020634:	f852 a028 	ldr.w	sl, [r2, r8, lsl #2]
 8020638:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 802063c:	ea4f 4c07 	mov.w	ip, r7, lsl #16
 8020640:	ea4f 683a 	mov.w	r8, sl, ror #24
 8020644:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8020648:	ea4f 2936 	mov.w	r9, r6, ror #8
 802064c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8020650:	f852 a02b 	ldr.w	sl, [r2, fp, lsl #2]
 8020654:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8020658:	f8d3 c010 	ldr.w	ip, [r3, #16]
 802065c:	ea89 090a 	eor.w	r9, r9, sl
 8020660:	ea89 4936 	eor.w	r9, r9, r6, ror #16
 8020664:	ea88 0909 	eor.w	r9, r8, r9
 8020668:	ea8c 0909 	eor.w	r9, ip, r9
 802066c:	ea4f 2807 	mov.w	r8, r7, lsl #8
 8020670:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8020674:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8020678:	f852 a028 	ldr.w	sl, [r2, r8, lsl #2]
 802067c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8020680:	f852 802c 	ldr.w	r8, [r2, ip, lsl #2]
 8020684:	ea4f 4c38 	mov.w	ip, r8, ror #16
 8020688:	fa5f f880 	uxtb.w	r8, r0
 802068c:	f852 b028 	ldr.w	fp, [r2, r8, lsl #2]
 8020690:	ea4f 683b 	mov.w	r8, fp, ror #24
 8020694:	ea4f 6b11 	mov.w	fp, r1, lsr #24
 8020698:	f852 b02b 	ldr.w	fp, [r2, fp, lsl #2]
 802069c:	ea8b 2a3a 	eor.w	sl, fp, sl, ror #8
 80206a0:	ea8c 0a0a 	eor.w	sl, ip, sl
 80206a4:	f8d3 c014 	ldr.w	ip, [r3, #20]
 80206a8:	ea88 0a0a 	eor.w	sl, r8, sl
 80206ac:	ea4f 280e 	mov.w	r8, lr, lsl #8
 80206b0:	ea8c 0a0a 	eor.w	sl, ip, sl
 80206b4:	ea4f 6818 	mov.w	r8, r8, lsr #24
 80206b8:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 80206bc:	f852 b028 	ldr.w	fp, [r2, r8, lsl #2]
 80206c0:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 80206c4:	f852 802c 	ldr.w	r8, [r2, ip, lsl #2]
 80206c8:	fa5f fc81 	uxtb.w	ip, r1
 80206cc:	0409      	lsls	r1, r1, #16
 80206ce:	ea4f 4838 	mov.w	r8, r8, ror #16
 80206d2:	f8cd 8004 	str.w	r8, [sp, #4]
 80206d6:	f852 802c 	ldr.w	r8, [r2, ip, lsl #2]
 80206da:	0e09      	lsrs	r1, r1, #24
 80206dc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80206e0:	ea4f 6c38 	mov.w	ip, r8, ror #24
 80206e4:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80206e8:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
 80206ec:	0200      	lsls	r0, r0, #8
 80206ee:	0e00      	lsrs	r0, r0, #24
 80206f0:	ea88 2b3b 	eor.w	fp, r8, fp, ror #8
 80206f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80206f8:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 80206fc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8020700:	ea88 0b0b 	eor.w	fp, r8, fp
 8020704:	ea8c 0b0b 	eor.w	fp, ip, fp
 8020708:	f8d3 c018 	ldr.w	ip, [r3, #24]
 802070c:	b2ff      	uxtb	r7, r7
 802070e:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 8020712:	ea8c 0b0b 	eor.w	fp, ip, fp
 8020716:	ea4f 4c31 	mov.w	ip, r1, ror #16
 802071a:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
 802071e:	ea4f 280b 	mov.w	r8, fp, lsl #8
 8020722:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8020726:	ea91 2030 	eors.w	r0, r1, r0, ror #8
 802072a:	ea8c 0100 	eor.w	r1, ip, r0
 802072e:	ea91 6137 	eors.w	r1, r1, r7, ror #24
 8020732:	9f00      	ldr	r7, [sp, #0]
 8020734:	69d8      	ldr	r0, [r3, #28]
 8020736:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802073a:	1e7f      	subs	r7, r7, #1
 802073c:	9700      	str	r7, [sp, #0]
 802073e:	4041      	eors	r1, r0
 8020740:	ea4f 470a 	mov.w	r7, sl, lsl #16
 8020744:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020748:	0e3f      	lsrs	r7, r7, #24
 802074a:	f8cd e004 	str.w	lr, [sp, #4]
 802074e:	9703      	str	r7, [sp, #12]
 8020750:	ea4f 2e09 	mov.w	lr, r9, lsl #8
 8020754:	ea4f 671b 	mov.w	r7, fp, lsr #24
 8020758:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 802075c:	9705      	str	r7, [sp, #20]
 802075e:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8020762:	f8cd e010 	str.w	lr, [sp, #16]
 8020766:	020f      	lsls	r7, r1, #8
 8020768:	0e00      	lsrs	r0, r0, #24
 802076a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802076e:	0e3f      	lsrs	r7, r7, #24
 8020770:	900a      	str	r0, [sp, #40]	@ 0x28
 8020772:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8020776:	9708      	str	r7, [sp, #32]
 8020778:	9800      	ldr	r0, [sp, #0]
 802077a:	f8cd e01c 	str.w	lr, [sp, #28]
 802077e:	ea4f 671a 	mov.w	r7, sl, lsr #24
 8020782:	ea4f 2c0a 	mov.w	ip, sl, lsl #8
 8020786:	3320      	adds	r3, #32
 8020788:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 802078c:	ea4f 6819 	mov.w	r8, r9, lsr #24
 8020790:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8020794:	fa5f fb8b 	uxtb.w	fp, fp
 8020798:	fa5f fa8a 	uxtb.w	sl, sl
 802079c:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 80207a0:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 80207a4:	f8cd b008 	str.w	fp, [sp, #8]
 80207a8:	f8cd a018 	str.w	sl, [sp, #24]
 80207ac:	fa5f f989 	uxtb.w	r9, r9
 80207b0:	b2c9      	uxtb	r1, r1
 80207b2:	2800      	cmp	r0, #0
 80207b4:	f47f aed8 	bne.w	8020568 <cmox_aesFast_encrypt+0x34>
 80207b8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80207ba:	4c24      	ldr	r4, [pc, #144]	@ (802084c <cmox_aesFast_encrypt+0x318>)
 80207bc:	f814 0008 	ldrb.w	r0, [r4, r8]
 80207c0:	5d66      	ldrb	r6, [r4, r5]
 80207c2:	5c61      	ldrb	r1, [r4, r1]
 80207c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80207c6:	0436      	lsls	r6, r6, #16
 80207c8:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 80207cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80207ce:	5c25      	ldrb	r5, [r4, r0]
 80207d0:	6818      	ldr	r0, [r3, #0]
 80207d2:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 80207d6:	430e      	orrs	r6, r1
 80207d8:	4046      	eors	r6, r0
 80207da:	6016      	str	r6, [r2, #0]
 80207dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80207de:	5de5      	ldrb	r5, [r4, r7]
 80207e0:	f814 1009 	ldrb.w	r1, [r4, r9]
 80207e4:	5c26      	ldrb	r6, [r4, r0]
 80207e6:	6858      	ldr	r0, [r3, #4]
 80207e8:	0436      	lsls	r6, r6, #16
 80207ea:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
 80207ee:	f814 500e 	ldrb.w	r5, [r4, lr]
 80207f2:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 80207f6:	430e      	orrs	r6, r1
 80207f8:	4046      	eors	r6, r0
 80207fa:	6056      	str	r6, [r2, #4]
 80207fc:	9905      	ldr	r1, [sp, #20]
 80207fe:	9e06      	ldr	r6, [sp, #24]
 8020800:	5c60      	ldrb	r0, [r4, r1]
 8020802:	9908      	ldr	r1, [sp, #32]
 8020804:	5c65      	ldrb	r5, [r4, r1]
 8020806:	042d      	lsls	r5, r5, #16
 8020808:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 802080c:	9807      	ldr	r0, [sp, #28]
 802080e:	5c21      	ldrb	r1, [r4, r0]
 8020810:	6898      	ldr	r0, [r3, #8]
 8020812:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 8020816:	5da1      	ldrb	r1, [r4, r6]
 8020818:	430d      	orrs	r5, r1
 802081a:	4045      	eors	r5, r0
 802081c:	6095      	str	r5, [r2, #8]
 802081e:	9901      	ldr	r1, [sp, #4]
 8020820:	9e02      	ldr	r6, [sp, #8]
 8020822:	5c60      	ldrb	r0, [r4, r1]
 8020824:	9904      	ldr	r1, [sp, #16]
 8020826:	5c65      	ldrb	r5, [r4, r1]
 8020828:	042d      	lsls	r5, r5, #16
 802082a:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 802082e:	9803      	ldr	r0, [sp, #12]
 8020830:	5c21      	ldrb	r1, [r4, r0]
 8020832:	5da0      	ldrb	r0, [r4, r6]
 8020834:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 8020838:	68d9      	ldr	r1, [r3, #12]
 802083a:	4305      	orrs	r5, r0
 802083c:	404d      	eors	r5, r1
 802083e:	60d5      	str	r5, [r2, #12]
 8020840:	b00d      	add	sp, #52	@ 0x34
 8020842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020846:	bf00      	nop
 8020848:	0802e354 	.word	0x0802e354
 802084c:	0802e754 	.word	0x0802e754

08020850 <cmox_ctr_cleanup>:
 8020850:	b510      	push	{r4, lr}
 8020852:	f000 f8ab 	bl	80209ac <cmox_ctr_getByCipher>
 8020856:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 802085a:	2800      	cmp	r0, #0
 802085c:	bf0e      	itee	eq
 802085e:	4c03      	ldreq	r4, [pc, #12]	@ (802086c <cmox_ctr_cleanup+0x1c>)
 8020860:	f44f 718a 	movne.w	r1, #276	@ 0x114
 8020864:	f00a ff8f 	blne	802b786 <__aeabi_memclr>
 8020868:	4620      	mov	r0, r4
 802086a:	bd10      	pop	{r4, pc}
 802086c:	00010003 	.word	0x00010003

08020870 <cmox_ctr_init>:
 8020870:	b510      	push	{r4, lr}
 8020872:	0004      	movs	r4, r0
 8020874:	d101      	bne.n	802087a <cmox_ctr_init+0xa>
 8020876:	4805      	ldr	r0, [pc, #20]	@ (802088c <cmox_ctr_init+0x1c>)
 8020878:	bd10      	pop	{r4, pc}
 802087a:	f000 f897 	bl	80209ac <cmox_ctr_getByCipher>
 802087e:	f100 0108 	add.w	r1, r0, #8
 8020882:	4620      	mov	r0, r4
 8020884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020888:	f000 b932 	b.w	8020af0 <cmox_cipherMode_init>
 802088c:	00010003 	.word	0x00010003

08020890 <cmox_ctr_setKey>:
 8020890:	b538      	push	{r3, r4, r5, lr}
 8020892:	460c      	mov	r4, r1
 8020894:	4615      	mov	r5, r2
 8020896:	b908      	cbnz	r0, 802089c <cmox_ctr_setKey+0xc>
 8020898:	4805      	ldr	r0, [pc, #20]	@ (80208b0 <cmox_ctr_setKey+0x20>)
 802089a:	bd32      	pop	{r1, r4, r5, pc}
 802089c:	f000 f886 	bl	80209ac <cmox_ctr_getByCipher>
 80208a0:	462a      	mov	r2, r5
 80208a2:	4621      	mov	r1, r4
 80208a4:	3008      	adds	r0, #8
 80208a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80208aa:	f000 b929 	b.w	8020b00 <cmox_cipherMode_setKey>
 80208ae:	bf00      	nop
 80208b0:	00010003 	.word	0x00010003

080208b4 <cmox_ctr_setIV>:
 80208b4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80208b6:	0004      	movs	r4, r0
 80208b8:	460d      	mov	r5, r1
 80208ba:	4616      	mov	r6, r2
 80208bc:	d002      	beq.n	80208c4 <cmox_ctr_setIV+0x10>
 80208be:	f000 f875 	bl	80209ac <cmox_ctr_getByCipher>
 80208c2:	b908      	cbnz	r0, 80208c8 <cmox_ctr_setIV+0x14>
 80208c4:	4807      	ldr	r0, [pc, #28]	@ (80208e4 <cmox_ctr_setIV+0x30>)
 80208c6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80208c8:	2e10      	cmp	r6, #16
 80208ca:	4633      	mov	r3, r6
 80208cc:	462a      	mov	r2, r5
 80208ce:	bf0c      	ite	eq
 80208d0:	2101      	moveq	r1, #1
 80208d2:	2100      	movne	r1, #0
 80208d4:	9100      	str	r1, [sp, #0]
 80208d6:	f500 7182 	add.w	r1, r0, #260	@ 0x104
 80208da:	4620      	mov	r0, r4
 80208dc:	f000 faf4 	bl	8020ec8 <cmox_cipherMode_setIV>
 80208e0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80208e2:	bf00      	nop
 80208e4:	00010003 	.word	0x00010003

080208e8 <cmox_ctr_append>:
 80208e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208ec:	b088      	sub	sp, #32
 80208ee:	4604      	mov	r4, r0
 80208f0:	7920      	ldrb	r0, [r4, #4]
 80208f2:	468b      	mov	fp, r1
 80208f4:	4690      	mov	r8, r2
 80208f6:	07c1      	lsls	r1, r0, #31
 80208f8:	4699      	mov	r9, r3
 80208fa:	bf58      	it	pl
 80208fc:	4825      	ldrpl	r0, [pc, #148]	@ (8020994 <cmox_ctr_append+0xac>)
 80208fe:	d545      	bpl.n	802098c <cmox_ctr_append+0xa4>
 8020900:	4620      	mov	r0, r4
 8020902:	f000 f853 	bl	80209ac <cmox_ctr_getByCipher>
 8020906:	4605      	mov	r5, r0
 8020908:	7c28      	ldrb	r0, [r5, #16]
 802090a:	f000 0005 	and.w	r0, r0, #5
 802090e:	2805      	cmp	r0, #5
 8020910:	bf18      	it	ne
 8020912:	4821      	ldrne	r0, [pc, #132]	@ (8020998 <cmox_ctr_append+0xb0>)
 8020914:	d13a      	bne.n	802098c <cmox_ctr_append+0xa4>
 8020916:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8020918:	b10f      	cbz	r7, 802091e <cmox_ctr_append+0x36>
 802091a:	2000      	movs	r0, #0
 802091c:	6038      	str	r0, [r7, #0]
 802091e:	2600      	movs	r6, #0
 8020920:	e011      	b.n	8020946 <cmox_ctr_append+0x5e>
 8020922:	f81d 0001 	ldrb.w	r0, [sp, r1]
 8020926:	f81b 3002 	ldrb.w	r3, [fp, r2]
 802092a:	4058      	eors	r0, r3
 802092c:	f809 0002 	strb.w	r0, [r9, r2]
 8020930:	b117      	cbz	r7, 8020938 <cmox_ctr_append+0x50>
 8020932:	683a      	ldr	r2, [r7, #0]
 8020934:	1c52      	adds	r2, r2, #1
 8020936:	603a      	str	r2, [r7, #0]
 8020938:	1c49      	adds	r1, r1, #1
 802093a:	4551      	cmp	r1, sl
 802093c:	d202      	bcs.n	8020944 <cmox_ctr_append+0x5c>
 802093e:	198a      	adds	r2, r1, r6
 8020940:	4590      	cmp	r8, r2
 8020942:	d2ee      	bcs.n	8020922 <cmox_ctr_append+0x3a>
 8020944:	3610      	adds	r6, #16
 8020946:	4546      	cmp	r6, r8
 8020948:	d21a      	bcs.n	8020980 <cmox_ctr_append+0x98>
 802094a:	68ab      	ldr	r3, [r5, #8]
 802094c:	eba8 0a06 	sub.w	sl, r8, r6
 8020950:	f1ba 0f10 	cmp.w	sl, #16
 8020954:	f8d3 c000 	ldr.w	ip, [r3]
 8020958:	aa04      	add	r2, sp, #16
 802095a:	bf88      	it	hi
 802095c:	f04f 0a10 	movhi.w	sl, #16
 8020960:	f505 7182 	add.w	r1, r5, #260	@ 0x104
 8020964:	f105 0008 	add.w	r0, r5, #8
 8020968:	47e0      	blx	ip
 802096a:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
 802096e:	4669      	mov	r1, sp
 8020970:	1c40      	adds	r0, r0, #1
 8020972:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
 8020976:	a804      	add	r0, sp, #16
 8020978:	f000 fae2 	bl	8020f40 <convert_block_2_bytes>
 802097c:	2100      	movs	r1, #0
 802097e:	e7dc      	b.n	802093a <cmox_ctr_append+0x52>
 8020980:	45b0      	cmp	r8, r6
 8020982:	bf3c      	itt	cc
 8020984:	2000      	movcc	r0, #0
 8020986:	6060      	strcc	r0, [r4, #4]
 8020988:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 802098c:	b009      	add	sp, #36	@ 0x24
 802098e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020992:	bf00      	nop
 8020994:	00010003 	.word	0x00010003
 8020998:	00010004 	.word	0x00010004

0802099c <cmox_ctr_general_dir>:
 802099c:	b110      	cbz	r0, 80209a4 <cmox_ctr_general_dir+0x8>
 802099e:	4a02      	ldr	r2, [pc, #8]	@ (80209a8 <cmox_ctr_general_dir+0xc>)
 80209a0:	6002      	str	r2, [r0, #0]
 80209a2:	6081      	str	r1, [r0, #8]
 80209a4:	4770      	bx	lr
 80209a6:	bf00      	nop
 80209a8:	0802c3f8 	.word	0x0802c3f8

080209ac <cmox_ctr_getByCipher>:
 80209ac:	6801      	ldr	r1, [r0, #0]
 80209ae:	4a02      	ldr	r2, [pc, #8]	@ (80209b8 <cmox_ctr_getByCipher+0xc>)
 80209b0:	4291      	cmp	r1, r2
 80209b2:	bf18      	it	ne
 80209b4:	2000      	movne	r0, #0
 80209b6:	4770      	bx	lr
 80209b8:	0802c3f8 	.word	0x0802c3f8

080209bc <cmox_ctr_construct>:
 80209bc:	460a      	mov	r2, r1
 80209be:	6853      	ldr	r3, [r2, #4]
 80209c0:	6812      	ldr	r2, [r2, #0]
 80209c2:	6819      	ldr	r1, [r3, #0]

080209c4 <__iar_annotation$$tailcall>:
 80209c4:	4710      	bx	r2
	...

080209c8 <cmox_aesSmall_keySchedule>:
 80209c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80209cc:	f100 050c 	add.w	r5, r0, #12
 80209d0:	2400      	movs	r4, #0
 80209d2:	0892      	lsrs	r2, r2, #2
 80209d4:	4b43      	ldr	r3, [pc, #268]	@ (8020ae4 <cmox_aesSmall_keySchedule+0x11c>)
 80209d6:	2000      	movs	r0, #0
 80209d8:	e010      	b.n	80209fc <cmox_aesSmall_keySchedule+0x34>
 80209da:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80209de:	f896 c001 	ldrb.w	ip, [r6, #1]
 80209e2:	7837      	ldrb	r7, [r6, #0]
 80209e4:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80209e8:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
 80209ec:	78b7      	ldrb	r7, [r6, #2]
 80209ee:	78f6      	ldrb	r6, [r6, #3]
 80209f0:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
 80209f4:	433e      	orrs	r6, r7
 80209f6:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
 80209fa:	1c40      	adds	r0, r0, #1
 80209fc:	4290      	cmp	r0, r2
 80209fe:	d3ec      	bcc.n	80209da <cmox_aesSmall_keySchedule+0x12>
 8020a00:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8020a04:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8020a08:	4f37      	ldr	r7, [pc, #220]	@ (8020ae8 <cmox_aesSmall_keySchedule+0x120>)
 8020a0a:	f8d5 c000 	ldr.w	ip, [r5]
 8020a0e:	0406      	lsls	r6, r0, #16
 8020a10:	0201      	lsls	r1, r0, #8
 8020a12:	0e36      	lsrs	r6, r6, #24
 8020a14:	0e09      	lsrs	r1, r1, #24
 8020a16:	5dbe      	ldrb	r6, [r7, r6]
 8020a18:	5c79      	ldrb	r1, [r7, r1]
 8020a1a:	0436      	lsls	r6, r6, #16
 8020a1c:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 8020a20:	b2c1      	uxtb	r1, r0
 8020a22:	5c79      	ldrb	r1, [r7, r1]
 8020a24:	0e00      	lsrs	r0, r0, #24
 8020a26:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 8020a2a:	5c39      	ldrb	r1, [r7, r0]
 8020a2c:	ea41 0006 	orr.w	r0, r1, r6
 8020a30:	ea80 010c 	eor.w	r1, r0, ip
 8020a34:	4e2d      	ldr	r6, [pc, #180]	@ (8020aec <cmox_aesSmall_keySchedule+0x124>)
 8020a36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8020a3a:	1c64      	adds	r4, r4, #1
 8020a3c:	4048      	eors	r0, r1
 8020a3e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 8020a42:	2001      	movs	r0, #1
 8020a44:	1881      	adds	r1, r0, r2
 8020a46:	1f2e      	subs	r6, r5, #4
 8020a48:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 8020a4c:	f855 c020 	ldr.w	ip, [r5, r0, lsl #2]
 8020a50:	1c40      	adds	r0, r0, #1
 8020a52:	2804      	cmp	r0, #4
 8020a54:	ea8c 0606 	eor.w	r6, ip, r6
 8020a58:	f845 6021 	str.w	r6, [r5, r1, lsl #2]
 8020a5c:	d3f2      	bcc.n	8020a44 <cmox_aesSmall_keySchedule+0x7c>
 8020a5e:	2a04      	cmp	r2, #4
 8020a60:	d004      	beq.n	8020a6c <cmox_aesSmall_keySchedule+0xa4>
 8020a62:	2a06      	cmp	r2, #6
 8020a64:	d00b      	beq.n	8020a7e <cmox_aesSmall_keySchedule+0xb6>
 8020a66:	2a08      	cmp	r2, #8
 8020a68:	d014      	beq.n	8020a94 <cmox_aesSmall_keySchedule+0xcc>
 8020a6a:	e037      	b.n	8020adc <cmox_aesSmall_keySchedule+0x114>
 8020a6c:	2c0a      	cmp	r4, #10
 8020a6e:	d204      	bcs.n	8020a7a <cmox_aesSmall_keySchedule+0xb2>
 8020a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020a74:	d001      	beq.n	8020a7a <cmox_aesSmall_keySchedule+0xb2>
 8020a76:	4645      	mov	r5, r8
 8020a78:	e7c2      	b.n	8020a00 <cmox_aesSmall_keySchedule+0x38>
 8020a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a7e:	2c07      	cmp	r4, #7
 8020a80:	d8fb      	bhi.n	8020a7a <cmox_aesSmall_keySchedule+0xb2>
 8020a82:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8020a84:	6928      	ldr	r0, [r5, #16]
 8020a86:	4047      	eors	r7, r0
 8020a88:	62af      	str	r7, [r5, #40]	@ 0x28
 8020a8a:	6968      	ldr	r0, [r5, #20]
 8020a8c:	ea80 0107 	eor.w	r1, r0, r7
 8020a90:	62e9      	str	r1, [r5, #44]	@ 0x2c
 8020a92:	e7ed      	b.n	8020a70 <cmox_aesSmall_keySchedule+0xa8>
 8020a94:	2c07      	cmp	r4, #7
 8020a96:	d2f0      	bcs.n	8020a7a <cmox_aesSmall_keySchedule+0xb2>
 8020a98:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8020a9a:	6929      	ldr	r1, [r5, #16]
 8020a9c:	0e06      	lsrs	r6, r0, #24
 8020a9e:	f817 e006 	ldrb.w	lr, [r7, r6]
 8020aa2:	0206      	lsls	r6, r0, #8
 8020aa4:	0e36      	lsrs	r6, r6, #24
 8020aa6:	5dbe      	ldrb	r6, [r7, r6]
 8020aa8:	0436      	lsls	r6, r6, #16
 8020aaa:	ea46 6c0e 	orr.w	ip, r6, lr, lsl #24
 8020aae:	0406      	lsls	r6, r0, #16
 8020ab0:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8020ab4:	f817 600e 	ldrb.w	r6, [r7, lr]
 8020ab8:	b2c0      	uxtb	r0, r0
 8020aba:	5c38      	ldrb	r0, [r7, r0]
 8020abc:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
 8020ac0:	4330      	orrs	r0, r6
 8020ac2:	4041      	eors	r1, r0
 8020ac4:	6329      	str	r1, [r5, #48]	@ 0x30
 8020ac6:	2005      	movs	r0, #5
 8020ac8:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8020acc:	69cf      	ldr	r7, [r1, #28]
 8020ace:	680e      	ldr	r6, [r1, #0]
 8020ad0:	1c40      	adds	r0, r0, #1
 8020ad2:	4077      	eors	r7, r6
 8020ad4:	620f      	str	r7, [r1, #32]
 8020ad6:	2807      	cmp	r0, #7
 8020ad8:	d9f6      	bls.n	8020ac8 <cmox_aesSmall_keySchedule+0x100>
 8020ada:	e7c9      	b.n	8020a70 <cmox_aesSmall_keySchedule+0xa8>
 8020adc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8020ae0:	e7c9      	b.n	8020a76 <cmox_aesSmall_keySchedule+0xae>
 8020ae2:	bf00      	nop
 8020ae4:	00010004 	.word	0x00010004
 8020ae8:	0802e754 	.word	0x0802e754
 8020aec:	0802c424 	.word	0x0802c424

08020af0 <cmox_cipherMode_init>:
 8020af0:	2200      	movs	r2, #0
 8020af2:	6042      	str	r2, [r0, #4]
 8020af4:	2001      	movs	r0, #1
 8020af6:	6088      	str	r0, [r1, #8]
 8020af8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8020afc:	4770      	bx	lr
	...

08020b00 <cmox_cipherMode_setKey>:
 8020b00:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b04:	b08c      	sub	sp, #48	@ 0x30
 8020b06:	4692      	mov	sl, r2
 8020b08:	4ae8      	ldr	r2, [pc, #928]	@ (8020eac <cmox_cipherMode_setKey+0x3ac>)
 8020b0a:	4be9      	ldr	r3, [pc, #932]	@ (8020eb0 <cmox_cipherMode_setKey+0x3b0>)
 8020b0c:	4de9      	ldr	r5, [pc, #932]	@ (8020eb4 <cmox_cipherMode_setKey+0x3b4>)
 8020b0e:	f8df 83a8 	ldr.w	r8, [pc, #936]	@ 8020eb8 <cmox_cipherMode_setKey+0x3b8>
 8020b12:	4eea      	ldr	r6, [pc, #936]	@ (8020ebc <cmox_cipherMode_setKey+0x3bc>)
 8020b14:	f8df b3a8 	ldr.w	fp, [pc, #936]	@ 8020ec0 <cmox_cipherMode_setKey+0x3c0>
 8020b18:	f10d 0c04 	add.w	ip, sp, #4
 8020b1c:	f1ba 0f10 	cmp.w	sl, #16
 8020b20:	d008      	beq.n	8020b34 <cmox_cipherMode_setKey+0x34>
 8020b22:	f1ba 0f18 	cmp.w	sl, #24
 8020b26:	f000 8092 	beq.w	8020c4e <cmox_cipherMode_setKey+0x14e>
 8020b2a:	f1ba 0f20 	cmp.w	sl, #32
 8020b2e:	f000 8118 	beq.w	8020d62 <cmox_cipherMode_setKey+0x262>
 8020b32:	e1a8      	b.n	8020e86 <cmox_cipherMode_setKey+0x386>
 8020b34:	e9db 0400 	ldrd	r0, r4, [fp]
 8020b38:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8020b3c:	4fe1      	ldr	r7, [pc, #900]	@ (8020ec4 <cmox_cipherMode_setKey+0x3c4>)
 8020b3e:	e9ce 0400 	strd	r0, r4, [lr]
 8020b42:	7838      	ldrb	r0, [r7, #0]
 8020b44:	2800      	cmp	r0, #0
 8020b46:	bf0c      	ite	eq
 8020b48:	f04f 0900 	moveq.w	r9, #0
 8020b4c:	f04f 0904 	movne.w	r9, #4
 8020b50:	f856 4009 	ldr.w	r4, [r6, r9]
 8020b54:	f85e 7009 	ldr.w	r7, [lr, r9]
 8020b58:	443c      	add	r4, r7
 8020b5a:	6023      	str	r3, [r4, #0]
 8020b5c:	6827      	ldr	r7, [r4, #0]
 8020b5e:	2301      	movs	r3, #1
 8020b60:	60a3      	str	r3, [r4, #8]
 8020b62:	7b8c      	ldrb	r4, [r1, #14]
 8020b64:	6873      	ldr	r3, [r6, #4]
 8020b66:	f8d6 9000 	ldr.w	r9, [r6]
 8020b6a:	9400      	str	r4, [sp, #0]
 8020b6c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020b6e:	405f      	eors	r7, r3
 8020b70:	407c      	eors	r4, r7
 8020b72:	f8de 7004 	ldr.w	r7, [lr, #4]
 8020b76:	f084 0404 	eor.w	r4, r4, #4
 8020b7a:	ea87 0709 	eor.w	r7, r7, r9
 8020b7e:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 8020b82:	9f00      	ldr	r7, [sp, #0]
 8020b84:	4474      	add	r4, lr
 8020b86:	f084 0e52 	eor.w	lr, r4, #82	@ 0x52
 8020b8a:	44be      	add	lr, r7
 8020b8c:	f88c e00e 	strb.w	lr, [ip, #14]
 8020b90:	f04f 0e01 	mov.w	lr, #1
 8020b94:	f811 400e 	ldrb.w	r4, [r1, lr]
 8020b98:	f80c 400e 	strb.w	r4, [ip, lr]
 8020b9c:	f10e 0e01 	add.w	lr, lr, #1
 8020ba0:	f1be 0f0e 	cmp.w	lr, #14
 8020ba4:	d3f6      	bcc.n	8020b94 <cmox_cipherMode_setKey+0x94>
 8020ba6:	e9db 4700 	ldrd	r4, r7, [fp]
 8020baa:	2800      	cmp	r0, #0
 8020bac:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8020bb0:	e9ce 4700 	strd	r4, r7, [lr]
 8020bb4:	bf0c      	ite	eq
 8020bb6:	2700      	moveq	r7, #0
 8020bb8:	2704      	movne	r7, #4
 8020bba:	463c      	mov	r4, r7
 8020bbc:	59f7      	ldr	r7, [r6, r7]
 8020bbe:	f85e 4004 	ldr.w	r4, [lr, r4]
 8020bc2:	19e4      	adds	r4, r4, r7
 8020bc4:	f8c4 8000 	str.w	r8, [r4]
 8020bc8:	f8d4 8000 	ldr.w	r8, [r4]
 8020bcc:	2701      	movs	r7, #1
 8020bce:	60a7      	str	r7, [r4, #8]
 8020bd0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020bd2:	ea83 0808 	eor.w	r8, r3, r8
 8020bd6:	780f      	ldrb	r7, [r1, #0]
 8020bd8:	ea84 0408 	eor.w	r4, r4, r8
 8020bdc:	f084 0804 	eor.w	r8, r4, #4
 8020be0:	f8de 4004 	ldr.w	r4, [lr, #4]
 8020be4:	2800      	cmp	r0, #0
 8020be6:	ea84 0409 	eor.w	r4, r4, r9
 8020bea:	f084 04fc 	eor.w	r4, r4, #252	@ 0xfc
 8020bee:	4444      	add	r4, r8
 8020bf0:	f084 080b 	eor.w	r8, r4, #11
 8020bf4:	e9db 4e00 	ldrd	r4, lr, [fp]
 8020bf8:	44b8      	add	r8, r7
 8020bfa:	af09      	add	r7, sp, #36	@ 0x24
 8020bfc:	e9c7 4e00 	strd	r4, lr, [r7]
 8020c00:	f88d 8004 	strb.w	r8, [sp, #4]
 8020c04:	bf0e      	itee	eq
 8020c06:	f04f 0e00 	moveq.w	lr, #0
 8020c0a:	2004      	movne	r0, #4
 8020c0c:	4686      	movne	lr, r0
 8020c0e:	ac09      	add	r4, sp, #36	@ 0x24
 8020c10:	5836      	ldr	r6, [r6, r0]
 8020c12:	f854 000e 	ldr.w	r0, [r4, lr]
 8020c16:	1986      	adds	r6, r0, r6
 8020c18:	6035      	str	r5, [r6, #0]
 8020c1a:	6830      	ldr	r0, [r6, #0]
 8020c1c:	2501      	movs	r5, #1
 8020c1e:	60b5      	str	r5, [r6, #8]
 8020c20:	7bce      	ldrb	r6, [r1, #15]
 8020c22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020c24:	4043      	eors	r3, r0
 8020c26:	6860      	ldr	r0, [r4, #4]
 8020c28:	404b      	eors	r3, r1
 8020c2a:	f083 0304 	eor.w	r3, r3, #4
 8020c2e:	ea80 0009 	eor.w	r0, r0, r9
 8020c32:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8020c36:	4403      	add	r3, r0
 8020c38:	f083 0385 	eor.w	r3, r3, #133	@ 0x85
 8020c3c:	199b      	adds	r3, r3, r6
 8020c3e:	f88c 300f 	strb.w	r3, [ip, #15]
 8020c42:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020c44:	7a28      	ldrb	r0, [r5, #8]
 8020c46:	07c1      	lsls	r1, r0, #31
 8020c48:	f100 811f 	bmi.w	8020e8a <cmox_cipherMode_setKey+0x38a>
 8020c4c:	e11b      	b.n	8020e86 <cmox_cipherMode_setKey+0x386>
 8020c4e:	e9db e900 	ldrd	lr, r9, [fp]
 8020c52:	a809      	add	r0, sp, #36	@ 0x24
 8020c54:	4c9b      	ldr	r4, [pc, #620]	@ (8020ec4 <cmox_cipherMode_setKey+0x3c4>)
 8020c56:	e9c0 e900 	strd	lr, r9, [r0]
 8020c5a:	7820      	ldrb	r0, [r4, #0]
 8020c5c:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8020c60:	2800      	cmp	r0, #0
 8020c62:	bf0c      	ite	eq
 8020c64:	f04f 0900 	moveq.w	r9, #0
 8020c68:	f04f 0904 	movne.w	r9, #4
 8020c6c:	f856 4009 	ldr.w	r4, [r6, r9]
 8020c70:	f85e 7009 	ldr.w	r7, [lr, r9]
 8020c74:	443c      	add	r4, r7
 8020c76:	6025      	str	r5, [r4, #0]
 8020c78:	6827      	ldr	r7, [r4, #0]
 8020c7a:	2501      	movs	r5, #1
 8020c7c:	60a5      	str	r5, [r4, #8]
 8020c7e:	7b8c      	ldrb	r4, [r1, #14]
 8020c80:	6875      	ldr	r5, [r6, #4]
 8020c82:	f8d6 9000 	ldr.w	r9, [r6]
 8020c86:	9400      	str	r4, [sp, #0]
 8020c88:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020c8a:	406f      	eors	r7, r5
 8020c8c:	407c      	eors	r4, r7
 8020c8e:	f8de 7004 	ldr.w	r7, [lr, #4]
 8020c92:	f084 0404 	eor.w	r4, r4, #4
 8020c96:	ea87 0709 	eor.w	r7, r7, r9
 8020c9a:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 8020c9e:	9f00      	ldr	r7, [sp, #0]
 8020ca0:	4474      	add	r4, lr
 8020ca2:	f084 0e85 	eor.w	lr, r4, #133	@ 0x85
 8020ca6:	44be      	add	lr, r7
 8020ca8:	f88c e00e 	strb.w	lr, [ip, #14]
 8020cac:	f04f 0e01 	mov.w	lr, #1
 8020cb0:	f811 400e 	ldrb.w	r4, [r1, lr]
 8020cb4:	f80c 400e 	strb.w	r4, [ip, lr]
 8020cb8:	f10e 0e01 	add.w	lr, lr, #1
 8020cbc:	f1be 0f0e 	cmp.w	lr, #14
 8020cc0:	d3f6      	bcc.n	8020cb0 <cmox_cipherMode_setKey+0x1b0>
 8020cc2:	e9db 4700 	ldrd	r4, r7, [fp]
 8020cc6:	2800      	cmp	r0, #0
 8020cc8:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8020ccc:	e9ce 4700 	strd	r4, r7, [lr]
 8020cd0:	bf0c      	ite	eq
 8020cd2:	2700      	moveq	r7, #0
 8020cd4:	2704      	movne	r7, #4
 8020cd6:	463c      	mov	r4, r7
 8020cd8:	59f7      	ldr	r7, [r6, r7]
 8020cda:	f85e 4004 	ldr.w	r4, [lr, r4]
 8020cde:	19e4      	adds	r4, r4, r7
 8020ce0:	6023      	str	r3, [r4, #0]
 8020ce2:	6827      	ldr	r7, [r4, #0]
 8020ce4:	2301      	movs	r3, #1
 8020ce6:	60a3      	str	r3, [r4, #8]
 8020ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020cea:	406f      	eors	r7, r5
 8020cec:	780c      	ldrb	r4, [r1, #0]
 8020cee:	405f      	eors	r7, r3
 8020cf0:	f8de 3004 	ldr.w	r3, [lr, #4]
 8020cf4:	f087 0704 	eor.w	r7, r7, #4
 8020cf8:	ea83 0309 	eor.w	r3, r3, r9
 8020cfc:	f083 03fc 	eor.w	r3, r3, #252	@ 0xfc
 8020d00:	441f      	add	r7, r3
 8020d02:	f087 0752 	eor.w	r7, r7, #82	@ 0x52
 8020d06:	193f      	adds	r7, r7, r4
 8020d08:	f88d 7004 	strb.w	r7, [sp, #4]
 8020d0c:	e9db 7300 	ldrd	r7, r3, [fp]
 8020d10:	2800      	cmp	r0, #0
 8020d12:	ac09      	add	r4, sp, #36	@ 0x24
 8020d14:	e9c4 7300 	strd	r7, r3, [r4]
 8020d18:	bf0e      	itee	eq
 8020d1a:	2300      	moveq	r3, #0
 8020d1c:	2004      	movne	r0, #4
 8020d1e:	2304      	movne	r3, #4
 8020d20:	5836      	ldr	r6, [r6, r0]
 8020d22:	58e0      	ldr	r0, [r4, r3]
 8020d24:	2301      	movs	r3, #1
 8020d26:	1986      	adds	r6, r0, r6
 8020d28:	f8c6 8000 	str.w	r8, [r6]
 8020d2c:	6830      	ldr	r0, [r6, #0]
 8020d2e:	60b3      	str	r3, [r6, #8]
 8020d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d32:	4045      	eors	r5, r0
 8020d34:	6860      	ldr	r0, [r4, #4]
 8020d36:	405d      	eors	r5, r3
 8020d38:	7bce      	ldrb	r6, [r1, #15]
 8020d3a:	ea80 0009 	eor.w	r0, r0, r9
 8020d3e:	f085 0504 	eor.w	r5, r5, #4
 8020d42:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8020d46:	4405      	add	r5, r0
 8020d48:	f085 050b 	eor.w	r5, r5, #11
 8020d4c:	19ad      	adds	r5, r5, r6
 8020d4e:	f88c 500f 	strb.w	r5, [ip, #15]
 8020d52:	2010      	movs	r0, #16
 8020d54:	5c0b      	ldrb	r3, [r1, r0]
 8020d56:	f80c 3000 	strb.w	r3, [ip, r0]
 8020d5a:	1c40      	adds	r0, r0, #1
 8020d5c:	2818      	cmp	r0, #24
 8020d5e:	d3f9      	bcc.n	8020d54 <cmox_cipherMode_setKey+0x254>
 8020d60:	e76f      	b.n	8020c42 <cmox_cipherMode_setKey+0x142>
 8020d62:	e9db e900 	ldrd	lr, r9, [fp]
 8020d66:	a809      	add	r0, sp, #36	@ 0x24
 8020d68:	4c56      	ldr	r4, [pc, #344]	@ (8020ec4 <cmox_cipherMode_setKey+0x3c4>)
 8020d6a:	e9c0 e900 	strd	lr, r9, [r0]
 8020d6e:	7820      	ldrb	r0, [r4, #0]
 8020d70:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8020d74:	2800      	cmp	r0, #0
 8020d76:	bf0c      	ite	eq
 8020d78:	f04f 0900 	moveq.w	r9, #0
 8020d7c:	f04f 0904 	movne.w	r9, #4
 8020d80:	f856 4009 	ldr.w	r4, [r6, r9]
 8020d84:	f85e 7009 	ldr.w	r7, [lr, r9]
 8020d88:	443c      	add	r4, r7
 8020d8a:	f8c4 8000 	str.w	r8, [r4]
 8020d8e:	6827      	ldr	r7, [r4, #0]
 8020d90:	f04f 0801 	mov.w	r8, #1
 8020d94:	f8c4 8008 	str.w	r8, [r4, #8]
 8020d98:	7fcc      	ldrb	r4, [r1, #31]
 8020d9a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8020d9e:	f8d6 9000 	ldr.w	r9, [r6]
 8020da2:	9400      	str	r4, [sp, #0]
 8020da4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020da6:	ea88 0707 	eor.w	r7, r8, r7
 8020daa:	407c      	eors	r4, r7
 8020dac:	f8de 7004 	ldr.w	r7, [lr, #4]
 8020db0:	f084 0404 	eor.w	r4, r4, #4
 8020db4:	ea87 0709 	eor.w	r7, r7, r9
 8020db8:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 8020dbc:	9f00      	ldr	r7, [sp, #0]
 8020dbe:	4474      	add	r4, lr
 8020dc0:	f084 0e0b 	eor.w	lr, r4, #11
 8020dc4:	44be      	add	lr, r7
 8020dc6:	f88c e01f 	strb.w	lr, [ip, #31]
 8020dca:	f04f 0e00 	mov.w	lr, #0
 8020dce:	f811 400e 	ldrb.w	r4, [r1, lr]
 8020dd2:	f80c 400e 	strb.w	r4, [ip, lr]
 8020dd6:	f10e 0e01 	add.w	lr, lr, #1
 8020dda:	f1be 0f10 	cmp.w	lr, #16
 8020dde:	d3f6      	bcc.n	8020dce <cmox_cipherMode_setKey+0x2ce>
 8020de0:	e9db 4700 	ldrd	r4, r7, [fp]
 8020de4:	2800      	cmp	r0, #0
 8020de6:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8020dea:	e9ce 4700 	strd	r4, r7, [lr]
 8020dee:	bf0c      	ite	eq
 8020df0:	2700      	moveq	r7, #0
 8020df2:	2704      	movne	r7, #4
 8020df4:	463c      	mov	r4, r7
 8020df6:	59f7      	ldr	r7, [r6, r7]
 8020df8:	f85e 4004 	ldr.w	r4, [lr, r4]
 8020dfc:	19e4      	adds	r4, r4, r7
 8020dfe:	6025      	str	r5, [r4, #0]
 8020e00:	6827      	ldr	r7, [r4, #0]
 8020e02:	2501      	movs	r5, #1
 8020e04:	60a5      	str	r5, [r4, #8]
 8020e06:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8020e08:	ea88 0707 	eor.w	r7, r8, r7
 8020e0c:	7c4c      	ldrb	r4, [r1, #17]
 8020e0e:	406f      	eors	r7, r5
 8020e10:	f8de 5004 	ldr.w	r5, [lr, #4]
 8020e14:	f087 0704 	eor.w	r7, r7, #4
 8020e18:	ea85 0509 	eor.w	r5, r5, r9
 8020e1c:	f085 05fc 	eor.w	r5, r5, #252	@ 0xfc
 8020e20:	442f      	add	r7, r5
 8020e22:	f087 0785 	eor.w	r7, r7, #133	@ 0x85
 8020e26:	193f      	adds	r7, r7, r4
 8020e28:	f88c 7011 	strb.w	r7, [ip, #17]
 8020e2c:	e9db 4700 	ldrd	r4, r7, [fp]
 8020e30:	2800      	cmp	r0, #0
 8020e32:	ad09      	add	r5, sp, #36	@ 0x24
 8020e34:	e9c5 4700 	strd	r4, r7, [r5]
 8020e38:	bf0e      	itee	eq
 8020e3a:	f04f 0b00 	moveq.w	fp, #0
 8020e3e:	2004      	movne	r0, #4
 8020e40:	4683      	movne	fp, r0
 8020e42:	5836      	ldr	r6, [r6, r0]
 8020e44:	f855 000b 	ldr.w	r0, [r5, fp]
 8020e48:	1986      	adds	r6, r0, r6
 8020e4a:	6033      	str	r3, [r6, #0]
 8020e4c:	6830      	ldr	r0, [r6, #0]
 8020e4e:	2301      	movs	r3, #1
 8020e50:	60b3      	str	r3, [r6, #8]
 8020e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e54:	ea88 0000 	eor.w	r0, r8, r0
 8020e58:	7c0e      	ldrb	r6, [r1, #16]
 8020e5a:	4058      	eors	r0, r3
 8020e5c:	f080 0804 	eor.w	r8, r0, #4
 8020e60:	6868      	ldr	r0, [r5, #4]
 8020e62:	ea80 0009 	eor.w	r0, r0, r9
 8020e66:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8020e6a:	4440      	add	r0, r8
 8020e6c:	f080 0852 	eor.w	r8, r0, #82	@ 0x52
 8020e70:	44b0      	add	r8, r6
 8020e72:	f88c 8010 	strb.w	r8, [ip, #16]
 8020e76:	2012      	movs	r0, #18
 8020e78:	5c0b      	ldrb	r3, [r1, r0]
 8020e7a:	f80c 3000 	strb.w	r3, [ip, r0]
 8020e7e:	1c40      	adds	r0, r0, #1
 8020e80:	281f      	cmp	r0, #31
 8020e82:	d3f9      	bcc.n	8020e78 <cmox_cipherMode_setKey+0x378>
 8020e84:	e6dd      	b.n	8020c42 <cmox_cipherMode_setKey+0x142>
 8020e86:	4610      	mov	r0, r2
 8020e88:	e00d      	b.n	8020ea6 <cmox_cipherMode_setKey+0x3a6>
 8020e8a:	682b      	ldr	r3, [r5, #0]
 8020e8c:	4652      	mov	r2, sl
 8020e8e:	a901      	add	r1, sp, #4
 8020e90:	685e      	ldr	r6, [r3, #4]
 8020e92:	4628      	mov	r0, r5
 8020e94:	47b0      	blx	r6
 8020e96:	68a8      	ldr	r0, [r5, #8]
 8020e98:	f8c5 a004 	str.w	sl, [r5, #4]
 8020e9c:	f040 0004 	orr.w	r0, r0, #4
 8020ea0:	60a8      	str	r0, [r5, #8]
 8020ea2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8020ea6:	b00d      	add	sp, #52	@ 0x34
 8020ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020eac:	00010003 	.word	0x00010003
 8020eb0:	f78e2254 	.word	0xf78e2254
 8020eb4:	2e8f137d 	.word	0x2e8f137d
 8020eb8:	910e0ba4 	.word	0x910e0ba4
 8020ebc:	0802c3e4 	.word	0x0802c3e4
 8020ec0:	08020f38 	.word	0x08020f38
 8020ec4:	200000a4 	.word	0x200000a4

08020ec8 <cmox_cipherMode_setIV>:
 8020ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020eca:	9c05      	ldr	r4, [sp, #20]
 8020ecc:	2c00      	cmp	r4, #0
 8020ece:	bf18      	it	ne
 8020ed0:	2a00      	cmpne	r2, #0
 8020ed2:	d101      	bne.n	8020ed8 <cmox_cipherMode_setIV+0x10>
 8020ed4:	480d      	ldr	r0, [pc, #52]	@ (8020f0c <cmox_cipherMode_setIV+0x44>)
 8020ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ed8:	2400      	movs	r4, #0
 8020eda:	e00d      	b.n	8020ef8 <cmox_cipherMode_setIV+0x30>
 8020edc:	4415      	add	r5, r2
 8020ede:	786f      	ldrb	r7, [r5, #1]
 8020ee0:	782e      	ldrb	r6, [r5, #0]
 8020ee2:	043f      	lsls	r7, r7, #16
 8020ee4:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
 8020ee8:	78ae      	ldrb	r6, [r5, #2]
 8020eea:	78ed      	ldrb	r5, [r5, #3]
 8020eec:	ea47 2706 	orr.w	r7, r7, r6, lsl #8
 8020ef0:	432f      	orrs	r7, r5
 8020ef2:	f841 7024 	str.w	r7, [r1, r4, lsl #2]
 8020ef6:	1c64      	adds	r4, r4, #1
 8020ef8:	00a5      	lsls	r5, r4, #2
 8020efa:	429d      	cmp	r5, r3
 8020efc:	d3ee      	bcc.n	8020edc <cmox_cipherMode_setIV+0x14>
 8020efe:	6841      	ldr	r1, [r0, #4]
 8020f00:	f041 0101 	orr.w	r1, r1, #1
 8020f04:	6041      	str	r1, [r0, #4]
 8020f06:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8020f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020f0c:	00010003 	.word	0x00010003

08020f10 <cmox_cipher_setTagLen_empty>:
 8020f10:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8020f14:	4770      	bx	lr

08020f16 <cmox_cipher_setPayloadLen_empty>:
 8020f16:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8020f1a:	4770      	bx	lr

08020f1c <cmox_cipher_setADLen_empty>:
 8020f1c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8020f20:	4770      	bx	lr

08020f22 <cmox_cipher_appendAD_empty>:
 8020f22:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8020f26:	4770      	bx	lr

08020f28 <cmox_cipher_generateTag_empty>:
 8020f28:	4800      	ldr	r0, [pc, #0]	@ (8020f2c <cmox_cipher_generateTag_empty+0x4>)
 8020f2a:	4770      	bx	lr
 8020f2c:	00010002 	.word	0x00010002

08020f30 <cmox_cipher_verifyTag_empty>:
 8020f30:	4800      	ldr	r0, [pc, #0]	@ (8020f34 <cmox_cipher_verifyTag_empty+0x4>)
 8020f32:	4770      	bx	lr
 8020f34:	00010002 	.word	0x00010002
 8020f38:	0101b004 	.word	0x0101b004
 8020f3c:	45011700 	.word	0x45011700

08020f40 <convert_block_2_bytes>:
 8020f40:	b530      	push	{r4, r5, lr}
 8020f42:	2200      	movs	r2, #0
 8020f44:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8020f48:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8020f4c:	70dc      	strb	r4, [r3, #3]
 8020f4e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8020f52:	0a2d      	lsrs	r5, r5, #8
 8020f54:	709d      	strb	r5, [r3, #2]
 8020f56:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8020f5a:	0c24      	lsrs	r4, r4, #16
 8020f5c:	705c      	strb	r4, [r3, #1]
 8020f5e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8020f62:	1c52      	adds	r2, r2, #1
 8020f64:	0e24      	lsrs	r4, r4, #24
 8020f66:	701c      	strb	r4, [r3, #0]
 8020f68:	2a04      	cmp	r2, #4
 8020f6a:	d3eb      	bcc.n	8020f44 <convert_block_2_bytes+0x4>
 8020f6c:	bd30      	pop	{r4, r5, pc}

08020f6e <strlen>:
 8020f6e:	4603      	mov	r3, r0
 8020f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020f74:	2a00      	cmp	r2, #0
 8020f76:	d1fb      	bne.n	8020f70 <strlen+0x2>
 8020f78:	1a18      	subs	r0, r3, r0
 8020f7a:	3801      	subs	r0, #1
 8020f7c:	4770      	bx	lr

08020f7e <__aeabi_memset>:
 8020f7e:	b470      	push	{r4, r5, r6}
 8020f80:	0784      	lsls	r4, r0, #30
 8020f82:	d046      	beq.n	8021012 <__aeabi_memset+0x94>
 8020f84:	1e4c      	subs	r4, r1, #1
 8020f86:	2900      	cmp	r1, #0
 8020f88:	d041      	beq.n	802100e <__aeabi_memset+0x90>
 8020f8a:	b2d5      	uxtb	r5, r2
 8020f8c:	4603      	mov	r3, r0
 8020f8e:	e002      	b.n	8020f96 <__aeabi_memset+0x18>
 8020f90:	1e61      	subs	r1, r4, #1
 8020f92:	b3e4      	cbz	r4, 802100e <__aeabi_memset+0x90>
 8020f94:	460c      	mov	r4, r1
 8020f96:	f803 5b01 	strb.w	r5, [r3], #1
 8020f9a:	0799      	lsls	r1, r3, #30
 8020f9c:	d1f8      	bne.n	8020f90 <__aeabi_memset+0x12>
 8020f9e:	2c03      	cmp	r4, #3
 8020fa0:	d92e      	bls.n	8021000 <__aeabi_memset+0x82>
 8020fa2:	b2d5      	uxtb	r5, r2
 8020fa4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8020fa8:	2c0f      	cmp	r4, #15
 8020faa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8020fae:	d919      	bls.n	8020fe4 <__aeabi_memset+0x66>
 8020fb0:	4626      	mov	r6, r4
 8020fb2:	f103 0110 	add.w	r1, r3, #16
 8020fb6:	3e10      	subs	r6, #16
 8020fb8:	2e0f      	cmp	r6, #15
 8020fba:	f841 5c10 	str.w	r5, [r1, #-16]
 8020fbe:	f841 5c0c 	str.w	r5, [r1, #-12]
 8020fc2:	f841 5c08 	str.w	r5, [r1, #-8]
 8020fc6:	f841 5c04 	str.w	r5, [r1, #-4]
 8020fca:	f101 0110 	add.w	r1, r1, #16
 8020fce:	d8f2      	bhi.n	8020fb6 <__aeabi_memset+0x38>
 8020fd0:	f1a4 0110 	sub.w	r1, r4, #16
 8020fd4:	f021 010f 	bic.w	r1, r1, #15
 8020fd8:	f004 040f 	and.w	r4, r4, #15
 8020fdc:	3110      	adds	r1, #16
 8020fde:	2c03      	cmp	r4, #3
 8020fe0:	440b      	add	r3, r1
 8020fe2:	d90d      	bls.n	8021000 <__aeabi_memset+0x82>
 8020fe4:	461e      	mov	r6, r3
 8020fe6:	4621      	mov	r1, r4
 8020fe8:	3904      	subs	r1, #4
 8020fea:	2903      	cmp	r1, #3
 8020fec:	f846 5b04 	str.w	r5, [r6], #4
 8020ff0:	d8fa      	bhi.n	8020fe8 <__aeabi_memset+0x6a>
 8020ff2:	1f21      	subs	r1, r4, #4
 8020ff4:	f021 0103 	bic.w	r1, r1, #3
 8020ff8:	3104      	adds	r1, #4
 8020ffa:	440b      	add	r3, r1
 8020ffc:	f004 0403 	and.w	r4, r4, #3
 8021000:	b12c      	cbz	r4, 802100e <__aeabi_memset+0x90>
 8021002:	b2d2      	uxtb	r2, r2
 8021004:	441c      	add	r4, r3
 8021006:	f803 2b01 	strb.w	r2, [r3], #1
 802100a:	42a3      	cmp	r3, r4
 802100c:	d1fb      	bne.n	8021006 <__aeabi_memset+0x88>
 802100e:	bc70      	pop	{r4, r5, r6}
 8021010:	4770      	bx	lr
 8021012:	460c      	mov	r4, r1
 8021014:	4603      	mov	r3, r0
 8021016:	e7c2      	b.n	8020f9e <__aeabi_memset+0x20>

08021018 <__aeabi_uldivmod>:
 8021018:	b953      	cbnz	r3, 8021030 <__aeabi_uldivmod+0x18>
 802101a:	b94a      	cbnz	r2, 8021030 <__aeabi_uldivmod+0x18>
 802101c:	2900      	cmp	r1, #0
 802101e:	bf08      	it	eq
 8021020:	2800      	cmpeq	r0, #0
 8021022:	bf1c      	itt	ne
 8021024:	f04f 31ff 	movne.w	r1, #4294967295
 8021028:	f04f 30ff 	movne.w	r0, #4294967295
 802102c:	f000 b97e 	b.w	802132c <__aeabi_idiv0>
 8021030:	f1ad 0c08 	sub.w	ip, sp, #8
 8021034:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8021038:	f000 f806 	bl	8021048 <__udivmoddi4>
 802103c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8021040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8021044:	b004      	add	sp, #16
 8021046:	4770      	bx	lr

08021048 <__udivmoddi4>:
 8021048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802104c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802104e:	460c      	mov	r4, r1
 8021050:	2b00      	cmp	r3, #0
 8021052:	d14d      	bne.n	80210f0 <__udivmoddi4+0xa8>
 8021054:	428a      	cmp	r2, r1
 8021056:	460f      	mov	r7, r1
 8021058:	4684      	mov	ip, r0
 802105a:	4696      	mov	lr, r2
 802105c:	fab2 f382 	clz	r3, r2
 8021060:	d960      	bls.n	8021124 <__udivmoddi4+0xdc>
 8021062:	b14b      	cbz	r3, 8021078 <__udivmoddi4+0x30>
 8021064:	fa02 fe03 	lsl.w	lr, r2, r3
 8021068:	f1c3 0220 	rsb	r2, r3, #32
 802106c:	409f      	lsls	r7, r3
 802106e:	fa00 fc03 	lsl.w	ip, r0, r3
 8021072:	fa20 f202 	lsr.w	r2, r0, r2
 8021076:	4317      	orrs	r7, r2
 8021078:	ea4f 461e 	mov.w	r6, lr, lsr #16
 802107c:	fa1f f48e 	uxth.w	r4, lr
 8021080:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8021084:	fbb7 f1f6 	udiv	r1, r7, r6
 8021088:	fb06 7711 	mls	r7, r6, r1, r7
 802108c:	fb01 f004 	mul.w	r0, r1, r4
 8021090:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8021094:	4290      	cmp	r0, r2
 8021096:	d908      	bls.n	80210aa <__udivmoddi4+0x62>
 8021098:	eb1e 0202 	adds.w	r2, lr, r2
 802109c:	f101 37ff 	add.w	r7, r1, #4294967295
 80210a0:	d202      	bcs.n	80210a8 <__udivmoddi4+0x60>
 80210a2:	4290      	cmp	r0, r2
 80210a4:	f200 812d 	bhi.w	8021302 <__udivmoddi4+0x2ba>
 80210a8:	4639      	mov	r1, r7
 80210aa:	1a12      	subs	r2, r2, r0
 80210ac:	fa1f fc8c 	uxth.w	ip, ip
 80210b0:	fbb2 f0f6 	udiv	r0, r2, r6
 80210b4:	fb06 2210 	mls	r2, r6, r0, r2
 80210b8:	fb00 f404 	mul.w	r4, r0, r4
 80210bc:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80210c0:	4564      	cmp	r4, ip
 80210c2:	d908      	bls.n	80210d6 <__udivmoddi4+0x8e>
 80210c4:	eb1e 0c0c 	adds.w	ip, lr, ip
 80210c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80210cc:	d202      	bcs.n	80210d4 <__udivmoddi4+0x8c>
 80210ce:	4564      	cmp	r4, ip
 80210d0:	f200 811a 	bhi.w	8021308 <__udivmoddi4+0x2c0>
 80210d4:	4610      	mov	r0, r2
 80210d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80210da:	ebac 0c04 	sub.w	ip, ip, r4
 80210de:	2100      	movs	r1, #0
 80210e0:	b125      	cbz	r5, 80210ec <__udivmoddi4+0xa4>
 80210e2:	fa2c f303 	lsr.w	r3, ip, r3
 80210e6:	2200      	movs	r2, #0
 80210e8:	e9c5 3200 	strd	r3, r2, [r5]
 80210ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210f0:	428b      	cmp	r3, r1
 80210f2:	d905      	bls.n	8021100 <__udivmoddi4+0xb8>
 80210f4:	b10d      	cbz	r5, 80210fa <__udivmoddi4+0xb2>
 80210f6:	e9c5 0100 	strd	r0, r1, [r5]
 80210fa:	2100      	movs	r1, #0
 80210fc:	4608      	mov	r0, r1
 80210fe:	e7f5      	b.n	80210ec <__udivmoddi4+0xa4>
 8021100:	fab3 f183 	clz	r1, r3
 8021104:	2900      	cmp	r1, #0
 8021106:	d14d      	bne.n	80211a4 <__udivmoddi4+0x15c>
 8021108:	42a3      	cmp	r3, r4
 802110a:	f0c0 80f2 	bcc.w	80212f2 <__udivmoddi4+0x2aa>
 802110e:	4290      	cmp	r0, r2
 8021110:	f080 80ef 	bcs.w	80212f2 <__udivmoddi4+0x2aa>
 8021114:	4606      	mov	r6, r0
 8021116:	4623      	mov	r3, r4
 8021118:	4608      	mov	r0, r1
 802111a:	2d00      	cmp	r5, #0
 802111c:	d0e6      	beq.n	80210ec <__udivmoddi4+0xa4>
 802111e:	e9c5 6300 	strd	r6, r3, [r5]
 8021122:	e7e3      	b.n	80210ec <__udivmoddi4+0xa4>
 8021124:	2b00      	cmp	r3, #0
 8021126:	f040 80a2 	bne.w	802126e <__udivmoddi4+0x226>
 802112a:	1a8a      	subs	r2, r1, r2
 802112c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8021130:	fa1f f68e 	uxth.w	r6, lr
 8021134:	2101      	movs	r1, #1
 8021136:	fbb2 f4f7 	udiv	r4, r2, r7
 802113a:	fb07 2014 	mls	r0, r7, r4, r2
 802113e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8021142:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8021146:	fb06 f004 	mul.w	r0, r6, r4
 802114a:	4290      	cmp	r0, r2
 802114c:	d90f      	bls.n	802116e <__udivmoddi4+0x126>
 802114e:	eb1e 0202 	adds.w	r2, lr, r2
 8021152:	f104 38ff 	add.w	r8, r4, #4294967295
 8021156:	bf2c      	ite	cs
 8021158:	f04f 0901 	movcs.w	r9, #1
 802115c:	f04f 0900 	movcc.w	r9, #0
 8021160:	4290      	cmp	r0, r2
 8021162:	d903      	bls.n	802116c <__udivmoddi4+0x124>
 8021164:	f1b9 0f00 	cmp.w	r9, #0
 8021168:	f000 80c8 	beq.w	80212fc <__udivmoddi4+0x2b4>
 802116c:	4644      	mov	r4, r8
 802116e:	1a12      	subs	r2, r2, r0
 8021170:	fa1f fc8c 	uxth.w	ip, ip
 8021174:	fbb2 f0f7 	udiv	r0, r2, r7
 8021178:	fb07 2210 	mls	r2, r7, r0, r2
 802117c:	fb00 f606 	mul.w	r6, r0, r6
 8021180:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8021184:	4566      	cmp	r6, ip
 8021186:	d908      	bls.n	802119a <__udivmoddi4+0x152>
 8021188:	eb1e 0c0c 	adds.w	ip, lr, ip
 802118c:	f100 32ff 	add.w	r2, r0, #4294967295
 8021190:	d202      	bcs.n	8021198 <__udivmoddi4+0x150>
 8021192:	4566      	cmp	r6, ip
 8021194:	f200 80bb 	bhi.w	802130e <__udivmoddi4+0x2c6>
 8021198:	4610      	mov	r0, r2
 802119a:	ebac 0c06 	sub.w	ip, ip, r6
 802119e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80211a2:	e79d      	b.n	80210e0 <__udivmoddi4+0x98>
 80211a4:	f1c1 0620 	rsb	r6, r1, #32
 80211a8:	408b      	lsls	r3, r1
 80211aa:	fa04 fe01 	lsl.w	lr, r4, r1
 80211ae:	fa22 f706 	lsr.w	r7, r2, r6
 80211b2:	fa20 fc06 	lsr.w	ip, r0, r6
 80211b6:	40f4      	lsrs	r4, r6
 80211b8:	408a      	lsls	r2, r1
 80211ba:	431f      	orrs	r7, r3
 80211bc:	ea4e 030c 	orr.w	r3, lr, ip
 80211c0:	fa00 fe01 	lsl.w	lr, r0, r1
 80211c4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80211c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80211cc:	fa1f fc87 	uxth.w	ip, r7
 80211d0:	fbb4 f0f8 	udiv	r0, r4, r8
 80211d4:	fb08 4410 	mls	r4, r8, r0, r4
 80211d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80211dc:	fb00 f90c 	mul.w	r9, r0, ip
 80211e0:	45a1      	cmp	r9, r4
 80211e2:	d90e      	bls.n	8021202 <__udivmoddi4+0x1ba>
 80211e4:	193c      	adds	r4, r7, r4
 80211e6:	f100 3aff 	add.w	sl, r0, #4294967295
 80211ea:	bf2c      	ite	cs
 80211ec:	f04f 0b01 	movcs.w	fp, #1
 80211f0:	f04f 0b00 	movcc.w	fp, #0
 80211f4:	45a1      	cmp	r9, r4
 80211f6:	d903      	bls.n	8021200 <__udivmoddi4+0x1b8>
 80211f8:	f1bb 0f00 	cmp.w	fp, #0
 80211fc:	f000 8093 	beq.w	8021326 <__udivmoddi4+0x2de>
 8021200:	4650      	mov	r0, sl
 8021202:	eba4 0409 	sub.w	r4, r4, r9
 8021206:	fa1f f983 	uxth.w	r9, r3
 802120a:	fbb4 f3f8 	udiv	r3, r4, r8
 802120e:	fb08 4413 	mls	r4, r8, r3, r4
 8021212:	fb03 fc0c 	mul.w	ip, r3, ip
 8021216:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 802121a:	45a4      	cmp	ip, r4
 802121c:	d906      	bls.n	802122c <__udivmoddi4+0x1e4>
 802121e:	193c      	adds	r4, r7, r4
 8021220:	f103 38ff 	add.w	r8, r3, #4294967295
 8021224:	d201      	bcs.n	802122a <__udivmoddi4+0x1e2>
 8021226:	45a4      	cmp	ip, r4
 8021228:	d87a      	bhi.n	8021320 <__udivmoddi4+0x2d8>
 802122a:	4643      	mov	r3, r8
 802122c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8021230:	eba4 040c 	sub.w	r4, r4, ip
 8021234:	fba0 9802 	umull	r9, r8, r0, r2
 8021238:	4544      	cmp	r4, r8
 802123a:	46cc      	mov	ip, r9
 802123c:	4643      	mov	r3, r8
 802123e:	d302      	bcc.n	8021246 <__udivmoddi4+0x1fe>
 8021240:	d106      	bne.n	8021250 <__udivmoddi4+0x208>
 8021242:	45ce      	cmp	lr, r9
 8021244:	d204      	bcs.n	8021250 <__udivmoddi4+0x208>
 8021246:	3801      	subs	r0, #1
 8021248:	ebb9 0c02 	subs.w	ip, r9, r2
 802124c:	eb68 0307 	sbc.w	r3, r8, r7
 8021250:	b15d      	cbz	r5, 802126a <__udivmoddi4+0x222>
 8021252:	ebbe 020c 	subs.w	r2, lr, ip
 8021256:	eb64 0403 	sbc.w	r4, r4, r3
 802125a:	fa04 f606 	lsl.w	r6, r4, r6
 802125e:	fa22 f301 	lsr.w	r3, r2, r1
 8021262:	40cc      	lsrs	r4, r1
 8021264:	431e      	orrs	r6, r3
 8021266:	e9c5 6400 	strd	r6, r4, [r5]
 802126a:	2100      	movs	r1, #0
 802126c:	e73e      	b.n	80210ec <__udivmoddi4+0xa4>
 802126e:	fa02 fe03 	lsl.w	lr, r2, r3
 8021272:	f1c3 0120 	rsb	r1, r3, #32
 8021276:	fa04 f203 	lsl.w	r2, r4, r3
 802127a:	fa00 fc03 	lsl.w	ip, r0, r3
 802127e:	40cc      	lsrs	r4, r1
 8021280:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8021284:	fa20 f101 	lsr.w	r1, r0, r1
 8021288:	fa1f f68e 	uxth.w	r6, lr
 802128c:	fbb4 f0f7 	udiv	r0, r4, r7
 8021290:	430a      	orrs	r2, r1
 8021292:	fb07 4410 	mls	r4, r7, r0, r4
 8021296:	0c11      	lsrs	r1, r2, #16
 8021298:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802129c:	fb00 f406 	mul.w	r4, r0, r6
 80212a0:	428c      	cmp	r4, r1
 80212a2:	d90e      	bls.n	80212c2 <__udivmoddi4+0x27a>
 80212a4:	eb1e 0101 	adds.w	r1, lr, r1
 80212a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80212ac:	bf2c      	ite	cs
 80212ae:	f04f 0901 	movcs.w	r9, #1
 80212b2:	f04f 0900 	movcc.w	r9, #0
 80212b6:	428c      	cmp	r4, r1
 80212b8:	d902      	bls.n	80212c0 <__udivmoddi4+0x278>
 80212ba:	f1b9 0f00 	cmp.w	r9, #0
 80212be:	d02c      	beq.n	802131a <__udivmoddi4+0x2d2>
 80212c0:	4640      	mov	r0, r8
 80212c2:	1b09      	subs	r1, r1, r4
 80212c4:	b292      	uxth	r2, r2
 80212c6:	fbb1 f4f7 	udiv	r4, r1, r7
 80212ca:	fb07 1114 	mls	r1, r7, r4, r1
 80212ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80212d2:	fb04 f106 	mul.w	r1, r4, r6
 80212d6:	4291      	cmp	r1, r2
 80212d8:	d907      	bls.n	80212ea <__udivmoddi4+0x2a2>
 80212da:	eb1e 0202 	adds.w	r2, lr, r2
 80212de:	f104 38ff 	add.w	r8, r4, #4294967295
 80212e2:	d201      	bcs.n	80212e8 <__udivmoddi4+0x2a0>
 80212e4:	4291      	cmp	r1, r2
 80212e6:	d815      	bhi.n	8021314 <__udivmoddi4+0x2cc>
 80212e8:	4644      	mov	r4, r8
 80212ea:	1a52      	subs	r2, r2, r1
 80212ec:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80212f0:	e721      	b.n	8021136 <__udivmoddi4+0xee>
 80212f2:	1a86      	subs	r6, r0, r2
 80212f4:	eb64 0303 	sbc.w	r3, r4, r3
 80212f8:	2001      	movs	r0, #1
 80212fa:	e70e      	b.n	802111a <__udivmoddi4+0xd2>
 80212fc:	3c02      	subs	r4, #2
 80212fe:	4472      	add	r2, lr
 8021300:	e735      	b.n	802116e <__udivmoddi4+0x126>
 8021302:	3902      	subs	r1, #2
 8021304:	4472      	add	r2, lr
 8021306:	e6d0      	b.n	80210aa <__udivmoddi4+0x62>
 8021308:	44f4      	add	ip, lr
 802130a:	3802      	subs	r0, #2
 802130c:	e6e3      	b.n	80210d6 <__udivmoddi4+0x8e>
 802130e:	44f4      	add	ip, lr
 8021310:	3802      	subs	r0, #2
 8021312:	e742      	b.n	802119a <__udivmoddi4+0x152>
 8021314:	3c02      	subs	r4, #2
 8021316:	4472      	add	r2, lr
 8021318:	e7e7      	b.n	80212ea <__udivmoddi4+0x2a2>
 802131a:	3802      	subs	r0, #2
 802131c:	4471      	add	r1, lr
 802131e:	e7d0      	b.n	80212c2 <__udivmoddi4+0x27a>
 8021320:	3b02      	subs	r3, #2
 8021322:	443c      	add	r4, r7
 8021324:	e782      	b.n	802122c <__udivmoddi4+0x1e4>
 8021326:	3802      	subs	r0, #2
 8021328:	443c      	add	r4, r7
 802132a:	e76a      	b.n	8021202 <__udivmoddi4+0x1ba>

0802132c <__aeabi_idiv0>:
 802132c:	4770      	bx	lr
 802132e:	bf00      	nop

08021330 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8021330:	b500      	push	{lr}
 8021332:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8021334:	2220      	movs	r2, #32
 8021336:	2100      	movs	r1, #0
 8021338:	4668      	mov	r0, sp
 802133a:	f00a f97d 	bl	802b638 <memset>
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 802133e:	2204      	movs	r2, #4
  hadc2.Instance = ADC2;
 8021340:	4818      	ldr	r0, [pc, #96]	@ (80213a4 <MX_ADC2_Init+0x74>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8021342:	2300      	movs	r3, #0
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8021344:	6142      	str	r2, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
 8021346:	2201      	movs	r2, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8021348:	f8df c060 	ldr.w	ip, [pc, #96]	@ 80213ac <MX_ADC2_Init+0x7c>
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 802134c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8021350:	e9c0 c300 	strd	ip, r3, [r0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8021354:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8021358:	6103      	str	r3, [r0, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 802135a:	8303      	strh	r3, [r0, #24]
  hadc2.Init.NbrOfConversion = 1;
 802135c:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 802135e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8021362:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  hadc2.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8021366:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8021368:	6383      	str	r3, [r0, #56]	@ 0x38
  hadc2.Init.OversamplingMode = DISABLE;
 802136a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 802136e:	f000 fdd7 	bl	8021f20 <HAL_ADC_Init>
 8021372:	b108      	cbz	r0, 8021378 <MX_ADC2_Init+0x48>
  {
    Error_Handler();
 8021374:	f000 faa4 	bl	80218c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8021378:	2306      	movs	r3, #6
 802137a:	4a0b      	ldr	r2, [pc, #44]	@ (80213a8 <MX_ADC2_Init+0x78>)
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 802137c:	2103      	movs	r1, #3
  sConfig.Rank = ADC_REGULAR_RANK_1;
 802137e:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8021382:	237f      	movs	r3, #127	@ 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
 8021384:	2004      	movs	r0, #4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8021386:	e9cd 1302 	strd	r1, r3, [sp, #8]
  sConfig.Offset = 0;
 802138a:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 802138c:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 802138e:	e9cd 0304 	strd	r0, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8021392:	4804      	ldr	r0, [pc, #16]	@ (80213a4 <MX_ADC2_Init+0x74>)
 8021394:	f000 ff18 	bl	80221c8 <HAL_ADC_ConfigChannel>
 8021398:	b108      	cbz	r0, 802139e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 802139a:	f000 fa91 	bl	80218c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 802139e:	b009      	add	sp, #36	@ 0x24
 80213a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80213a4:	200000a8 	.word	0x200000a8
 80213a8:	2e300800 	.word	0x2e300800
 80213ac:	42028100 	.word	0x42028100

080213b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80213b0:	b510      	push	{r4, lr}
 80213b2:	4604      	mov	r4, r0
 80213b4:	b0ca      	sub	sp, #296	@ 0x128

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80213b6:	2214      	movs	r2, #20
 80213b8:	2100      	movs	r1, #0
 80213ba:	a803      	add	r0, sp, #12
 80213bc:	f00a f93c 	bl	802b638 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80213c0:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80213c4:	2100      	movs	r1, #0
 80213c6:	a808      	add	r0, sp, #32
 80213c8:	f00a f936 	bl	802b638 <memset>
  if(adcHandle->Instance==ADC2)
 80213cc:	6822      	ldr	r2, [r4, #0]
 80213ce:	4b21      	ldr	r3, [pc, #132]	@ (8021454 <HAL_ADC_MspInit+0xa4>)
 80213d0:	429a      	cmp	r2, r3
 80213d2:	d13d      	bne.n	8021450 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80213d4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80213d8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL2.PLL2M = 3;
    PeriphClkInitStruct.PLL2.PLL2N = 64;
    PeriphClkInitStruct.PLL2.PLL2P = 2;
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
    PeriphClkInitStruct.PLL2.PLL2R = 4;
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_2;
 80213da:	2004      	movs	r0, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80213dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_HSE;
 80213e0:	2303      	movs	r3, #3
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_2;
 80213e2:	2208      	movs	r2, #8
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80213e4:	2140      	movs	r1, #64	@ 0x40
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_2;
 80213e6:	e9cd 020f 	strd	r0, r2, [sp, #60]	@ 0x3c
    PeriphClkInitStruct.PLL2.PLL2M = 3;
 80213ea:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
    PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 80213ee:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80213f2:	2302      	movs	r3, #2
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2R;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80213f4:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80213f6:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80213fa:	930e      	str	r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 80213fc:	9213      	str	r2, [sp, #76]	@ 0x4c
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2R;
 80213fe:	933c      	str	r3, [sp, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021400:	f003 fd1a 	bl	8024e38 <HAL_RCCEx_PeriphCLKConfig>
 8021404:	b108      	cbz	r0, 802140a <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8021406:	f000 fa5b 	bl	80218c0 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 802140a:	4b13      	ldr	r3, [pc, #76]	@ (8021458 <HAL_ADC_MspInit+0xa8>)
    PC1     ------> ADC2_INP11
    */
    GPIO_InitStruct.Pin = TEMP_ADC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(TEMP_ADC_GPIO_Port, &GPIO_InitStruct);
 802140c:	4813      	ldr	r0, [pc, #76]	@ (802145c <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_ADC_CLK_ENABLE();
 802140e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    HAL_GPIO_Init(TEMP_ADC_GPIO_Port, &GPIO_InitStruct);
 8021412:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 8021414:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8021418:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 802141c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8021420:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8021424:	9201      	str	r2, [sp, #4]
 8021426:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021428:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 802142c:	f042 0204 	orr.w	r2, r2, #4
 8021430:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8021434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8021438:	2202      	movs	r2, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802143a:	f003 0304 	and.w	r3, r3, #4
 802143e:	9302      	str	r3, [sp, #8]
 8021440:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8021442:	2303      	movs	r3, #3
 8021444:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021448:	2300      	movs	r3, #0
 802144a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TEMP_ADC_GPIO_Port, &GPIO_InitStruct);
 802144c:	f002 f988 	bl	8023760 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8021450:	b04a      	add	sp, #296	@ 0x128
 8021452:	bd10      	pop	{r4, pc}
 8021454:	42028100 	.word	0x42028100
 8021458:	44020c00 	.word	0x44020c00
 802145c:	42020800 	.word	0x42020800

08021460 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8021460:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8021462:	4808      	ldr	r0, [pc, #32]	@ (8021484 <MX_CRC_Init+0x24>)
 8021464:	4b08      	ldr	r3, [pc, #32]	@ (8021488 <MX_CRC_Init+0x28>)
 8021466:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8021468:	2300      	movs	r3, #0
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 802146a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 802146e:	8083      	strh	r3, [r0, #4]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8021470:	2301      	movs	r3, #1
 8021472:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8021474:	f001 fb6a 	bl	8022b4c <HAL_CRC_Init>
 8021478:	b118      	cbz	r0, 8021482 <MX_CRC_Init+0x22>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 802147a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 802147e:	f000 ba1f 	b.w	80218c0 <Error_Handler>
}
 8021482:	bd08      	pop	{r3, pc}
 8021484:	20000110 	.word	0x20000110
 8021488:	40023000 	.word	0x40023000

0802148c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 802148c:	6802      	ldr	r2, [r0, #0]
 802148e:	4b09      	ldr	r3, [pc, #36]	@ (80214b4 <HAL_CRC_MspInit+0x28>)
{
 8021490:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8021492:	429a      	cmp	r2, r3
 8021494:	d10c      	bne.n	80214b0 <HAL_CRC_MspInit+0x24>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8021496:	4b08      	ldr	r3, [pc, #32]	@ (80214b8 <HAL_CRC_MspInit+0x2c>)
 8021498:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 802149c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80214a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80214a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80214a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80214ac:	9301      	str	r3, [sp, #4]
 80214ae:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80214b0:	b002      	add	sp, #8
 80214b2:	4770      	bx	lr
 80214b4:	40023000 	.word	0x40023000
 80214b8:	44020c00 	.word	0x44020c00

080214bc <MX_GPDMA1_Init>:
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80214bc:	4b10      	ldr	r3, [pc, #64]	@ (8021500 <MX_GPDMA1_Init+0x44>)
{
 80214be:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80214c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel6_IRQn, 2, 0);
 80214c4:	2102      	movs	r1, #2
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80214c6:	f042 0201 	orr.w	r2, r2, #1
 80214ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80214ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    HAL_NVIC_SetPriority(GPDMA1_Channel6_IRQn, 2, 0);
 80214d2:	2200      	movs	r2, #0
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80214d4:	f003 0301 	and.w	r3, r3, #1
 80214d8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(GPDMA1_Channel6_IRQn, 2, 0);
 80214da:	2021      	movs	r0, #33	@ 0x21
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80214dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(GPDMA1_Channel6_IRQn, 2, 0);
 80214de:	f001 fa3b 	bl	8022958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel6_IRQn);
 80214e2:	2021      	movs	r0, #33	@ 0x21
 80214e4:	f001 fa68 	bl	80229b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 3, 0);
 80214e8:	2200      	movs	r2, #0
 80214ea:	2103      	movs	r1, #3
 80214ec:	2022      	movs	r0, #34	@ 0x22
 80214ee:	f001 fa33 	bl	8022958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 80214f2:	2022      	movs	r0, #34	@ 0x22
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80214f4:	b003      	add	sp, #12
 80214f6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 80214fa:	f001 ba5d 	b.w	80229b8 <HAL_NVIC_EnableIRQ>
 80214fe:	bf00      	nop
 8021500:	44020c00 	.word	0x44020c00

08021504 <MX_GPIO_Init>:
     PB3(JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021504:	2214      	movs	r2, #20
{
 8021506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802150a:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802150c:	eb0d 0002 	add.w	r0, sp, r2
 8021510:	2100      	movs	r1, #0
 8021512:	f00a f891 	bl	802b638 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8021516:	4b50      	ldr	r3, [pc, #320]	@ (8021658 <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATE_GPIO_Port, LED_STATE_Pin, GPIO_PIN_SET);
 8021518:	4d50      	ldr	r5, [pc, #320]	@ (802165c <MX_GPIO_Init+0x158>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802151a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VIB_01_Pin|VIB_02_Pin|VIB_03_Pin|VIB_04_Pin
 802151e:	4e50      	ldr	r6, [pc, #320]	@ (8021660 <MX_GPIO_Init+0x15c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8021520:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8021524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8021528:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(LED_STATE_GPIO_Port, LED_STATE_Pin, GPIO_PIN_SET);
 802152c:	4628      	mov	r0, r5
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802152e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8021532:	9200      	str	r2, [sp, #0]
 8021534:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8021536:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FTDI_RESET_GPIO_Port, FTDI_RESET_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ERR_Pin|LED_SYS_Pin, GPIO_PIN_SET);
 802153a:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 8021668 <MX_GPIO_Init+0x164>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802153e:	f042 0204 	orr.w	r2, r2, #4
 8021542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8021546:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c

  /*Configure GPIO pins : LED_STATE_Pin TRIG_02_Pin TRIG_01_Pin DCDC_EN_Pin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|TRIG_02_Pin|TRIG_01_Pin|DCDC_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802154a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802154c:	f002 0204 	and.w	r2, r2, #4
 8021550:	9201      	str	r2, [sp, #4]
 8021552:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8021554:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021558:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802155a:	f042 0201 	orr.w	r2, r2, #1
 802155e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8021562:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8021566:	f002 0201 	and.w	r2, r2, #1
 802156a:	9202      	str	r2, [sp, #8]
 802156c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802156e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8021572:	f042 0208 	orr.w	r2, r2, #8
 8021576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 802157a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 802157e:	f002 0208 	and.w	r2, r2, #8
 8021582:	9203      	str	r2, [sp, #12]
 8021584:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8021586:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 802158a:	f042 0202 	orr.w	r2, r2, #2
 802158e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(LED_STATE_GPIO_Port, LED_STATE_Pin, GPIO_PIN_SET);
 8021592:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8021594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(LED_STATE_GPIO_Port, LED_STATE_Pin, GPIO_PIN_SET);
 8021598:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802159a:	f003 0302 	and.w	r3, r3, #2
 802159e:	9304      	str	r3, [sp, #16]
 80215a0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_STATE_GPIO_Port, LED_STATE_Pin, GPIO_PIN_SET);
 80215a2:	f002 f9f1 	bl	8023988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, VIB_01_Pin|VIB_02_Pin|VIB_03_Pin|VIB_04_Pin
 80215a6:	4630      	mov	r0, r6
 80215a8:	2200      	movs	r2, #0
 80215aa:	217f      	movs	r1, #127	@ 0x7f
 80215ac:	f002 f9ec 	bl	8023988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, TRIG_02_Pin|TRIG_01_Pin|DCDC_EN_Pin, GPIO_PIN_RESET);
 80215b0:	4628      	mov	r0, r5
 80215b2:	2200      	movs	r2, #0
 80215b4:	2170      	movs	r1, #112	@ 0x70
 80215b6:	f002 f9e7 	bl	8023988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FTDI_RESET_GPIO_Port, FTDI_RESET_Pin, GPIO_PIN_SET);
 80215ba:	4630      	mov	r0, r6
 80215bc:	2201      	movs	r2, #1
 80215be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80215c2:	f002 f9e1 	bl	8023988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_ERR_Pin|LED_SYS_Pin, GPIO_PIN_SET);
 80215c6:	2201      	movs	r2, #1
 80215c8:	4640      	mov	r0, r8
 80215ca:	2130      	movs	r1, #48	@ 0x30
 80215cc:	f002 f9dc 	bl	8023988 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80215d0:	2371      	movs	r3, #113	@ 0x71
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80215d2:	4628      	mov	r0, r5
 80215d4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80215d6:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80215da:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80215de:	f002 f8bf 	bl	8023760 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCDC_ALT_Pin */
  GPIO_InitStruct.Pin = DCDC_ALT_Pin;
 80215e2:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DCDC_ALT_GPIO_Port, &GPIO_InitStruct);
 80215e4:	4628      	mov	r0, r5
 80215e6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80215e8:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80215ec:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(DCDC_ALT_GPIO_Port, &GPIO_InitStruct);
 80215ee:	f002 f8b7 	bl	8023760 <HAL_GPIO_Init>

  /*Configure GPIO pins : VIB_01_Pin VIB_02_Pin VIB_03_Pin VIB_04_Pin
                           VIB_05_Pin VIB_06_Pin VIB_07_Pin */
  GPIO_InitStruct.Pin = VIB_01_Pin|VIB_02_Pin|VIB_03_Pin|VIB_04_Pin
 80215f2:	237f      	movs	r3, #127	@ 0x7f
                          |VIB_05_Pin|VIB_06_Pin|VIB_07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80215f4:	4630      	mov	r0, r6
 80215f6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80215f8:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80215fc:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021600:	f002 f8ae 	bl	8023760 <HAL_GPIO_Init>

  /*Configure GPIO pin : FTDI_RESET_Pin */
  GPIO_InitStruct.Pin = FTDI_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8021604:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8021608:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FTDI_RESET_GPIO_Port, &GPIO_InitStruct);
 802160a:	4630      	mov	r0, r6
 802160c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 802160e:	e9cd 2305 	strd	r2, r3, [sp, #20]

  /*Configure GPIO pin : FTDI_GPIO3_Pin */
  GPIO_InitStruct.Pin = FTDI_GPIO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8021612:	2602      	movs	r6, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021614:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(FTDI_RESET_GPIO_Port, &GPIO_InitStruct);
 8021618:	f002 f8a2 	bl	8023760 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FTDI_GPIO3_Pin;
 802161c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(FTDI_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8021620:	4628      	mov	r0, r5
 8021622:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021624:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8021628:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(FTDI_GPIO3_GPIO_Port, &GPIO_InitStruct);
 802162a:	f002 f899 	bl	8023760 <HAL_GPIO_Init>

  /*Configure GPIO pin : FTDI_GPIO2_Pin */
  GPIO_InitStruct.Pin = FTDI_GPIO2_Pin;
 802162e:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(FTDI_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8021630:	a905      	add	r1, sp, #20
 8021632:	480c      	ldr	r0, [pc, #48]	@ (8021664 <MX_GPIO_Init+0x160>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021634:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8021638:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(FTDI_GPIO2_GPIO_Port, &GPIO_InitStruct);
 802163a:	f002 f891 	bl	8023760 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ERR_Pin LED_SYS_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin|LED_SYS_Pin;
 802163e:	2330      	movs	r3, #48	@ 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021640:	4640      	mov	r0, r8
 8021642:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021644:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021648:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802164c:	f002 f888 	bl	8023760 <HAL_GPIO_Init>

}
 8021650:	b00a      	add	sp, #40	@ 0x28
 8021652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021656:	bf00      	nop
 8021658:	44020c00 	.word	0x44020c00
 802165c:	42020800 	.word	0x42020800
 8021660:	42020000 	.word	0x42020000
 8021664:	42020c00 	.word	0x42020c00
 8021668:	42020400 	.word	0x42020400

0802166c <MX_GTZC_Init>:
  /* USER CODE END GTZC_Init 1 */
  /* USER CODE BEGIN GTZC_Init 2 */

  /* USER CODE END GTZC_Init 2 */

}
 802166c:	4770      	bx	lr
	...

08021670 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8021670:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8021672:	4812      	ldr	r0, [pc, #72]	@ (80216bc <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x10C043E5;
 8021674:	4a12      	ldr	r2, [pc, #72]	@ (80216c0 <MX_I2C3_Init+0x50>)
 8021676:	4b13      	ldr	r3, [pc, #76]	@ (80216c4 <MX_I2C3_Init+0x54>)
 8021678:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802167c:	2300      	movs	r3, #0
 802167e:	2201      	movs	r2, #1
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
 8021680:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8021684:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8021688:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802168c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 802168e:	f002 fabc 	bl	8023c0a <HAL_I2C_Init>
 8021692:	b108      	cbz	r0, 8021698 <MX_I2C3_Init+0x28>
  {
    Error_Handler();
 8021694:	f000 f914 	bl	80218c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8021698:	2100      	movs	r1, #0
 802169a:	4808      	ldr	r0, [pc, #32]	@ (80216bc <MX_I2C3_Init+0x4c>)
 802169c:	f002 fd49 	bl	8024132 <HAL_I2CEx_ConfigAnalogFilter>
 80216a0:	b108      	cbz	r0, 80216a6 <MX_I2C3_Init+0x36>
  {
    Error_Handler();
 80216a2:	f000 f90d 	bl	80218c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80216a6:	2100      	movs	r1, #0
 80216a8:	4804      	ldr	r0, [pc, #16]	@ (80216bc <MX_I2C3_Init+0x4c>)
 80216aa:	f002 fd68 	bl	802417e <HAL_I2CEx_ConfigDigitalFilter>
 80216ae:	b118      	cbz	r0, 80216b8 <MX_I2C3_Init+0x48>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80216b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80216b4:	f000 b904 	b.w	80218c0 <Error_Handler>
}
 80216b8:	bd08      	pop	{r3, pc}
 80216ba:	bf00      	nop
 80216bc:	20000134 	.word	0x20000134
 80216c0:	44002800 	.word	0x44002800
 80216c4:	10c043e5 	.word	0x10c043e5

080216c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80216c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80216ca:	4604      	mov	r4, r0
 80216cc:	b0cb      	sub	sp, #300	@ 0x12c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80216ce:	2214      	movs	r2, #20
 80216d0:	2100      	movs	r1, #0
 80216d2:	a803      	add	r0, sp, #12
 80216d4:	f009 ffb0 	bl	802b638 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80216d8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80216dc:	2100      	movs	r1, #0
 80216de:	a808      	add	r0, sp, #32
 80216e0:	f009 ffaa 	bl	802b638 <memset>
  if(i2cHandle->Instance==I2C3)
 80216e4:	6822      	ldr	r2, [r4, #0]
 80216e6:	4b27      	ldr	r3, [pc, #156]	@ (8021784 <HAL_I2C_MspInit+0xbc>)
 80216e8:	429a      	cmp	r2, r3
 80216ea:	d148      	bne.n	802177e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80216ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80216f0:	2300      	movs	r3, #0
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80216f2:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80216f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80216f8:	f003 fb9e 	bl	8024e38 <HAL_RCCEx_PeriphCLKConfig>
 80216fc:	b108      	cbz	r0, 8021702 <HAL_I2C_MspInit+0x3a>
    {
      Error_Handler();
 80216fe:	f000 f8df 	bl	80218c0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021702:	4c21      	ldr	r4, [pc, #132]	@ (8021788 <HAL_I2C_MspInit+0xc0>)
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021704:	2712      	movs	r7, #18
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021706:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802170a:	2500      	movs	r5, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802170c:	f043 0304 	orr.w	r3, r3, #4
 8021710:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8021714:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021718:	2604      	movs	r6, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802171a:	f003 0304 	and.w	r3, r3, #4
 802171e:	9300      	str	r3, [sp, #0]
 8021720:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021722:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021726:	4819      	ldr	r0, [pc, #100]	@ (802178c <HAL_I2C_MspInit+0xc4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021728:	f043 0301 	orr.w	r3, r3, #1
 802172c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8021730:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021734:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021736:	f003 0301 	and.w	r3, r3, #1
 802173a:	9301      	str	r3, [sp, #4]
 802173c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802173e:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021742:	e9cd 5505 	strd	r5, r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021746:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802174a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802174c:	f002 f808 	bl	8023760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8021750:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021754:	480e      	ldr	r0, [pc, #56]	@ (8021790 <HAL_I2C_MspInit+0xc8>)
 8021756:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021758:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802175c:	e9cd 5505 	strd	r5, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021760:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021762:	f001 fffd 	bl	8023760 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8021766:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 802176a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802176e:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8021772:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8021776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802177a:	9302      	str	r3, [sp, #8]
 802177c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 802177e:	b04b      	add	sp, #300	@ 0x12c
 8021780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021782:	bf00      	nop
 8021784:	44002800 	.word	0x44002800
 8021788:	44020c00 	.word	0x44020c00
 802178c:	42020800 	.word	0x42020800
 8021790:	42020000 	.word	0x42020000

08021794 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8021794:	b508      	push	{r3, lr}

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8021796:	f002 fd17 	bl	80241c8 <HAL_ICACHE_Enable>
 802179a:	b118      	cbz	r0, 80217a4 <MX_ICACHE_Init+0x10>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 802179c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80217a0:	f000 b88e 	b.w	80218c0 <Error_Handler>
}
 80217a4:	bd08      	pop	{r3, pc}
	...

080217a8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80217a8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80217aa:	2301      	movs	r3, #1
  hiwdg.Instance = IWDG;
 80217ac:	4808      	ldr	r0, [pc, #32]	@ (80217d0 <MX_IWDG_Init+0x28>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80217ae:	4a09      	ldr	r2, [pc, #36]	@ (80217d4 <MX_IWDG_Init+0x2c>)
 80217b0:	e9c0 2300 	strd	r2, r3, [r0]
  hiwdg.Init.Window = 4095;
 80217b4:	f640 73ff 	movw	r3, #4095	@ 0xfff
  hiwdg.Init.Reload = 4095;
 80217b8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hiwdg.Init.EWI = 0;
 80217bc:	2300      	movs	r3, #0
 80217be:	6103      	str	r3, [r0, #16]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80217c0:	f002 fd29 	bl	8024216 <HAL_IWDG_Init>
 80217c4:	b118      	cbz	r0, 80217ce <MX_IWDG_Init+0x26>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80217c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80217ca:	f000 b879 	b.w	80218c0 <Error_Handler>
}
 80217ce:	bd08      	pop	{r3, pc}
 80217d0:	20000188 	.word	0x20000188
 80217d4:	40003000 	.word	0x40003000

080217d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80217d8:	b510      	push	{r4, lr}
 80217da:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80217dc:	2220      	movs	r2, #32
 80217de:	2100      	movs	r1, #0
 80217e0:	a80a      	add	r0, sp, #40	@ 0x28
 80217e2:	f009 ff29 	bl	802b638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80217e6:	2218      	movs	r2, #24
 80217e8:	2100      	movs	r1, #0
 80217ea:	a802      	add	r0, sp, #8
 80217ec:	f009 ff24 	bl	802b638 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80217f0:	4b21      	ldr	r3, [pc, #132]	@ (8021878 <SystemClock_Config+0xa0>)
 80217f2:	691a      	ldr	r2, [r3, #16]
 80217f4:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80217f8:	611a      	str	r2, [r3, #16]
 80217fa:	691a      	ldr	r2, [r3, #16]
 80217fc:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8021800:	9201      	str	r2, [sp, #4]
 8021802:	9a01      	ldr	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8021804:	695a      	ldr	r2, [r3, #20]
 8021806:	0714      	lsls	r4, r2, #28
 8021808:	d5fc      	bpl.n	8021804 <SystemClock_Config+0x2c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802180a:	2209      	movs	r2, #9
 802180c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8021810:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8021814:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8021818:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = 3;
  RCC_OscInitStruct.PLL.PLLN = 125;
 802181a:	227d      	movs	r2, #125	@ 0x7d
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 802181c:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 802181e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8021820:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8021822:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8021826:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLR = 2;
 802182a:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 802182e:	2300      	movs	r3, #0
 8021830:	e9cd 0319 	strd	r0, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8021834:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 3;
 8021836:	9414      	str	r4, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8021838:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802183a:	f002 ff25 	bl	8024688 <HAL_RCC_OscConfig>
 802183e:	b108      	cbz	r0, 8021844 <SystemClock_Config+0x6c>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021840:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8021842:	e7fe      	b.n	8021842 <SystemClock_Config+0x6a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8021844:	231f      	movs	r3, #31
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8021846:	e9cd 0004 	strd	r0, r0, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 802184a:	e9cd 0006 	strd	r0, r0, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 802184e:	2105      	movs	r1, #5
 8021850:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021852:	e9cd 3402 	strd	r3, r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8021856:	f002 fde1 	bl	802441c <HAL_RCC_ClockConfig>
 802185a:	b108      	cbz	r0, 8021860 <SystemClock_Config+0x88>
 802185c:	b672      	cpsid	i
  while (1)
 802185e:	e7fe      	b.n	802185e <SystemClock_Config+0x86>
  HAL_RCC_EnableCSS();
 8021860:	f003 f9fc 	bl	8024c5c <HAL_RCC_EnableCSS>
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8021864:	4a05      	ldr	r2, [pc, #20]	@ (802187c <SystemClock_Config+0xa4>)
 8021866:	6813      	ldr	r3, [r2, #0]
 8021868:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 802186c:	f043 0320 	orr.w	r3, r3, #32
 8021870:	6013      	str	r3, [r2, #0]
}
 8021872:	b01c      	add	sp, #112	@ 0x70
 8021874:	bd10      	pop	{r4, pc}
 8021876:	bf00      	nop
 8021878:	44020800 	.word	0x44020800
 802187c:	40022000 	.word	0x40022000

08021880 <main>:
{
 8021880:	b508      	push	{r3, lr}
	gCorePreInit();
 8021882:	f009 f891 	bl	802a9a8 <gCorePreInit>
  HAL_Init();
 8021886:	f000 faeb 	bl	8021e60 <HAL_Init>
  SystemClock_Config();
 802188a:	f7ff ffa5 	bl	80217d8 <SystemClock_Config>
  MX_GTZC_Init();
 802188e:	f7ff feed 	bl	802166c <MX_GTZC_Init>
  MX_GPIO_Init();
 8021892:	f7ff fe37 	bl	8021504 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8021896:	f7ff fe11 	bl	80214bc <MX_GPDMA1_Init>
  MX_ADC2_Init();
 802189a:	f7ff fd49 	bl	8021330 <MX_ADC2_Init>
  MX_CRC_Init();
 802189e:	f7ff fddf 	bl	8021460 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80218a2:	f000 f961 	bl	8021b68 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80218a6:	f7ff fee3 	bl	8021670 <MX_I2C3_Init>
  MX_ICACHE_Init();
 80218aa:	f7ff ff73 	bl	8021794 <MX_ICACHE_Init>
  MX_TIM4_Init();
 80218ae:	f000 f909 	bl	8021ac4 <MX_TIM4_Init>
  MX_IWDG_Init();
 80218b2:	f7ff ff79 	bl	80217a8 <MX_IWDG_Init>
  gCoreInit();
 80218b6:	f009 f8e3 	bl	802aa80 <gCoreInit>
  	gCoreLoop();
 80218ba:	f009 f8a9 	bl	802aa10 <gCoreLoop>
  while (1)
 80218be:	e7fc      	b.n	80218ba <main+0x3a>

080218c0 <Error_Handler>:
 80218c0:	b672      	cpsid	i
  while (1)
 80218c2:	e7fe      	b.n	80218c2 <Error_Handler+0x2>

080218c4 <HAL_MspInit>:

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80218c4:	2200      	movs	r2, #0
{
 80218c6:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80218c8:	4611      	mov	r1, r2
 80218ca:	2009      	movs	r0, #9
 80218cc:	f001 f844 	bl	8022958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80218d0:	2009      	movs	r0, #9
 80218d2:	f001 f871 	bl	80229b8 <HAL_NVIC_EnableIRQ>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80218d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_DisableUCPDDeadBattery();
 80218da:	f002 bceb 	b.w	80242b4 <HAL_PWREx_DisableUCPDDeadBattery>

080218de <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80218de:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80218e0:	f003 f9c4 	bl	8024c6c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80218e4:	e7fe      	b.n	80218e4 <NMI_Handler+0x6>

080218e6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80218e6:	e7fe      	b.n	80218e6 <HardFault_Handler>

080218e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80218e8:	e7fe      	b.n	80218e8 <MemManage_Handler>

080218ea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80218ea:	e7fe      	b.n	80218ea <BusFault_Handler>

080218ec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80218ec:	e7fe      	b.n	80218ec <UsageFault_Handler>

080218ee <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80218ee:	4770      	bx	lr

080218f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80218f0:	4770      	bx	lr

080218f2 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80218f2:	4770      	bx	lr

080218f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80218f4:	f000 bad8 	b.w	8021ea8 <HAL_IncTick>

080218f8 <RCC_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles RCC non-secure global interrupt.
  */
void RCC_IRQHandler(void)
 80218f8:	4770      	bx	lr
	...

080218fc <GPDMA1_Channel6_IRQHandler>:
void GPDMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel6_IRQn 0 */

  /* USER CODE END GPDMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel6);
 80218fc:	4801      	ldr	r0, [pc, #4]	@ (8021904 <GPDMA1_Channel6_IRQHandler+0x8>)
 80218fe:	f001 bc7b 	b.w	80231f8 <HAL_DMA_IRQHandler>
 8021902:	bf00      	nop
 8021904:	2000026c 	.word	0x2000026c

08021908 <GPDMA1_Channel7_IRQHandler>:
void GPDMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 0 */

  /* USER CODE END GPDMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel7);
 8021908:	4801      	ldr	r0, [pc, #4]	@ (8021910 <GPDMA1_Channel7_IRQHandler+0x8>)
 802190a:	f001 bc75 	b.w	80231f8 <HAL_DMA_IRQHandler>
 802190e:	bf00      	nop
 8021910:	200002e4 	.word	0x200002e4

08021914 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8021914:	4801      	ldr	r0, [pc, #4]	@ (802191c <USART1_IRQHandler+0x8>)
 8021916:	f007 b82f 	b.w	8028978 <HAL_UART_IRQHandler>
 802191a:	bf00      	nop
 802191c:	2000035c 	.word	0x2000035c

08021920 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021920:	b570      	push	{r4, r5, r6, lr}
 8021922:	460d      	mov	r5, r1
 8021924:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021926:	460e      	mov	r6, r1
 8021928:	1b73      	subs	r3, r6, r5
 802192a:	429c      	cmp	r4, r3
 802192c:	dc01      	bgt.n	8021932 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 802192e:	4620      	mov	r0, r4
 8021930:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8021932:	f3af 8000 	nop.w
 8021936:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802193a:	e7f5      	b.n	8021928 <_read+0x8>

0802193c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802193c:	b570      	push	{r4, r5, r6, lr}
 802193e:	460d      	mov	r5, r1
 8021940:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021942:	460e      	mov	r6, r1
 8021944:	1b73      	subs	r3, r6, r5
 8021946:	429c      	cmp	r4, r3
 8021948:	dc01      	bgt.n	802194e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 802194a:	4620      	mov	r0, r4
 802194c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 802194e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8021952:	f009 f8a6 	bl	802aaa2 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021956:	e7f5      	b.n	8021944 <_write+0x8>

08021958 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8021958:	f04f 30ff 	mov.w	r0, #4294967295
 802195c:	4770      	bx	lr

0802195e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 802195e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8021962:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8021964:	604b      	str	r3, [r1, #4]
}
 8021966:	4770      	bx	lr

08021968 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8021968:	2001      	movs	r0, #1
 802196a:	4770      	bx	lr

0802196c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 802196c:	2000      	movs	r0, #0
 802196e:	4770      	bx	lr

08021970 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8021970:	4a0b      	ldr	r2, [pc, #44]	@ (80219a0 <_sbrk+0x30>)
{
 8021972:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8021974:	6811      	ldr	r1, [r2, #0]
{
 8021976:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8021978:	b909      	cbnz	r1, 802197e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 802197a:	490a      	ldr	r1, [pc, #40]	@ (80219a4 <_sbrk+0x34>)
 802197c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802197e:	6810      	ldr	r0, [r2, #0]
 8021980:	4909      	ldr	r1, [pc, #36]	@ (80219a8 <_sbrk+0x38>)
 8021982:	4c0a      	ldr	r4, [pc, #40]	@ (80219ac <_sbrk+0x3c>)
 8021984:	4403      	add	r3, r0
 8021986:	1b09      	subs	r1, r1, r4
 8021988:	428b      	cmp	r3, r1
 802198a:	d906      	bls.n	802199a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 802198c:	f009 fec6 	bl	802b71c <__errno>
 8021990:	230c      	movs	r3, #12
 8021992:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8021994:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8021998:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 802199a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 802199c:	e7fc      	b.n	8021998 <_sbrk+0x28>
 802199e:	bf00      	nop
 80219a0:	2000019c 	.word	0x2000019c
 80219a4:	20044638 	.word	0x20044638
 80219a8:	200a0000 	.word	0x200a0000
 80219ac:	00000400 	.word	0x00000400

080219b0 <SystemInit>:
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80219b0:	2201      	movs	r2, #1
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80219b2:	491d      	ldr	r1, [pc, #116]	@ (8021a28 <SystemInit+0x78>)
{
 80219b4:	b510      	push	{r4, lr}
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80219b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
  RCC->CFGR1 = 0U;
  RCC->CFGR2 = 0U;

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80219ba:	481c      	ldr	r0, [pc, #112]	@ (8021a2c <SystemInit+0x7c>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80219bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80219c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR = RCC_CR_HSION;
 80219c4:	4b1a      	ldr	r3, [pc, #104]	@ (8021a30 <SystemInit+0x80>)
 80219c6:	601a      	str	r2, [r3, #0]
  RCC->CFGR1 = 0U;
 80219c8:	2200      	movs	r2, #0
 80219ca:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80219cc:	621a      	str	r2, [r3, #32]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80219ce:	681c      	ldr	r4, [r3, #0]
 80219d0:	4020      	ands	r0, r4
 80219d2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80219d4:	4817      	ldr	r0, [pc, #92]	@ (8021a34 <SystemInit+0x84>)
  RCC->PLL1CFGR = 0U;
 80219d6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80219d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->PLL3CFGR = 0U;
 80219da:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->PLL1DIVR = 0x01010280U;
 80219dc:	6358      	str	r0, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80219de:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80219e0:	63d8      	str	r0, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80219e2:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80219e4:	6458      	str	r0, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80219e6:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80219e8:	6818      	ldr	r0, [r3, #0]
 80219ea:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 80219ee:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80219f0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80219f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80219f6:	608b      	str	r3, [r1, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80219f8:	4b0f      	ldr	r3, [pc, #60]	@ (8021a38 <SystemInit+0x88>)
 80219fa:	699a      	ldr	r2, [r3, #24]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80219fc:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8021a00:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 8021a04:	d10f      	bne.n	8021a26 <SystemInit+0x76>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8021a06:	69da      	ldr	r2, [r3, #28]
 8021a08:	07d2      	lsls	r2, r2, #31
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8021a0a:	bf41      	itttt	mi
 8021a0c:	4a0b      	ldrmi	r2, [pc, #44]	@ (8021a3c <SystemInit+0x8c>)
 8021a0e:	60da      	strmi	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8021a10:	f102 3244 	addmi.w	r2, r2, #1145324612	@ 0x44444444
 8021a14:	60da      	strmi	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8021a16:	69da      	ldr	r2, [r3, #28]
 8021a18:	f042 0202 	orr.w	r2, r2, #2
 8021a1c:	61da      	str	r2, [r3, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8021a1e:	69da      	ldr	r2, [r3, #28]
 8021a20:	f042 0201 	orr.w	r2, r2, #1
 8021a24:	61da      	str	r2, [r3, #28]
  }
}
 8021a26:	bd10      	pop	{r4, pc}
 8021a28:	e000ed00 	.word	0xe000ed00
 8021a2c:	eae2eae3 	.word	0xeae2eae3
 8021a30:	44020c00 	.word	0x44020c00
 8021a34:	01010280 	.word	0x01010280
 8021a38:	40022000 	.word	0x40022000
 8021a3c:	08192a3b 	.word	0x08192a3b

08021a40 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 8021a40:	6802      	ldr	r2, [r0, #0]
 8021a42:	4b09      	ldr	r3, [pc, #36]	@ (8021a68 <HAL_TIM_Base_MspInit+0x28>)
{
 8021a44:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM4)
 8021a46:	429a      	cmp	r2, r3
 8021a48:	d10c      	bne.n	8021a64 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8021a4a:	4b08      	ldr	r3, [pc, #32]	@ (8021a6c <HAL_TIM_Base_MspInit+0x2c>)
 8021a4c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8021a50:	f042 0204 	orr.w	r2, r2, #4
 8021a54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8021a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8021a5c:	f003 0304 	and.w	r3, r3, #4
 8021a60:	9301      	str	r3, [sp, #4]
 8021a62:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8021a64:	b002      	add	sp, #8
 8021a66:	4770      	bx	lr
 8021a68:	40000800 	.word	0x40000800
 8021a6c:	44020c00 	.word	0x44020c00

08021a70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8021a70:	b510      	push	{r4, lr}
 8021a72:	4604      	mov	r4, r0
 8021a74:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021a76:	2214      	movs	r2, #20
 8021a78:	2100      	movs	r1, #0
 8021a7a:	a801      	add	r0, sp, #4
 8021a7c:	f009 fddc 	bl	802b638 <memset>
  if(timHandle->Instance==TIM4)
 8021a80:	6822      	ldr	r2, [r4, #0]
 8021a82:	4b0d      	ldr	r3, [pc, #52]	@ (8021ab8 <HAL_TIM_MspPostInit+0x48>)
 8021a84:	429a      	cmp	r2, r3
 8021a86:	d115      	bne.n	8021ab4 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021a88:	4b0c      	ldr	r3, [pc, #48]	@ (8021abc <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = BUZZ_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8021a8a:	480d      	ldr	r0, [pc, #52]	@ (8021ac0 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021a8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8021a90:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021a92:	f042 0204 	orr.w	r2, r2, #4
 8021a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8021a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a9e:	2204      	movs	r2, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021aa0:	f003 0304 	and.w	r3, r3, #4
 8021aa4:	9300      	str	r3, [sp, #0]
 8021aa6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021aa8:	2302      	movs	r3, #2
 8021aaa:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8021aae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8021ab0:	f001 fe56 	bl	8023760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8021ab4:	b006      	add	sp, #24
 8021ab6:	bd10      	pop	{r4, pc}
 8021ab8:	40000800 	.word	0x40000800
 8021abc:	44020c00 	.word	0x44020c00
 8021ac0:	42020800 	.word	0x42020800

08021ac4 <MX_TIM4_Init>:
{
 8021ac4:	b510      	push	{r4, lr}
 8021ac6:	b08e      	sub	sp, #56	@ 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021ac8:	2210      	movs	r2, #16
 8021aca:	2100      	movs	r1, #0
 8021acc:	a803      	add	r0, sp, #12
 8021ace:	f009 fdb3 	bl	802b638 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021ad2:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8021ad4:	221c      	movs	r2, #28
 8021ad6:	4621      	mov	r1, r4
 8021ad8:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021adc:	e9cd 4400 	strd	r4, r4, [sp]
 8021ae0:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8021ae2:	f009 fda9 	bl	802b638 <memset>
  htim4.Init.Prescaler = 250-1;
 8021ae6:	23f9      	movs	r3, #249	@ 0xf9
  htim4.Instance = TIM4;
 8021ae8:	481d      	ldr	r0, [pc, #116]	@ (8021b60 <MX_TIM4_Init+0x9c>)
  htim4.Init.Prescaler = 250-1;
 8021aea:	4a1e      	ldr	r2, [pc, #120]	@ (8021b64 <MX_TIM4_Init+0xa0>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021aec:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 250-1;
 8021aee:	e9c0 2300 	strd	r2, r3, [r0]
  htim4.Init.Period = 65535;
 8021af2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021af6:	6184      	str	r4, [r0, #24]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021af8:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8021afc:	f006 fb70 	bl	80281e0 <HAL_TIM_Base_Init>
 8021b00:	b108      	cbz	r0, 8021b06 <MX_TIM4_Init+0x42>
    Error_Handler();
 8021b02:	f7ff fedd 	bl	80218c0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8021b0a:	4815      	ldr	r0, [pc, #84]	@ (8021b60 <MX_TIM4_Init+0x9c>)
 8021b0c:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021b0e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8021b10:	f006 f96a 	bl	8027de8 <HAL_TIM_ConfigClockSource>
 8021b14:	b108      	cbz	r0, 8021b1a <MX_TIM4_Init+0x56>
    Error_Handler();
 8021b16:	f7ff fed3 	bl	80218c0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8021b1a:	4811      	ldr	r0, [pc, #68]	@ (8021b60 <MX_TIM4_Init+0x9c>)
 8021b1c:	f006 fb9a 	bl	8028254 <HAL_TIM_PWM_Init>
 8021b20:	b108      	cbz	r0, 8021b26 <MX_TIM4_Init+0x62>
    Error_Handler();
 8021b22:	f7ff fecd 	bl	80218c0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021b26:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8021b28:	4669      	mov	r1, sp
 8021b2a:	480d      	ldr	r0, [pc, #52]	@ (8021b60 <MX_TIM4_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021b2c:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021b2e:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8021b30:	f006 fbca 	bl	80282c8 <HAL_TIMEx_MasterConfigSynchronization>
 8021b34:	b108      	cbz	r0, 8021b3a <MX_TIM4_Init+0x76>
    Error_Handler();
 8021b36:	f7ff fec3 	bl	80218c0 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021b3a:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8021b3c:	220c      	movs	r2, #12
 8021b3e:	4808      	ldr	r0, [pc, #32]	@ (8021b60 <MX_TIM4_Init+0x9c>)
 8021b40:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 8021b42:	e9cd 3407 	strd	r3, r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021b46:	9409      	str	r4, [sp, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021b48:	940b      	str	r4, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8021b4a:	f006 f8c7 	bl	8027cdc <HAL_TIM_PWM_ConfigChannel>
 8021b4e:	b108      	cbz	r0, 8021b54 <MX_TIM4_Init+0x90>
    Error_Handler();
 8021b50:	f7ff feb6 	bl	80218c0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8021b54:	4802      	ldr	r0, [pc, #8]	@ (8021b60 <MX_TIM4_Init+0x9c>)
 8021b56:	f7ff ff8b 	bl	8021a70 <HAL_TIM_MspPostInit>
}
 8021b5a:	b00e      	add	sp, #56	@ 0x38
 8021b5c:	bd10      	pop	{r4, pc}
 8021b5e:	bf00      	nop
 8021b60:	200001a0 	.word	0x200001a0
 8021b64:	40000800 	.word	0x40000800

08021b68 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8021b68:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 921600;
 8021b6a:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
  huart1.Instance = USART1;
 8021b6e:	4815      	ldr	r0, [pc, #84]	@ (8021bc4 <MX_USART1_UART_Init+0x5c>)
  huart1.Init.BaudRate = 921600;
 8021b70:	4a15      	ldr	r2, [pc, #84]	@ (8021bc8 <MX_USART1_UART_Init+0x60>)
 8021b72:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8021b76:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8021b78:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8021b7a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8021b7e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8021b82:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8021b86:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  huart1.Init.Parity = UART_PARITY_NONE;
 8021b8a:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8021b8c:	f007 fa90 	bl	80290b0 <HAL_UART_Init>
 8021b90:	b108      	cbz	r0, 8021b96 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 8021b92:	f7ff fe95 	bl	80218c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8021b96:	2100      	movs	r1, #0
 8021b98:	480a      	ldr	r0, [pc, #40]	@ (8021bc4 <MX_USART1_UART_Init+0x5c>)
 8021b9a:	f007 fb6f 	bl	802927c <HAL_UARTEx_SetTxFifoThreshold>
 8021b9e:	b108      	cbz	r0, 8021ba4 <MX_USART1_UART_Init+0x3c>
  {
    Error_Handler();
 8021ba0:	f7ff fe8e 	bl	80218c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8021ba4:	2100      	movs	r1, #0
 8021ba6:	4807      	ldr	r0, [pc, #28]	@ (8021bc4 <MX_USART1_UART_Init+0x5c>)
 8021ba8:	f007 fb88 	bl	80292bc <HAL_UARTEx_SetRxFifoThreshold>
 8021bac:	b108      	cbz	r0, 8021bb2 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8021bae:	f7ff fe87 	bl	80218c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8021bb2:	4804      	ldr	r0, [pc, #16]	@ (8021bc4 <MX_USART1_UART_Init+0x5c>)
 8021bb4:	f007 fb47 	bl	8029246 <HAL_UARTEx_DisableFifoMode>
 8021bb8:	b118      	cbz	r0, 8021bc2 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8021bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8021bbe:	f7ff be7f 	b.w	80218c0 <Error_Handler>
}
 8021bc2:	bd08      	pop	{r3, pc}
 8021bc4:	2000035c 	.word	0x2000035c
 8021bc8:	40013800 	.word	0x40013800

08021bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8021bcc:	b570      	push	{r4, r5, r6, lr}
 8021bce:	4606      	mov	r6, r0
 8021bd0:	b0ca      	sub	sp, #296	@ 0x128

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021bd2:	2214      	movs	r2, #20
 8021bd4:	2100      	movs	r1, #0
 8021bd6:	a803      	add	r0, sp, #12
 8021bd8:	f009 fd2e 	bl	802b638 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8021bdc:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8021be0:	2100      	movs	r1, #0
 8021be2:	a808      	add	r0, sp, #32
 8021be4:	f009 fd28 	bl	802b638 <memset>
  if(uartHandle->Instance==USART1)
 8021be8:	6832      	ldr	r2, [r6, #0]
 8021bea:	4b4a      	ldr	r3, [pc, #296]	@ (8021d14 <HAL_UART_MspInit+0x148>)
 8021bec:	429a      	cmp	r2, r3
 8021bee:	f040 808f 	bne.w	8021d10 <HAL_UART_MspInit+0x144>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8021bf2:	2201      	movs	r2, #1
 8021bf4:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021bf6:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8021bf8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021bfc:	f003 f91c 	bl	8024e38 <HAL_RCCEx_PeriphCLKConfig>
 8021c00:	b108      	cbz	r0, 8021c06 <HAL_UART_MspInit+0x3a>
    {
      Error_Handler();
 8021c02:	f7ff fe5d 	bl	80218c0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8021c06:	4b44      	ldr	r3, [pc, #272]	@ (8021d18 <HAL_UART_MspInit+0x14c>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021c08:	f44f 7100 	mov.w	r1, #512	@ 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8021c0c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021c10:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8021c12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8021c16:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8021c1a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8021c1e:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8021c20:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8021c24:	9201      	str	r2, [sp, #4]
 8021c26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021c28:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021c2c:	483b      	ldr	r0, [pc, #236]	@ (8021d1c <HAL_UART_MspInit+0x150>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021c2e:	f042 0201 	orr.w	r2, r2, #1
 8021c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8021c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8021c3a:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021c3c:	f003 0301 	and.w	r3, r3, #1
 8021c40:	9302      	str	r3, [sp, #8]
 8021c42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021c44:	2312      	movs	r3, #18
 8021c46:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021c4a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021c4c:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021c50:	f001 fd86 	bl	8023760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021c54:	2302      	movs	r3, #2
 8021c56:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021c5a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021c5c:	e9cd 0303 	strd	r0, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021c60:	482e      	ldr	r0, [pc, #184]	@ (8021d1c <HAL_UART_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8021c62:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021c64:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021c68:	f001 fd7a 	bl	8023760 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
    handle_GPDMA1_Channel7.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8021c6c:	2315      	movs	r3, #21
    handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 8021c6e:	4c2c      	ldr	r4, [pc, #176]	@ (8021d20 <HAL_UART_MspInit+0x154>)
    handle_GPDMA1_Channel7.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8021c70:	f8df c0b8 	ldr.w	ip, [pc, #184]	@ 8021d2c <HAL_UART_MspInit+0x160>
    handle_GPDMA1_Channel7.Init.SrcBurstLength = 1;
    handle_GPDMA1_Channel7.Init.DestBurstLength = 1;
    handle_GPDMA1_Channel7.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
    handle_GPDMA1_Channel7.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
    handle_GPDMA1_Channel7.Init.Mode = DMA_NORMAL;
    if (HAL_DMA_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 8021c74:	4620      	mov	r0, r4
    handle_GPDMA1_Channel7.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8021c76:	e9c4 c300 	strd	ip, r3, [r4]
    handle_GPDMA1_Channel7.Init.DestInc = DMA_DINC_INCREMENTED;
 8021c7a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
    handle_GPDMA1_Channel7.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8021c7e:	e9c4 3505 	strd	r3, r5, [r4, #20]
    handle_GPDMA1_Channel7.Init.SrcBurstLength = 1;
 8021c82:	2301      	movs	r3, #1
    handle_GPDMA1_Channel7.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8021c84:	e9c4 5502 	strd	r5, r5, [r4, #8]
    handle_GPDMA1_Channel7.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8021c88:	e9c4 5507 	strd	r5, r5, [r4, #28]
    handle_GPDMA1_Channel7.Init.DestBurstLength = 1;
 8021c8c:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
    handle_GPDMA1_Channel7.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8021c90:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
    handle_GPDMA1_Channel7.Init.SrcInc = DMA_SINC_FIXED;
 8021c94:	6125      	str	r5, [r4, #16]
    handle_GPDMA1_Channel7.Init.Mode = DMA_NORMAL;
 8021c96:	6365      	str	r5, [r4, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 8021c98:	f000 ffde 	bl	8022c58 <HAL_DMA_Init>
 8021c9c:	b108      	cbz	r0, 8021ca2 <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 8021c9e:	f7ff fe0f 	bl	80218c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel7);

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 8021ca2:	2110      	movs	r1, #16
 8021ca4:	481e      	ldr	r0, [pc, #120]	@ (8021d20 <HAL_UART_MspInit+0x154>)
    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel7);
 8021ca6:	f8c6 4080 	str.w	r4, [r6, #128]	@ 0x80
 8021caa:	65e6      	str	r6, [r4, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 8021cac:	f001 fb65 	bl	802337a <HAL_DMA_ConfigChannelAttributes>
 8021cb0:	b108      	cbz	r0, 8021cb6 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8021cb2:	f7ff fe05 	bl	80218c0 <Error_Handler>
    }

    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel6.Instance = GPDMA1_Channel6;
    handle_GPDMA1_Channel6.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8021cb6:	2316      	movs	r3, #22
    handle_GPDMA1_Channel6.Instance = GPDMA1_Channel6;
 8021cb8:	4c1a      	ldr	r4, [pc, #104]	@ (8021d24 <HAL_UART_MspInit+0x158>)
    handle_GPDMA1_Channel6.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8021cba:	4a1b      	ldr	r2, [pc, #108]	@ (8021d28 <HAL_UART_MspInit+0x15c>)
    handle_GPDMA1_Channel6.Init.SrcBurstLength = 1;
    handle_GPDMA1_Channel6.Init.DestBurstLength = 1;
    handle_GPDMA1_Channel6.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
    handle_GPDMA1_Channel6.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
    handle_GPDMA1_Channel6.Init.Mode = DMA_NORMAL;
    if (HAL_DMA_Init(&handle_GPDMA1_Channel6) != HAL_OK)
 8021cbc:	4620      	mov	r0, r4
    handle_GPDMA1_Channel6.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8021cbe:	e9c4 2300 	strd	r2, r3, [r4]
    handle_GPDMA1_Channel6.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8021cc2:	2300      	movs	r3, #0
 8021cc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8021cc8:	e9c4 3202 	strd	r3, r2, [r4, #8]
    handle_GPDMA1_Channel6.Init.SrcInc = DMA_SINC_INCREMENTED;
 8021ccc:	2208      	movs	r2, #8
    handle_GPDMA1_Channel6.Init.DestInc = DMA_DINC_FIXED;
 8021cce:	e9c4 2304 	strd	r2, r3, [r4, #16]
    handle_GPDMA1_Channel6.Init.SrcBurstLength = 1;
 8021cd2:	2201      	movs	r2, #1
    handle_GPDMA1_Channel6.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8021cd4:	e9c4 3306 	strd	r3, r3, [r4, #24]
    handle_GPDMA1_Channel6.Init.DestBurstLength = 1;
 8021cd8:	e9c4 2209 	strd	r2, r2, [r4, #36]	@ 0x24
    handle_GPDMA1_Channel6.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8021cdc:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
    handle_GPDMA1_Channel6.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8021ce0:	6223      	str	r3, [r4, #32]
    handle_GPDMA1_Channel6.Init.Mode = DMA_NORMAL;
 8021ce2:	6363      	str	r3, [r4, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel6) != HAL_OK)
 8021ce4:	f000 ffb8 	bl	8022c58 <HAL_DMA_Init>
 8021ce8:	b108      	cbz	r0, 8021cee <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8021cea:	f7ff fde9 	bl	80218c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel6);

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel6, DMA_CHANNEL_NPRIV) != HAL_OK)
 8021cee:	2110      	movs	r1, #16
 8021cf0:	480c      	ldr	r0, [pc, #48]	@ (8021d24 <HAL_UART_MspInit+0x158>)
    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel6);
 8021cf2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8021cf4:	65e6      	str	r6, [r4, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel6, DMA_CHANNEL_NPRIV) != HAL_OK)
 8021cf6:	f001 fb40 	bl	802337a <HAL_DMA_ConfigChannelAttributes>
 8021cfa:	b108      	cbz	r0, 8021d00 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8021cfc:	f7ff fde0 	bl	80218c0 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8021d00:	203a      	movs	r0, #58	@ 0x3a
 8021d02:	2200      	movs	r2, #0
 8021d04:	2101      	movs	r1, #1
 8021d06:	f000 fe27 	bl	8022958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8021d0a:	203a      	movs	r0, #58	@ 0x3a
 8021d0c:	f000 fe54 	bl	80229b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8021d10:	b04a      	add	sp, #296	@ 0x128
 8021d12:	bd70      	pop	{r4, r5, r6, pc}
 8021d14:	40013800 	.word	0x40013800
 8021d18:	44020c00 	.word	0x44020c00
 8021d1c:	42020000 	.word	0x42020000
 8021d20:	200002e4 	.word	0x200002e4
 8021d24:	2000026c 	.word	0x2000026c
 8021d28:	40020350 	.word	0x40020350
 8021d2c:	400203d0 	.word	0x400203d0

08021d30 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 8021d30:	6802      	ldr	r2, [r0, #0]
 8021d32:	4b0f      	ldr	r3, [pc, #60]	@ (8021d70 <HAL_UART_MspDeInit+0x40>)
{
 8021d34:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 8021d36:	429a      	cmp	r2, r3
{
 8021d38:	4604      	mov	r4, r0
  if(uartHandle->Instance==USART1)
 8021d3a:	d117      	bne.n	8021d6c <HAL_UART_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8021d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8021d74 <HAL_UART_MspDeInit+0x44>)

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8021d3e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 8021d42:	f8d2 30a4 	ldr.w	r3, [r2, #164]	@ 0xa4
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8021d46:	480c      	ldr	r0, [pc, #48]	@ (8021d78 <HAL_UART_MspDeInit+0x48>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8021d48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8021d4c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8021d50:	f001 fdac 	bl	80238ac <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8021d54:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8021d58:	f001 f93e 	bl	8022fd8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8021d5c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8021d5e:	f001 f93b 	bl	8022fd8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8021d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8021d66:	203a      	movs	r0, #58	@ 0x3a
 8021d68:	f000 be34 	b.w	80229d4 <HAL_NVIC_DisableIRQ>
}
 8021d6c:	bd10      	pop	{r4, pc}
 8021d6e:	bf00      	nop
 8021d70:	40013800 	.word	0x40013800
 8021d74:	44020c00 	.word	0x44020c00
 8021d78:	42020000 	.word	0x42020000

08021d7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8021d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8021db4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8021d80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8021d82:	e003      	b.n	8021d8c <LoopCopyDataInit>

08021d84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8021d84:	4b0c      	ldr	r3, [pc, #48]	@ (8021db8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8021d86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8021d88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8021d8a:	3104      	adds	r1, #4

08021d8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8021d8c:	480b      	ldr	r0, [pc, #44]	@ (8021dbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8021d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8021dc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8021d90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8021d92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8021d94:	d3f6      	bcc.n	8021d84 <CopyDataInit>
	ldr	r2, =_sbss
 8021d96:	4a0b      	ldr	r2, [pc, #44]	@ (8021dc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8021d98:	e002      	b.n	8021da0 <LoopFillZerobss>

08021d9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8021d9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8021d9c:	f842 3b04 	str.w	r3, [r2], #4

08021da0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8021da0:	4b09      	ldr	r3, [pc, #36]	@ (8021dc8 <LoopForever+0x16>)
	cmp	r2, r3
 8021da2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8021da4:	d3f9      	bcc.n	8021d9a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8021da6:	f7ff fe03 	bl	80219b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021daa:	f009 fcbd 	bl	802b728 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8021dae:	f7ff fd67 	bl	8021880 <main>

08021db2 <LoopForever>:

LoopForever:
    b LoopForever
 8021db2:	e7fe      	b.n	8021db2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8021db4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8021db8:	0802e864 	.word	0x0802e864
	ldr	r0, =_sdata
 8021dbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8021dc0:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8021dc4:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8021dc8:	20044634 	.word	0x20044634

08021dcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8021dcc:	e7fe      	b.n	8021dcc <ADC1_IRQHandler>
	...

08021dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021dd0:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8021dd2:	4e20      	ldr	r6, [pc, #128]	@ (8021e54 <HAL_InitTick+0x84>)
{
 8021dd4:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq == 0UL)
 8021dd6:	7832      	ldrb	r2, [r6, #0]
 8021dd8:	b90a      	cbnz	r2, 8021dde <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8021dda:	2001      	movs	r0, #1
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
  uwTickPrio = TickPriority;

  /* Return function status */
  return HAL_OK;
}
 8021ddc:	bd70      	pop	{r4, r5, r6, pc}
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8021dde:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8021de2:	691c      	ldr	r4, [r3, #16]
 8021de4:	f014 0404 	ands.w	r4, r4, #4
 8021de8:	d017      	beq.n	8021e1a <HAL_InitTick+0x4a>
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8021dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8021dee:	fbb3 f3f2 	udiv	r3, r3, r2
 8021df2:	4a19      	ldr	r2, [pc, #100]	@ (8021e58 <HAL_InitTick+0x88>)
 8021df4:	6814      	ldr	r4, [r2, #0]
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8021df6:	fbb4 f4f3 	udiv	r4, r4, r3
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8021dfa:	4620      	mov	r0, r4
 8021dfc:	f000 fdfc 	bl	80229f8 <HAL_SYSTICK_Config>
 8021e00:	4604      	mov	r4, r0
 8021e02:	2800      	cmp	r0, #0
 8021e04:	d1e9      	bne.n	8021dda <HAL_InitTick+0xa>
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021e06:	4602      	mov	r2, r0
 8021e08:	4629      	mov	r1, r5
 8021e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8021e0e:	f000 fda3 	bl	8022958 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8021e12:	4b12      	ldr	r3, [pc, #72]	@ (8021e5c <HAL_InitTick+0x8c>)
  return HAL_OK;
 8021e14:	4620      	mov	r0, r4
  uwTickPrio = TickPriority;
 8021e16:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8021e18:	e7e0      	b.n	8021ddc <HAL_InitTick+0xc>
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8021e1a:	f000 fe37 	bl	8022a8c <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 8021e1e:	2801      	cmp	r0, #1
 8021e20:	d007      	beq.n	8021e32 <HAL_InitTick+0x62>
 8021e22:	2802      	cmp	r0, #2
 8021e24:	d00d      	beq.n	8021e42 <HAL_InitTick+0x72>
 8021e26:	2800      	cmp	r0, #0
 8021e28:	d1e7      	bne.n	8021dfa <HAL_InitTick+0x2a>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8021e2a:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8021e2e:	7832      	ldrb	r2, [r6, #0]
 8021e30:	e7dd      	b.n	8021dee <HAL_InitTick+0x1e>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8021e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8021e36:	7832      	ldrb	r2, [r6, #0]
 8021e38:	f44f 44fa 	mov.w	r4, #32000	@ 0x7d00
 8021e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8021e40:	e7d9      	b.n	8021df6 <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8021e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8021e46:	7832      	ldrb	r2, [r6, #0]
 8021e48:	f44f 4400 	mov.w	r4, #32768	@ 0x8000
 8021e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8021e50:	e7d1      	b.n	8021df6 <HAL_InitTick+0x26>
 8021e52:	bf00      	nop
 8021e54:	20000004 	.word	0x20000004
 8021e58:	20000000 	.word	0x20000000
 8021e5c:	20000008 	.word	0x20000008

08021e60 <HAL_Init>:
{
 8021e60:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021e62:	2003      	movs	r0, #3
 8021e64:	f000 fd66 	bl	8022934 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8021e68:	f002 fa2c 	bl	80242c4 <HAL_RCC_GetSysClockFreq>
 8021e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8021e9c <HAL_Init+0x3c>)
 8021e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8021ea0 <HAL_Init+0x40>)
 8021e70:	6a1b      	ldr	r3, [r3, #32]
 8021e72:	f003 030f 	and.w	r3, r3, #15
 8021e76:	5cd3      	ldrb	r3, [r2, r3]
 8021e78:	40d8      	lsrs	r0, r3
 8021e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8021ea4 <HAL_Init+0x44>)
 8021e7c:	6018      	str	r0, [r3, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8021e7e:	2004      	movs	r0, #4
 8021e80:	f000 fdca 	bl	8022a18 <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8021e84:	200f      	movs	r0, #15
 8021e86:	f7ff ffa3 	bl	8021dd0 <HAL_InitTick>
 8021e8a:	4604      	mov	r4, r0
 8021e8c:	b918      	cbnz	r0, 8021e96 <HAL_Init+0x36>
  HAL_MspInit();
 8021e8e:	f7ff fd19 	bl	80218c4 <HAL_MspInit>
}
 8021e92:	4620      	mov	r0, r4
 8021e94:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8021e96:	2401      	movs	r4, #1
 8021e98:	e7fb      	b.n	8021e92 <HAL_Init+0x32>
 8021e9a:	bf00      	nop
 8021e9c:	44020c00 	.word	0x44020c00
 8021ea0:	0802c454 	.word	0x0802c454
 8021ea4:	20000000 	.word	0x20000000

08021ea8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8021ea8:	4a03      	ldr	r2, [pc, #12]	@ (8021eb8 <HAL_IncTick+0x10>)
 8021eaa:	4b04      	ldr	r3, [pc, #16]	@ (8021ebc <HAL_IncTick+0x14>)
 8021eac:	6811      	ldr	r1, [r2, #0]
 8021eae:	781b      	ldrb	r3, [r3, #0]
 8021eb0:	440b      	add	r3, r1
 8021eb2:	6013      	str	r3, [r2, #0]
}
 8021eb4:	4770      	bx	lr
 8021eb6:	bf00      	nop
 8021eb8:	20000428 	.word	0x20000428
 8021ebc:	20000004 	.word	0x20000004

08021ec0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8021ec0:	4b01      	ldr	r3, [pc, #4]	@ (8021ec8 <HAL_GetTick+0x8>)
 8021ec2:	6818      	ldr	r0, [r3, #0]
}
 8021ec4:	4770      	bx	lr
 8021ec6:	bf00      	nop
 8021ec8:	20000428 	.word	0x20000428

08021ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8021ecc:	b538      	push	{r3, r4, r5, lr}
 8021ece:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8021ed0:	f7ff fff6 	bl	8021ec0 <HAL_GetTick>
 8021ed4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8021ed6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8021ed8:	bf1e      	ittt	ne
 8021eda:	4b04      	ldrne	r3, [pc, #16]	@ (8021eec <HAL_Delay+0x20>)
 8021edc:	781b      	ldrbne	r3, [r3, #0]
 8021ede:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8021ee0:	f7ff ffee 	bl	8021ec0 <HAL_GetTick>
 8021ee4:	1b43      	subs	r3, r0, r5
 8021ee6:	42a3      	cmp	r3, r4
 8021ee8:	d3fa      	bcc.n	8021ee0 <HAL_Delay+0x14>
  {
  }
}
 8021eea:	bd38      	pop	{r3, r4, r5, pc}
 8021eec:	20000004 	.word	0x20000004

08021ef0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8021ef0:	b530      	push	{r4, r5, lr}
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8021ef2:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8021ef4:	0dcc      	lsrs	r4, r1, #23
 8021ef6:	f004 0404 	and.w	r4, r4, #4
 8021efa:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8021efc:	5903      	ldr	r3, [r0, r4]
 8021efe:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8021f02:	408d      	lsls	r5, r1
 8021f04:	ea23 0305 	bic.w	r3, r3, r5
 8021f08:	408a      	lsls	r2, r1
 8021f0a:	4313      	orrs	r3, r2
 8021f0c:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8021f0e:	bd30      	pop	{r4, r5, pc}

08021f10 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8021f10:	6880      	ldr	r0, [r0, #8]
}
 8021f12:	f000 0001 	and.w	r0, r0, #1
 8021f16:	4770      	bx	lr

08021f18 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8021f18:	6880      	ldr	r0, [r0, #8]
}
 8021f1a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8021f1e:	4770      	bx	lr

08021f20 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8021f20:	2300      	movs	r3, #0
{
 8021f22:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /* Check ADC handle */
  if (hadc == NULL)
 8021f24:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8021f26:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8021f28:	2800      	cmp	r0, #0
 8021f2a:	f000 80c8 	beq.w	80220be <HAL_ADC_Init+0x19e>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8021f2e:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8021f30:	b925      	cbnz	r5, 8021f3c <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8021f32:	f7ff fa3d 	bl	80213b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8021f36:	65e5      	str	r5, [r4, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8021f38:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8021f3c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8021f3e:	689a      	ldr	r2, [r3, #8]
 8021f40:	0095      	lsls	r5, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8021f42:	bf41      	itttt	mi
 8021f44:	689a      	ldrmi	r2, [r3, #8]
 8021f46:	f022 4220 	bicmi.w	r2, r2, #2684354560	@ 0xa0000000
 8021f4a:	f022 023f 	bicmi.w	r2, r2, #63	@ 0x3f
 8021f4e:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8021f50:	689a      	ldr	r2, [r3, #8]
 8021f52:	00d0      	lsls	r0, r2, #3
 8021f54:	f140 8092 	bpl.w	802207c <HAL_ADC_Init+0x15c>
 8021f58:	689a      	ldr	r2, [r3, #8]
 8021f5a:	00d1      	lsls	r1, r2, #3
 8021f5c:	f100 80a5 	bmi.w	80220aa <HAL_ADC_Init+0x18a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

    tmp_hal_status = HAL_ERROR;
 8021f60:	2101      	movs	r1, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8021f62:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8021f64:	f042 0210 	orr.w	r2, r2, #16
 8021f68:	65a2      	str	r2, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8021f6a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8021f6c:	f042 0201 	orr.w	r2, r2, #1
 8021f70:	65e2      	str	r2, [r4, #92]	@ 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8021f72:	4618      	mov	r0, r3
 8021f74:	f7ff ffd0 	bl	8021f18 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8021f78:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8021f7a:	f002 0210 	and.w	r2, r2, #16
 8021f7e:	4302      	orrs	r2, r0
 8021f80:	f040 8099 	bne.w	80220b6 <HAL_ADC_Init+0x196>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8021f84:	6da2      	ldr	r2, [r4, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8021f86:	4618      	mov	r0, r3
    ADC_STATE_CLR_SET(hadc->State,
 8021f88:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8021f8c:	f042 0202 	orr.w	r2, r2, #2
 8021f90:	65a2      	str	r2, [r4, #88]	@ 0x58
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8021f92:	f7ff ffbd 	bl	8021f10 <LL_ADC_IsEnabled>
 8021f96:	b978      	cbnz	r0, 8021fb8 <HAL_ADC_Init+0x98>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8021f98:	484a      	ldr	r0, [pc, #296]	@ (80220c4 <HAL_ADC_Init+0x1a4>)
 8021f9a:	f7ff ffb9 	bl	8021f10 <LL_ADC_IsEnabled>
 8021f9e:	4602      	mov	r2, r0
 8021fa0:	4849      	ldr	r0, [pc, #292]	@ (80220c8 <HAL_ADC_Init+0x1a8>)
 8021fa2:	f7ff ffb5 	bl	8021f10 <LL_ADC_IsEnabled>
 8021fa6:	4302      	orrs	r2, r0
 8021fa8:	d106      	bne.n	8021fb8 <HAL_ADC_Init+0x98>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8021faa:	4848      	ldr	r0, [pc, #288]	@ (80220cc <HAL_ADC_Init+0x1ac>)
 8021fac:	6865      	ldr	r5, [r4, #4]
 8021fae:	6882      	ldr	r2, [r0, #8]
 8021fb0:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8021fb4:	432a      	orrs	r2, r5
 8021fb6:	6082      	str	r2, [r0, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8021fb8:	68e5      	ldr	r5, [r4, #12]
 8021fba:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8021fbc:	f894 0020 	ldrb.w	r0, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 8021fc0:	432a      	orrs	r2, r5
 8021fc2:	68a5      	ldr	r5, [r4, #8]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8021fc4:	2801      	cmp	r0, #1
                 hadc->Init.DataAlign                                                   |
 8021fc6:	ea42 0205 	orr.w	r2, r2, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8021fca:	7e65      	ldrb	r5, [r4, #25]
                 hadc->Init.DataAlign                                                   |
 8021fcc:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8021fd0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8021fd4:	bf02      	ittt	eq
 8021fd6:	6a60      	ldreq	r0, [r4, #36]	@ 0x24
 8021fd8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8021fdc:	ea42 4240 	orreq.w	r2, r2, r0, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8021fe0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8021fe2:	b120      	cbz	r0, 8021fee <HAL_ADC_Init+0xce>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8021fe4:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8021fe6:	f400 7078 	and.w	r0, r0, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8021fea:	4328      	orrs	r0, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8021fec:	4302      	orrs	r2, r0
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8021fee:	68dd      	ldr	r5, [r3, #12]
 8021ff0:	4837      	ldr	r0, [pc, #220]	@ (80220d0 <HAL_ADC_Init+0x1b0>)
 8021ff2:	4028      	ands	r0, r5
 8021ff4:	4310      	orrs	r0, r2
 8021ff6:	60d8      	str	r0, [r3, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8021ff8:	691a      	ldr	r2, [r3, #16]
 8021ffa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8021ffc:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8022000:	4302      	orrs	r2, r0
 8022002:	611a      	str	r2, [r3, #16]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8022004:	689a      	ldr	r2, [r3, #8]
 8022006:	0712      	lsls	r2, r2, #28
 8022008:	d420      	bmi.n	802204c <HAL_ADC_Init+0x12c>
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 802200a:	68d8      	ldr	r0, [r3, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 802200c:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8022010:	7e25      	ldrb	r5, [r4, #24]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8022012:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8022014:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
      tmp_cfgr = (
 8022018:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 802201c:	f020 0002 	bic.w	r0, r0, #2
 8022020:	4302      	orrs	r2, r0
 8022022:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8022024:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
 8022028:	2a01      	cmp	r2, #1
 802202a:	d140      	bne.n	80220ae <HAL_ADC_Init+0x18e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 802202c:	e9d4 2510 	ldrd	r2, r5, [r4, #64]	@ 0x40
 8022030:	6918      	ldr	r0, [r3, #16]
 8022032:	432a      	orrs	r2, r5
 8022034:	f420 60ff 	bic.w	r0, r0, #2040	@ 0x7f8
 8022038:	f020 0004 	bic.w	r0, r0, #4
 802203c:	4302      	orrs	r2, r0
 802203e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8022040:	4302      	orrs	r2, r0
 8022042:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8022044:	4302      	orrs	r2, r0
 8022046:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 802204a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 802204c:	6922      	ldr	r2, [r4, #16]
 802204e:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8022050:	bf05      	ittet	eq
 8022052:	6b18      	ldreq	r0, [r3, #48]	@ 0x30
 8022054:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8022056:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8022058:	f102 32ff 	addeq.w	r2, r2, #4294967295
 802205c:	bf06      	itte	eq
 802205e:	f020 000f 	biceq.w	r0, r0, #15
 8022062:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8022064:	f022 020f 	bicne.w	r2, r2, #15
 8022068:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 802206a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802206c:	f023 0303 	bic.w	r3, r3, #3
 8022070:	f043 0301 	orr.w	r3, r3, #1
 8022074:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8022076:	4608      	mov	r0, r1
 8022078:	b003      	add	sp, #12
 802207a:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 802207c:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802207e:	4915      	ldr	r1, [pc, #84]	@ (80220d4 <HAL_ADC_Init+0x1b4>)
 8022080:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8022084:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8022088:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 802208c:	609a      	str	r2, [r3, #8]
 802208e:	4a12      	ldr	r2, [pc, #72]	@ (80220d8 <HAL_ADC_Init+0x1b8>)
 8022090:	6812      	ldr	r2, [r2, #0]
 8022092:	fbb2 f2f1 	udiv	r2, r2, r1
 8022096:	3201      	adds	r2, #1
 8022098:	0052      	lsls	r2, r2, #1
      wait_loop_index--;
 802209a:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 802209c:	9a01      	ldr	r2, [sp, #4]
 802209e:	2a00      	cmp	r2, #0
 80220a0:	f43f af5a 	beq.w	8021f58 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 80220a4:	9a01      	ldr	r2, [sp, #4]
 80220a6:	3a01      	subs	r2, #1
 80220a8:	e7f7      	b.n	802209a <HAL_ADC_Init+0x17a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80220aa:	2100      	movs	r1, #0
 80220ac:	e761      	b.n	8021f72 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80220ae:	691a      	ldr	r2, [r3, #16]
 80220b0:	f022 0201 	bic.w	r2, r2, #1
 80220b4:	e7c9      	b.n	802204a <HAL_ADC_Init+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80220b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80220b8:	f043 0310 	orr.w	r3, r3, #16
 80220bc:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 80220be:	2101      	movs	r1, #1
 80220c0:	e7d9      	b.n	8022076 <HAL_ADC_Init+0x156>
 80220c2:	bf00      	nop
 80220c4:	42028000 	.word	0x42028000
 80220c8:	42028100 	.word	0x42028100
 80220cc:	42028300 	.word	0x42028300
 80220d0:	fff04007 	.word	0xfff04007
 80220d4:	00030d40 	.word	0x00030d40
 80220d8:	20000000 	.word	0x20000000

080220dc <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80220dc:	4a35      	ldr	r2, [pc, #212]	@ (80221b4 <HAL_ADC_PollForConversion+0xd8>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80220de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80220e2:	6945      	ldr	r5, [r0, #20]
 80220e4:	6897      	ldr	r7, [r2, #8]
 80220e6:	2d08      	cmp	r5, #8
{
 80220e8:	4604      	mov	r4, r0
 80220ea:	460e      	mov	r6, r1
 80220ec:	f007 071f 	and.w	r7, r7, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80220f0:	d015      	beq.n	802211e <HAL_ADC_PollForConversion+0x42>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80220f2:	f240 2321 	movw	r3, #545	@ 0x221
 80220f6:	40fb      	lsrs	r3, r7
 80220f8:	07d9      	lsls	r1, r3, #31
 80220fa:	d50b      	bpl.n	8022114 <HAL_ADC_PollForConversion+0x38>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80220fc:	6803      	ldr	r3, [r0, #0]
 80220fe:	68db      	ldr	r3, [r3, #12]
 8022100:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8022104:	d00a      	beq.n	802211c <HAL_ADC_PollForConversion+0x40>
        return HAL_ERROR;
 8022106:	2001      	movs	r0, #1
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8022108:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802210a:	f043 0320 	orr.w	r3, r3, #32
 802210e:	65a3      	str	r3, [r4, #88]	@ 0x58
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8022110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8022114:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8022116:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 802211a:	e7f3      	b.n	8022104 <HAL_ADC_PollForConversion+0x28>
        tmp_Flag_End = (ADC_FLAG_EOC);
 802211c:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 802211e:	f7ff fecf 	bl	8021ec0 <HAL_GetTick>
 8022122:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8022124:	6823      	ldr	r3, [r4, #0]
 8022126:	681a      	ldr	r2, [r3, #0]
 8022128:	422a      	tst	r2, r5
 802212a:	d025      	beq.n	8022178 <HAL_ADC_PollForConversion+0x9c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 802212c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 802212e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8022132:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8022134:	68da      	ldr	r2, [r3, #12]
 8022136:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 802213a:	d10f      	bne.n	802215c <HAL_ADC_PollForConversion+0x80>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 802213c:	7e62      	ldrb	r2, [r4, #25]
 802213e:	b96a      	cbnz	r2, 802215c <HAL_ADC_PollForConversion+0x80>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8022140:	681a      	ldr	r2, [r3, #0]
 8022142:	0716      	lsls	r6, r2, #28
 8022144:	d50a      	bpl.n	802215c <HAL_ADC_PollForConversion+0x80>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8022146:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8022148:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 802214c:	65a2      	str	r2, [r4, #88]	@ 0x58
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 802214e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8022150:	04d0      	lsls	r0, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8022152:	bf5e      	ittt	pl
 8022154:	6da2      	ldrpl	r2, [r4, #88]	@ 0x58
 8022156:	f042 0201 	orrpl.w	r2, r2, #1
 802215a:	65a2      	strpl	r2, [r4, #88]	@ 0x58
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 802215c:	4a16      	ldr	r2, [pc, #88]	@ (80221b8 <HAL_ADC_PollForConversion+0xdc>)
 802215e:	4293      	cmp	r3, r2
 8022160:	d104      	bne.n	802216c <HAL_ADC_PollForConversion+0x90>
 8022162:	f240 2221 	movw	r2, #545	@ 0x221
 8022166:	40fa      	lsrs	r2, r7
 8022168:	07d1      	lsls	r1, r2, #31
 802216a:	d51b      	bpl.n	80221a4 <HAL_ADC_PollForConversion+0xc8>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 802216c:	68da      	ldr	r2, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 802216e:	2d08      	cmp	r5, #8
 8022170:	d11b      	bne.n	80221aa <HAL_ADC_PollForConversion+0xce>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8022172:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8022174:	2000      	movs	r0, #0
 8022176:	e7cb      	b.n	8022110 <HAL_ADC_PollForConversion+0x34>
    if (Timeout != HAL_MAX_DELAY)
 8022178:	1c72      	adds	r2, r6, #1
 802217a:	d0d4      	beq.n	8022126 <HAL_ADC_PollForConversion+0x4a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 802217c:	f7ff fea0 	bl	8021ec0 <HAL_GetTick>
 8022180:	eba0 0008 	sub.w	r0, r0, r8
 8022184:	42b0      	cmp	r0, r6
 8022186:	d801      	bhi.n	802218c <HAL_ADC_PollForConversion+0xb0>
 8022188:	2e00      	cmp	r6, #0
 802218a:	d1cb      	bne.n	8022124 <HAL_ADC_PollForConversion+0x48>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 802218c:	6823      	ldr	r3, [r4, #0]
 802218e:	681b      	ldr	r3, [r3, #0]
 8022190:	402b      	ands	r3, r5
 8022192:	d1c7      	bne.n	8022124 <HAL_ADC_PollForConversion+0x48>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8022194:	6da2      	ldr	r2, [r4, #88]	@ 0x58
          return HAL_TIMEOUT;
 8022196:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8022198:	f042 0204 	orr.w	r2, r2, #4
 802219c:	65a2      	str	r2, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 802219e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
          return HAL_TIMEOUT;
 80221a2:	e7b5      	b.n	8022110 <HAL_ADC_PollForConversion+0x34>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80221a4:	4a05      	ldr	r2, [pc, #20]	@ (80221bc <HAL_ADC_PollForConversion+0xe0>)
 80221a6:	68d2      	ldr	r2, [r2, #12]
 80221a8:	e7e1      	b.n	802216e <HAL_ADC_PollForConversion+0x92>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80221aa:	0452      	lsls	r2, r2, #17
 80221ac:	d4e2      	bmi.n	8022174 <HAL_ADC_PollForConversion+0x98>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80221ae:	220c      	movs	r2, #12
 80221b0:	601a      	str	r2, [r3, #0]
 80221b2:	e7df      	b.n	8022174 <HAL_ADC_PollForConversion+0x98>
 80221b4:	42028300 	.word	0x42028300
 80221b8:	42028100 	.word	0x42028100
 80221bc:	42028000 	.word	0x42028000

080221c0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80221c0:	6803      	ldr	r3, [r0, #0]
 80221c2:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80221c4:	4770      	bx	lr
	...

080221c8 <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80221c8:	2300      	movs	r3, #0
{
 80221ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80221cc:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80221ce:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 80221d2:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80221d4:	2b01      	cmp	r3, #1
{
 80221d6:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 80221d8:	f000 81c7 	beq.w	802256a <HAL_ADC_ConfigChannel+0x3a2>
 80221dc:	2301      	movs	r3, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80221de:	6804      	ldr	r4, [r0, #0]
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80221e0:	68c9      	ldr	r1, [r1, #12]
  __HAL_LOCK(hadc);
 80221e2:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80221e6:	4620      	mov	r0, r4
 80221e8:	f7ff fe96 	bl	8021f18 <LL_ADC_REG_IsConversionOngoing>
 80221ec:	2800      	cmp	r0, #0
 80221ee:	f040 81b6 	bne.w	802255e <HAL_ADC_ConfigChannel+0x396>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 80221f2:	6833      	ldr	r3, [r6, #0]
 80221f4:	2b01      	cmp	r3, #1
 80221f6:	d005      	beq.n	8022204 <HAL_ADC_ConfigChannel+0x3c>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 80221f8:	4aac      	ldr	r2, [pc, #688]	@ (80224ac <HAL_ADC_ConfigChannel+0x2e4>)
 80221fa:	4293      	cmp	r3, r2
 80221fc:	d109      	bne.n	8022212 <HAL_ADC_ConfigChannel+0x4a>
 80221fe:	4aac      	ldr	r2, [pc, #688]	@ (80224b0 <HAL_ADC_ConfigChannel+0x2e8>)
 8022200:	4291      	cmp	r1, r2
 8022202:	d106      	bne.n	8022212 <HAL_ADC_ConfigChannel+0x4a>
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8022204:	49ab      	ldr	r1, [pc, #684]	@ (80224b4 <HAL_ADC_ConfigChannel+0x2ec>)
 8022206:	f8d1 20c8 	ldr.w	r2, [r1, #200]	@ 0xc8
 802220a:	f042 0201 	orr.w	r2, r2, #1
 802220e:	f8c1 20c8 	str.w	r2, [r1, #200]	@ 0xc8
  MODIFY_REG(*preg,
 8022212:	271f      	movs	r7, #31
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8022214:	6871      	ldr	r1, [r6, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8022216:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 802221a:	0988      	lsrs	r0, r1, #6
 802221c:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
 8022220:	f85c 2000 	ldr.w	r2, [ip, r0]
 8022224:	f001 011f 	and.w	r1, r1, #31
 8022228:	408f      	lsls	r7, r1
 802222a:	f3c3 6384 	ubfx	r3, r3, #26, #5
 802222e:	ea22 0207 	bic.w	r2, r2, r7
 8022232:	408b      	lsls	r3, r1
 8022234:	4313      	orrs	r3, r2
 8022236:	f84c 3000 	str.w	r3, [ip, r0]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 802223a:	4620      	mov	r0, r4
 802223c:	f7ff fe6c 	bl	8021f18 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8022240:	68a2      	ldr	r2, [r4, #8]
 8022242:	f002 0208 	and.w	r2, r2, #8
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8022246:	4302      	orrs	r2, r0
 8022248:	d13b      	bne.n	80222c2 <HAL_ADC_ConfigChannel+0xfa>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 802224a:	68b3      	ldr	r3, [r6, #8]
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 802224c:	6831      	ldr	r1, [r6, #0]
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 802224e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8022252:	d171      	bne.n	8022338 <HAL_ADC_ConfigChannel+0x170>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8022254:	4620      	mov	r0, r4
 8022256:	f7ff fe4b 	bl	8021ef0 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 802225a:	6963      	ldr	r3, [r4, #20]
 802225c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8022260:	6163      	str	r3, [r4, #20]

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8022262:	6937      	ldr	r7, [r6, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8022264:	6971      	ldr	r1, [r6, #20]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8022266:	2f04      	cmp	r7, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8022268:	68e0      	ldr	r0, [r4, #12]
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 802226a:	6832      	ldr	r2, [r6, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 802226c:	f104 0360 	add.w	r3, r4, #96	@ 0x60
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8022270:	d06a      	beq.n	8022348 <HAL_ADC_ConfigChannel+0x180>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8022272:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8022276:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8022278:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
 802227c:	4081      	lsls	r1, r0
 802227e:	488e      	ldr	r0, [pc, #568]	@ (80224b8 <HAL_ADC_ConfigChannel+0x2f0>)
 8022280:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8022284:	ea0c 0000 	and.w	r0, ip, r0
 8022288:	4310      	orrs	r0, r2
 802228a:	ea41 0200 	orr.w	r2, r1, r0
 802228e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8022292:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8022296:	6931      	ldr	r1, [r6, #16]
  MODIFY_REG(*preg,
 8022298:	69b0      	ldr	r0, [r6, #24]
 802229a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 802229e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80222a2:	4302      	orrs	r2, r0
 80222a4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80222a8:	7f31      	ldrb	r1, [r6, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80222aa:	6930      	ldr	r0, [r6, #16]
 80222ac:	1e4f      	subs	r7, r1, #1
  MODIFY_REG(*preg,
 80222ae:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80222b2:	4279      	negs	r1, r7
 80222b4:	4179      	adcs	r1, r7
 80222b6:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80222ba:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 80222be:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80222c2:	4620      	mov	r0, r4
 80222c4:	f7ff fe24 	bl	8021f10 <LL_ADC_IsEnabled>
 80222c8:	2800      	cmp	r0, #0
 80222ca:	f040 80c8 	bne.w	802245e <HAL_ADC_ConfigChannel+0x296>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80222ce:	68f7      	ldr	r7, [r6, #12]
 80222d0:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80222d2:	4a7a      	ldr	r2, [pc, #488]	@ (80224bc <HAL_ADC_ConfigChannel+0x2f4>)
 80222d4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80222d8:	f007 0c18 	and.w	ip, r7, #24
 80222dc:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80222e0:	fa22 f20c 	lsr.w	r2, r2, ip
 80222e4:	401a      	ands	r2, r3
 80222e6:	ea20 0001 	bic.w	r0, r0, r1
 80222ea:	4302      	orrs	r2, r0
 80222ec:	f8c4 20b0 	str.w	r2, [r4, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80222f0:	4a6f      	ldr	r2, [pc, #444]	@ (80224b0 <HAL_ADC_ConfigChannel+0x2e8>)
 80222f2:	4297      	cmp	r7, r2
 80222f4:	f040 80b3 	bne.w	802245e <HAL_ADC_ConfigChannel+0x296>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80222f8:	2900      	cmp	r1, #0
 80222fa:	f040 8084 	bne.w	8022406 <HAL_ADC_ConfigChannel+0x23e>
 80222fe:	0e9a      	lsrs	r2, r3, #26
 8022300:	3201      	adds	r2, #1
 8022302:	f002 071f 	and.w	r7, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8022306:	2f09      	cmp	r7, #9
 8022308:	f04f 0001 	mov.w	r0, #1
 802230c:	ea4f 6282 	mov.w	r2, r2, lsl #26
 8022310:	f240 8094 	bls.w	802243c <HAL_ADC_ConfigChannel+0x274>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8022314:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8022318:	40b8      	lsls	r0, r7
 802231a:	4302      	orrs	r2, r0
 802231c:	2900      	cmp	r1, #0
 802231e:	f040 80b8 	bne.w	8022492 <HAL_ADC_ConfigChannel+0x2ca>
 8022322:	0e99      	lsrs	r1, r3, #26
 8022324:	3101      	adds	r1, #1
 8022326:	f001 011f 	and.w	r1, r1, #31
 802232a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802232e:	391e      	subs	r1, #30
 8022330:	0509      	lsls	r1, r1, #20
 8022332:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8022336:	e08d      	b.n	8022454 <HAL_ADC_ConfigChannel+0x28c>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8022338:	461a      	mov	r2, r3
 802233a:	4620      	mov	r0, r4
 802233c:	f7ff fdd8 	bl	8021ef0 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8022340:	6963      	ldr	r3, [r4, #20]
 8022342:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022346:	e78b      	b.n	8022260 <HAL_ADC_ConfigChannel+0x98>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8022348:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 802234a:	6e21      	ldr	r1, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 802234c:	f3c2 0013 	ubfx	r0, r2, #0, #20
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8022350:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8022354:	2800      	cmp	r0, #0
 8022356:	d139      	bne.n	80223cc <HAL_ADC_ConfigChannel+0x204>
 8022358:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 802235c:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 802235e:	bf02      	ittt	eq
 8022360:	6e22      	ldreq	r2, [r4, #96]	@ 0x60
 8022362:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8022366:	6622      	streq	r2, [r4, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8022368:	685a      	ldr	r2, [r3, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 802236a:	6832      	ldr	r2, [r6, #0]
 802236c:	6859      	ldr	r1, [r3, #4]
 802236e:	f3c2 0013 	ubfx	r0, r2, #0, #20
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8022372:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8022376:	2800      	cmp	r0, #0
 8022378:	d12f      	bne.n	80223da <HAL_ADC_ConfigChannel+0x212>
 802237a:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 802237e:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8022380:	bf02      	ittt	eq
 8022382:	685a      	ldreq	r2, [r3, #4]
 8022384:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8022388:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 802238a:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 802238c:	6832      	ldr	r2, [r6, #0]
 802238e:	6899      	ldr	r1, [r3, #8]
 8022390:	f3c2 0013 	ubfx	r0, r2, #0, #20
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8022394:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8022398:	bb30      	cbnz	r0, 80223e8 <HAL_ADC_ConfigChannel+0x220>
 802239a:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 802239e:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80223a0:	bf02      	ittt	eq
 80223a2:	689a      	ldreq	r2, [r3, #8]
 80223a4:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80223a8:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80223aa:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80223ac:	6832      	ldr	r2, [r6, #0]
 80223ae:	68d9      	ldr	r1, [r3, #12]
 80223b0:	f3c2 0013 	ubfx	r0, r2, #0, #20
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80223b4:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80223b8:	b9e8      	cbnz	r0, 80223f6 <HAL_ADC_ConfigChannel+0x22e>
 80223ba:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80223be:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80223c0:	bf02      	ittt	eq
 80223c2:	68da      	ldreq	r2, [r3, #12]
 80223c4:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80223c8:	60da      	streq	r2, [r3, #12]
}
 80223ca:	e77a      	b.n	80222c2 <HAL_ADC_ConfigChannel+0xfa>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80223cc:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80223d0:	2a00      	cmp	r2, #0
 80223d2:	d0c9      	beq.n	8022368 <HAL_ADC_ConfigChannel+0x1a0>
  return __builtin_clz(value);
 80223d4:	fab2 f282 	clz	r2, r2
 80223d8:	e7c0      	b.n	802235c <HAL_ADC_ConfigChannel+0x194>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80223da:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80223de:	2a00      	cmp	r2, #0
 80223e0:	d0d3      	beq.n	802238a <HAL_ADC_ConfigChannel+0x1c2>
  return __builtin_clz(value);
 80223e2:	fab2 f282 	clz	r2, r2
 80223e6:	e7ca      	b.n	802237e <HAL_ADC_ConfigChannel+0x1b6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80223e8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80223ec:	2a00      	cmp	r2, #0
 80223ee:	d0dc      	beq.n	80223aa <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80223f0:	fab2 f282 	clz	r2, r2
 80223f4:	e7d3      	b.n	802239e <HAL_ADC_ConfigChannel+0x1d6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80223f6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80223fa:	2a00      	cmp	r2, #0
 80223fc:	f43f af61 	beq.w	80222c2 <HAL_ADC_ConfigChannel+0xfa>
  return __builtin_clz(value);
 8022400:	fab2 f282 	clz	r2, r2
 8022404:	e7db      	b.n	80223be <HAL_ADC_ConfigChannel+0x1f6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022406:	fa93 f0a3 	rbit	r0, r3
  if (value == 0U)
 802240a:	b130      	cbz	r0, 802241a <HAL_ADC_ConfigChannel+0x252>
  return __builtin_clz(value);
 802240c:	fab0 f280 	clz	r2, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8022410:	1c57      	adds	r7, r2, #1
 8022412:	f007 071f 	and.w	r7, r7, #31
 8022416:	2f09      	cmp	r7, #9
 8022418:	d830      	bhi.n	802247c <HAL_ADC_ConfigChannel+0x2b4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802241a:	fa93 f2a3 	rbit	r2, r3
 802241e:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8022422:	fab2 f282 	clz	r2, r2
 8022426:	fab7 f787 	clz	r7, r7
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 802242a:	3201      	adds	r2, #1
 802242c:	0692      	lsls	r2, r2, #26
 802242e:	3701      	adds	r7, #1
 8022430:	2001      	movs	r0, #1
 8022432:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8022436:	f007 071f 	and.w	r7, r7, #31
 802243a:	e001      	b.n	8022440 <HAL_ADC_ConfigChannel+0x278>
 802243c:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8022440:	40b8      	lsls	r0, r7
 8022442:	4302      	orrs	r2, r0
 8022444:	b9a9      	cbnz	r1, 8022472 <HAL_ADC_ConfigChannel+0x2aa>
 8022446:	0e99      	lsrs	r1, r3, #26
 8022448:	3101      	adds	r1, #1
 802244a:	f001 011f 	and.w	r1, r1, #31
 802244e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022452:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8022454:	4311      	orrs	r1, r2
 8022456:	4620      	mov	r0, r4
 8022458:	68b2      	ldr	r2, [r6, #8]
 802245a:	f7ff fd49 	bl	8021ef0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 802245e:	6832      	ldr	r2, [r6, #0]
 8022460:	4b17      	ldr	r3, [pc, #92]	@ (80224c0 <HAL_ADC_ConfigChannel+0x2f8>)
 8022462:	421a      	tst	r2, r3
 8022464:	d12e      	bne.n	80224c4 <HAL_ADC_ConfigChannel+0x2fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8022466:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8022468:	2300      	movs	r3, #0
 802246a:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 802246e:	b003      	add	sp, #12
 8022470:	bdf0      	pop	{r4, r5, r6, r7, pc}
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022472:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8022476:	fab1 f181 	clz	r1, r1
 802247a:	e7e5      	b.n	8022448 <HAL_ADC_ConfigChannel+0x280>
 802247c:	fab0 f780 	clz	r7, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8022480:	3201      	adds	r2, #1
 8022482:	0692      	lsls	r2, r2, #26
 8022484:	3701      	adds	r7, #1
 8022486:	2001      	movs	r0, #1
 8022488:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 802248c:	f007 071f 	and.w	r7, r7, #31
 8022490:	e742      	b.n	8022318 <HAL_ADC_ConfigChannel+0x150>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022492:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8022496:	fab3 f383 	clz	r3, r3
 802249a:	2103      	movs	r1, #3
 802249c:	f06f 001d 	mvn.w	r0, #29
 80224a0:	3301      	adds	r3, #1
 80224a2:	f003 031f 	and.w	r3, r3, #31
 80224a6:	fb11 0103 	smlabb	r1, r1, r3, r0
 80224aa:	e741      	b.n	8022330 <HAL_ADC_ConfigChannel+0x168>
 80224ac:	04300002 	.word	0x04300002
 80224b0:	407f0000 	.word	0x407f0000
 80224b4:	42028000 	.word	0x42028000
 80224b8:	03fff000 	.word	0x03fff000
 80224bc:	000fffff 	.word	0x000fffff
 80224c0:	80080000 	.word	0x80080000
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80224c4:	4b2a      	ldr	r3, [pc, #168]	@ (8022570 <HAL_ADC_ConfigChannel+0x3a8>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80224c6:	4e2b      	ldr	r6, [pc, #172]	@ (8022574 <HAL_ADC_ConfigChannel+0x3ac>)
 80224c8:	6899      	ldr	r1, [r3, #8]
 80224ca:	42b2      	cmp	r2, r6
 80224cc:	f001 70e0 	and.w	r0, r1, #29360128	@ 0x1c00000
 80224d0:	d119      	bne.n	8022506 <HAL_ADC_ConfigChannel+0x33e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80224d2:	020e      	lsls	r6, r1, #8
 80224d4:	d4c7      	bmi.n	8022466 <HAL_ADC_ConfigChannel+0x29e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80224d6:	4a28      	ldr	r2, [pc, #160]	@ (8022578 <HAL_ADC_ConfigChannel+0x3b0>)
 80224d8:	4294      	cmp	r4, r2
 80224da:	d1c4      	bne.n	8022466 <HAL_ADC_ConfigChannel+0x29e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80224dc:	689a      	ldr	r2, [r3, #8]
 80224de:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80224e2:	4302      	orrs	r2, r0
 80224e4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80224e8:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80224ea:	4b24      	ldr	r3, [pc, #144]	@ (802257c <HAL_ADC_ConfigChannel+0x3b4>)
 80224ec:	4a24      	ldr	r2, [pc, #144]	@ (8022580 <HAL_ADC_ConfigChannel+0x3b8>)
 80224ee:	681b      	ldr	r3, [r3, #0]
 80224f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80224f4:	3301      	adds	r3, #1
 80224f6:	005b      	lsls	r3, r3, #1
            wait_loop_index--;
 80224f8:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80224fa:	9b01      	ldr	r3, [sp, #4]
 80224fc:	2b00      	cmp	r3, #0
 80224fe:	d0b2      	beq.n	8022466 <HAL_ADC_ConfigChannel+0x29e>
            wait_loop_index--;
 8022500:	9b01      	ldr	r3, [sp, #4]
 8022502:	3b01      	subs	r3, #1
 8022504:	e7f8      	b.n	80224f8 <HAL_ADC_ConfigChannel+0x330>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8022506:	4e1f      	ldr	r6, [pc, #124]	@ (8022584 <HAL_ADC_ConfigChannel+0x3bc>)
 8022508:	42b2      	cmp	r2, r6
 802250a:	d10c      	bne.n	8022526 <HAL_ADC_ConfigChannel+0x35e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 802250c:	01c9      	lsls	r1, r1, #7
 802250e:	d4aa      	bmi.n	8022466 <HAL_ADC_ConfigChannel+0x29e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8022510:	4a1d      	ldr	r2, [pc, #116]	@ (8022588 <HAL_ADC_ConfigChannel+0x3c0>)
 8022512:	4294      	cmp	r4, r2
 8022514:	d1a7      	bne.n	8022466 <HAL_ADC_ConfigChannel+0x29e>
 8022516:	689a      	ldr	r2, [r3, #8]
 8022518:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 802251c:	4302      	orrs	r2, r0
 802251e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8022522:	609a      	str	r2, [r3, #8]
}
 8022524:	e79f      	b.n	8022466 <HAL_ADC_ConfigChannel+0x29e>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8022526:	4e19      	ldr	r6, [pc, #100]	@ (802258c <HAL_ADC_ConfigChannel+0x3c4>)
 8022528:	42b2      	cmp	r2, r6
 802252a:	d10b      	bne.n	8022544 <HAL_ADC_ConfigChannel+0x37c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 802252c:	024a      	lsls	r2, r1, #9
 802252e:	d49a      	bmi.n	8022466 <HAL_ADC_ConfigChannel+0x29e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8022530:	4a11      	ldr	r2, [pc, #68]	@ (8022578 <HAL_ADC_ConfigChannel+0x3b0>)
 8022532:	4294      	cmp	r4, r2
 8022534:	d197      	bne.n	8022466 <HAL_ADC_ConfigChannel+0x29e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8022536:	689a      	ldr	r2, [r3, #8]
 8022538:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 802253c:	4302      	orrs	r2, r0
 802253e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8022542:	e7ee      	b.n	8022522 <HAL_ADC_ConfigChannel+0x35a>
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8022544:	4b12      	ldr	r3, [pc, #72]	@ (8022590 <HAL_ADC_ConfigChannel+0x3c8>)
 8022546:	429a      	cmp	r2, r3
 8022548:	d18d      	bne.n	8022466 <HAL_ADC_ConfigChannel+0x29e>
        if (ADC_VDDCORE_INSTANCE(hadc))
 802254a:	4b0b      	ldr	r3, [pc, #44]	@ (8022578 <HAL_ADC_ConfigChannel+0x3b0>)
 802254c:	429c      	cmp	r4, r3
 802254e:	d08a      	beq.n	8022466 <HAL_ADC_ConfigChannel+0x29e>
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8022550:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 8022554:	f043 0301 	orr.w	r3, r3, #1
 8022558:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
}
 802255c:	e783      	b.n	8022466 <HAL_ADC_ConfigChannel+0x29e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 802255e:	6daa      	ldr	r2, [r5, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8022560:	4618      	mov	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8022562:	f042 0220 	orr.w	r2, r2, #32
 8022566:	65aa      	str	r2, [r5, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8022568:	e77e      	b.n	8022468 <HAL_ADC_ConfigChannel+0x2a0>
  __HAL_LOCK(hadc);
 802256a:	2002      	movs	r0, #2
 802256c:	e77f      	b.n	802246e <HAL_ADC_ConfigChannel+0x2a6>
 802256e:	bf00      	nop
 8022570:	42028300 	.word	0x42028300
 8022574:	c3210000 	.word	0xc3210000
 8022578:	42028000 	.word	0x42028000
 802257c:	20000000 	.word	0x20000000
 8022580:	00030d40 	.word	0x00030d40
 8022584:	43290000 	.word	0x43290000
 8022588:	42028100 	.word	0x42028100
 802258c:	c7520000 	.word	0xc7520000
 8022590:	475a0000 	.word	0x475a0000

08022594 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8022594:	6803      	ldr	r3, [r0, #0]
{
 8022596:	b570      	push	{r4, r5, r6, lr}
 8022598:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 802259a:	4618      	mov	r0, r3
 802259c:	f7ff fcbc 	bl	8021f18 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80225a0:	689a      	ldr	r2, [r3, #8]
 80225a2:	f002 0208 	and.w	r2, r2, #8
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80225a6:	4302      	orrs	r2, r0
 80225a8:	d101      	bne.n	80225ae <ADC_ConversionStop+0x1a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80225aa:	2000      	movs	r0, #0
}
 80225ac:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80225ae:	68da      	ldr	r2, [r3, #12]
 80225b0:	0192      	lsls	r2, r2, #6
 80225b2:	d53a      	bpl.n	802262a <ADC_ConversionStop+0x96>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80225b4:	f240 1201 	movw	r2, #257	@ 0x101
 80225b8:	8b20      	ldrh	r0, [r4, #24]
 80225ba:	4290      	cmp	r0, r2
 80225bc:	d135      	bne.n	802262a <ADC_ConversionStop+0x96>
 80225be:	4a27      	ldr	r2, [pc, #156]	@ (802265c <ADC_ConversionStop+0xc8>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80225c0:	6819      	ldr	r1, [r3, #0]
 80225c2:	064e      	lsls	r6, r1, #25
 80225c4:	d525      	bpl.n	8022612 <ADC_ConversionStop+0x7e>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80225c6:	2240      	movs	r2, #64	@ 0x40
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80225c8:	2101      	movs	r1, #1
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80225ca:	601a      	str	r2, [r3, #0]
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80225cc:	4618      	mov	r0, r3
 80225ce:	f7ff fca3 	bl	8021f18 <LL_ADC_REG_IsConversionOngoing>
 80225d2:	b150      	cbz	r0, 80225ea <ADC_ConversionStop+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80225d4:	689a      	ldr	r2, [r3, #8]
 80225d6:	0795      	lsls	r5, r2, #30
 80225d8:	d407      	bmi.n	80225ea <ADC_ConversionStop+0x56>
  MODIFY_REG(ADCx->CR,
 80225da:	689a      	ldr	r2, [r3, #8]
 80225dc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80225e0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80225e4:	f042 0210 	orr.w	r2, r2, #16
 80225e8:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80225ea:	2901      	cmp	r1, #1
 80225ec:	d11f      	bne.n	802262e <ADC_ConversionStop+0x9a>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80225ee:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 80225f0:	f7ff fc66 	bl	8021ec0 <HAL_GetTick>
 80225f4:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80225f6:	6823      	ldr	r3, [r4, #0]
 80225f8:	689b      	ldr	r3, [r3, #8]
 80225fa:	422b      	tst	r3, r5
 80225fc:	d0d5      	beq.n	80225aa <ADC_ConversionStop+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80225fe:	f7ff fc5f 	bl	8021ec0 <HAL_GetTick>
 8022602:	1b80      	subs	r0, r0, r6
 8022604:	2805      	cmp	r0, #5
 8022606:	d9f6      	bls.n	80225f6 <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8022608:	6823      	ldr	r3, [r4, #0]
 802260a:	689b      	ldr	r3, [r3, #8]
 802260c:	422b      	tst	r3, r5
 802260e:	d0f2      	beq.n	80225f6 <ADC_ConversionStop+0x62>
 8022610:	e001      	b.n	8022616 <ADC_ConversionStop+0x82>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8022612:	3a01      	subs	r2, #1
 8022614:	d1d4      	bne.n	80225c0 <ADC_ConversionStop+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8022616:	6da3      	ldr	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8022618:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 802261a:	f043 0310 	orr.w	r3, r3, #16
 802261e:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8022620:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8022622:	f043 0301 	orr.w	r3, r3, #1
 8022626:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8022628:	e7c0      	b.n	80225ac <ADC_ConversionStop+0x18>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 802262a:	2902      	cmp	r1, #2
 802262c:	d1ce      	bne.n	80225cc <ADC_ConversionStop+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 802262e:	689a      	ldr	r2, [r3, #8]
 8022630:	0710      	lsls	r0, r2, #28
 8022632:	d50a      	bpl.n	802264a <ADC_ConversionStop+0xb6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8022634:	689a      	ldr	r2, [r3, #8]
 8022636:	0792      	lsls	r2, r2, #30
 8022638:	d407      	bmi.n	802264a <ADC_ConversionStop+0xb6>
  MODIFY_REG(ADCx->CR,
 802263a:	689a      	ldr	r2, [r3, #8]
 802263c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8022640:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8022644:	f042 0220 	orr.w	r2, r2, #32
 8022648:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 802264a:	2902      	cmp	r1, #2
 802264c:	d003      	beq.n	8022656 <ADC_ConversionStop+0xc2>
 802264e:	2903      	cmp	r1, #3
 8022650:	d1cd      	bne.n	80225ee <ADC_ConversionStop+0x5a>
 8022652:	250c      	movs	r5, #12
 8022654:	e7cc      	b.n	80225f0 <ADC_ConversionStop+0x5c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8022656:	2508      	movs	r5, #8
 8022658:	e7ca      	b.n	80225f0 <ADC_ConversionStop+0x5c>
 802265a:	bf00      	nop
 802265c:	a3400001 	.word	0xa3400001

08022660 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8022660:	2300      	movs	r3, #0
{
 8022662:	b573      	push	{r0, r1, r4, r5, r6, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8022664:	6802      	ldr	r2, [r0, #0]
{
 8022666:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8022668:	4610      	mov	r0, r2
  __IO uint32_t wait_loop_index = 0UL;
 802266a:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 802266c:	f7ff fc50 	bl	8021f10 <LL_ADC_IsEnabled>
 8022670:	b110      	cbz	r0, 8022678 <ADC_Enable+0x18>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8022672:	2000      	movs	r0, #0
}
 8022674:	b002      	add	sp, #8
 8022676:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8022678:	6891      	ldr	r1, [r2, #8]
 802267a:	4b21      	ldr	r3, [pc, #132]	@ (8022700 <ADC_Enable+0xa0>)
 802267c:	4219      	tst	r1, r3
 802267e:	d009      	beq.n	8022694 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8022680:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8022682:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8022684:	f043 0310 	orr.w	r3, r3, #16
 8022688:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 802268a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 802268c:	f043 0301 	orr.w	r3, r3, #1
 8022690:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8022692:	e7ef      	b.n	8022674 <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 8022694:	6893      	ldr	r3, [r2, #8]
 8022696:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802269a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 802269e:	f043 0301 	orr.w	r3, r3, #1
 80226a2:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80226a4:	4b17      	ldr	r3, [pc, #92]	@ (8022704 <ADC_Enable+0xa4>)
 80226a6:	689b      	ldr	r3, [r3, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80226a8:	0219      	lsls	r1, r3, #8
 80226aa:	d41a      	bmi.n	80226e2 <ADC_Enable+0x82>
    tickstart = HAL_GetTick();
 80226ac:	f7ff fc08 	bl	8021ec0 <HAL_GetTick>
 80226b0:	4605      	mov	r5, r0
  MODIFY_REG(ADCx->CR,
 80226b2:	4e15      	ldr	r6, [pc, #84]	@ (8022708 <ADC_Enable+0xa8>)
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80226b4:	6822      	ldr	r2, [r4, #0]
 80226b6:	6813      	ldr	r3, [r2, #0]
 80226b8:	07db      	lsls	r3, r3, #31
 80226ba:	d4da      	bmi.n	8022672 <ADC_Enable+0x12>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80226bc:	4610      	mov	r0, r2
 80226be:	f7ff fc27 	bl	8021f10 <LL_ADC_IsEnabled>
 80226c2:	b920      	cbnz	r0, 80226ce <ADC_Enable+0x6e>
 80226c4:	6893      	ldr	r3, [r2, #8]
 80226c6:	4033      	ands	r3, r6
 80226c8:	f043 0301 	orr.w	r3, r3, #1
 80226cc:	6093      	str	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80226ce:	f7ff fbf7 	bl	8021ec0 <HAL_GetTick>
 80226d2:	1b40      	subs	r0, r0, r5
 80226d4:	2802      	cmp	r0, #2
 80226d6:	d9ed      	bls.n	80226b4 <ADC_Enable+0x54>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80226d8:	6823      	ldr	r3, [r4, #0]
 80226da:	681b      	ldr	r3, [r3, #0]
 80226dc:	07da      	lsls	r2, r3, #31
 80226de:	d4e9      	bmi.n	80226b4 <ADC_Enable+0x54>
 80226e0:	e7ce      	b.n	8022680 <ADC_Enable+0x20>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80226e2:	4b0a      	ldr	r3, [pc, #40]	@ (802270c <ADC_Enable+0xac>)
 80226e4:	4a0a      	ldr	r2, [pc, #40]	@ (8022710 <ADC_Enable+0xb0>)
 80226e6:	681b      	ldr	r3, [r3, #0]
 80226e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80226ec:	3301      	adds	r3, #1
 80226ee:	005b      	lsls	r3, r3, #1
        wait_loop_index--;
 80226f0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80226f2:	9b01      	ldr	r3, [sp, #4]
 80226f4:	2b00      	cmp	r3, #0
 80226f6:	d0d9      	beq.n	80226ac <ADC_Enable+0x4c>
        wait_loop_index--;
 80226f8:	9b01      	ldr	r3, [sp, #4]
 80226fa:	3b01      	subs	r3, #1
 80226fc:	e7f8      	b.n	80226f0 <ADC_Enable+0x90>
 80226fe:	bf00      	nop
 8022700:	8000003f 	.word	0x8000003f
 8022704:	42028300 	.word	0x42028300
 8022708:	7fffffc0 	.word	0x7fffffc0
 802270c:	20000000 	.word	0x20000000
 8022710:	00030d40 	.word	0x00030d40

08022714 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8022714:	4b34      	ldr	r3, [pc, #208]	@ (80227e8 <HAL_ADC_Start+0xd4>)
{
 8022716:	b570      	push	{r4, r5, r6, lr}
 8022718:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 802271a:	6800      	ldr	r0, [r0, #0]
 802271c:	689e      	ldr	r6, [r3, #8]
 802271e:	f7ff fbfb 	bl	8021f18 <LL_ADC_REG_IsConversionOngoing>
 8022722:	4605      	mov	r5, r0
 8022724:	2800      	cmp	r0, #0
 8022726:	d15c      	bne.n	80227e2 <HAL_ADC_Start+0xce>
    __HAL_LOCK(hadc);
 8022728:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 802272c:	2b01      	cmp	r3, #1
 802272e:	d058      	beq.n	80227e2 <HAL_ADC_Start+0xce>
 8022730:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8022732:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8022734:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8022738:	f7ff ff92 	bl	8022660 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 802273c:	2800      	cmp	r0, #0
 802273e:	d14d      	bne.n	80227dc <HAL_ADC_Start+0xc8>
      ADC_STATE_CLR_SET(hadc->State,
 8022740:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8022742:	4a2a      	ldr	r2, [pc, #168]	@ (80227ec <HAL_ADC_Start+0xd8>)
      ADC_STATE_CLR_SET(hadc->State,
 8022744:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8022748:	f023 0301 	bic.w	r3, r3, #1
 802274c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8022750:	65a3      	str	r3, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8022752:	6823      	ldr	r3, [r4, #0]
 8022754:	f006 011f 	and.w	r1, r6, #31
 8022758:	4293      	cmp	r3, r2
 802275a:	d12d      	bne.n	80227b8 <HAL_ADC_Start+0xa4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 802275c:	bb71      	cbnz	r1, 80227bc <HAL_ADC_Start+0xa8>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 802275e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8022762:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8022764:	f425 1580 	bic.w	r5, r5, #1048576	@ 0x100000
 8022768:	65a5      	str	r5, [r4, #88]	@ 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802276a:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 802276c:	f415 5580 	ands.w	r5, r5, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8022770:	bf1c      	itt	ne
 8022772:	6de5      	ldrne	r5, [r4, #92]	@ 0x5c
 8022774:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8022778:	65e5      	str	r5, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 802277a:	251c      	movs	r5, #28
 802277c:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 802277e:	2500      	movs	r5, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8022780:	4293      	cmp	r3, r2
      __HAL_UNLOCK(hadc);
 8022782:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8022786:	d005      	beq.n	8022794 <HAL_ADC_Start+0x80>
 8022788:	f240 2521 	movw	r5, #545	@ 0x221
 802278c:	fa25 f101 	lsr.w	r1, r5, r1
 8022790:	07c9      	lsls	r1, r1, #31
 8022792:	d515      	bpl.n	80227c0 <HAL_ADC_Start+0xac>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8022794:	68da      	ldr	r2, [r3, #12]
 8022796:	0192      	lsls	r2, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8022798:	bf41      	itttt	mi
 802279a:	6da2      	ldrmi	r2, [r4, #88]	@ 0x58
 802279c:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 80227a0:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 80227a4:	65a2      	strmi	r2, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 80227a6:	689a      	ldr	r2, [r3, #8]
 80227a8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80227ac:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80227b0:	f042 0204 	orr.w	r2, r2, #4
 80227b4:	609a      	str	r2, [r3, #8]
}
 80227b6:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80227b8:	461a      	mov	r2, r3
 80227ba:	e7d2      	b.n	8022762 <HAL_ADC_Start+0x4e>
 80227bc:	4a0c      	ldr	r2, [pc, #48]	@ (80227f0 <HAL_ADC_Start+0xdc>)
 80227be:	e7d4      	b.n	802276a <HAL_ADC_Start+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80227c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80227c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80227c6:	65a3      	str	r3, [r4, #88]	@ 0x58
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80227c8:	68d3      	ldr	r3, [r2, #12]
 80227ca:	019b      	lsls	r3, r3, #6
 80227cc:	d5f3      	bpl.n	80227b6 <HAL_ADC_Start+0xa2>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80227ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80227d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80227d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80227d8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80227da:	e7ec      	b.n	80227b6 <HAL_ADC_Start+0xa2>
      __HAL_UNLOCK(hadc);
 80227dc:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 80227e0:	e7e9      	b.n	80227b6 <HAL_ADC_Start+0xa2>
    __HAL_LOCK(hadc);
 80227e2:	2002      	movs	r0, #2
 80227e4:	e7e7      	b.n	80227b6 <HAL_ADC_Start+0xa2>
 80227e6:	bf00      	nop
 80227e8:	42028300 	.word	0x42028300
 80227ec:	42028100 	.word	0x42028100
 80227f0:	42028000 	.word	0x42028000

080227f4 <ADC_Disable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80227f4:	6802      	ldr	r2, [r0, #0]
{
 80227f6:	b538      	push	{r3, r4, r5, lr}
 80227f8:	4604      	mov	r4, r0

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80227fa:	4610      	mov	r0, r2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80227fc:	6893      	ldr	r3, [r2, #8]
 80227fe:	f7ff fb87 	bl	8021f10 <LL_ADC_IsEnabled>
 8022802:	b908      	cbnz	r0, 8022808 <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8022804:	2000      	movs	r0, #0
}
 8022806:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8022808:	0799      	lsls	r1, r3, #30
 802280a:	d4fb      	bmi.n	8022804 <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 802280c:	6893      	ldr	r3, [r2, #8]
 802280e:	f003 030d 	and.w	r3, r3, #13
 8022812:	2b01      	cmp	r3, #1
 8022814:	d119      	bne.n	802284a <ADC_Disable+0x56>
  MODIFY_REG(ADCx->CR,
 8022816:	6893      	ldr	r3, [r2, #8]
 8022818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802281c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8022820:	f043 0302 	orr.w	r3, r3, #2
 8022824:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8022826:	2303      	movs	r3, #3
 8022828:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 802282a:	f7ff fb49 	bl	8021ec0 <HAL_GetTick>
 802282e:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8022830:	6823      	ldr	r3, [r4, #0]
 8022832:	689b      	ldr	r3, [r3, #8]
 8022834:	07db      	lsls	r3, r3, #31
 8022836:	d5e5      	bpl.n	8022804 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8022838:	f7ff fb42 	bl	8021ec0 <HAL_GetTick>
 802283c:	1b40      	subs	r0, r0, r5
 802283e:	2802      	cmp	r0, #2
 8022840:	d9f6      	bls.n	8022830 <ADC_Disable+0x3c>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8022842:	6823      	ldr	r3, [r4, #0]
 8022844:	689b      	ldr	r3, [r3, #8]
 8022846:	07da      	lsls	r2, r3, #31
 8022848:	d5f2      	bpl.n	8022830 <ADC_Disable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 802284a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 802284c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 802284e:	f043 0310 	orr.w	r3, r3, #16
 8022852:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8022854:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8022856:	f043 0301 	orr.w	r3, r3, #1
 802285a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 802285c:	e7d3      	b.n	8022806 <ADC_Disable+0x12>

0802285e <HAL_ADC_Stop>:
{
 802285e:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8022860:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 8022864:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8022866:	2b01      	cmp	r3, #1
 8022868:	d016      	beq.n	8022898 <HAL_ADC_Stop+0x3a>
 802286a:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 802286c:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 802286e:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8022872:	f7ff fe8f 	bl	8022594 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8022876:	b958      	cbnz	r0, 8022890 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8022878:	4620      	mov	r0, r4
 802287a:	f7ff ffbb 	bl	80227f4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 802287e:	b938      	cbnz	r0, 8022890 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8022880:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8022882:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8022886:	f023 0301 	bic.w	r3, r3, #1
 802288a:	f043 0301 	orr.w	r3, r3, #1
 802288e:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8022890:	2300      	movs	r3, #0
 8022892:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8022896:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8022898:	2002      	movs	r0, #2
 802289a:	e7fc      	b.n	8022896 <HAL_ADC_Stop+0x38>

0802289c <HAL_ADCEx_Calibration_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 802289c:	2300      	movs	r3, #0
{
 802289e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80228a0:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80228a2:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 80228a6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80228a8:	2b01      	cmp	r3, #1
{
 80228aa:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 80228ac:	d03d      	beq.n	802292a <HAL_ADCEx_Calibration_Start+0x8e>
 80228ae:	2301      	movs	r3, #1
 80228b0:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80228b4:	f7ff ff9e 	bl	80227f4 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80228b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 80228ba:	2800      	cmp	r0, #0
 80228bc:	d132      	bne.n	8022924 <HAL_ADCEx_Calibration_Start+0x88>
    ADC_STATE_CLR_SET(hadc->State,
 80228be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80228c2:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80228c6:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80228c8:	f043 0302 	orr.w	r3, r3, #2
 80228cc:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 80228ce:	6893      	ldr	r3, [r2, #8]
 80228d0:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 80228d4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80228d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80228dc:	432b      	orrs	r3, r5
 80228de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80228e2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80228e4:	6893      	ldr	r3, [r2, #8]
 80228e6:	2b00      	cmp	r3, #0
 80228e8:	da12      	bge.n	8022910 <HAL_ADCEx_Calibration_Start+0x74>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
 80228ea:	9b01      	ldr	r3, [sp, #4]
 80228ec:	3301      	adds	r3, #1
 80228ee:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80228f0:	9901      	ldr	r1, [sp, #4]
 80228f2:	4b0f      	ldr	r3, [pc, #60]	@ (8022930 <HAL_ADCEx_Calibration_Start+0x94>)
 80228f4:	4299      	cmp	r1, r3
 80228f6:	d3f5      	bcc.n	80228e4 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80228f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);

        return HAL_ERROR;
 80228fa:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80228fc:	f023 0312 	bic.w	r3, r3, #18
 8022900:	f043 0310 	orr.w	r3, r3, #16
 8022904:	65a3      	str	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 8022906:	2300      	movs	r3, #0
 8022908:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 802290c:	b003      	add	sp, #12
 802290e:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8022910:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8022912:	f023 0303 	bic.w	r3, r3, #3
 8022916:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 802291a:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 802291c:	2300      	movs	r3, #0
 802291e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
  return tmp_hal_status;
 8022922:	e7f3      	b.n	802290c <HAL_ADCEx_Calibration_Start+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8022924:	f043 0310 	orr.w	r3, r3, #16
 8022928:	e7f7      	b.n	802291a <HAL_ADCEx_Calibration_Start+0x7e>
  __HAL_LOCK(hadc);
 802292a:	2002      	movs	r0, #2
 802292c:	e7ee      	b.n	802290c <HAL_ADCEx_Calibration_Start+0x70>
 802292e:	bf00      	nop
 8022930:	25c3f800 	.word	0x25c3f800

08022934 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8022934:	4907      	ldr	r1, [pc, #28]	@ (8022954 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8022936:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8022938:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802293a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802293e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8022942:	0412      	lsls	r2, r2, #16
 8022944:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8022946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8022948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 802294c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8022950:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8022952:	4770      	bx	lr
 8022954:	e000ed00 	.word	0xe000ed00

08022958 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022958:	4b15      	ldr	r3, [pc, #84]	@ (80229b0 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802295a:	b530      	push	{r4, r5, lr}
 802295c:	68dc      	ldr	r4, [r3, #12]
 802295e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022962:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022966:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022968:	2b04      	cmp	r3, #4
 802296a:	bf28      	it	cs
 802296c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802296e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022970:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022974:	bf94      	ite	ls
 8022976:	2400      	movls	r4, #0
 8022978:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802297a:	fa05 f303 	lsl.w	r3, r5, r3
 802297e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022982:	40a5      	lsls	r5, r4
 8022984:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022988:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 802298a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802298c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022990:	bfac      	ite	ge
 8022992:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022996:	4a07      	ldrlt	r2, [pc, #28]	@ (80229b4 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022998:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802299c:	b2db      	uxtb	r3, r3
 802299e:	bfab      	itete	ge
 80229a0:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80229a4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80229a8:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80229ac:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80229ae:	bd30      	pop	{r4, r5, pc}
 80229b0:	e000ed00 	.word	0xe000ed00
 80229b4:	e000ed14 	.word	0xe000ed14

080229b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80229b8:	2800      	cmp	r0, #0
 80229ba:	db07      	blt.n	80229cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80229bc:	2301      	movs	r3, #1
 80229be:	0941      	lsrs	r1, r0, #5
 80229c0:	4a03      	ldr	r2, [pc, #12]	@ (80229d0 <HAL_NVIC_EnableIRQ+0x18>)
 80229c2:	f000 001f 	and.w	r0, r0, #31
 80229c6:	4083      	lsls	r3, r0
 80229c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80229cc:	4770      	bx	lr
 80229ce:	bf00      	nop
 80229d0:	e000e100 	.word	0xe000e100

080229d4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80229d4:	2800      	cmp	r0, #0
 80229d6:	db0c      	blt.n	80229f2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80229d8:	2201      	movs	r2, #1
 80229da:	4906      	ldr	r1, [pc, #24]	@ (80229f4 <HAL_NVIC_DisableIRQ+0x20>)
 80229dc:	0943      	lsrs	r3, r0, #5
 80229de:	f000 001f 	and.w	r0, r0, #31
 80229e2:	4082      	lsls	r2, r0
 80229e4:	3320      	adds	r3, #32
 80229e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80229ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80229ee:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80229f2:	4770      	bx	lr
 80229f4:	e000e100 	.word	0xe000e100

080229f8 <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80229f8:	3801      	subs	r0, #1
 80229fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80229fe:	bf3f      	itttt	cc
 8022a00:	f04f 23e0 	movcc.w	r3, #3758153728	@ 0xe000e000
 8022a04:	6158      	strcc	r0, [r3, #20]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8022a06:	2000      	movcc	r0, #0
 8022a08:	6198      	strcc	r0, [r3, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8022a0a:	bf37      	itett	cc
 8022a0c:	691a      	ldrcc	r2, [r3, #16]
    return (1UL);
 8022a0e:	2001      	movcs	r0, #1
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8022a10:	f042 0203 	orrcc.w	r2, r2, #3
 8022a14:	611a      	strcc	r2, [r3, #16]

  /* Function successful */
  return (0UL);
}
 8022a16:	4770      	bx	lr

08022a18 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8022a18:	2804      	cmp	r0, #4
 8022a1a:	d818      	bhi.n	8022a4e <HAL_SYSTICK_CLKSourceConfig+0x36>
 8022a1c:	e8df f000 	tbb	[pc, r0]
 8022a20:	1726180a 	.word	0x1726180a
 8022a24:	03          	.byte	0x03
 8022a25:	00          	.byte	0x00
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8022a26:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8022a2a:	6913      	ldr	r3, [r2, #16]
 8022a2c:	f043 0304 	orr.w	r3, r3, #4
 8022a30:	6113      	str	r3, [r2, #16]
      break;
 8022a32:	4770      	bx	lr
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8022a34:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8022a38:	6913      	ldr	r3, [r2, #16]
 8022a3a:	f023 0304 	bic.w	r3, r3, #4
 8022a3e:	6113      	str	r3, [r2, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8022a40:	4a11      	ldr	r2, [pc, #68]	@ (8022a88 <HAL_SYSTICK_CLKSourceConfig+0x70>)
 8022a42:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8022a46:	f023 030c 	bic.w	r3, r3, #12
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8022a4a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 8022a4e:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8022a50:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8022a54:	6913      	ldr	r3, [r2, #16]
 8022a56:	f023 0304 	bic.w	r3, r3, #4
 8022a5a:	6113      	str	r3, [r2, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8022a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8022a88 <HAL_SYSTICK_CLKSourceConfig+0x70>)
 8022a5e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8022a62:	f023 030c 	bic.w	r3, r3, #12
 8022a66:	f043 0304 	orr.w	r3, r3, #4
 8022a6a:	e7ee      	b.n	8022a4a <HAL_SYSTICK_CLKSourceConfig+0x32>
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8022a6c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8022a70:	6913      	ldr	r3, [r2, #16]
 8022a72:	f023 0304 	bic.w	r3, r3, #4
 8022a76:	6113      	str	r3, [r2, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8022a78:	4a03      	ldr	r2, [pc, #12]	@ (8022a88 <HAL_SYSTICK_CLKSourceConfig+0x70>)
 8022a7a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8022a7e:	f023 030c 	bic.w	r3, r3, #12
 8022a82:	f043 0308 	orr.w	r3, r3, #8
 8022a86:	e7e0      	b.n	8022a4a <HAL_SYSTICK_CLKSourceConfig+0x32>
 8022a88:	44020c00 	.word	0x44020c00

08022a8c <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8022a8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8022a90:	691b      	ldr	r3, [r3, #16]
 8022a92:	075a      	lsls	r2, r3, #29
 8022a94:	d40c      	bmi.n	8022ab0 <HAL_SYSTICK_GetCLKSourceConfig+0x24>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8022a96:	4b08      	ldr	r3, [pc, #32]	@ (8022ab8 <HAL_SYSTICK_GetCLKSourceConfig+0x2c>)
 8022a98:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
 8022a9c:	f000 000c 	and.w	r0, r0, #12

    switch (systick_rcc_source)
 8022aa0:	2804      	cmp	r0, #4
 8022aa2:	d007      	beq.n	8022ab4 <HAL_SYSTICK_GetCLKSourceConfig+0x28>
 8022aa4:	f1a0 0308 	sub.w	r3, r0, #8
 8022aa8:	4258      	negs	r0, r3
 8022aaa:	4158      	adcs	r0, r3
 8022aac:	0040      	lsls	r0, r0, #1
 8022aae:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8022ab0:	2004      	movs	r0, #4
 8022ab2:	4770      	bx	lr
    switch (systick_rcc_source)
 8022ab4:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 8022ab6:	4770      	bx	lr
 8022ab8:	44020c00 	.word	0x44020c00

08022abc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8022abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022abe:	460c      	mov	r4, r1
 8022ac0:	f022 0503 	bic.w	r5, r2, #3
  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8022ac4:	6806      	ldr	r6, [r0, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8022ac6:	0897      	lsrs	r7, r2, #2
 8022ac8:	440d      	add	r5, r1
 8022aca:	42a5      	cmp	r5, r4
 8022acc:	d108      	bne.n	8022ae0 <CRC_Handle_8+0x24>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8022ace:	f012 0203 	ands.w	r2, r2, #3
 8022ad2:	d01e      	beq.n	8022b12 <CRC_Handle_8+0x56>
  {
    if ((BufferLength % 4U) == 1U)
 8022ad4:	2a01      	cmp	r2, #1
 8022ad6:	d114      	bne.n	8022b02 <CRC_Handle_8+0x46>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8022ad8:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8022adc:	7033      	strb	r3, [r6, #0]
 8022ade:	e018      	b.n	8022b12 <CRC_Handle_8+0x56>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8022ae0:	7863      	ldrb	r3, [r4, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8022ae2:	f894 c000 	ldrb.w	ip, [r4]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8022ae6:	041b      	lsls	r3, r3, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8022ae8:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8022aec:	f894 c003 	ldrb.w	ip, [r4, #3]
 8022af0:	3404      	adds	r4, #4
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8022af2:	ea43 030c 	orr.w	r3, r3, ip
 8022af6:	f814 cc02 	ldrb.w	ip, [r4, #-2]
 8022afa:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8022afe:	6033      	str	r3, [r6, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8022b00:	e7e3      	b.n	8022aca <CRC_Handle_8+0xe>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8022b02:	786b      	ldrb	r3, [r5, #1]
    if ((BufferLength % 4U) == 2U)
 8022b04:	2a02      	cmp	r2, #2
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8022b06:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
 8022b0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 8022b0e:	8033      	strh	r3, [r6, #0]
    if ((BufferLength % 4U) == 2U)
 8022b10:	d102      	bne.n	8022b18 <CRC_Handle_8+0x5c>
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8022b12:	6803      	ldr	r3, [r0, #0]
 8022b14:	6818      	ldr	r0, [r3, #0]
}
 8022b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8022b18:	78ab      	ldrb	r3, [r5, #2]
 8022b1a:	e7df      	b.n	8022adc <CRC_Handle_8+0x20>

08022b1c <CRC_Handle_16>:
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8022b1c:	2300      	movs	r3, #0
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8022b1e:	6800      	ldr	r0, [r0, #0]
{
 8022b20:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (i = 0U; i < (BufferLength / 2U); i++)
 8022b22:	0855      	lsrs	r5, r2, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8022b24:	1c8e      	adds	r6, r1, #2
  for (i = 0U; i < (BufferLength / 2U); i++)
 8022b26:	429d      	cmp	r5, r3
 8022b28:	d106      	bne.n	8022b38 <CRC_Handle_16+0x1c>
  }
  if ((BufferLength % 2U) != 0U)
 8022b2a:	07d3      	lsls	r3, r2, #31
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 8022b2c:	bf44      	itt	mi
 8022b2e:	f831 3025 	ldrhmi.w	r3, [r1, r5, lsl #2]
 8022b32:	8003      	strhmi	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8022b34:	6800      	ldr	r0, [r0, #0]
}
 8022b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8022b38:	f831 7023 	ldrh.w	r7, [r1, r3, lsl #2]
 8022b3c:	f836 4023 	ldrh.w	r4, [r6, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8022b40:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8022b42:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8022b46:	6004      	str	r4, [r0, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8022b48:	e7ed      	b.n	8022b26 <CRC_Handle_16+0xa>
	...

08022b4c <HAL_CRC_Init>:
{
 8022b4c:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 8022b4e:	4604      	mov	r4, r0
 8022b50:	b908      	cbnz	r0, 8022b56 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8022b52:	2001      	movs	r0, #1
}
 8022b54:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8022b56:	7f43      	ldrb	r3, [r0, #29]
 8022b58:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8022b5c:	b913      	cbnz	r3, 8022b64 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8022b5e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8022b60:	f7fe fc94 	bl	802148c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8022b64:	2302      	movs	r3, #2
 8022b66:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8022b68:	7923      	ldrb	r3, [r4, #4]
 8022b6a:	b9e3      	cbnz	r3, 8022ba6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8022b6c:	6823      	ldr	r3, [r4, #0]
 8022b6e:	4a13      	ldr	r2, [pc, #76]	@ (8022bbc <HAL_CRC_Init+0x70>)
 8022b70:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8022b72:	689a      	ldr	r2, [r3, #8]
 8022b74:	f022 0218 	bic.w	r2, r2, #24
 8022b78:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8022b7a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8022b7c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8022b7e:	b9d2      	cbnz	r2, 8022bb6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8022b80:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8022b84:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8022b86:	689a      	ldr	r2, [r3, #8]
 8022b88:	6961      	ldr	r1, [r4, #20]
 8022b8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8022b8e:	430a      	orrs	r2, r1
 8022b90:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8022b92:	689a      	ldr	r2, [r3, #8]
 8022b94:	69a1      	ldr	r1, [r4, #24]
 8022b96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8022b9a:	430a      	orrs	r2, r1
 8022b9c:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8022b9e:	2301      	movs	r3, #1
  return HAL_OK;
 8022ba0:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8022ba2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8022ba4:	e7d6      	b.n	8022b54 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8022ba6:	4620      	mov	r0, r4
 8022ba8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8022bac:	f000 f82c 	bl	8022c08 <HAL_CRCEx_Polynomial_Set>
 8022bb0:	2800      	cmp	r0, #0
 8022bb2:	d0e2      	beq.n	8022b7a <HAL_CRC_Init+0x2e>
 8022bb4:	e7cd      	b.n	8022b52 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8022bb6:	6922      	ldr	r2, [r4, #16]
 8022bb8:	e7e4      	b.n	8022b84 <HAL_CRC_Init+0x38>
 8022bba:	bf00      	nop
 8022bbc:	04c11db7 	.word	0x04c11db7

08022bc0 <HAL_CRC_Calculate>:
{
 8022bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 8022bc2:	2602      	movs	r6, #2
 8022bc4:	7746      	strb	r6, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8022bc6:	6806      	ldr	r6, [r0, #0]
{
 8022bc8:	4604      	mov	r4, r0
  __HAL_CRC_DR_RESET(hcrc);
 8022bca:	68b7      	ldr	r7, [r6, #8]
 8022bcc:	f047 0701 	orr.w	r7, r7, #1
 8022bd0:	60b7      	str	r7, [r6, #8]
  switch (hcrc->InputDataFormat)
 8022bd2:	6a07      	ldr	r7, [r0, #32]
 8022bd4:	2f02      	cmp	r7, #2
 8022bd6:	d014      	beq.n	8022c02 <HAL_CRC_Calculate+0x42>
 8022bd8:	2f03      	cmp	r7, #3
 8022bda:	d005      	beq.n	8022be8 <HAL_CRC_Calculate+0x28>
 8022bdc:	2f01      	cmp	r7, #1
 8022bde:	d00d      	beq.n	8022bfc <HAL_CRC_Calculate+0x3c>
 8022be0:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8022be2:	2301      	movs	r3, #1
 8022be4:	7763      	strb	r3, [r4, #29]
}
 8022be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022be8:	eb01 0582 	add.w	r5, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 8022bec:	42a9      	cmp	r1, r5
 8022bee:	d101      	bne.n	8022bf4 <HAL_CRC_Calculate+0x34>
      temp = hcrc->Instance->DR;
 8022bf0:	6830      	ldr	r0, [r6, #0]
      break;
 8022bf2:	e7f6      	b.n	8022be2 <HAL_CRC_Calculate+0x22>
        hcrc->Instance->DR = pBuffer[index];
 8022bf4:	f851 3b04 	ldr.w	r3, [r1], #4
 8022bf8:	6033      	str	r3, [r6, #0]
      for (index = 0U; index < BufferLength; index++)
 8022bfa:	e7f7      	b.n	8022bec <HAL_CRC_Calculate+0x2c>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8022bfc:	f7ff ff5e 	bl	8022abc <CRC_Handle_8>
      break;
 8022c00:	e7ef      	b.n	8022be2 <HAL_CRC_Calculate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8022c02:	f7ff ff8b 	bl	8022b1c <CRC_Handle_16>
      break;
 8022c06:	e7ec      	b.n	8022be2 <HAL_CRC_Calculate+0x22>

08022c08 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8022c08:	07cb      	lsls	r3, r1, #31
{
 8022c0a:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8022c0c:	d50d      	bpl.n	8022c2a <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8022c0e:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8022c10:	3b01      	subs	r3, #1
 8022c12:	d31d      	bcc.n	8022c50 <HAL_CRCEx_Polynomial_Set+0x48>
 8022c14:	fa21 f403 	lsr.w	r4, r1, r3
 8022c18:	07e4      	lsls	r4, r4, #31
 8022c1a:	d5f9      	bpl.n	8022c10 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8022c1c:	2a10      	cmp	r2, #16
 8022c1e:	d013      	beq.n	8022c48 <HAL_CRCEx_Polynomial_Set+0x40>
 8022c20:	2a10      	cmp	r2, #16
 8022c22:	d804      	bhi.n	8022c2e <HAL_CRCEx_Polynomial_Set+0x26>
 8022c24:	b13a      	cbz	r2, 8022c36 <HAL_CRCEx_Polynomial_Set+0x2e>
 8022c26:	2a08      	cmp	r2, #8
 8022c28:	d010      	beq.n	8022c4c <HAL_CRCEx_Polynomial_Set+0x44>
 8022c2a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8022c2c:	e00b      	b.n	8022c46 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8022c2e:	2a18      	cmp	r2, #24
 8022c30:	d1fb      	bne.n	8022c2a <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8022c32:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8022c34:	d8f9      	bhi.n	8022c2a <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8022c36:	6800      	ldr	r0, [r0, #0]
 8022c38:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8022c3a:	6883      	ldr	r3, [r0, #8]
 8022c3c:	f023 0318 	bic.w	r3, r3, #24
 8022c40:	4313      	orrs	r3, r2
 8022c42:	6083      	str	r3, [r0, #8]
 8022c44:	2000      	movs	r0, #0
}
 8022c46:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8022c48:	2b07      	cmp	r3, #7
 8022c4a:	e7f3      	b.n	8022c34 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8022c4c:	2b0f      	cmp	r3, #15
 8022c4e:	e7f1      	b.n	8022c34 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8022c50:	2a10      	cmp	r2, #16
 8022c52:	d1e5      	bne.n	8022c20 <HAL_CRCEx_Polynomial_Set+0x18>
 8022c54:	e7e9      	b.n	8022c2a <HAL_CRCEx_Polynomial_Set+0x22>
	...

08022c58 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8022c58:	b538      	push	{r3, r4, r5, lr}
 8022c5a:	4604      	mov	r4, r0
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8022c5c:	f7ff f930 	bl	8021ec0 <HAL_GetTick>
 8022c60:	4605      	mov	r5, r0

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8022c62:	2c00      	cmp	r4, #0
 8022c64:	f000 81af 	beq.w	8022fc6 <HAL_DMA_Init+0x36e>
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8022c68:	2300      	movs	r3, #0

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8022c6a:	f894 1054 	ldrb.w	r1, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8022c6e:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8022c72:	6822      	ldr	r2, [r4, #0]
  if (hdma->State == HAL_DMA_STATE_RESET)
 8022c74:	f001 03ff 	and.w	r3, r1, #255	@ 0xff
 8022c78:	b921      	cbnz	r1, 8022c84 <HAL_DMA_Init+0x2c>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
    hdma->XferHalfCpltCallback = NULL;
 8022c7a:	e9c4 3318 	strd	r3, r3, [r4, #96]	@ 0x60
    hdma->XferErrorCallback    = NULL;
    hdma->XferAbortCallback    = NULL;
 8022c7e:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
    hdma->XferSuspendCallback  = NULL;
 8022c82:	6723      	str	r3, [r4, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8022c84:	2302      	movs	r3, #2
 8022c86:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8022c8a:	6953      	ldr	r3, [r2, #20]
 8022c8c:	f043 0306 	orr.w	r3, r3, #6
 8022c90:	6153      	str	r3, [r2, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8022c92:	6823      	ldr	r3, [r4, #0]
 8022c94:	695a      	ldr	r2, [r3, #20]
 8022c96:	07d2      	lsls	r2, r2, #31
 8022c98:	f100 818a 	bmi.w	8022fb0 <HAL_DMA_Init+0x358>

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8022c9c:	695a      	ldr	r2, [r3, #20]
 8022c9e:	6a21      	ldr	r1, [r4, #32]
 8022ca0:	f422 0243 	bic.w	r2, r2, #12779520	@ 0xc30000
 8022ca4:	430a      	orrs	r2, r1
 8022ca6:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8022ca8:	69e1      	ldr	r1, [r4, #28]
 8022caa:	6962      	ldr	r2, [r4, #20]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8022cac:	4db0      	ldr	r5, [pc, #704]	@ (8022f70 <HAL_DMA_Init+0x318>)
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8022cae:	430a      	orrs	r2, r1
 8022cb0:	6921      	ldr	r1, [r4, #16]
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8022cb2:	42ab      	cmp	r3, r5
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8022cb4:	ea42 0201 	orr.w	r2, r2, r1
 8022cb8:	69a1      	ldr	r1, [r4, #24]
 8022cba:	48ae      	ldr	r0, [pc, #696]	@ (8022f74 <HAL_DMA_Init+0x31c>)
 8022cbc:	ea42 0201 	orr.w	r2, r2, r1
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8022cc0:	f000 8088 	beq.w	8022dd4 <HAL_DMA_Init+0x17c>
 8022cc4:	49ac      	ldr	r1, [pc, #688]	@ (8022f78 <HAL_DMA_Init+0x320>)
 8022cc6:	428b      	cmp	r3, r1
 8022cc8:	f000 8084 	beq.w	8022dd4 <HAL_DMA_Init+0x17c>
 8022ccc:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022cd0:	3180      	adds	r1, #128	@ 0x80
 8022cd2:	428b      	cmp	r3, r1
 8022cd4:	d07e      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022cd6:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022cda:	428b      	cmp	r3, r1
 8022cdc:	d07a      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022cde:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022ce2:	3180      	adds	r1, #128	@ 0x80
 8022ce4:	428b      	cmp	r3, r1
 8022ce6:	d075      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022ce8:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022cec:	428b      	cmp	r3, r1
 8022cee:	d071      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022cf0:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022cf4:	3180      	adds	r1, #128	@ 0x80
 8022cf6:	428b      	cmp	r3, r1
 8022cf8:	d06c      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022cfa:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022cfe:	428b      	cmp	r3, r1
 8022d00:	d068      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d02:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022d06:	3180      	adds	r1, #128	@ 0x80
 8022d08:	428b      	cmp	r3, r1
 8022d0a:	d063      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d0c:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022d10:	428b      	cmp	r3, r1
 8022d12:	d05f      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d14:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022d18:	3180      	adds	r1, #128	@ 0x80
 8022d1a:	428b      	cmp	r3, r1
 8022d1c:	d05a      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d1e:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022d22:	428b      	cmp	r3, r1
 8022d24:	d056      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d26:	4283      	cmp	r3, r0
 8022d28:	d054      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d2a:	3180      	adds	r1, #128	@ 0x80
 8022d2c:	428b      	cmp	r3, r1
 8022d2e:	d051      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d30:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022d34:	3180      	adds	r1, #128	@ 0x80
 8022d36:	428b      	cmp	r3, r1
 8022d38:	d04c      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d3a:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022d3e:	428b      	cmp	r3, r1
 8022d40:	d048      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d42:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022d46:	f501 6148 	add.w	r1, r1, #3200	@ 0xc80
 8022d4a:	428b      	cmp	r3, r1
 8022d4c:	d042      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d4e:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022d52:	428b      	cmp	r3, r1
 8022d54:	d03e      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d56:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022d5a:	3180      	adds	r1, #128	@ 0x80
 8022d5c:	428b      	cmp	r3, r1
 8022d5e:	d039      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d60:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022d64:	428b      	cmp	r3, r1
 8022d66:	d035      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d68:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022d6c:	3180      	adds	r1, #128	@ 0x80
 8022d6e:	428b      	cmp	r3, r1
 8022d70:	d030      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d72:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022d76:	428b      	cmp	r3, r1
 8022d78:	d02c      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d7a:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022d7e:	3180      	adds	r1, #128	@ 0x80
 8022d80:	428b      	cmp	r3, r1
 8022d82:	d027      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d84:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022d88:	428b      	cmp	r3, r1
 8022d8a:	d023      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d8c:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022d90:	3180      	adds	r1, #128	@ 0x80
 8022d92:	428b      	cmp	r3, r1
 8022d94:	d01e      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d96:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022d9a:	428b      	cmp	r3, r1
 8022d9c:	d01a      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022d9e:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022da2:	3180      	adds	r1, #128	@ 0x80
 8022da4:	428b      	cmp	r3, r1
 8022da6:	d015      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022da8:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022dac:	428b      	cmp	r3, r1
 8022dae:	d011      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022db0:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022db4:	3180      	adds	r1, #128	@ 0x80
 8022db6:	428b      	cmp	r3, r1
 8022db8:	d00c      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022dba:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022dbe:	428b      	cmp	r3, r1
 8022dc0:	d008      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022dc2:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
 8022dc6:	3180      	adds	r1, #128	@ 0x80
 8022dc8:	428b      	cmp	r3, r1
 8022dca:	d003      	beq.n	8022dd4 <HAL_DMA_Init+0x17c>
 8022dcc:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8022dd0:	428b      	cmp	r3, r1
 8022dd2:	d10d      	bne.n	8022df0 <HAL_DMA_Init+0x198>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8022dd4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8022dd6:	3901      	subs	r1, #1
 8022dd8:	0509      	lsls	r1, r1, #20
 8022dda:	f001 717c 	and.w	r1, r1, #66060288	@ 0x3f00000
 8022dde:	4311      	orrs	r1, r2
 8022de0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8022de2:	4311      	orrs	r1, r2
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8022de4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8022de6:	3a01      	subs	r2, #1
 8022de8:	0112      	lsls	r2, r2, #4
 8022dea:	f402 727c 	and.w	r2, r2, #1008	@ 0x3f0
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8022dee:	430a      	orrs	r2, r1
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8022df0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8022df2:	f001 2180 	and.w	r1, r1, #2147516416	@ 0x80008000
 8022df6:	430a      	orrs	r2, r1
 8022df8:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8022dfa:	68a1      	ldr	r1, [r4, #8]
 8022dfc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8022dfe:	4311      	orrs	r1, r2
 8022e00:	7922      	ldrb	r2, [r4, #4]
 8022e02:	4311      	orrs	r1, r2

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8022e04:	68e2      	ldr	r2, [r4, #12]
 8022e06:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8022e0a:	f040 80de 	bne.w	8022fca <HAL_DMA_Init+0x372>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8022e0e:	42ab      	cmp	r3, r5
 8022e10:	f000 8088 	beq.w	8022f24 <HAL_DMA_Init+0x2cc>
 8022e14:	4a58      	ldr	r2, [pc, #352]	@ (8022f78 <HAL_DMA_Init+0x320>)
 8022e16:	4293      	cmp	r3, r2
 8022e18:	f000 8084 	beq.w	8022f24 <HAL_DMA_Init+0x2cc>
 8022e1c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022e20:	3280      	adds	r2, #128	@ 0x80
 8022e22:	4293      	cmp	r3, r2
 8022e24:	d07e      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e26:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022e2a:	4293      	cmp	r3, r2
 8022e2c:	d07a      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e2e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022e32:	3280      	adds	r2, #128	@ 0x80
 8022e34:	4293      	cmp	r3, r2
 8022e36:	d075      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e38:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022e3c:	4293      	cmp	r3, r2
 8022e3e:	d071      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e40:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022e44:	3280      	adds	r2, #128	@ 0x80
 8022e46:	4293      	cmp	r3, r2
 8022e48:	d06c      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e4a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022e4e:	4293      	cmp	r3, r2
 8022e50:	d068      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e52:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022e56:	3280      	adds	r2, #128	@ 0x80
 8022e58:	4293      	cmp	r3, r2
 8022e5a:	d063      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e5c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022e60:	4293      	cmp	r3, r2
 8022e62:	d05f      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e64:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022e68:	3280      	adds	r2, #128	@ 0x80
 8022e6a:	4293      	cmp	r3, r2
 8022e6c:	d05a      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e6e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022e72:	4293      	cmp	r3, r2
 8022e74:	d056      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e76:	4283      	cmp	r3, r0
 8022e78:	d054      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e7a:	3280      	adds	r2, #128	@ 0x80
 8022e7c:	4293      	cmp	r3, r2
 8022e7e:	d051      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e80:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022e84:	3280      	adds	r2, #128	@ 0x80
 8022e86:	4293      	cmp	r3, r2
 8022e88:	d04c      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e8a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022e8e:	4293      	cmp	r3, r2
 8022e90:	d048      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e92:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022e96:	f502 6248 	add.w	r2, r2, #3200	@ 0xc80
 8022e9a:	4293      	cmp	r3, r2
 8022e9c:	d042      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022e9e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022ea2:	4293      	cmp	r3, r2
 8022ea4:	d03e      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022ea6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022eaa:	3280      	adds	r2, #128	@ 0x80
 8022eac:	4293      	cmp	r3, r2
 8022eae:	d039      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022eb0:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022eb4:	4293      	cmp	r3, r2
 8022eb6:	d035      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022eb8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022ebc:	3280      	adds	r2, #128	@ 0x80
 8022ebe:	4293      	cmp	r3, r2
 8022ec0:	d030      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022ec2:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022ec6:	4293      	cmp	r3, r2
 8022ec8:	d02c      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022eca:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022ece:	3280      	adds	r2, #128	@ 0x80
 8022ed0:	4293      	cmp	r3, r2
 8022ed2:	d027      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022ed4:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022ed8:	4293      	cmp	r3, r2
 8022eda:	d023      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022edc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022ee0:	3280      	adds	r2, #128	@ 0x80
 8022ee2:	4293      	cmp	r3, r2
 8022ee4:	d01e      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022ee6:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022eea:	4293      	cmp	r3, r2
 8022eec:	d01a      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022eee:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022ef2:	3280      	adds	r2, #128	@ 0x80
 8022ef4:	4293      	cmp	r3, r2
 8022ef6:	d015      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022ef8:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022efc:	4293      	cmp	r3, r2
 8022efe:	d011      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022f00:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022f04:	3280      	adds	r2, #128	@ 0x80
 8022f06:	4293      	cmp	r3, r2
 8022f08:	d00c      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022f0a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022f0e:	4293      	cmp	r3, r2
 8022f10:	d008      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022f12:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022f16:	3280      	adds	r2, #128	@ 0x80
 8022f18:	4293      	cmp	r3, r2
 8022f1a:	d003      	beq.n	8022f24 <HAL_DMA_Init+0x2cc>
 8022f1c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022f20:	4293      	cmp	r3, r2
 8022f22:	d101      	bne.n	8022f28 <HAL_DMA_Init+0x2d0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8022f24:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8022f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  tmpreg |= hdma->Init.Mode;
 8022f2a:	6b65      	ldr	r5, [r4, #52]	@ 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8022f2c:	f022 4243 	bic.w	r2, r2, #3271557120	@ 0xc3000000
 8022f30:	f422 127f 	bic.w	r2, r2, #4177920	@ 0x3fc000
 8022f34:	f422 52f7 	bic.w	r2, r2, #7904	@ 0x1ee0
 8022f38:	f022 021f 	bic.w	r2, r2, #31
 8022f3c:	432a      	orrs	r2, r5
 8022f3e:	430a      	orrs	r2, r1
 8022f40:	645a      	str	r2, [r3, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8022f42:	2200      	movs	r2, #0

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8022f44:	4283      	cmp	r3, r0
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8022f46:	649a      	str	r2, [r3, #72]	@ 0x48
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8022f48:	d027      	beq.n	8022f9a <HAL_DMA_Init+0x342>
 8022f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8022f7c <HAL_DMA_Init+0x324>)
 8022f4c:	4293      	cmp	r3, r2
 8022f4e:	d024      	beq.n	8022f9a <HAL_DMA_Init+0x342>
 8022f50:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022f54:	3280      	adds	r2, #128	@ 0x80
 8022f56:	4293      	cmp	r3, r2
 8022f58:	d01f      	beq.n	8022f9a <HAL_DMA_Init+0x342>
 8022f5a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022f5e:	4293      	cmp	r3, r2
 8022f60:	d01b      	beq.n	8022f9a <HAL_DMA_Init+0x342>
 8022f62:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022f66:	f502 6278 	add.w	r2, r2, #3968	@ 0xf80
 8022f6a:	4293      	cmp	r3, r2
 8022f6c:	d015      	beq.n	8022f9a <HAL_DMA_Init+0x342>
 8022f6e:	e007      	b.n	8022f80 <HAL_DMA_Init+0x328>
 8022f70:	40020050 	.word	0x40020050
 8022f74:	40020350 	.word	0x40020350
 8022f78:	50020050 	.word	0x50020050
 8022f7c:	50020350 	.word	0x50020350
 8022f80:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022f84:	4293      	cmp	r3, r2
 8022f86:	d008      	beq.n	8022f9a <HAL_DMA_Init+0x342>
 8022f88:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8022f8c:	3280      	adds	r2, #128	@ 0x80
 8022f8e:	4293      	cmp	r3, r2
 8022f90:	d003      	beq.n	8022f9a <HAL_DMA_Init+0x342>
 8022f92:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8022f96:	4293      	cmp	r3, r2
 8022f98:	d102      	bne.n	8022fa0 <HAL_DMA_Init+0x348>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8022f9a:	2200      	movs	r2, #0
 8022f9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8022f9e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8022fa0:	2000      	movs	r0, #0
 8022fa2:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdma->State = HAL_DMA_STATE_READY;
 8022fa4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8022fa6:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->Mode = hdma->Init.Mode;
 8022fa8:	6525      	str	r5, [r4, #80]	@ 0x50
  hdma->State = HAL_DMA_STATE_READY;
 8022faa:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
  return HAL_OK;
 8022fae:	e00b      	b.n	8022fc8 <HAL_DMA_Init+0x370>
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8022fb0:	f7fe ff86 	bl	8021ec0 <HAL_GetTick>
 8022fb4:	1b40      	subs	r0, r0, r5
 8022fb6:	2805      	cmp	r0, #5
 8022fb8:	f67f ae6b 	bls.w	8022c92 <HAL_DMA_Init+0x3a>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8022fbc:	2310      	movs	r3, #16
 8022fbe:	65a3      	str	r3, [r4, #88]	@ 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 8022fc0:	2303      	movs	r3, #3
 8022fc2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8022fc6:	2001      	movs	r0, #1
}
 8022fc8:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8022fca:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
    tmpreg |= DMA_CTR2_SWREQ;
 8022fce:	bf08      	it	eq
 8022fd0:	f441 7100 	orreq.w	r1, r1, #512	@ 0x200
 8022fd4:	e7a8      	b.n	8022f28 <HAL_DMA_Init+0x2d0>
 8022fd6:	bf00      	nop

08022fd8 <HAL_DMA_DeInit>:
{
 8022fd8:	b570      	push	{r4, r5, r6, lr}
 8022fda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8022fdc:	f7fe ff70 	bl	8021ec0 <HAL_GetTick>
 8022fe0:	4606      	mov	r6, r0
  if (hdma == NULL)
 8022fe2:	2c00      	cmp	r4, #0
 8022fe4:	d066      	beq.n	80230b4 <HAL_DMA_DeInit+0xdc>
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8022fe6:	6825      	ldr	r5, [r4, #0]
  __HAL_DMA_DISABLE(hdma);
 8022fe8:	696b      	ldr	r3, [r5, #20]
 8022fea:	f043 0306 	orr.w	r3, r3, #6
 8022fee:	616b      	str	r3, [r5, #20]
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8022ff0:	6823      	ldr	r3, [r4, #0]
 8022ff2:	695a      	ldr	r2, [r3, #20]
 8022ff4:	f012 0201 	ands.w	r2, r2, #1
 8022ff8:	d152      	bne.n	80230a0 <HAL_DMA_DeInit+0xc8>
  hdma->Instance->CLBAR = 0U;
 8022ffa:	601a      	str	r2, [r3, #0]
  hdma->Instance->CCR   = 0U;
 8022ffc:	615a      	str	r2, [r3, #20]
  hdma->Instance->CTR1  = 0U;
 8022ffe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->Instance->CTR2  = 0U;
 8023000:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->Instance->CBR1  = 0U;
 8023002:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->Instance->CSAR  = 0U;
 8023004:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->Instance->CDAR  = 0U;
 8023006:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->Instance->CLLR  = 0U;
 8023008:	67da      	str	r2, [r3, #124]	@ 0x7c
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 802300a:	4a2b      	ldr	r2, [pc, #172]	@ (80230b8 <HAL_DMA_DeInit+0xe0>)
 802300c:	4293      	cmp	r3, r2
 802300e:	d01f      	beq.n	8023050 <HAL_DMA_DeInit+0x78>
 8023010:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8023014:	4293      	cmp	r3, r2
 8023016:	d01b      	beq.n	8023050 <HAL_DMA_DeInit+0x78>
 8023018:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 802301c:	3280      	adds	r2, #128	@ 0x80
 802301e:	4293      	cmp	r3, r2
 8023020:	d016      	beq.n	8023050 <HAL_DMA_DeInit+0x78>
 8023022:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8023026:	4293      	cmp	r3, r2
 8023028:	d012      	beq.n	8023050 <HAL_DMA_DeInit+0x78>
 802302a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 802302e:	f502 6278 	add.w	r2, r2, #3968	@ 0xf80
 8023032:	4293      	cmp	r3, r2
 8023034:	d00c      	beq.n	8023050 <HAL_DMA_DeInit+0x78>
 8023036:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 802303a:	4293      	cmp	r3, r2
 802303c:	d008      	beq.n	8023050 <HAL_DMA_DeInit+0x78>
 802303e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8023042:	3280      	adds	r2, #128	@ 0x80
 8023044:	4293      	cmp	r3, r2
 8023046:	d003      	beq.n	8023050 <HAL_DMA_DeInit+0x78>
 8023048:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 802304c:	4293      	cmp	r3, r2
 802304e:	d102      	bne.n	8023056 <HAL_DMA_DeInit+0x7e>
    hdma->Instance->CTR3 = 0U;
 8023050:	2200      	movs	r2, #0
 8023052:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->Instance->CBR2 = 0U;
 8023054:	659a      	str	r2, [r3, #88]	@ 0x58
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8023056:	f425 627f 	bic.w	r2, r5, #4080	@ 0xff0
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 802305a:	2501      	movs	r5, #1
 802305c:	f3c3 010b 	ubfx	r1, r3, #0, #12
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8023060:	f022 020f 	bic.w	r2, r2, #15
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8023064:	3950      	subs	r1, #80	@ 0x50
 8023066:	6850      	ldr	r0, [r2, #4]
 8023068:	f3c1 11c4 	ubfx	r1, r1, #7, #5
 802306c:	fa05 f101 	lsl.w	r1, r5, r1
 8023070:	ea20 0101 	bic.w	r1, r0, r1
 8023074:	6051      	str	r1, [r2, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8023076:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 802307a:	60da      	str	r2, [r3, #12]
  hdma->XferCpltCallback     = NULL;
 802307c:	2300      	movs	r3, #0
  if (hdma->Parent != NULL)
 802307e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
  hdma->XferHalfCpltCallback = NULL;
 8023080:	e9c4 3318 	strd	r3, r3, [r4, #96]	@ 0x60
  hdma->XferAbortCallback    = NULL;
 8023084:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
  hdma->LinkedListQueue = NULL;
 8023088:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  if (hdma->Parent != NULL)
 802308c:	b102      	cbz	r2, 8023090 <HAL_DMA_DeInit+0xb8>
    hdma->Parent = NULL;
 802308e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023090:	65a3      	str	r3, [r4, #88]	@ 0x58
  return HAL_OK;
 8023092:	2000      	movs	r0, #0
  hdma->Mode = DMA_NORMAL;
 8023094:	6523      	str	r3, [r4, #80]	@ 0x50
  hdma->State = HAL_DMA_STATE_RESET;
 8023096:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 802309a:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
  return HAL_OK;
 802309e:	e00a      	b.n	80230b6 <HAL_DMA_DeInit+0xde>
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80230a0:	f7fe ff0e 	bl	8021ec0 <HAL_GetTick>
 80230a4:	1b80      	subs	r0, r0, r6
 80230a6:	2805      	cmp	r0, #5
 80230a8:	d9a2      	bls.n	8022ff0 <HAL_DMA_DeInit+0x18>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80230aa:	2310      	movs	r3, #16
 80230ac:	65a3      	str	r3, [r4, #88]	@ 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 80230ae:	2303      	movs	r3, #3
 80230b0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 80230b4:	2001      	movs	r0, #1
}
 80230b6:	bd70      	pop	{r4, r5, r6, pc}
 80230b8:	40020350 	.word	0x40020350

080230bc <HAL_DMA_Start_IT>:
{
 80230bc:	b530      	push	{r4, r5, lr}
  if (hdma == NULL)
 80230be:	2800      	cmp	r0, #0
 80230c0:	d037      	beq.n	8023132 <HAL_DMA_Start_IT+0x76>
  if (hdma->Mode != DMA_NORMAL)
 80230c2:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 80230c4:	2c00      	cmp	r4, #0
 80230c6:	d134      	bne.n	8023132 <HAL_DMA_Start_IT+0x76>
  __HAL_LOCK(hdma);
 80230c8:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 80230cc:	2d01      	cmp	r5, #1
 80230ce:	d032      	beq.n	8023136 <HAL_DMA_Start_IT+0x7a>
 80230d0:	2501      	movs	r5, #1
 80230d2:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hdma->State == HAL_DMA_STATE_READY)
 80230d6:	f890 5054 	ldrb.w	r5, [r0, #84]	@ 0x54
 80230da:	2d01      	cmp	r5, #1
 80230dc:	d125      	bne.n	802312a <HAL_DMA_Start_IT+0x6e>
    hdma->State = HAL_DMA_STATE_BUSY;
 80230de:	2502      	movs	r5, #2
 80230e0:	f880 5054 	strb.w	r5, [r0, #84]	@ 0x54
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80230e4:	6584      	str	r4, [r0, #88]	@ 0x58
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80230e6:	6804      	ldr	r4, [r0, #0]
 80230e8:	b29b      	uxth	r3, r3
 80230ea:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80230ec:	0c2d      	lsrs	r5, r5, #16
 80230ee:	042d      	lsls	r5, r5, #16
 80230f0:	431d      	orrs	r5, r3
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80230f2:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80230f6:	64a5      	str	r5, [r4, #72]	@ 0x48
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80230f8:	60e3      	str	r3, [r4, #12]
  hdma->Instance->CSAR = SrcAddress;
 80230fa:	64e1      	str	r1, [r4, #76]	@ 0x4c
  hdma->Instance->CDAR = DstAddress;
 80230fc:	6522      	str	r2, [r4, #80]	@ 0x50
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80230fe:	6963      	ldr	r3, [r4, #20]
 8023100:	f443 43ba 	orr.w	r3, r3, #23808	@ 0x5d00
 8023104:	6163      	str	r3, [r4, #20]
    if (hdma->XferHalfCpltCallback != NULL)
 8023106:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8023108:	b11b      	cbz	r3, 8023112 <HAL_DMA_Start_IT+0x56>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 802310a:	6963      	ldr	r3, [r4, #20]
 802310c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8023110:	6163      	str	r3, [r4, #20]
    if (hdma->XferSuspendCallback != NULL)
 8023112:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8023114:	b11b      	cbz	r3, 802311e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8023116:	6963      	ldr	r3, [r4, #20]
 8023118:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802311c:	6163      	str	r3, [r4, #20]
  return HAL_OK;
 802311e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8023120:	6963      	ldr	r3, [r4, #20]
 8023122:	f043 0301 	orr.w	r3, r3, #1
 8023126:	6163      	str	r3, [r4, #20]
}
 8023128:	bd30      	pop	{r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 802312a:	2340      	movs	r3, #64	@ 0x40
    __HAL_UNLOCK(hdma);
 802312c:	f880 404c 	strb.w	r4, [r0, #76]	@ 0x4c
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8023130:	6583      	str	r3, [r0, #88]	@ 0x58
    return HAL_ERROR;
 8023132:	2001      	movs	r0, #1
 8023134:	e7f8      	b.n	8023128 <HAL_DMA_Start_IT+0x6c>
  __HAL_LOCK(hdma);
 8023136:	2002      	movs	r0, #2
 8023138:	e7f6      	b.n	8023128 <HAL_DMA_Start_IT+0x6c>

0802313a <HAL_DMA_Abort>:
{
 802313a:	b538      	push	{r3, r4, r5, lr}
 802313c:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 802313e:	f7fe febf 	bl	8021ec0 <HAL_GetTick>
 8023142:	4605      	mov	r5, r0
  if (hdma == NULL)
 8023144:	b144      	cbz	r4, 8023158 <HAL_DMA_Abort+0x1e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8023146:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 802314a:	2b02      	cmp	r3, #2
 802314c:	d006      	beq.n	802315c <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802314e:	2320      	movs	r3, #32
 8023150:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8023152:	2300      	movs	r3, #0
 8023154:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    return HAL_ERROR;
 8023158:	2001      	movs	r0, #1
}
 802315a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 802315c:	6822      	ldr	r2, [r4, #0]
 802315e:	6953      	ldr	r3, [r2, #20]
 8023160:	f043 0304 	orr.w	r3, r3, #4
 8023164:	6153      	str	r3, [r2, #20]
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8023166:	2305      	movs	r3, #5
 8023168:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 802316c:	6823      	ldr	r3, [r4, #0]
 802316e:	691a      	ldr	r2, [r3, #16]
 8023170:	0490      	lsls	r0, r2, #18
 8023172:	d519      	bpl.n	80231a8 <HAL_DMA_Abort+0x6e>
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8023174:	695a      	ldr	r2, [r3, #20]
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8023176:	6d21      	ldr	r1, [r4, #80]	@ 0x50
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8023178:	f042 0202 	orr.w	r2, r2, #2
 802317c:	615a      	str	r2, [r3, #20]
    hdma->State = HAL_DMA_STATE_ABORT;
 802317e:	2204      	movs	r2, #4
 8023180:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8023184:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8023188:	60da      	str	r2, [r3, #12]
    hdma->State = HAL_DMA_STATE_READY;
 802318a:	2201      	movs	r2, #1
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 802318c:	0609      	lsls	r1, r1, #24
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 802318e:	bf48      	it	mi
 8023190:	6f61      	ldrmi	r1, [r4, #116]	@ 0x74
    hdma->State = HAL_DMA_STATE_READY;
 8023192:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8023196:	f04f 0000 	mov.w	r0, #0
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 802319a:	bf42      	ittt	mi
 802319c:	730a      	strbmi	r2, [r1, #12]
      hdma->Instance->CBR1 = 0U;
 802319e:	2200      	movmi	r2, #0
 80231a0:	649a      	strmi	r2, [r3, #72]	@ 0x48
    __HAL_UNLOCK(hdma);
 80231a2:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
  return HAL_OK;
 80231a6:	e7d8      	b.n	802315a <HAL_DMA_Abort+0x20>
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80231a8:	f7fe fe8a 	bl	8021ec0 <HAL_GetTick>
 80231ac:	1b40      	subs	r0, r0, r5
 80231ae:	2805      	cmp	r0, #5
 80231b0:	d9dc      	bls.n	802316c <HAL_DMA_Abort+0x32>
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80231b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80231b4:	f043 0310 	orr.w	r3, r3, #16
 80231b8:	65a3      	str	r3, [r4, #88]	@ 0x58
        hdma->State = HAL_DMA_STATE_ERROR;
 80231ba:	2303      	movs	r3, #3
 80231bc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80231c0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80231c2:	061d      	lsls	r5, r3, #24
 80231c4:	d5c5      	bpl.n	8023152 <HAL_DMA_Abort+0x18>
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80231c6:	2201      	movs	r2, #1
 80231c8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80231ca:	731a      	strb	r2, [r3, #12]
        __HAL_UNLOCK(hdma);
 80231cc:	e7c1      	b.n	8023152 <HAL_DMA_Abort+0x18>

080231ce <HAL_DMA_Abort_IT>:
  if (hdma == NULL)
 80231ce:	b128      	cbz	r0, 80231dc <HAL_DMA_Abort_IT+0xe>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80231d0:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 80231d4:	2b02      	cmp	r3, #2
 80231d6:	d003      	beq.n	80231e0 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80231d8:	2320      	movs	r3, #32
 80231da:	6583      	str	r3, [r0, #88]	@ 0x58
    return HAL_ERROR;
 80231dc:	2001      	movs	r0, #1
 80231de:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80231e0:	2304      	movs	r3, #4
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80231e2:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80231e4:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80231e8:	6953      	ldr	r3, [r2, #20]
  return HAL_OK;
 80231ea:	2000      	movs	r0, #0
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80231ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80231f0:	f043 0304 	orr.w	r3, r3, #4
 80231f4:	6153      	str	r3, [r2, #20]
}
 80231f6:	4770      	bx	lr

080231f8 <HAL_DMA_IRQHandler>:
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80231f8:	2101      	movs	r1, #1
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80231fa:	6803      	ldr	r3, [r0, #0]
{
 80231fc:	b510      	push	{r4, lr}
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80231fe:	f423 627f 	bic.w	r2, r3, #4080	@ 0xff0
 8023202:	f022 020f 	bic.w	r2, r2, #15
{
 8023206:	4604      	mov	r4, r0
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8023208:	68d0      	ldr	r0, [r2, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 802320a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 802320e:	3a50      	subs	r2, #80	@ 0x50
 8023210:	f3c2 12c4 	ubfx	r2, r2, #7, #5
 8023214:	fa01 f202 	lsl.w	r2, r1, r2
  if (global_active_flag_ns == 0U)
 8023218:	4202      	tst	r2, r0
 802321a:	f000 80ab 	beq.w	8023374 <HAL_DMA_IRQHandler+0x17c>
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 802321e:	691a      	ldr	r2, [r3, #16]
 8023220:	0550      	lsls	r0, r2, #21
 8023222:	d508      	bpl.n	8023236 <HAL_DMA_IRQHandler+0x3e>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8023224:	695a      	ldr	r2, [r3, #20]
 8023226:	0552      	lsls	r2, r2, #21
 8023228:	d505      	bpl.n	8023236 <HAL_DMA_IRQHandler+0x3e>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 802322a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 802322e:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8023230:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8023232:	430a      	orrs	r2, r1
 8023234:	65a2      	str	r2, [r4, #88]	@ 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8023236:	691a      	ldr	r2, [r3, #16]
 8023238:	0510      	lsls	r0, r2, #20
 802323a:	d509      	bpl.n	8023250 <HAL_DMA_IRQHandler+0x58>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 802323c:	695a      	ldr	r2, [r3, #20]
 802323e:	0511      	lsls	r1, r2, #20
 8023240:	d506      	bpl.n	8023250 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8023242:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8023246:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8023248:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 802324a:	f042 0202 	orr.w	r2, r2, #2
 802324e:	65a2      	str	r2, [r4, #88]	@ 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8023250:	691a      	ldr	r2, [r3, #16]
 8023252:	04d2      	lsls	r2, r2, #19
 8023254:	d509      	bpl.n	802326a <HAL_DMA_IRQHandler+0x72>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8023256:	695a      	ldr	r2, [r3, #20]
 8023258:	04d0      	lsls	r0, r2, #19
 802325a:	d506      	bpl.n	802326a <HAL_DMA_IRQHandler+0x72>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 802325c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8023260:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8023262:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8023264:	f042 0204 	orr.w	r2, r2, #4
 8023268:	65a2      	str	r2, [r4, #88]	@ 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 802326a:	691a      	ldr	r2, [r3, #16]
 802326c:	0451      	lsls	r1, r2, #17
 802326e:	d509      	bpl.n	8023284 <HAL_DMA_IRQHandler+0x8c>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8023270:	695a      	ldr	r2, [r3, #20]
 8023272:	0452      	lsls	r2, r2, #17
 8023274:	d506      	bpl.n	8023284 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8023276:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 802327a:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 802327c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 802327e:	f042 0208 	orr.w	r2, r2, #8
 8023282:	65a2      	str	r2, [r4, #88]	@ 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 8023284:	691a      	ldr	r2, [r3, #16]
 8023286:	0590      	lsls	r0, r2, #22
 8023288:	d509      	bpl.n	802329e <HAL_DMA_IRQHandler+0xa6>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 802328a:	695a      	ldr	r2, [r3, #20]
 802328c:	0591      	lsls	r1, r2, #22
 802328e:	d506      	bpl.n	802329e <HAL_DMA_IRQHandler+0xa6>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8023290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023294:	60da      	str	r2, [r3, #12]
      if (hdma->XferHalfCpltCallback != NULL)
 8023296:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023298:	b10b      	cbz	r3, 802329e <HAL_DMA_IRQHandler+0xa6>
        hdma->XferHalfCpltCallback(hdma);
 802329a:	4620      	mov	r0, r4
 802329c:	4798      	blx	r3
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 802329e:	6823      	ldr	r3, [r4, #0]
 80232a0:	691a      	ldr	r2, [r3, #16]
 80232a2:	0492      	lsls	r2, r2, #18
 80232a4:	d52e      	bpl.n	8023304 <HAL_DMA_IRQHandler+0x10c>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80232a6:	695a      	ldr	r2, [r3, #20]
 80232a8:	0490      	lsls	r0, r2, #18
 80232aa:	d52b      	bpl.n	8023304 <HAL_DMA_IRQHandler+0x10c>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80232ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80232b0:	60da      	str	r2, [r3, #12]
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80232b2:	f894 2054 	ldrb.w	r2, [r4, #84]	@ 0x54
 80232b6:	2a04      	cmp	r2, #4
 80232b8:	d11d      	bne.n	80232f6 <HAL_DMA_IRQHandler+0xfe>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80232ba:	695a      	ldr	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80232bc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80232be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80232c2:	615a      	str	r2, [r3, #20]
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80232c4:	695a      	ldr	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80232c6:	0609      	lsls	r1, r1, #24
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80232c8:	f042 0202 	orr.w	r2, r2, #2
 80232cc:	615a      	str	r2, [r3, #20]
        hdma->State = HAL_DMA_STATE_READY;
 80232ce:	f04f 0201 	mov.w	r2, #1
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80232d2:	bf48      	it	mi
 80232d4:	6f61      	ldrmi	r1, [r4, #116]	@ 0x74
        hdma->State = HAL_DMA_STATE_READY;
 80232d6:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80232da:	bf42      	ittt	mi
 80232dc:	730a      	strbmi	r2, [r1, #12]
          hdma->Instance->CBR1 = 0U;
 80232de:	2200      	movmi	r2, #0
 80232e0:	649a      	strmi	r2, [r3, #72]	@ 0x48
        __HAL_UNLOCK(hdma);
 80232e2:	2300      	movs	r3, #0
 80232e4:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
        if (hdma->XferAbortCallback != NULL)
 80232e8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    if (hdma->XferErrorCallback != NULL)
 80232ea:	2b00      	cmp	r3, #0
 80232ec:	d042      	beq.n	8023374 <HAL_DMA_IRQHandler+0x17c>
      hdma->XferErrorCallback(hdma);
 80232ee:	4620      	mov	r0, r4
}
 80232f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hdma->XferErrorCallback(hdma);
 80232f4:	4718      	bx	r3
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80232f6:	2305      	movs	r3, #5
 80232f8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
        if (hdma->XferSuspendCallback != NULL)
 80232fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80232fe:	b10b      	cbz	r3, 8023304 <HAL_DMA_IRQHandler+0x10c>
          hdma->XferSuspendCallback(hdma);
 8023300:	4620      	mov	r0, r4
 8023302:	4798      	blx	r3
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8023304:	6823      	ldr	r3, [r4, #0]
 8023306:	691a      	ldr	r2, [r3, #16]
 8023308:	05d2      	lsls	r2, r2, #23
 802330a:	d518      	bpl.n	802333e <HAL_DMA_IRQHandler+0x146>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 802330c:	695a      	ldr	r2, [r3, #20]
 802330e:	05d0      	lsls	r0, r2, #23
 8023310:	d515      	bpl.n	802333e <HAL_DMA_IRQHandler+0x146>
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8023312:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8023314:	0611      	lsls	r1, r2, #24
 8023316:	d526      	bpl.n	8023366 <HAL_DMA_IRQHandler+0x16e>
        if (hdma->Instance->CLLR == 0U)
 8023318:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 802331a:	b932      	cbnz	r2, 802332a <HAL_DMA_IRQHandler+0x132>
          if (hdma->Instance->CBR1 == 0U)
 802331c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 802331e:	b922      	cbnz	r2, 802332a <HAL_DMA_IRQHandler+0x132>
            hdma->State = HAL_DMA_STATE_READY;
 8023320:	2201      	movs	r2, #1
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8023322:	6f61      	ldr	r1, [r4, #116]	@ 0x74
            hdma->State = HAL_DMA_STATE_READY;
 8023324:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8023328:	730a      	strb	r2, [r1, #12]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 802332a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 802332e:	60da      	str	r2, [r3, #12]
      __HAL_UNLOCK(hdma);
 8023330:	2300      	movs	r3, #0
 8023332:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
      if (hdma->XferCpltCallback != NULL)
 8023336:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8023338:	b10b      	cbz	r3, 802333e <HAL_DMA_IRQHandler+0x146>
        hdma->XferCpltCallback(hdma);
 802333a:	4620      	mov	r0, r4
 802333c:	4798      	blx	r3
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802333e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8023340:	b1c3      	cbz	r3, 8023374 <HAL_DMA_IRQHandler+0x17c>
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8023342:	6822      	ldr	r2, [r4, #0]
 8023344:	6953      	ldr	r3, [r2, #20]
 8023346:	f043 0302 	orr.w	r3, r3, #2
 802334a:	6153      	str	r3, [r2, #20]
    hdma->State = HAL_DMA_STATE_READY;
 802334c:	2301      	movs	r3, #1
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 802334e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hdma->State = HAL_DMA_STATE_READY;
 8023350:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8023354:	0612      	lsls	r2, r2, #24
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8023356:	bf44      	itt	mi
 8023358:	6f62      	ldrmi	r2, [r4, #116]	@ 0x74
 802335a:	7313      	strbmi	r3, [r2, #12]
    __HAL_UNLOCK(hdma);
 802335c:	2300      	movs	r3, #0
 802335e:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    if (hdma->XferErrorCallback != NULL)
 8023362:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8023364:	e7c1      	b.n	80232ea <HAL_DMA_IRQHandler+0xf2>
        if (hdma->Instance->CBR1 == 0U)
 8023366:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8023368:	2a00      	cmp	r2, #0
 802336a:	d1de      	bne.n	802332a <HAL_DMA_IRQHandler+0x132>
          hdma->State = HAL_DMA_STATE_READY;
 802336c:	2201      	movs	r2, #1
 802336e:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8023372:	e7da      	b.n	802332a <HAL_DMA_IRQHandler+0x132>
}
 8023374:	bd10      	pop	{r4, pc}

08023376 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8023376:	6d80      	ldr	r0, [r0, #88]	@ 0x58
}
 8023378:	4770      	bx	lr

0802337a <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 802337a:	b1d0      	cbz	r0, 80233b2 <HAL_DMA_ConfigChannelAttributes+0x38>
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 802337c:	06cb      	lsls	r3, r1, #27
 802337e:	d401      	bmi.n	8023384 <HAL_DMA_ConfigChannelAttributes+0xa>
  return HAL_OK;
 8023380:	2000      	movs	r0, #0
 8023382:	4770      	bx	lr
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8023384:	6803      	ldr	r3, [r0, #0]
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8023386:	2001      	movs	r0, #1
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8023388:	f423 627f 	bic.w	r2, r3, #4080	@ 0xff0
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 802338c:	f3c3 030b 	ubfx	r3, r3, #0, #12
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8023390:	f022 020f 	bic.w	r2, r2, #15
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8023394:	f001 0111 	and.w	r1, r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8023398:	3b50      	subs	r3, #80	@ 0x50
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 802339a:	2911      	cmp	r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 802339c:	f3c3 13c4 	ubfx	r3, r3, #7, #5
      p_dma_instance->PRIVCFGR |= channel_idx;
 80233a0:	6851      	ldr	r1, [r2, #4]
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80233a2:	fa00 f303 	lsl.w	r3, r0, r3
      p_dma_instance->PRIVCFGR |= channel_idx;
 80233a6:	bf0c      	ite	eq
 80233a8:	430b      	orreq	r3, r1
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80233aa:	ea21 0303 	bicne.w	r3, r1, r3
 80233ae:	6053      	str	r3, [r2, #4]
 80233b0:	e7e6      	b.n	8023380 <HAL_DMA_ConfigChannelAttributes+0x6>
    return HAL_ERROR;
 80233b2:	2001      	movs	r0, #1
}
 80233b4:	4770      	bx	lr
	...

080233b8 <DMA_List_GetCLLRNodeInfo.isra.0>:
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80233b8:	0783      	lsls	r3, r0, #30
 80233ba:	d506      	bpl.n	80233ca <DMA_List_GetCLLRNodeInfo.isra.0+0x12>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80233bc:	b109      	cbz	r1, 80233c2 <DMA_List_GetCLLRNodeInfo.isra.0+0xa>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80233be:	4b06      	ldr	r3, [pc, #24]	@ (80233d8 <DMA_List_GetCLLRNodeInfo.isra.0+0x20>)
 80233c0:	600b      	str	r3, [r1, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80233c2:	b10a      	cbz	r2, 80233c8 <DMA_List_GetCLLRNodeInfo.isra.0+0x10>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80233c4:	2307      	movs	r3, #7
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80233c6:	6013      	str	r3, [r2, #0]
    }
  }
}
 80233c8:	4770      	bx	lr
    if (cllr_mask != NULL)
 80233ca:	b109      	cbz	r1, 80233d0 <DMA_List_GetCLLRNodeInfo.isra.0+0x18>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80233cc:	4b03      	ldr	r3, [pc, #12]	@ (80233dc <DMA_List_GetCLLRNodeInfo.isra.0+0x24>)
 80233ce:	600b      	str	r3, [r1, #0]
    if (cllr_offset != NULL)
 80233d0:	2a00      	cmp	r2, #0
 80233d2:	d0f9      	beq.n	80233c8 <DMA_List_GetCLLRNodeInfo.isra.0+0x10>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80233d4:	2305      	movs	r3, #5
 80233d6:	e7f6      	b.n	80233c6 <DMA_List_GetCLLRNodeInfo.isra.0+0xe>
 80233d8:	fe010000 	.word	0xfe010000
 80233dc:	f8010000 	.word	0xf8010000

080233e0 <HAL_DMAEx_List_Start_IT>:
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80233e0:	4603      	mov	r3, r0
{
 80233e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80233e4:	b108      	cbz	r0, 80233ea <HAL_DMAEx_List_Start_IT+0xa>
 80233e6:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 80233e8:	b912      	cbnz	r2, 80233f0 <HAL_DMAEx_List_Start_IT+0x10>
    return HAL_ERROR;
 80233ea:	2001      	movs	r0, #1
}
 80233ec:	b003      	add	sp, #12
 80233ee:	bd30      	pop	{r4, r5, pc}
  if (hdma->Mode == DMA_NORMAL)
 80233f0:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80233f2:	2900      	cmp	r1, #0
 80233f4:	d0f9      	beq.n	80233ea <HAL_DMAEx_List_Start_IT+0xa>
  dma_state = hdma->State;
 80233f6:	f890 1054 	ldrb.w	r1, [r0, #84]	@ 0x54
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80233fa:	6804      	ldr	r4, [r0, #0]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80233fc:	2901      	cmp	r1, #1
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80233fe:	6960      	ldr	r0, [r4, #20]
  dma_state = hdma->State;
 8023400:	b2cd      	uxtb	r5, r1
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8023402:	d003      	beq.n	802340c <HAL_DMAEx_List_Start_IT+0x2c>
 8023404:	2d02      	cmp	r5, #2
 8023406:	d139      	bne.n	802347c <HAL_DMAEx_List_Start_IT+0x9c>
 8023408:	03c1      	lsls	r1, r0, #15
 802340a:	d537      	bpl.n	802347c <HAL_DMAEx_List_Start_IT+0x9c>
    if (hdma->State == HAL_DMA_STATE_READY)
 802340c:	f893 1054 	ldrb.w	r1, [r3, #84]	@ 0x54
 8023410:	2901      	cmp	r1, #1
 8023412:	b2cd      	uxtb	r5, r1
 8023414:	d12c      	bne.n	8023470 <HAL_DMAEx_List_Start_IT+0x90>
      __HAL_LOCK(hdma);
 8023416:	f893 104c 	ldrb.w	r1, [r3, #76]	@ 0x4c
 802341a:	2002      	movs	r0, #2
 802341c:	2901      	cmp	r1, #1
 802341e:	d0e5      	beq.n	80233ec <HAL_DMAEx_List_Start_IT+0xc>
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8023420:	2100      	movs	r1, #0
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8023422:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
      __HAL_LOCK(hdma);
 8023426:	f883 504c 	strb.w	r5, [r3, #76]	@ 0x4c
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 802342a:	7310      	strb	r0, [r2, #12]
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 802342c:	6599      	str	r1, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 802342e:	6111      	str	r1, [r2, #16]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8023430:	6961      	ldr	r1, [r4, #20]
 8023432:	f441 41ba 	orr.w	r1, r1, #23808	@ 0x5d00
 8023436:	6161      	str	r1, [r4, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 8023438:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 802343a:	b119      	cbz	r1, 8023444 <HAL_DMAEx_List_Start_IT+0x64>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 802343c:	6961      	ldr	r1, [r4, #20]
 802343e:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8023442:	6161      	str	r1, [r4, #20]
      if (hdma->XferSuspendCallback != NULL)
 8023444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8023446:	b11b      	cbz	r3, 8023450 <HAL_DMAEx_List_Start_IT+0x70>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8023448:	6963      	ldr	r3, [r4, #20]
 802344a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802344e:	6163      	str	r3, [r4, #20]
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8023450:	6815      	ldr	r5, [r2, #0]
 8023452:	a901      	add	r1, sp, #4
 8023454:	6a28      	ldr	r0, [r5, #32]
 8023456:	2200      	movs	r2, #0
 8023458:	f7ff ffae 	bl	80233b8 <DMA_List_GetCLLRNodeInfo.isra.0>
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 802345c:	0c2b      	lsrs	r3, r5, #16
 802345e:	041b      	lsls	r3, r3, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8023460:	f025 0503 	bic.w	r5, r5, #3
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8023464:	6023      	str	r3, [r4, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8023466:	042d      	lsls	r5, r5, #16
 8023468:	9b01      	ldr	r3, [sp, #4]
 802346a:	0c2d      	lsrs	r5, r5, #16
 802346c:	431d      	orrs	r5, r3
 802346e:	67e5      	str	r5, [r4, #124]	@ 0x7c
    __HAL_DMA_ENABLE(hdma);
 8023470:	6963      	ldr	r3, [r4, #20]
  return HAL_OK;
 8023472:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8023474:	f043 0301 	orr.w	r3, r3, #1
 8023478:	6163      	str	r3, [r4, #20]
  return HAL_OK;
 802347a:	e7b7      	b.n	80233ec <HAL_DMAEx_List_Start_IT+0xc>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 802347c:	2240      	movs	r2, #64	@ 0x40
 802347e:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8023480:	2200      	movs	r2, #0
 8023482:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8023486:	e7b0      	b.n	80233ea <HAL_DMAEx_List_Start_IT+0xa>

08023488 <FLASH_Program_QuadWord>:
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8023488:	4a08      	ldr	r2, [pc, #32]	@ (80234ac <FLASH_Program_QuadWord+0x24>)
{
 802348a:	b510      	push	{r4, lr}
  SET_BIT((*reg_cr), FLASH_CR_PG);
 802348c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 802348e:	f043 0302 	orr.w	r3, r3, #2
 8023492:	6293      	str	r3, [r2, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8023494:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8023498:	b672      	cpsid	i
}
 802349a:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 802349c:	58cc      	ldr	r4, [r1, r3]
 802349e:	50c4      	str	r4, [r0, r3]
    dest_addr++;
    src_addr++;
    index--;
  } while (index != 0U);
 80234a0:	3304      	adds	r3, #4
 80234a2:	2b10      	cmp	r3, #16
 80234a4:	d1fa      	bne.n	802349c <FLASH_Program_QuadWord+0x14>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80234a6:	f382 8810 	msr	PRIMASK, r2

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80234aa:	bd10      	pop	{r4, pc}
 80234ac:	40022000 	.word	0x40022000

080234b0 <FLASH_Program_QuadWord_OBK>:
  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80234b0:	4a0c      	ldr	r2, [pc, #48]	@ (80234e4 <FLASH_Program_QuadWord_OBK+0x34>)
{
 80234b2:	b510      	push	{r4, lr}
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80234b4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80234b6:	f043 0302 	orr.w	r3, r3, #2
 80234ba:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 80234bc:	4b0a      	ldr	r3, [pc, #40]	@ (80234e8 <FLASH_Program_QuadWord_OBK+0x38>)
 80234be:	6c14      	ldr	r4, [r2, #64]	@ 0x40
 80234c0:	689b      	ldr	r3, [r3, #8]
 80234c2:	f003 0304 	and.w	r3, r3, #4
 80234c6:	4323      	orrs	r3, r4
 80234c8:	6413      	str	r3, [r2, #64]	@ 0x40
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80234ca:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80234ce:	b672      	cpsid	i
}
 80234d0:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 80234d2:	58cc      	ldr	r4, [r1, r3]
 80234d4:	50c4      	str	r4, [r0, r3]
    dest_addr++;
    src_addr++;
    index--;
  } while (index != 0U);
 80234d6:	3304      	adds	r3, #4
 80234d8:	2b10      	cmp	r3, #16
 80234da:	d1fa      	bne.n	80234d2 <FLASH_Program_QuadWord_OBK+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80234dc:	f382 8810 	msr	PRIMASK, r2

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80234e0:	bd10      	pop	{r4, pc}
 80234e2:	bf00      	nop
 80234e4:	40022000 	.word	0x40022000
 80234e8:	2000000c 	.word	0x2000000c

080234ec <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 80234ec:	4b06      	ldr	r3, [pc, #24]	@ (8023508 <HAL_FLASH_Unlock+0x1c>)
 80234ee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80234f0:	f010 0001 	ands.w	r0, r0, #1
 80234f4:	d007      	beq.n	8023506 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 80234f6:	4a05      	ldr	r2, [pc, #20]	@ (802350c <HAL_FLASH_Unlock+0x20>)
 80234f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 80234fa:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 80234fe:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8023500:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8023502:	f000 0001 	and.w	r0, r0, #1
}
 8023506:	4770      	bx	lr
 8023508:	40022000 	.word	0x40022000
 802350c:	45670123 	.word	0x45670123

08023510 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8023510:	4b04      	ldr	r3, [pc, #16]	@ (8023524 <HAL_FLASH_Lock+0x14>)
 8023512:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8023514:	f042 0201 	orr.w	r2, r2, #1
 8023518:	629a      	str	r2, [r3, #40]	@ 0x28
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 802351a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
  return status;
 802351c:	43c0      	mvns	r0, r0
}
 802351e:	f000 0001 	and.w	r0, r0, #1
 8023522:	4770      	bx	lr
 8023524:	40022000 	.word	0x40022000

08023528 <FLASH_WaitForLastOperation>:
{
 8023528:	b570      	push	{r4, r5, r6, lr}
 802352a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 802352c:	f7fe fcc8 	bl	8021ec0 <HAL_GetTick>
 8023530:	4606      	mov	r6, r0
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8023532:	4c11      	ldr	r4, [pc, #68]	@ (8023578 <FLASH_WaitForLastOperation+0x50>)
 8023534:	6a23      	ldr	r3, [r4, #32]
 8023536:	f013 0f0b 	tst.w	r3, #11
 802353a:	d10a      	bne.n	8023552 <FLASH_WaitForLastOperation+0x2a>
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 802353c:	6a23      	ldr	r3, [r4, #32]
  if (errorflag != 0U)
 802353e:	f413 037e 	ands.w	r3, r3, #16646144	@ 0xfe0000
 8023542:	d011      	beq.n	8023568 <FLASH_WaitForLastOperation+0x40>
    return HAL_ERROR;
 8023544:	2001      	movs	r0, #1
    pFlash.ErrorCode |= errorflag;
 8023546:	490d      	ldr	r1, [pc, #52]	@ (802357c <FLASH_WaitForLastOperation+0x54>)
 8023548:	684a      	ldr	r2, [r1, #4]
 802354a:	431a      	orrs	r2, r3
 802354c:	604a      	str	r2, [r1, #4]
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 802354e:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8023550:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8023552:	1c6a      	adds	r2, r5, #1
 8023554:	d0ee      	beq.n	8023534 <FLASH_WaitForLastOperation+0xc>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023556:	f7fe fcb3 	bl	8021ec0 <HAL_GetTick>
 802355a:	1b80      	subs	r0, r0, r6
 802355c:	42a8      	cmp	r0, r5
 802355e:	d801      	bhi.n	8023564 <FLASH_WaitForLastOperation+0x3c>
 8023560:	2d00      	cmp	r5, #0
 8023562:	d1e7      	bne.n	8023534 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8023564:	2003      	movs	r0, #3
 8023566:	e7f3      	b.n	8023550 <FLASH_WaitForLastOperation+0x28>
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8023568:	6a23      	ldr	r3, [r4, #32]
  return HAL_OK;
 802356a:	2000      	movs	r0, #0
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 802356c:	03db      	lsls	r3, r3, #15
    (*reg_ccr) = FLASH_FLAG_EOP;
 802356e:	bf44      	itt	mi
 8023570:	f44f 3380 	movmi.w	r3, #65536	@ 0x10000
 8023574:	6323      	strmi	r3, [r4, #48]	@ 0x30
 8023576:	e7eb      	b.n	8023550 <FLASH_WaitForLastOperation+0x28>
 8023578:	40022000 	.word	0x40022000
 802357c:	2000000c 	.word	0x2000000c

08023580 <HAL_FLASH_Program>:
{
 8023580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8023582:	2300      	movs	r3, #0
 8023584:	4f23      	ldr	r7, [pc, #140]	@ (8023614 <HAL_FLASH_Program+0x94>)
{
 8023586:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8023588:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
{
 802358c:	460d      	mov	r5, r1
 802358e:	4616      	mov	r6, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8023590:	607b      	str	r3, [r7, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8023592:	f7ff ffc9 	bl	8023528 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8023596:	b9e0      	cbnz	r0, 80235d2 <HAL_FLASH_Program+0x52>
    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8023598:	f024 4200 	bic.w	r2, r4, #2147483648	@ 0x80000000
 802359c:	2a02      	cmp	r2, #2
    pFlash.ProcedureOnGoing = TypeProgram;
 802359e:	60bc      	str	r4, [r7, #8]
    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 80235a0:	d118      	bne.n	80235d4 <HAL_FLASH_Program+0x54>
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 80235a2:	4631      	mov	r1, r6
 80235a4:	4628      	mov	r0, r5
 80235a6:	f7ff ff6f 	bl	8023488 <FLASH_Program_QuadWord>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80235aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80235ae:	f7ff ffbb 	bl	8023528 <FLASH_WaitForLastOperation>
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 80235b2:	4b19      	ldr	r3, [pc, #100]	@ (8023618 <HAL_FLASH_Program+0x98>)
 80235b4:	f024 4130 	bic.w	r1, r4, #2952790016	@ 0xb0000000
 80235b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80235ba:	f021 0104 	bic.w	r1, r1, #4
 80235be:	ea22 0201 	bic.w	r2, r2, r1
 80235c2:	629a      	str	r2, [r3, #40]	@ 0x28
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 80235c4:	4a15      	ldr	r2, [pc, #84]	@ (802361c <HAL_FLASH_Program+0x9c>)
 80235c6:	4294      	cmp	r4, r2
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 80235c8:	bf02      	ittt	eq
 80235ca:	6c1a      	ldreq	r2, [r3, #64]	@ 0x40
 80235cc:	f022 0204 	biceq.w	r2, r2, #4
 80235d0:	641a      	streq	r2, [r3, #64]	@ 0x40
}
 80235d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 80235d4:	4b12      	ldr	r3, [pc, #72]	@ (8023620 <HAL_FLASH_Program+0xa0>)
 80235d6:	f024 0104 	bic.w	r1, r4, #4
 80235da:	4299      	cmp	r1, r3
 80235dc:	d104      	bne.n	80235e8 <HAL_FLASH_Program+0x68>
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 80235de:	4631      	mov	r1, r6
 80235e0:	4628      	mov	r0, r5
 80235e2:	f7ff ff65 	bl	80234b0 <FLASH_Program_QuadWord_OBK>
 80235e6:	e7e0      	b.n	80235aa <HAL_FLASH_Program+0x2a>
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 80235e8:	4b0e      	ldr	r3, [pc, #56]	@ (8023624 <HAL_FLASH_Program+0xa4>)
 80235ea:	429a      	cmp	r2, r3
 80235ec:	4b0a      	ldr	r3, [pc, #40]	@ (8023618 <HAL_FLASH_Program+0x98>)
 80235ee:	d107      	bne.n	8023600 <HAL_FLASH_Program+0x80>
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80235f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80235f2:	f042 0202 	orr.w	r2, r2, #2
 80235f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 80235f8:	8833      	ldrh	r3, [r6, #0]
 80235fa:	b29b      	uxth	r3, r3
 80235fc:	802b      	strh	r3, [r5, #0]
}
 80235fe:	e7d4      	b.n	80235aa <HAL_FLASH_Program+0x2a>
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_WORD_EDATA)
 8023600:	4909      	ldr	r1, [pc, #36]	@ (8023628 <HAL_FLASH_Program+0xa8>)
 8023602:	428a      	cmp	r2, r1
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8023604:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8023606:	f042 0202 	orr.w	r2, r2, #2
 802360a:	629a      	str	r2, [r3, #40]	@ 0x28
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_WORD_EDATA)
 802360c:	d1f4      	bne.n	80235f8 <HAL_FLASH_Program+0x78>

    *(__IO uint32_t *)FlashAddress = *(__IO uint32_t *)DataAddress;
 802360e:	6833      	ldr	r3, [r6, #0]
 8023610:	602b      	str	r3, [r5, #0]
}
 8023612:	e7ca      	b.n	80235aa <HAL_FLASH_Program+0x2a>
 8023614:	2000000c 	.word	0x2000000c
 8023618:	40022000 	.word	0x40022000
 802361c:	10000006 	.word	0x10000006
 8023620:	10000002 	.word	0x10000002
 8023624:	40000002 	.word	0x40000002
 8023628:	60000002 	.word	0x60000002

0802362c <FLASH_MassErase>:
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 802362c:	f000 0303 	and.w	r3, r0, #3
 8023630:	2b03      	cmp	r3, #3
 8023632:	d107      	bne.n	8023644 <FLASH_MassErase+0x18>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 8023634:	4a0d      	ldr	r2, [pc, #52]	@ (802366c <FLASH_MassErase+0x40>)
 8023636:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8023638:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 802363c:	f043 0320 	orr.w	r3, r3, #32
    }

    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 8023640:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }
}
 8023642:	4770      	bx	lr
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8023644:	07c2      	lsls	r2, r0, #31
 8023646:	d508      	bpl.n	802365a <FLASH_MassErase+0x2e>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 8023648:	4a08      	ldr	r2, [pc, #32]	@ (802366c <FLASH_MassErase+0x40>)
 802364a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 802364c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8023650:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8023654:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8023658:	6293      	str	r3, [r2, #40]	@ 0x28
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 802365a:	0783      	lsls	r3, r0, #30
 802365c:	d5f1      	bpl.n	8023642 <FLASH_MassErase+0x16>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 802365e:	4a03      	ldr	r2, [pc, #12]	@ (802366c <FLASH_MassErase+0x40>)
 8023660:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8023662:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8023666:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 802366a:	e7e9      	b.n	8023640 <FLASH_MassErase+0x14>
 802366c:	40022000 	.word	0x40022000

08023670 <FLASH_Erase_Sector>:
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8023670:	4b0e      	ldr	r3, [pc, #56]	@ (80236ac <FLASH_Erase_Sector+0x3c>)
 8023672:	f011 0f01 	tst.w	r1, #1
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8023676:	6a9a      	ldr	r2, [r3, #40]	@ 0x28

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8023678:	ea4f 1080 	mov.w	r0, r0, lsl #6
  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 802367c:	d00a      	beq.n	8023694 <FLASH_Erase_Sector+0x24>
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 802367e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8023682:	f422 52fe 	bic.w	r2, r2, #8128	@ 0x1fc0
 8023686:	629a      	str	r2, [r3, #40]	@ 0x28
    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8023688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 802368a:	4310      	orrs	r0, r2
 802368c:	f040 0024 	orr.w	r0, r0, #36	@ 0x24
 8023690:	6298      	str	r0, [r3, #40]	@ 0x28
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8023692:	4770      	bx	lr
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8023694:	f422 52fe 	bic.w	r2, r2, #8128	@ 0x1fc0
 8023698:	629a      	str	r2, [r3, #40]	@ 0x28
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 802369a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 802369c:	4302      	orrs	r2, r0
 802369e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80236a2:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 80236a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80236a8:	4770      	bx	lr
 80236aa:	bf00      	nop
 80236ac:	40022000 	.word	0x40022000

080236b0 <HAL_FLASHEx_Erase>:
{
 80236b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80236b4:	4e27      	ldr	r6, [pc, #156]	@ (8023754 <HAL_FLASHEx_Erase+0xa4>)
{
 80236b6:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80236b8:	7833      	ldrb	r3, [r6, #0]
{
 80236ba:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80236bc:	2b01      	cmp	r3, #1
 80236be:	d047      	beq.n	8023750 <HAL_FLASHEx_Erase+0xa0>
 80236c0:	2301      	movs	r3, #1
 80236c2:	7033      	strb	r3, [r6, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80236c4:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80236c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80236ca:	6073      	str	r3, [r6, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80236cc:	f7ff ff2c 	bl	8023528 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80236d0:	4604      	mov	r4, r0
 80236d2:	b9b8      	cbnz	r0, 8023704 <HAL_FLASHEx_Erase+0x54>
    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 80236d4:	f248 0208 	movw	r2, #32776	@ 0x8008
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80236d8:	682b      	ldr	r3, [r5, #0]
    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 80236da:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80236de:	4291      	cmp	r1, r2
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80236e0:	60b3      	str	r3, [r6, #8]
    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 80236e2:	d114      	bne.n	802370e <HAL_FLASHEx_Erase+0x5e>
      FLASH_MassErase(pEraseInit->Banks);
 80236e4:	6868      	ldr	r0, [r5, #4]
 80236e6:	f7ff ffa1 	bl	802362c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80236ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80236ee:	f7ff ff1b 	bl	8023528 <FLASH_WaitForLastOperation>
 80236f2:	4604      	mov	r4, r0
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 80236f4:	4918      	ldr	r1, [pc, #96]	@ (8023758 <HAL_FLASHEx_Erase+0xa8>)
 80236f6:	682a      	ldr	r2, [r5, #0]
 80236f8:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80236fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80236fe:	ea23 0302 	bic.w	r3, r3, r2
 8023702:	628b      	str	r3, [r1, #40]	@ 0x28
  __HAL_UNLOCK(&pFlash);
 8023704:	2300      	movs	r3, #0
 8023706:	7033      	strb	r3, [r6, #0]
}
 8023708:	4620      	mov	r0, r4
 802370a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 802370e:	4a13      	ldr	r2, [pc, #76]	@ (802375c <HAL_FLASHEx_Erase+0xac>)
 8023710:	4293      	cmp	r3, r2
 8023712:	d105      	bne.n	8023720 <HAL_FLASHEx_Erase+0x70>

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8023714:	4a10      	ldr	r2, [pc, #64]	@ (8023758 <HAL_FLASHEx_Erase+0xa8>)
 8023716:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8023718:	f043 0308 	orr.w	r3, r3, #8
 802371c:	6413      	str	r3, [r2, #64]	@ 0x40
 802371e:	e7e4      	b.n	80236ea <HAL_FLASHEx_Erase+0x3a>
      *SectorError = 0xFFFFFFFFU;
 8023720:	f04f 33ff 	mov.w	r3, #4294967295
 8023724:	f8c8 3000 	str.w	r3, [r8]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8023728:	68af      	ldr	r7, [r5, #8]
 802372a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 802372e:	4413      	add	r3, r2
 8023730:	42bb      	cmp	r3, r7
 8023732:	d9df      	bls.n	80236f4 <HAL_FLASHEx_Erase+0x44>
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8023734:	4638      	mov	r0, r7
 8023736:	6869      	ldr	r1, [r5, #4]
 8023738:	f7ff ff9a 	bl	8023670 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 802373c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8023740:	f7ff fef2 	bl	8023528 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8023744:	b110      	cbz	r0, 802374c <HAL_FLASHEx_Erase+0x9c>
          *SectorError = sector_index;
 8023746:	f8c8 7000 	str.w	r7, [r8]
          break;
 802374a:	e7d2      	b.n	80236f2 <HAL_FLASHEx_Erase+0x42>
           sector_index++)
 802374c:	3701      	adds	r7, #1
 802374e:	e7ec      	b.n	802372a <HAL_FLASHEx_Erase+0x7a>
  __HAL_LOCK(&pFlash);
 8023750:	2402      	movs	r4, #2
 8023752:	e7d9      	b.n	8023708 <HAL_FLASHEx_Erase+0x58>
 8023754:	2000000c 	.word	0x2000000c
 8023758:	40022000 	.word	0x40022000
 802375c:	80000008 	.word	0x80000008

08023760 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8023760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8023764:	4b4f      	ldr	r3, [pc, #316]	@ (80238a4 <HAL_GPIO_Init+0x144>)
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8023766:	f04f 090f 	mov.w	r9, #15
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 802376a:	ea03 2390 	and.w	r3, r3, r0, lsr #10
 802376e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0U;
 8023770:	2300      	movs	r3, #0
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8023772:	4c4d      	ldr	r4, [pc, #308]	@ (80238a8 <HAL_GPIO_Init+0x148>)
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8023774:	680a      	ldr	r2, [r1, #0]
 8023776:	fa32 f503 	lsrs.w	r5, r2, r3
 802377a:	d102      	bne.n	8023782 <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 802377c:	b003      	add	sp, #12
 802377e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8023782:	2501      	movs	r5, #1
 8023784:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0U)
 8023788:	ea18 0202 	ands.w	r2, r8, r2
 802378c:	f000 8088 	beq.w	80238a0 <HAL_GPIO_Init+0x140>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8023790:	684d      	ldr	r5, [r1, #4]
 8023792:	f025 0e10 	bic.w	lr, r5, #16
 8023796:	f1be 0f02 	cmp.w	lr, #2
 802379a:	d113      	bne.n	80237c4 <HAL_GPIO_Init+0x64>
        tmp = GPIOx->AFR[position >> 3U];
 802379c:	08df      	lsrs	r7, r3, #3
 802379e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80237a2:	f003 0c07 	and.w	ip, r3, #7
        tmp = GPIOx->AFR[position >> 3U];
 80237a6:	6a3e      	ldr	r6, [r7, #32]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80237a8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80237ac:	fa09 fa0c 	lsl.w	sl, r9, ip
 80237b0:	ea26 0a0a 	bic.w	sl, r6, sl
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80237b4:	690e      	ldr	r6, [r1, #16]
 80237b6:	f006 060f 	and.w	r6, r6, #15
 80237ba:	fa06 f60c 	lsl.w	r6, r6, ip
 80237be:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = tmp;
 80237c2:	623e      	str	r6, [r7, #32]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80237c4:	2603      	movs	r6, #3
      tmp = GPIOx->MODER;
 80237c6:	f8d0 b000 	ldr.w	fp, [r0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80237ca:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80237ce:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80237d2:	f005 0a03 	and.w	sl, r5, #3
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80237d6:	ea2b 0b06 	bic.w	fp, fp, r6
 80237da:	43f7      	mvns	r7, r6
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80237dc:	f10e 3eff 	add.w	lr, lr, #4294967295
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80237e0:	fa0a f60c 	lsl.w	r6, sl, ip
 80237e4:	ea46 060b 	orr.w	r6, r6, fp
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80237e8:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = tmp;
 80237ec:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80237ee:	d811      	bhi.n	8023814 <HAL_GPIO_Init+0xb4>
        tmp = GPIOx->OSPEEDR;
 80237f0:	6886      	ldr	r6, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80237f2:	ea07 0e06 	and.w	lr, r7, r6
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80237f6:	68ce      	ldr	r6, [r1, #12]
 80237f8:	fa06 f60c 	lsl.w	r6, r6, ip
 80237fc:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = tmp;
 8023800:	6086      	str	r6, [r0, #8]
        tmp = GPIOx->OTYPER;
 8023802:	6846      	ldr	r6, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8023804:	ea26 0e08 	bic.w	lr, r6, r8
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8023808:	f3c5 1600 	ubfx	r6, r5, #4, #1
 802380c:	409e      	lsls	r6, r3
 802380e:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OTYPER = tmp;
 8023812:	6046      	str	r6, [r0, #4]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8023814:	f1ba 0f03 	cmp.w	sl, #3
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8023818:	688e      	ldr	r6, [r1, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 802381a:	d101      	bne.n	8023820 <HAL_GPIO_Init+0xc0>
 802381c:	2e01      	cmp	r6, #1
 802381e:	d007      	beq.n	8023830 <HAL_GPIO_Init+0xd0>
        tmp = GPIOx->PUPDR;
 8023820:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8023824:	fa06 f60c 	lsl.w	r6, r6, ip
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8023828:	ea07 070e 	and.w	r7, r7, lr
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 802382c:	433e      	orrs	r6, r7
        GPIOx->PUPDR = tmp;
 802382e:	60c6      	str	r6, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8023830:	00ee      	lsls	r6, r5, #3
 8023832:	d535      	bpl.n	80238a0 <HAL_GPIO_Init+0x140>
        tmp = EXTI->EXTICR[position >> 2U];
 8023834:	f023 0703 	bic.w	r7, r3, #3
 8023838:	f107 4888 	add.w	r8, r7, #1140850688	@ 0x44000000
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 802383c:	f003 0603 	and.w	r6, r3, #3
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8023840:	9f01      	ldr	r7, [sp, #4]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8023842:	00f6      	lsls	r6, r6, #3
 8023844:	fa09 fe06 	lsl.w	lr, r9, r6
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8023848:	fa07 f606 	lsl.w	r6, r7, r6
        tmp &= ~((uint32_t)iocurrent);
 802384c:	43d7      	mvns	r7, r2
 802384e:	f508 3808 	add.w	r8, r8, #139264	@ 0x22000
        tmp = EXTI->EXTICR[position >> 2U];
 8023852:	f8d8 c060 	ldr.w	ip, [r8, #96]	@ 0x60
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8023856:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 802385a:	ea2c 0c0e 	bic.w	ip, ip, lr
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 802385e:	ea46 060c 	orr.w	r6, r6, ip
        EXTI->EXTICR[position >> 2U] = tmp;
 8023862:	f8c8 6060 	str.w	r6, [r8, #96]	@ 0x60
        tmp = EXTI->RTSR1;
 8023866:	6826      	ldr	r6, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 8023868:	bf0c      	ite	eq
 802386a:	403e      	andeq	r6, r7
          tmp |= iocurrent;
 802386c:	4316      	orrne	r6, r2
        EXTI->RTSR1 = tmp;
 802386e:	6026      	str	r6, [r4, #0]
        tmp = EXTI->FTSR1;
 8023870:	6866      	ldr	r6, [r4, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8023872:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        tmp &= ~((uint32_t)iocurrent);
 8023876:	bf0c      	ite	eq
 8023878:	403e      	andeq	r6, r7
          tmp |= iocurrent;
 802387a:	4316      	orrne	r6, r2
        EXTI->FTSR1 = tmp;
 802387c:	6066      	str	r6, [r4, #4]
        tmp = EXTI->EMR1;
 802387e:	f8d4 6084 	ldr.w	r6, [r4, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8023882:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        tmp &= ~((uint32_t)iocurrent);
 8023886:	bf0c      	ite	eq
 8023888:	403e      	andeq	r6, r7
          tmp |= iocurrent;
 802388a:	4316      	orrne	r6, r2
        EXTI->EMR1 = tmp;
 802388c:	f8c4 6084 	str.w	r6, [r4, #132]	@ 0x84
        tmp = EXTI->IMR1;
 8023890:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8023894:	03ed      	lsls	r5, r5, #15
        tmp &= ~((uint32_t)iocurrent);
 8023896:	bf54      	ite	pl
 8023898:	403e      	andpl	r6, r7
          tmp |= iocurrent;
 802389a:	4316      	orrmi	r6, r2
        EXTI->IMR1 = tmp;
 802389c:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    position++;
 80238a0:	3301      	adds	r3, #1
 80238a2:	e767      	b.n	8023774 <HAL_GPIO_Init+0x14>
 80238a4:	002f7f7f 	.word	0x002f7f7f
 80238a8:	44022000 	.word	0x44022000

080238ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80238ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80238b0:	2300      	movs	r3, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80238b2:	f04f 0801 	mov.w	r8, #1
    if (iocurrent != 0U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80238b6:	f04f 0e0f 	mov.w	lr, #15
        EXTI->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80238ba:	f04f 0903 	mov.w	r9, #3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 80238be:	4f2d      	ldr	r7, [pc, #180]	@ (8023974 <HAL_GPIO_DeInit+0xc8>)
        EXTI->IMR1 &= ~(iocurrent);
 80238c0:	4a2d      	ldr	r2, [pc, #180]	@ (8023978 <HAL_GPIO_DeInit+0xcc>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 80238c2:	ea07 2790 	and.w	r7, r7, r0, lsr #10
  while ((GPIO_Pin >> position) != 0U)
 80238c6:	fa31 f403 	lsrs.w	r4, r1, r3
 80238ca:	d101      	bne.n	80238d0 <HAL_GPIO_DeInit+0x24>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
    }

    position++;
  }
}
 80238cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1UL << position);
 80238d0:	fa08 fc03 	lsl.w	ip, r8, r3
    if (iocurrent != 0U)
 80238d4:	ea1c 0601 	ands.w	r6, ip, r1
 80238d8:	d049      	beq.n	802396e <HAL_GPIO_DeInit+0xc2>
      tmp = EXTI->EXTICR[position >> 2U];
 80238da:	f023 0403 	bic.w	r4, r3, #3
 80238de:	f104 4488 	add.w	r4, r4, #1140850688	@ 0x44000000
 80238e2:	f504 3408 	add.w	r4, r4, #139264	@ 0x22000
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80238e6:	f003 0503 	and.w	r5, r3, #3
 80238ea:	00ed      	lsls	r5, r5, #3
      tmp = EXTI->EXTICR[position >> 2U];
 80238ec:	f8d4 a060 	ldr.w	sl, [r4, #96]	@ 0x60
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80238f0:	fa0e fb05 	lsl.w	fp, lr, r5
 80238f4:	ea0b 0a0a 	and.w	sl, fp, sl
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 80238f8:	fa07 f505 	lsl.w	r5, r7, r5
 80238fc:	4555      	cmp	r5, sl
 80238fe:	d117      	bne.n	8023930 <HAL_GPIO_DeInit+0x84>
        EXTI->IMR1 &= ~(iocurrent);
 8023900:	f8d2 5080 	ldr.w	r5, [r2, #128]	@ 0x80
 8023904:	ea25 0506 	bic.w	r5, r5, r6
 8023908:	f8c2 5080 	str.w	r5, [r2, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 802390c:	f8d2 5084 	ldr.w	r5, [r2, #132]	@ 0x84
 8023910:	ea25 0506 	bic.w	r5, r5, r6
 8023914:	f8c2 5084 	str.w	r5, [r2, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8023918:	6815      	ldr	r5, [r2, #0]
 802391a:	ea25 0506 	bic.w	r5, r5, r6
 802391e:	6015      	str	r5, [r2, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8023920:	6855      	ldr	r5, [r2, #4]
 8023922:	ea25 0506 	bic.w	r5, r5, r6
 8023926:	6055      	str	r5, [r2, #4]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8023928:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 802392a:	ea25 050b 	bic.w	r5, r5, fp
 802392e:	6625      	str	r5, [r4, #96]	@ 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8023930:	6805      	ldr	r5, [r0, #0]
 8023932:	005c      	lsls	r4, r3, #1
 8023934:	fa09 f404 	lsl.w	r4, r9, r4
 8023938:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 802393a:	08de      	lsrs	r6, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 802393c:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 802393e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8023942:	f003 0507 	and.w	r5, r3, #7
 8023946:	f8d6 a020 	ldr.w	sl, [r6, #32]
 802394a:	00ad      	lsls	r5, r5, #2
 802394c:	fa0e f505 	lsl.w	r5, lr, r5
 8023950:	ea2a 0505 	bic.w	r5, sl, r5
 8023954:	6235      	str	r5, [r6, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8023956:	6885      	ldr	r5, [r0, #8]
 8023958:	ea25 0504 	bic.w	r5, r5, r4
 802395c:	6085      	str	r5, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 802395e:	6845      	ldr	r5, [r0, #4]
 8023960:	ea25 050c 	bic.w	r5, r5, ip
 8023964:	6045      	str	r5, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8023966:	68c5      	ldr	r5, [r0, #12]
 8023968:	ea25 0404 	bic.w	r4, r5, r4
 802396c:	60c4      	str	r4, [r0, #12]
    position++;
 802396e:	3301      	adds	r3, #1
 8023970:	e7a9      	b.n	80238c6 <HAL_GPIO_DeInit+0x1a>
 8023972:	bf00      	nop
 8023974:	002f7f7f 	.word	0x002f7f7f
 8023978:	44022000 	.word	0x44022000

0802397c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 802397c:	6903      	ldr	r3, [r0, #16]
 802397e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8023980:	bf14      	ite	ne
 8023982:	2001      	movne	r0, #1
 8023984:	2000      	moveq	r0, #0
 8023986:	4770      	bx	lr

08023988 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8023988:	b10a      	cbz	r2, 802398e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 802398a:	6181      	str	r1, [r0, #24]
 802398c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 802398e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8023990:	4770      	bx	lr

08023992 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8023992:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8023994:	ea01 0203 	and.w	r2, r1, r3
 8023998:	ea21 0103 	bic.w	r1, r1, r3
 802399c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80239a0:	6181      	str	r1, [r0, #24]
}
 80239a2:	4770      	bx	lr

080239a4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80239a4:	6803      	ldr	r3, [r0, #0]
 80239a6:	699a      	ldr	r2, [r3, #24]
 80239a8:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80239aa:	bf44      	itt	mi
 80239ac:	2200      	movmi	r2, #0
 80239ae:	629a      	strmi	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80239b0:	699a      	ldr	r2, [r3, #24]
 80239b2:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80239b4:	bf5e      	ittt	pl
 80239b6:	699a      	ldrpl	r2, [r3, #24]
 80239b8:	f042 0201 	orrpl.w	r2, r2, #1
 80239bc:	619a      	strpl	r2, [r3, #24]
  }
}
 80239be:	4770      	bx	lr

080239c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80239c0:	b530      	push	{r4, r5, lr}
 80239c2:	9d03      	ldr	r5, [sp, #12]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80239c4:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80239c6:	432b      	orrs	r3, r5
 80239c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80239cc:	4a06      	ldr	r2, [pc, #24]	@ (80239e8 <I2C_TransferConfig+0x28>)
 80239ce:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80239d0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80239d4:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80239d6:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80239da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80239de:	ea20 0002 	bic.w	r0, r0, r2
 80239e2:	4303      	orrs	r3, r0
 80239e4:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80239e6:	bd30      	pop	{r4, r5, pc}
 80239e8:	03ff63ff 	.word	0x03ff63ff

080239ec <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80239ec:	6803      	ldr	r3, [r0, #0]
{
 80239ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80239f2:	699c      	ldr	r4, [r3, #24]
{
 80239f4:	4605      	mov	r5, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80239f6:	f014 0410 	ands.w	r4, r4, #16
{
 80239fa:	460f      	mov	r7, r1
 80239fc:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80239fe:	d06f      	beq.n	8023ae0 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8023a00:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8023a02:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8023a04:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8023a06:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8023a08:	682b      	ldr	r3, [r5, #0]
 8023a0a:	699a      	ldr	r2, [r3, #24]
 8023a0c:	0690      	lsls	r0, r2, #26
 8023a0e:	d461      	bmi.n	8023ad4 <I2C_IsErrorOccurred+0xe8>
 8023a10:	f1b8 0f00 	cmp.w	r8, #0
 8023a14:	d035      	beq.n	8023a82 <I2C_IsErrorOccurred+0x96>
    status = HAL_ERROR;
 8023a16:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8023a18:	f044 0404 	orr.w	r4, r4, #4
  itflag = hi2c->Instance->ISR;
 8023a1c:	682e      	ldr	r6, [r5, #0]
 8023a1e:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8023a20:	05d9      	lsls	r1, r3, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8023a22:	bf41      	itttt	mi
 8023a24:	f44f 7280 	movmi.w	r2, #256	@ 0x100
    status = HAL_ERROR;
 8023a28:	2001      	movmi	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8023a2a:	61f2      	strmi	r2, [r6, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8023a2c:	f044 0401 	orrmi.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8023a30:	055a      	lsls	r2, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8023a32:	bf41      	itttt	mi
 8023a34:	f44f 6280 	movmi.w	r2, #1024	@ 0x400
    status = HAL_ERROR;
 8023a38:	2001      	movmi	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 8023a3a:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8023a3e:	61f2      	strmi	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8023a40:	059b      	lsls	r3, r3, #22
 8023a42:	d54f      	bpl.n	8023ae4 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8023a44:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8023a48:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8023a4c:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8023a4e:	4628      	mov	r0, r5
 8023a50:	f7ff ffa8 	bl	80239a4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8023a54:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8023a56:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8023a58:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8023a5c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8023a60:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8023a64:	f023 0301 	bic.w	r3, r3, #1
 8023a68:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8023a6a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8023a6c:	4323      	orrs	r3, r4
 8023a6e:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8023a70:	2320      	movs	r3, #32
 8023a72:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8023a76:	2300      	movs	r3, #0
 8023a78:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8023a7c:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8023a80:	e032      	b.n	8023ae8 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8023a82:	1c7a      	adds	r2, r7, #1
 8023a84:	d0c1      	beq.n	8023a0a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023a86:	f7fe fa1b 	bl	8021ec0 <HAL_GetTick>
 8023a8a:	1b80      	subs	r0, r0, r6
 8023a8c:	42b8      	cmp	r0, r7
 8023a8e:	d801      	bhi.n	8023a94 <I2C_IsErrorOccurred+0xa8>
 8023a90:	2f00      	cmp	r7, #0
 8023a92:	d1b9      	bne.n	8023a08 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8023a94:	682b      	ldr	r3, [r5, #0]
 8023a96:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8023a98:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8023a9c:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8023a9e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8023aa0:	0400      	lsls	r0, r0, #16
 8023aa2:	d50a      	bpl.n	8023aba <I2C_IsErrorOccurred+0xce>
 8023aa4:	0449      	lsls	r1, r1, #17
 8023aa6:	d408      	bmi.n	8023aba <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8023aa8:	2a20      	cmp	r2, #32
 8023aaa:	d006      	beq.n	8023aba <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8023aac:	685a      	ldr	r2, [r3, #4]
 8023aae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8023ab2:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8023ab4:	f7fe fa04 	bl	8021ec0 <HAL_GetTick>
 8023ab8:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8023aba:	682b      	ldr	r3, [r5, #0]
 8023abc:	699b      	ldr	r3, [r3, #24]
 8023abe:	069b      	lsls	r3, r3, #26
 8023ac0:	d4a2      	bmi.n	8023a08 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8023ac2:	f7fe f9fd 	bl	8021ec0 <HAL_GetTick>
 8023ac6:	1b80      	subs	r0, r0, r6
 8023ac8:	2819      	cmp	r0, #25
 8023aca:	d9f6      	bls.n	8023aba <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8023acc:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8023ace:	f04f 0801 	mov.w	r8, #1
 8023ad2:	e799      	b.n	8023a08 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8023ad4:	f1b8 0f00 	cmp.w	r8, #0
 8023ad8:	d19d      	bne.n	8023a16 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8023ada:	2220      	movs	r2, #32
 8023adc:	61da      	str	r2, [r3, #28]
 8023ade:	e79a      	b.n	8023a16 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8023ae0:	4620      	mov	r0, r4
 8023ae2:	e79b      	b.n	8023a1c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8023ae4:	2800      	cmp	r0, #0
 8023ae6:	d1b2      	bne.n	8023a4e <I2C_IsErrorOccurred+0x62>
}
 8023ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023aec <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8023aec:	b570      	push	{r4, r5, r6, lr}
 8023aee:	4604      	mov	r4, r0
 8023af0:	460d      	mov	r5, r1
 8023af2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8023af4:	6823      	ldr	r3, [r4, #0]
 8023af6:	699b      	ldr	r3, [r3, #24]
 8023af8:	079b      	lsls	r3, r3, #30
 8023afa:	d501      	bpl.n	8023b00 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8023afc:	2000      	movs	r0, #0
 8023afe:	e01f      	b.n	8023b40 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8023b00:	4632      	mov	r2, r6
 8023b02:	4629      	mov	r1, r5
 8023b04:	4620      	mov	r0, r4
 8023b06:	f7ff ff71 	bl	80239ec <I2C_IsErrorOccurred>
 8023b0a:	b9c0      	cbnz	r0, 8023b3e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8023b0c:	1c6a      	adds	r2, r5, #1
 8023b0e:	d0f1      	beq.n	8023af4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023b10:	f7fe f9d6 	bl	8021ec0 <HAL_GetTick>
 8023b14:	1b80      	subs	r0, r0, r6
 8023b16:	42a8      	cmp	r0, r5
 8023b18:	d801      	bhi.n	8023b1e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8023b1a:	2d00      	cmp	r5, #0
 8023b1c:	d1ea      	bne.n	8023af4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8023b1e:	6823      	ldr	r3, [r4, #0]
 8023b20:	699b      	ldr	r3, [r3, #24]
 8023b22:	f013 0302 	ands.w	r3, r3, #2
 8023b26:	d1e5      	bne.n	8023af4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8023b28:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8023b2a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8023b2e:	f042 0220 	orr.w	r2, r2, #32
 8023b32:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8023b34:	2220      	movs	r2, #32
 8023b36:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8023b3a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8023b3e:	2001      	movs	r0, #1
}
 8023b40:	bd70      	pop	{r4, r5, r6, pc}

08023b42 <I2C_WaitOnFlagUntilTimeout>:
{
 8023b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b46:	4604      	mov	r4, r0
 8023b48:	460f      	mov	r7, r1
 8023b4a:	4616      	mov	r6, r2
 8023b4c:	461d      	mov	r5, r3
 8023b4e:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8023b52:	6823      	ldr	r3, [r4, #0]
 8023b54:	699b      	ldr	r3, [r3, #24]
 8023b56:	ea37 0303 	bics.w	r3, r7, r3
 8023b5a:	bf0c      	ite	eq
 8023b5c:	2301      	moveq	r3, #1
 8023b5e:	2300      	movne	r3, #0
 8023b60:	42b3      	cmp	r3, r6
 8023b62:	d001      	beq.n	8023b68 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8023b64:	2000      	movs	r0, #0
 8023b66:	e025      	b.n	8023bb4 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8023b68:	4642      	mov	r2, r8
 8023b6a:	4629      	mov	r1, r5
 8023b6c:	4620      	mov	r0, r4
 8023b6e:	f7ff ff3d 	bl	80239ec <I2C_IsErrorOccurred>
 8023b72:	b9f0      	cbnz	r0, 8023bb2 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8023b74:	1c6b      	adds	r3, r5, #1
 8023b76:	d0ec      	beq.n	8023b52 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023b78:	f7fe f9a2 	bl	8021ec0 <HAL_GetTick>
 8023b7c:	eba0 0008 	sub.w	r0, r0, r8
 8023b80:	42a8      	cmp	r0, r5
 8023b82:	d801      	bhi.n	8023b88 <I2C_WaitOnFlagUntilTimeout+0x46>
 8023b84:	2d00      	cmp	r5, #0
 8023b86:	d1e4      	bne.n	8023b52 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8023b88:	6823      	ldr	r3, [r4, #0]
 8023b8a:	699b      	ldr	r3, [r3, #24]
 8023b8c:	ea37 0303 	bics.w	r3, r7, r3
 8023b90:	bf0c      	ite	eq
 8023b92:	2301      	moveq	r3, #1
 8023b94:	2300      	movne	r3, #0
 8023b96:	42b3      	cmp	r3, r6
 8023b98:	d1db      	bne.n	8023b52 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8023b9a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8023b9c:	f043 0320 	orr.w	r3, r3, #32
 8023ba0:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8023ba2:	2320      	movs	r3, #32
 8023ba4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8023ba8:	2300      	movs	r3, #0
 8023baa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8023bae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8023bb2:	2001      	movs	r0, #1
}
 8023bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023bb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8023bb8:	b570      	push	{r4, r5, r6, lr}
 8023bba:	4604      	mov	r4, r0
 8023bbc:	460d      	mov	r5, r1
 8023bbe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8023bc0:	6823      	ldr	r3, [r4, #0]
 8023bc2:	699b      	ldr	r3, [r3, #24]
 8023bc4:	069b      	lsls	r3, r3, #26
 8023bc6:	d501      	bpl.n	8023bcc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8023bc8:	2000      	movs	r0, #0
 8023bca:	e01d      	b.n	8023c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8023bcc:	4632      	mov	r2, r6
 8023bce:	4629      	mov	r1, r5
 8023bd0:	4620      	mov	r0, r4
 8023bd2:	f7ff ff0b 	bl	80239ec <I2C_IsErrorOccurred>
 8023bd6:	b9b0      	cbnz	r0, 8023c06 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023bd8:	f7fe f972 	bl	8021ec0 <HAL_GetTick>
 8023bdc:	1b80      	subs	r0, r0, r6
 8023bde:	42a8      	cmp	r0, r5
 8023be0:	d801      	bhi.n	8023be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8023be2:	2d00      	cmp	r5, #0
 8023be4:	d1ec      	bne.n	8023bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8023be6:	6823      	ldr	r3, [r4, #0]
 8023be8:	699b      	ldr	r3, [r3, #24]
 8023bea:	f013 0320 	ands.w	r3, r3, #32
 8023bee:	d1e7      	bne.n	8023bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8023bf0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8023bf2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8023bf6:	f042 0220 	orr.w	r2, r2, #32
 8023bfa:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8023bfc:	2220      	movs	r2, #32
 8023bfe:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8023c02:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8023c06:	2001      	movs	r0, #1
}
 8023c08:	bd70      	pop	{r4, r5, r6, pc}

08023c0a <HAL_I2C_Init>:
{
 8023c0a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8023c0c:	4604      	mov	r4, r0
 8023c0e:	2800      	cmp	r0, #0
 8023c10:	d04e      	beq.n	8023cb0 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8023c12:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8023c16:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8023c1a:	b91b      	cbnz	r3, 8023c24 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8023c1c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8023c20:	f7fd fd52 	bl	80216c8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8023c24:	2324      	movs	r3, #36	@ 0x24
 8023c26:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8023c2a:	6823      	ldr	r3, [r4, #0]
 8023c2c:	681a      	ldr	r2, [r3, #0]
 8023c2e:	f022 0201 	bic.w	r2, r2, #1
 8023c32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8023c34:	6862      	ldr	r2, [r4, #4]
 8023c36:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8023c3a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8023c3c:	689a      	ldr	r2, [r3, #8]
 8023c3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8023c42:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8023c44:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8023c48:	2901      	cmp	r1, #1
 8023c4a:	d106      	bne.n	8023c5a <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8023c4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8023c50:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8023c52:	685a      	ldr	r2, [r3, #4]
 8023c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8023c58:	e007      	b.n	8023c6a <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8023c5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8023c5e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8023c60:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8023c62:	d1f6      	bne.n	8023c52 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8023c64:	685a      	ldr	r2, [r3, #4]
 8023c66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8023c6a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8023c6c:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023c6e:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8023c70:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8023c74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8023c78:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8023c7a:	68da      	ldr	r2, [r3, #12]
 8023c7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8023c80:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8023c82:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8023c86:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8023c88:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8023c8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8023c8e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8023c90:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8023c94:	430a      	orrs	r2, r1
 8023c96:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8023c98:	681a      	ldr	r2, [r3, #0]
 8023c9a:	f042 0201 	orr.w	r2, r2, #1
 8023c9e:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8023ca0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023ca2:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8023ca4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8023ca8:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8023caa:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8023cae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8023cb0:	2001      	movs	r0, #1
 8023cb2:	e7fc      	b.n	8023cae <HAL_I2C_Init+0xa4>

08023cb4 <HAL_I2C_Mem_Write>:
{
 8023cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cb8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8023cba:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8023cbe:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8023cc0:	2b20      	cmp	r3, #32
{
 8023cc2:	460f      	mov	r7, r1
 8023cc4:	4616      	mov	r6, r2
 8023cc6:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8023cca:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8023cce:	f040 80c6 	bne.w	8023e5e <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8023cd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023cd4:	b113      	cbz	r3, 8023cdc <HAL_I2C_Mem_Write+0x28>
 8023cd6:	f1ba 0f00 	cmp.w	sl, #0
 8023cda:	d106      	bne.n	8023cea <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8023cdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8023ce0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8023ce2:	2001      	movs	r0, #1
}
 8023ce4:	b003      	add	sp, #12
 8023ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8023cea:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8023cee:	2b01      	cmp	r3, #1
 8023cf0:	f000 80b5 	beq.w	8023e5e <HAL_I2C_Mem_Write+0x1aa>
 8023cf4:	f04f 0b01 	mov.w	fp, #1
 8023cf8:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8023cfc:	f7fe f8e0 	bl	8021ec0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8023d00:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8023d02:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8023d04:	9000      	str	r0, [sp, #0]
 8023d06:	465a      	mov	r2, fp
 8023d08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8023d0c:	4620      	mov	r0, r4
 8023d0e:	f7ff ff18 	bl	8023b42 <I2C_WaitOnFlagUntilTimeout>
 8023d12:	2800      	cmp	r0, #0
 8023d14:	d1e5      	bne.n	8023ce2 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8023d16:	2321      	movs	r3, #33	@ 0x21
 8023d18:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8023d1c:	2340      	movs	r3, #64	@ 0x40
 8023d1e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8023d22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023d24:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8023d26:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8023d28:	4b4e      	ldr	r3, [pc, #312]	@ (8023e64 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferISR   = NULL;
 8023d2a:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8023d2c:	4639      	mov	r1, r7
 8023d2e:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 8023d30:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8023d34:	fa5f f289 	uxtb.w	r2, r9
 8023d38:	9300      	str	r3, [sp, #0]
 8023d3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8023d3e:	f7ff fe3f 	bl	80239c0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8023d42:	462a      	mov	r2, r5
 8023d44:	4641      	mov	r1, r8
 8023d46:	4620      	mov	r0, r4
 8023d48:	f7ff fed0 	bl	8023aec <I2C_WaitOnTXISFlagUntilTimeout>
 8023d4c:	bb18      	cbnz	r0, 8023d96 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8023d4e:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8023d52:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8023d54:	d115      	bne.n	8023d82 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8023d56:	b2f6      	uxtb	r6, r6
 8023d58:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8023d5a:	2200      	movs	r2, #0
 8023d5c:	4643      	mov	r3, r8
 8023d5e:	2180      	movs	r1, #128	@ 0x80
 8023d60:	4620      	mov	r0, r4
 8023d62:	9500      	str	r5, [sp, #0]
 8023d64:	f7ff feed 	bl	8023b42 <I2C_WaitOnFlagUntilTimeout>
 8023d68:	b9a8      	cbnz	r0, 8023d96 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8023d6a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8023d6c:	b29b      	uxth	r3, r3
 8023d6e:	2bff      	cmp	r3, #255	@ 0xff
 8023d70:	d815      	bhi.n	8023d9e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8023d72:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8023d74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8023d78:	b292      	uxth	r2, r2
 8023d7a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8023d7c:	9000      	str	r0, [sp, #0]
 8023d7e:	b2d2      	uxtb	r2, r2
 8023d80:	e012      	b.n	8023da8 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8023d82:	0a32      	lsrs	r2, r6, #8
 8023d84:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8023d86:	4641      	mov	r1, r8
 8023d88:	462a      	mov	r2, r5
 8023d8a:	4620      	mov	r0, r4
 8023d8c:	f7ff feae 	bl	8023aec <I2C_WaitOnTXISFlagUntilTimeout>
 8023d90:	b908      	cbnz	r0, 8023d96 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8023d92:	6823      	ldr	r3, [r4, #0]
 8023d94:	e7df      	b.n	8023d56 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8023d96:	2300      	movs	r3, #0
 8023d98:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8023d9c:	e7a1      	b.n	8023ce2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8023d9e:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8023da0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8023da4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8023da6:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8023da8:	4639      	mov	r1, r7
 8023daa:	4620      	mov	r0, r4
 8023dac:	f7ff fe08 	bl	80239c0 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023db0:	462a      	mov	r2, r5
 8023db2:	4641      	mov	r1, r8
 8023db4:	4620      	mov	r0, r4
 8023db6:	f7ff fe99 	bl	8023aec <I2C_WaitOnTXISFlagUntilTimeout>
 8023dba:	2800      	cmp	r0, #0
 8023dbc:	d191      	bne.n	8023ce2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8023dbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8023dc0:	6822      	ldr	r2, [r4, #0]
 8023dc2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8023dc6:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8023dc8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8023dca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8023dcc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8023dce:	3b01      	subs	r3, #1
 8023dd0:	b29b      	uxth	r3, r3
 8023dd2:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8023dd4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8023dd6:	3a01      	subs	r2, #1
 8023dd8:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8023dda:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8023ddc:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8023dde:	b1b3      	cbz	r3, 8023e0e <HAL_I2C_Mem_Write+0x15a>
 8023de0:	b9aa      	cbnz	r2, 8023e0e <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8023de2:	4643      	mov	r3, r8
 8023de4:	2180      	movs	r1, #128	@ 0x80
 8023de6:	4620      	mov	r0, r4
 8023de8:	9500      	str	r5, [sp, #0]
 8023dea:	f7ff feaa 	bl	8023b42 <I2C_WaitOnFlagUntilTimeout>
 8023dee:	2800      	cmp	r0, #0
 8023df0:	f47f af77 	bne.w	8023ce2 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8023df4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8023df6:	b29b      	uxth	r3, r3
 8023df8:	2bff      	cmp	r3, #255	@ 0xff
 8023dfa:	d928      	bls.n	8023e4e <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8023dfc:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8023dfe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8023e02:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8023e04:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8023e06:	4639      	mov	r1, r7
 8023e08:	4620      	mov	r0, r4
 8023e0a:	f7ff fdd9 	bl	80239c0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8023e0e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8023e10:	b29b      	uxth	r3, r3
 8023e12:	2b00      	cmp	r3, #0
 8023e14:	d1cc      	bne.n	8023db0 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023e16:	462a      	mov	r2, r5
 8023e18:	4641      	mov	r1, r8
 8023e1a:	4620      	mov	r0, r4
 8023e1c:	f7ff fecc 	bl	8023bb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8023e20:	2800      	cmp	r0, #0
 8023e22:	f47f af5e 	bne.w	8023ce2 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8023e26:	2120      	movs	r1, #32
 8023e28:	6823      	ldr	r3, [r4, #0]
 8023e2a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8023e2c:	685a      	ldr	r2, [r3, #4]
 8023e2e:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8023e32:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8023e36:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8023e3a:	f022 0201 	bic.w	r2, r2, #1
 8023e3e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8023e40:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8023e44:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8023e48:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8023e4c:	e74a      	b.n	8023ce4 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8023e4e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8023e50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8023e54:	b292      	uxth	r2, r2
 8023e56:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8023e58:	9000      	str	r0, [sp, #0]
 8023e5a:	b2d2      	uxtb	r2, r2
 8023e5c:	e7d3      	b.n	8023e06 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8023e5e:	2002      	movs	r0, #2
 8023e60:	e740      	b.n	8023ce4 <HAL_I2C_Mem_Write+0x30>
 8023e62:	bf00      	nop
 8023e64:	80002000 	.word	0x80002000

08023e68 <HAL_I2C_Mem_Read>:
{
 8023e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e6c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8023e6e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8023e72:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8023e74:	2b20      	cmp	r3, #32
{
 8023e76:	460f      	mov	r7, r1
 8023e78:	4616      	mov	r6, r2
 8023e7a:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8023e7e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8023e82:	f040 80c9 	bne.w	8024018 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8023e86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023e88:	b113      	cbz	r3, 8023e90 <HAL_I2C_Mem_Read+0x28>
 8023e8a:	f1ba 0f00 	cmp.w	sl, #0
 8023e8e:	d106      	bne.n	8023e9e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8023e90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8023e94:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8023e96:	2001      	movs	r0, #1
}
 8023e98:	b003      	add	sp, #12
 8023e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8023e9e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8023ea2:	2b01      	cmp	r3, #1
 8023ea4:	f000 80b8 	beq.w	8024018 <HAL_I2C_Mem_Read+0x1b0>
 8023ea8:	f04f 0b01 	mov.w	fp, #1
 8023eac:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8023eb0:	f7fe f806 	bl	8021ec0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8023eb4:	2319      	movs	r3, #25
 8023eb6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8023eb8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8023eba:	465a      	mov	r2, fp
 8023ebc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8023ec0:	4620      	mov	r0, r4
 8023ec2:	f7ff fe3e 	bl	8023b42 <I2C_WaitOnFlagUntilTimeout>
 8023ec6:	4603      	mov	r3, r0
 8023ec8:	2800      	cmp	r0, #0
 8023eca:	d1e4      	bne.n	8023e96 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8023ecc:	2222      	movs	r2, #34	@ 0x22
 8023ece:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8023ed2:	2240      	movs	r2, #64	@ 0x40
 8023ed4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8023ed8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023eda:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8023edc:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8023ede:	4a4f      	ldr	r2, [pc, #316]	@ (802401c <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferISR   = NULL;
 8023ee0:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8023ee2:	4639      	mov	r1, r7
 8023ee4:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 8023ee6:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8023eea:	9200      	str	r2, [sp, #0]
 8023eec:	fa5f f289 	uxtb.w	r2, r9
 8023ef0:	f7ff fd66 	bl	80239c0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8023ef4:	462a      	mov	r2, r5
 8023ef6:	4641      	mov	r1, r8
 8023ef8:	4620      	mov	r0, r4
 8023efa:	f7ff fdf7 	bl	8023aec <I2C_WaitOnTXISFlagUntilTimeout>
 8023efe:	bb20      	cbnz	r0, 8023f4a <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8023f00:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8023f04:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8023f06:	d116      	bne.n	8023f36 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8023f08:	b2f6      	uxtb	r6, r6
 8023f0a:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8023f0c:	2200      	movs	r2, #0
 8023f0e:	4643      	mov	r3, r8
 8023f10:	2140      	movs	r1, #64	@ 0x40
 8023f12:	4620      	mov	r0, r4
 8023f14:	9500      	str	r5, [sp, #0]
 8023f16:	f7ff fe14 	bl	8023b42 <I2C_WaitOnFlagUntilTimeout>
 8023f1a:	b9b0      	cbnz	r0, 8023f4a <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8023f1c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8023f1e:	b29b      	uxth	r3, r3
 8023f20:	2bff      	cmp	r3, #255	@ 0xff
 8023f22:	4b3f      	ldr	r3, [pc, #252]	@ (8024020 <HAL_I2C_Mem_Read+0x1b8>)
 8023f24:	d815      	bhi.n	8023f52 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8023f26:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8023f28:	b292      	uxth	r2, r2
 8023f2a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8023f2c:	9300      	str	r3, [sp, #0]
 8023f2e:	b2d2      	uxtb	r2, r2
 8023f30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8023f34:	e012      	b.n	8023f5c <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8023f36:	0a32      	lsrs	r2, r6, #8
 8023f38:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8023f3a:	4641      	mov	r1, r8
 8023f3c:	462a      	mov	r2, r5
 8023f3e:	4620      	mov	r0, r4
 8023f40:	f7ff fdd4 	bl	8023aec <I2C_WaitOnTXISFlagUntilTimeout>
 8023f44:	b908      	cbnz	r0, 8023f4a <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8023f46:	6823      	ldr	r3, [r4, #0]
 8023f48:	e7de      	b.n	8023f08 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8023f4a:	2300      	movs	r3, #0
 8023f4c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8023f50:	e7a1      	b.n	8023e96 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8023f52:	22ff      	movs	r2, #255	@ 0xff
 8023f54:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8023f56:	9300      	str	r3, [sp, #0]
 8023f58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8023f5c:	4639      	mov	r1, r7
 8023f5e:	4620      	mov	r0, r4
 8023f60:	f7ff fd2e 	bl	80239c0 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8023f64:	4643      	mov	r3, r8
 8023f66:	2200      	movs	r2, #0
 8023f68:	2104      	movs	r1, #4
 8023f6a:	4620      	mov	r0, r4
 8023f6c:	9500      	str	r5, [sp, #0]
 8023f6e:	f7ff fde8 	bl	8023b42 <I2C_WaitOnFlagUntilTimeout>
 8023f72:	2800      	cmp	r0, #0
 8023f74:	d18f      	bne.n	8023e96 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8023f76:	6823      	ldr	r3, [r4, #0]
 8023f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8023f7a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8023f7c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8023f7e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8023f80:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8023f82:	3301      	adds	r3, #1
 8023f84:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8023f86:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8023f88:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8023f8a:	3b01      	subs	r3, #1
 8023f8c:	b29b      	uxth	r3, r3
 8023f8e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8023f90:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8023f92:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8023f94:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8023f96:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8023f98:	b1b3      	cbz	r3, 8023fc8 <HAL_I2C_Mem_Read+0x160>
 8023f9a:	b9aa      	cbnz	r2, 8023fc8 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8023f9c:	4643      	mov	r3, r8
 8023f9e:	2180      	movs	r1, #128	@ 0x80
 8023fa0:	4620      	mov	r0, r4
 8023fa2:	9500      	str	r5, [sp, #0]
 8023fa4:	f7ff fdcd 	bl	8023b42 <I2C_WaitOnFlagUntilTimeout>
 8023fa8:	2800      	cmp	r0, #0
 8023faa:	f47f af74 	bne.w	8023e96 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8023fae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8023fb0:	b29b      	uxth	r3, r3
 8023fb2:	2bff      	cmp	r3, #255	@ 0xff
 8023fb4:	d928      	bls.n	8024008 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8023fb6:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8023fb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8023fbc:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8023fbe:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8023fc0:	4639      	mov	r1, r7
 8023fc2:	4620      	mov	r0, r4
 8023fc4:	f7ff fcfc 	bl	80239c0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8023fc8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8023fca:	b29b      	uxth	r3, r3
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	d1c9      	bne.n	8023f64 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023fd0:	462a      	mov	r2, r5
 8023fd2:	4641      	mov	r1, r8
 8023fd4:	4620      	mov	r0, r4
 8023fd6:	f7ff fdef 	bl	8023bb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8023fda:	2800      	cmp	r0, #0
 8023fdc:	f47f af5b 	bne.w	8023e96 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8023fe0:	2120      	movs	r1, #32
 8023fe2:	6823      	ldr	r3, [r4, #0]
 8023fe4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8023fe6:	685a      	ldr	r2, [r3, #4]
 8023fe8:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8023fec:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8023ff0:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8023ff4:	f022 0201 	bic.w	r2, r2, #1
 8023ff8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8023ffa:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8023ffe:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8024002:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8024006:	e747      	b.n	8023e98 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8024008:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 802400a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 802400e:	b292      	uxth	r2, r2
 8024010:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8024012:	9000      	str	r0, [sp, #0]
 8024014:	b2d2      	uxtb	r2, r2
 8024016:	e7d3      	b.n	8023fc0 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8024018:	2002      	movs	r0, #2
 802401a:	e73d      	b.n	8023e98 <HAL_I2C_Mem_Read+0x30>
 802401c:	80002000 	.word	0x80002000
 8024020:	80002400 	.word	0x80002400

08024024 <HAL_I2C_IsDeviceReady>:
{
 8024024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024028:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 802402a:	2300      	movs	r3, #0
 802402c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 802402e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8024032:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8024034:	2b20      	cmp	r3, #32
{
 8024036:	4617      	mov	r7, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8024038:	d179      	bne.n	802412e <HAL_I2C_IsDeviceReady+0x10a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 802403a:	6803      	ldr	r3, [r0, #0]
 802403c:	699b      	ldr	r3, [r3, #24]
 802403e:	f413 4300 	ands.w	r3, r3, #32768	@ 0x8000
 8024042:	d174      	bne.n	802412e <HAL_I2C_IsDeviceReady+0x10a>
    __HAL_LOCK(hi2c);
 8024044:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8024048:	2a01      	cmp	r2, #1
 802404a:	d070      	beq.n	802412e <HAL_I2C_IsDeviceReady+0x10a>
 802404c:	2201      	movs	r2, #1
 802404e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8024052:	2224      	movs	r2, #36	@ 0x24
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8024054:	f3c1 0609 	ubfx	r6, r1, #0, #10
 8024058:	f046 7800 	orr.w	r8, r6, #33554432	@ 0x2000000
    hi2c->State = HAL_I2C_STATE_BUSY;
 802405c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8024060:	f448 5820 	orr.w	r8, r8, #10240	@ 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8024064:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8024066:	68e3      	ldr	r3, [r4, #12]
 8024068:	6822      	ldr	r2, [r4, #0]
 802406a:	2b01      	cmp	r3, #1
 802406c:	bf12      	itee	ne
 802406e:	4643      	movne	r3, r8
 8024070:	f046 7300 	orreq.w	r3, r6, #33554432	@ 0x2000000
 8024074:	f443 5300 	orreq.w	r3, r3, #8192	@ 0x2000
 8024078:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 802407a:	f7fd ff21 	bl	8021ec0 <HAL_GetTick>
 802407e:	4681      	mov	r9, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8024080:	6822      	ldr	r2, [r4, #0]
 8024082:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8024084:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8024086:	f3c3 1340 	ubfx	r3, r3, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 802408a:	f3c2 1200 	ubfx	r2, r2, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 802408e:	4313      	orrs	r3, r2
 8024090:	d01d      	beq.n	80240ce <HAL_I2C_IsDeviceReady+0xaa>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8024092:	6823      	ldr	r3, [r4, #0]
 8024094:	699a      	ldr	r2, [r3, #24]
 8024096:	f012 0a10 	ands.w	sl, r2, #16
 802409a:	d138      	bne.n	802410e <HAL_I2C_IsDeviceReady+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 802409c:	462b      	mov	r3, r5
 802409e:	4652      	mov	r2, sl
 80240a0:	2120      	movs	r1, #32
 80240a2:	4620      	mov	r0, r4
 80240a4:	f8cd 9000 	str.w	r9, [sp]
 80240a8:	f7ff fd4b 	bl	8023b42 <I2C_WaitOnFlagUntilTimeout>
 80240ac:	b328      	cbz	r0, 80240fa <HAL_I2C_IsDeviceReady+0xd6>
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80240ae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80240b0:	2b04      	cmp	r3, #4
 80240b2:	d104      	bne.n	80240be <HAL_I2C_IsDeviceReady+0x9a>
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80240b4:	2220      	movs	r2, #32
 80240b6:	6823      	ldr	r3, [r4, #0]
 80240b8:	61da      	str	r2, [r3, #28]
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80240ba:	f8c4 a044 	str.w	sl, [r4, #68]	@ 0x44
      I2C_Trials++;
 80240be:	9b03      	ldr	r3, [sp, #12]
 80240c0:	3301      	adds	r3, #1
 80240c2:	9303      	str	r3, [sp, #12]
      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 80240c4:	9b03      	ldr	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 80240c6:	9b03      	ldr	r3, [sp, #12]
 80240c8:	42bb      	cmp	r3, r7
 80240ca:	d3cc      	bcc.n	8024066 <HAL_I2C_IsDeviceReady+0x42>
 80240cc:	e009      	b.n	80240e2 <HAL_I2C_IsDeviceReady+0xbe>
        if (Timeout != HAL_MAX_DELAY)
 80240ce:	1c6b      	adds	r3, r5, #1
 80240d0:	d0d6      	beq.n	8024080 <HAL_I2C_IsDeviceReady+0x5c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80240d2:	f7fd fef5 	bl	8021ec0 <HAL_GetTick>
 80240d6:	eba0 0009 	sub.w	r0, r0, r9
 80240da:	42a8      	cmp	r0, r5
 80240dc:	d801      	bhi.n	80240e2 <HAL_I2C_IsDeviceReady+0xbe>
 80240de:	2d00      	cmp	r5, #0
 80240e0:	d1ce      	bne.n	8024080 <HAL_I2C_IsDeviceReady+0x5c>
    hi2c->State = HAL_I2C_STATE_READY;
 80240e2:	2320      	movs	r3, #32
 80240e4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80240e8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
            return HAL_ERROR;
 80240ea:	2001      	movs	r0, #1
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80240ec:	f043 0320 	orr.w	r3, r3, #32
 80240f0:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 80240f2:	2300      	movs	r3, #0
 80240f4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80240f8:	e006      	b.n	8024108 <HAL_I2C_IsDeviceReady+0xe4>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80240fa:	2320      	movs	r3, #32
 80240fc:	6822      	ldr	r2, [r4, #0]
 80240fe:	61d3      	str	r3, [r2, #28]
          hi2c->State = HAL_I2C_STATE_READY;
 8024100:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          __HAL_UNLOCK(hi2c);
 8024104:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8024108:	b004      	add	sp, #16
 802410a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802410e:	2210      	movs	r2, #16
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8024110:	2120      	movs	r1, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8024112:	61da      	str	r2, [r3, #28]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8024114:	4620      	mov	r0, r4
 8024116:	462b      	mov	r3, r5
 8024118:	2200      	movs	r2, #0
 802411a:	f8cd 9000 	str.w	r9, [sp]
 802411e:	f7ff fd10 	bl	8023b42 <I2C_WaitOnFlagUntilTimeout>
 8024122:	2800      	cmp	r0, #0
 8024124:	d1cb      	bne.n	80240be <HAL_I2C_IsDeviceReady+0x9a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8024126:	2220      	movs	r2, #32
 8024128:	6823      	ldr	r3, [r4, #0]
 802412a:	61da      	str	r2, [r3, #28]
 802412c:	e7c7      	b.n	80240be <HAL_I2C_IsDeviceReady+0x9a>
      return HAL_BUSY;
 802412e:	2002      	movs	r0, #2
 8024130:	e7ea      	b.n	8024108 <HAL_I2C_IsDeviceReady+0xe4>

08024132 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8024132:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8024134:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8024138:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 802413a:	2a20      	cmp	r2, #32
 802413c:	b2d4      	uxtb	r4, r2
 802413e:	d11c      	bne.n	802417a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8024140:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8024144:	2a01      	cmp	r2, #1
 8024146:	d018      	beq.n	802417a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8024148:	2224      	movs	r2, #36	@ 0x24
 802414a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802414e:	6802      	ldr	r2, [r0, #0]
 8024150:	6810      	ldr	r0, [r2, #0]
 8024152:	f020 0001 	bic.w	r0, r0, #1
 8024156:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8024158:	6810      	ldr	r0, [r2, #0]
 802415a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 802415e:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8024160:	6810      	ldr	r0, [r2, #0]
 8024162:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8024164:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8024166:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8024168:	6811      	ldr	r1, [r2, #0]
 802416a:	f041 0101 	orr.w	r1, r1, #1
 802416e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8024170:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8024174:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8024178:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 802417a:	2002      	movs	r0, #2
 802417c:	e7fc      	b.n	8024178 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0802417e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 802417e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8024180:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8024184:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8024186:	2a20      	cmp	r2, #32
 8024188:	b2d4      	uxtb	r4, r2
 802418a:	d11b      	bne.n	80241c4 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802418c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8024190:	2a01      	cmp	r2, #1
 8024192:	d017      	beq.n	80241c4 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8024194:	2224      	movs	r2, #36	@ 0x24
 8024196:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802419a:	6802      	ldr	r2, [r0, #0]
 802419c:	6810      	ldr	r0, [r2, #0]
 802419e:	f020 0001 	bic.w	r0, r0, #1
 80241a2:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80241a4:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80241a6:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80241aa:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80241ae:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 80241b0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80241b2:	6811      	ldr	r1, [r2, #0]
 80241b4:	f041 0101 	orr.w	r1, r1, #1
 80241b8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80241ba:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80241be:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80241c2:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80241c4:	2002      	movs	r0, #2
 80241c6:	e7fc      	b.n	80241c2 <HAL_I2CEx_ConfigDigitalFilter+0x44>

080241c8 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80241c8:	4a03      	ldr	r2, [pc, #12]	@ (80241d8 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 80241ca:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80241cc:	6813      	ldr	r3, [r2, #0]
 80241ce:	f043 0301 	orr.w	r3, r3, #1
 80241d2:	6013      	str	r3, [r2, #0]
}
 80241d4:	4770      	bx	lr
 80241d6:	bf00      	nop
 80241d8:	40030400 	.word	0x40030400

080241dc <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 80241dc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 80241de:	2302      	movs	r3, #2
 80241e0:	4c0b      	ldr	r4, [pc, #44]	@ (8024210 <HAL_ICACHE_Disable+0x34>)
 80241e2:	60e3      	str	r3, [r4, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 80241e4:	6823      	ldr	r3, [r4, #0]
 80241e6:	f023 0301 	bic.w	r3, r3, #1
 80241ea:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80241ec:	f7fd fe68 	bl	8021ec0 <HAL_GetTick>
 80241f0:	4605      	mov	r5, r0

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80241f2:	6820      	ldr	r0, [r4, #0]
 80241f4:	f010 0001 	ands.w	r0, r0, #1
 80241f8:	d100      	bne.n	80241fc <HAL_ICACHE_Disable+0x20>
      }
    }
  }

  return status;
}
 80241fa:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 80241fc:	f7fd fe60 	bl	8021ec0 <HAL_GetTick>
 8024200:	1b40      	subs	r0, r0, r5
 8024202:	2801      	cmp	r0, #1
 8024204:	d9f5      	bls.n	80241f2 <HAL_ICACHE_Disable+0x16>
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8024206:	6823      	ldr	r3, [r4, #0]
 8024208:	07db      	lsls	r3, r3, #31
 802420a:	d5f2      	bpl.n	80241f2 <HAL_ICACHE_Disable+0x16>
        status = HAL_TIMEOUT;
 802420c:	2003      	movs	r0, #3
 802420e:	e7f4      	b.n	80241fa <HAL_ICACHE_Disable+0x1e>
 8024210:	40030400 	.word	0x40030400

08024214 <HAL_IWDG_MspInit>:
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 8024214:	4770      	bx	lr

08024216 <HAL_IWDG_Init>:
{
 8024216:	b538      	push	{r3, r4, r5, lr}
  if (hiwdg == NULL)
 8024218:	4604      	mov	r4, r0
 802421a:	2800      	cmp	r0, #0
 802421c:	d042      	beq.n	80242a4 <HAL_IWDG_Init+0x8e>
  HAL_IWDG_MspInit(hiwdg);
 802421e:	f7ff fff9 	bl	8024214 <HAL_IWDG_MspInit>
  __HAL_IWDG_START(hiwdg);
 8024222:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8024226:	6823      	ldr	r3, [r4, #0]
 8024228:	601a      	str	r2, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 802422a:	f245 5255 	movw	r2, #21845	@ 0x5555
 802422e:	601a      	str	r2, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8024230:	6862      	ldr	r2, [r4, #4]
 8024232:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8024234:	68a2      	ldr	r2, [r4, #8]
 8024236:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 8024238:	f7fd fe42 	bl	8021ec0 <HAL_GetTick>
 802423c:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 802423e:	6822      	ldr	r2, [r4, #0]
 8024240:	68d3      	ldr	r3, [r2, #12]
 8024242:	0798      	lsls	r0, r3, #30
 8024244:	d412      	bmi.n	802426c <HAL_IWDG_Init+0x56>
  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 8024246:	6923      	ldr	r3, [r4, #16]
 8024248:	b9db      	cbnz	r3, 8024282 <HAL_IWDG_Init+0x6c>
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 802424a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 802424e:	6153      	str	r3, [r2, #20]
  tickstart = HAL_GetTick();
 8024250:	f7fd fe36 	bl	8021ec0 <HAL_GetTick>
 8024254:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8024256:	6823      	ldr	r3, [r4, #0]
 8024258:	68da      	ldr	r2, [r3, #12]
 802425a:	0712      	lsls	r2, r2, #28
 802425c:	d114      	bne.n	8024288 <HAL_IWDG_Init+0x72>
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 802425e:	6919      	ldr	r1, [r3, #16]
 8024260:	68e2      	ldr	r2, [r4, #12]
 8024262:	4291      	cmp	r1, r2
 8024264:	d01a      	beq.n	802429c <HAL_IWDG_Init+0x86>
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8024266:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8024268:	2000      	movs	r0, #0
 802426a:	e009      	b.n	8024280 <HAL_IWDG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 802426c:	f7fd fe28 	bl	8021ec0 <HAL_GetTick>
 8024270:	1b40      	subs	r0, r0, r5
 8024272:	2821      	cmp	r0, #33	@ 0x21
 8024274:	d9e3      	bls.n	802423e <HAL_IWDG_Init+0x28>
      if ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 8024276:	6823      	ldr	r3, [r4, #0]
 8024278:	68db      	ldr	r3, [r3, #12]
 802427a:	079b      	lsls	r3, r3, #30
 802427c:	d5df      	bpl.n	802423e <HAL_IWDG_Init+0x28>
        return HAL_TIMEOUT;
 802427e:	2003      	movs	r0, #3
}
 8024280:	bd38      	pop	{r3, r4, r5, pc}
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 8024282:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8024286:	e7e2      	b.n	802424e <HAL_IWDG_Init+0x38>
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8024288:	f7fd fe1a 	bl	8021ec0 <HAL_GetTick>
 802428c:	1b40      	subs	r0, r0, r5
 802428e:	2821      	cmp	r0, #33	@ 0x21
 8024290:	d9e1      	bls.n	8024256 <HAL_IWDG_Init+0x40>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8024292:	6823      	ldr	r3, [r4, #0]
 8024294:	68db      	ldr	r3, [r3, #12]
 8024296:	0719      	lsls	r1, r3, #28
 8024298:	d1f1      	bne.n	802427e <HAL_IWDG_Init+0x68>
 802429a:	e7dc      	b.n	8024256 <HAL_IWDG_Init+0x40>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 802429c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80242a0:	601a      	str	r2, [r3, #0]
 80242a2:	e7e1      	b.n	8024268 <HAL_IWDG_Init+0x52>
    return HAL_ERROR;
 80242a4:	2001      	movs	r0, #1
 80242a6:	e7eb      	b.n	8024280 <HAL_IWDG_Init+0x6a>

080242a8 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80242a8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80242ac:	6803      	ldr	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 80242ae:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80242b0:	601a      	str	r2, [r3, #0]
}
 80242b2:	4770      	bx	lr

080242b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80242b4:	4a02      	ldr	r2, [pc, #8]	@ (80242c0 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80242b6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80242b8:	f043 0301 	orr.w	r3, r3, #1
 80242bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80242be:	4770      	bx	lr
 80242c0:	44020800 	.word	0x44020800

080242c4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80242c4:	4b4e      	ldr	r3, [pc, #312]	@ (8024400 <HAL_RCC_GetSysClockFreq+0x13c>)
{
 80242c6:	b530      	push	{r4, r5, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80242c8:	69da      	ldr	r2, [r3, #28]
 80242ca:	f002 0218 	and.w	r2, r2, #24
 80242ce:	2a08      	cmp	r2, #8
 80242d0:	f000 808f 	beq.w	80243f2 <HAL_RCC_GetSysClockFreq+0x12e>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80242d4:	69da      	ldr	r2, [r3, #28]
 80242d6:	f012 0f18 	tst.w	r2, #24
 80242da:	d109      	bne.n	80242f0 <HAL_RCC_GetSysClockFreq+0x2c>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80242dc:	681a      	ldr	r2, [r3, #0]
 80242de:	4849      	ldr	r0, [pc, #292]	@ (8024404 <HAL_RCC_GetSysClockFreq+0x140>)
 80242e0:	f012 0f20 	tst.w	r2, #32
 80242e4:	d003      	beq.n	80242ee <HAL_RCC_GetSysClockFreq+0x2a>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80242e6:	681b      	ldr	r3, [r3, #0]
 80242e8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80242ec:	40d8      	lsrs	r0, r3
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
  }

  return sysclockfreq;
}
 80242ee:	bd30      	pop	{r4, r5, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80242f0:	69da      	ldr	r2, [r3, #28]
 80242f2:	f002 0218 	and.w	r2, r2, #24
 80242f6:	2a10      	cmp	r2, #16
 80242f8:	d07d      	beq.n	80243f6 <HAL_RCC_GetSysClockFreq+0x132>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80242fa:	69da      	ldr	r2, [r3, #28]
 80242fc:	f002 0218 	and.w	r2, r2, #24
 8024300:	2a18      	cmp	r2, #24
 8024302:	d17a      	bne.n	80243fa <HAL_RCC_GetSysClockFreq+0x136>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8024304:	6a99      	ldr	r1, [r3, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8024306:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8024308:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    if (pllm != 0U)
 802430a:	f415 5f7c 	tst.w	r5, #16128	@ 0x3f00
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 802430e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8024310:	f3c5 2005 	ubfx	r0, r5, #8, #6
    if (pllm != 0U)
 8024314:	d0eb      	beq.n	80242ee <HAL_RCC_GetSysClockFreq+0x2a>
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8024316:	f3c2 1200 	ubfx	r2, r2, #4, #1
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 802431a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 802431e:	4362      	muls	r2, r4
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8024320:	ee07 0a90 	vmov	s15, r0
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8024324:	ee06 2a90 	vmov	s13, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8024328:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 802432c:	2a01      	cmp	r2, #1
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 802432e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8024332:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8024336:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
      switch (pllsource)
 802433a:	d00f      	beq.n	802435c <HAL_RCC_GetSysClockFreq+0x98>
 802433c:	2a03      	cmp	r2, #3
 802433e:	d04a      	beq.n	80243d6 <HAL_RCC_GetSysClockFreq+0x112>
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8024340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8024342:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8024408 <HAL_RCC_GetSysClockFreq+0x144>
 8024346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802434a:	ee07 3a90 	vmov	s15, r3
 802434e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024352:	ee77 7aa6 	vadd.f32	s15, s15, s13
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8024356:	ee77 7aa5 	vadd.f32	s15, s15, s11
 802435a:	e037      	b.n	80243cc <HAL_RCC_GetSysClockFreq+0x108>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 802435c:	681a      	ldr	r2, [r3, #0]
 802435e:	0692      	lsls	r2, r2, #26
 8024360:	d527      	bpl.n	80243b2 <HAL_RCC_GetSysClockFreq+0xee>
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8024362:	6819      	ldr	r1, [r3, #0]
 8024364:	4a27      	ldr	r2, [pc, #156]	@ (8024404 <HAL_RCC_GetSysClockFreq+0x140>)
 8024366:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 802436a:	40ca      	lsrs	r2, r1
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 802436c:	ee07 2a90 	vmov	s15, r2
 8024370:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8024374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8024376:	eec6 7a07 	vdiv.f32	s15, s12, s14
 802437a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802437e:	ee07 3a10 	vmov	s14, r3
 8024382:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024386:	ee37 7a26 	vadd.f32	s14, s14, s13
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 802438a:	ee37 7a25 	vadd.f32	s14, s14, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 802438e:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8024392:	4b1b      	ldr	r3, [pc, #108]	@ (8024400 <HAL_RCC_GetSysClockFreq+0x13c>)
 8024394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8024396:	f3c3 2346 	ubfx	r3, r3, #9, #7
 802439a:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 802439c:	ee07 3a10 	vmov	s14, r3
 80243a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80243a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80243a8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80243ac:	ee17 0a90 	vmov	r0, s15
 80243b0:	e79d      	b.n	80242ee <HAL_RCC_GetSysClockFreq+0x2a>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80243b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80243b4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802440c <HAL_RCC_GetSysClockFreq+0x148>
 80243b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80243bc:	ee07 3a90 	vmov	s15, r3
 80243c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80243c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80243c8:	ee77 7aa5 	vadd.f32	s15, s15, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80243cc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80243d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
          break;
 80243d4:	e7dd      	b.n	8024392 <HAL_RCC_GetSysClockFreq+0xce>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80243d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80243d8:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8024410 <HAL_RCC_GetSysClockFreq+0x14c>
 80243dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80243e0:	ee07 3a90 	vmov	s15, r3
 80243e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80243e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80243ec:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80243f0:	e7ec      	b.n	80243cc <HAL_RCC_GetSysClockFreq+0x108>
    sysclockfreq = CSI_VALUE;
 80243f2:	4808      	ldr	r0, [pc, #32]	@ (8024414 <HAL_RCC_GetSysClockFreq+0x150>)
 80243f4:	e77b      	b.n	80242ee <HAL_RCC_GetSysClockFreq+0x2a>
    sysclockfreq = HSE_VALUE;
 80243f6:	4808      	ldr	r0, [pc, #32]	@ (8024418 <HAL_RCC_GetSysClockFreq+0x154>)
 80243f8:	e779      	b.n	80242ee <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = (uint32_t) HSI_VALUE;
 80243fa:	4802      	ldr	r0, [pc, #8]	@ (8024404 <HAL_RCC_GetSysClockFreq+0x140>)
  return sysclockfreq;
 80243fc:	e777      	b.n	80242ee <HAL_RCC_GetSysClockFreq+0x2a>
 80243fe:	bf00      	nop
 8024400:	44020c00 	.word	0x44020c00
 8024404:	03d09000 	.word	0x03d09000
 8024408:	4a742400 	.word	0x4a742400
 802440c:	4c742400 	.word	0x4c742400
 8024410:	4b371b00 	.word	0x4b371b00
 8024414:	003d0900 	.word	0x003d0900
 8024418:	00b71b00 	.word	0x00b71b00

0802441c <HAL_RCC_ClockConfig>:
{
 802441c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024420:	460d      	mov	r5, r1
  if (pClkInitStruct == NULL)
 8024422:	4604      	mov	r4, r0
 8024424:	b910      	cbnz	r0, 802442c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8024426:	2001      	movs	r0, #1
}
 8024428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 802442c:	4a86      	ldr	r2, [pc, #536]	@ (8024648 <HAL_RCC_ClockConfig+0x22c>)
 802442e:	6813      	ldr	r3, [r2, #0]
 8024430:	f003 030f 	and.w	r3, r3, #15
 8024434:	428b      	cmp	r3, r1
 8024436:	d36f      	bcc.n	8024518 <HAL_RCC_ClockConfig+0xfc>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8024438:	6823      	ldr	r3, [r4, #0]
 802443a:	06de      	lsls	r6, r3, #27
 802443c:	d478      	bmi.n	8024530 <HAL_RCC_ClockConfig+0x114>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802443e:	0718      	lsls	r0, r3, #28
 8024440:	d50d      	bpl.n	802445e <HAL_RCC_ClockConfig+0x42>
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8024442:	4982      	ldr	r1, [pc, #520]	@ (802464c <HAL_RCC_ClockConfig+0x230>)
 8024444:	6920      	ldr	r0, [r4, #16]
 8024446:	6a0a      	ldr	r2, [r1, #32]
 8024448:	0912      	lsrs	r2, r2, #4
 802444a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 802444e:	4290      	cmp	r0, r2
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8024450:	bf81      	itttt	hi
 8024452:	6a0a      	ldrhi	r2, [r1, #32]
 8024454:	f422 62e0 	bichi.w	r2, r2, #1792	@ 0x700
 8024458:	ea42 1200 	orrhi.w	r2, r2, r0, lsl #4
 802445c:	620a      	strhi	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802445e:	0759      	lsls	r1, r3, #29
 8024460:	d50b      	bpl.n	802447a <HAL_RCC_ClockConfig+0x5e>
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8024462:	497a      	ldr	r1, [pc, #488]	@ (802464c <HAL_RCC_ClockConfig+0x230>)
 8024464:	68e0      	ldr	r0, [r4, #12]
 8024466:	6a0a      	ldr	r2, [r1, #32]
 8024468:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 802446c:	4290      	cmp	r0, r2
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 802446e:	bf81      	itttt	hi
 8024470:	6a0a      	ldrhi	r2, [r1, #32]
 8024472:	f022 0270 	bichi.w	r2, r2, #112	@ 0x70
 8024476:	4302      	orrhi	r2, r0
 8024478:	620a      	strhi	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802447a:	079a      	lsls	r2, r3, #30
 802447c:	d50b      	bpl.n	8024496 <HAL_RCC_ClockConfig+0x7a>
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 802447e:	4973      	ldr	r1, [pc, #460]	@ (802464c <HAL_RCC_ClockConfig+0x230>)
 8024480:	68a0      	ldr	r0, [r4, #8]
 8024482:	6a0a      	ldr	r2, [r1, #32]
 8024484:	f002 020f 	and.w	r2, r2, #15
 8024488:	4290      	cmp	r0, r2
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 802448a:	bf81      	itttt	hi
 802448c:	6a0a      	ldrhi	r2, [r1, #32]
 802448e:	f022 020f 	bichi.w	r2, r2, #15
 8024492:	4302      	orrhi	r2, r0
 8024494:	620a      	strhi	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8024496:	07df      	lsls	r7, r3, #31
 8024498:	d459      	bmi.n	802454e <HAL_RCC_ClockConfig+0x132>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802449a:	6822      	ldr	r2, [r4, #0]
 802449c:	0796      	lsls	r6, r2, #30
 802449e:	f100 80ac 	bmi.w	80245fa <HAL_RCC_ClockConfig+0x1de>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80244a2:	4969      	ldr	r1, [pc, #420]	@ (8024648 <HAL_RCC_ClockConfig+0x22c>)
 80244a4:	680b      	ldr	r3, [r1, #0]
 80244a6:	f003 030f 	and.w	r3, r3, #15
 80244aa:	42ab      	cmp	r3, r5
 80244ac:	f200 80b2 	bhi.w	8024614 <HAL_RCC_ClockConfig+0x1f8>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80244b0:	0750      	lsls	r0, r2, #29
 80244b2:	f100 80bb 	bmi.w	802462c <HAL_RCC_ClockConfig+0x210>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80244b6:	0711      	lsls	r1, r2, #28
 80244b8:	d50d      	bpl.n	80244d6 <HAL_RCC_ClockConfig+0xba>
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80244ba:	4964      	ldr	r1, [pc, #400]	@ (802464c <HAL_RCC_ClockConfig+0x230>)
 80244bc:	6920      	ldr	r0, [r4, #16]
 80244be:	6a0b      	ldr	r3, [r1, #32]
 80244c0:	091b      	lsrs	r3, r3, #4
 80244c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80244c6:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80244c8:	bf3f      	itttt	cc
 80244ca:	6a0b      	ldrcc	r3, [r1, #32]
 80244cc:	f423 63e0 	biccc.w	r3, r3, #1792	@ 0x700
 80244d0:	ea43 1300 	orrcc.w	r3, r3, r0, lsl #4
 80244d4:	620b      	strcc	r3, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80244d6:	06d3      	lsls	r3, r2, #27
 80244d8:	d50d      	bpl.n	80244f6 <HAL_RCC_ClockConfig+0xda>
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80244da:	4a5c      	ldr	r2, [pc, #368]	@ (802464c <HAL_RCC_ClockConfig+0x230>)
 80244dc:	6961      	ldr	r1, [r4, #20]
 80244de:	6a13      	ldr	r3, [r2, #32]
 80244e0:	0a1b      	lsrs	r3, r3, #8
 80244e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80244e6:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80244e8:	bf3f      	itttt	cc
 80244ea:	6a13      	ldrcc	r3, [r2, #32]
 80244ec:	f423 43e0 	biccc.w	r3, r3, #28672	@ 0x7000
 80244f0:	ea43 2301 	orrcc.w	r3, r3, r1, lsl #8
 80244f4:	6213      	strcc	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80244f6:	f7ff fee5 	bl	80242c4 <HAL_RCC_GetSysClockFreq>
}
 80244fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80244fe:	4b53      	ldr	r3, [pc, #332]	@ (802464c <HAL_RCC_ClockConfig+0x230>)
 8024500:	4a53      	ldr	r2, [pc, #332]	@ (8024650 <HAL_RCC_ClockConfig+0x234>)
 8024502:	6a1b      	ldr	r3, [r3, #32]
 8024504:	f003 030f 	and.w	r3, r3, #15
 8024508:	5cd3      	ldrb	r3, [r2, r3]
 802450a:	40d8      	lsrs	r0, r3
 802450c:	4b51      	ldr	r3, [pc, #324]	@ (8024654 <HAL_RCC_ClockConfig+0x238>)
 802450e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8024510:	4b51      	ldr	r3, [pc, #324]	@ (8024658 <HAL_RCC_ClockConfig+0x23c>)
 8024512:	6818      	ldr	r0, [r3, #0]
 8024514:	f7fd bc5c 	b.w	8021dd0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024518:	6813      	ldr	r3, [r2, #0]
 802451a:	f023 030f 	bic.w	r3, r3, #15
 802451e:	430b      	orrs	r3, r1
 8024520:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8024522:	6813      	ldr	r3, [r2, #0]
 8024524:	f003 030f 	and.w	r3, r3, #15
 8024528:	428b      	cmp	r3, r1
 802452a:	f47f af7c 	bne.w	8024426 <HAL_RCC_ClockConfig+0xa>
 802452e:	e783      	b.n	8024438 <HAL_RCC_ClockConfig+0x1c>
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8024530:	4946      	ldr	r1, [pc, #280]	@ (802464c <HAL_RCC_ClockConfig+0x230>)
 8024532:	6960      	ldr	r0, [r4, #20]
 8024534:	6a0a      	ldr	r2, [r1, #32]
 8024536:	0a12      	lsrs	r2, r2, #8
 8024538:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 802453c:	4290      	cmp	r0, r2
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 802453e:	bf81      	itttt	hi
 8024540:	6a0a      	ldrhi	r2, [r1, #32]
 8024542:	f422 42e0 	bichi.w	r2, r2, #28672	@ 0x7000
 8024546:	ea42 2200 	orrhi.w	r2, r2, r0, lsl #8
 802454a:	620a      	strhi	r2, [r1, #32]
 802454c:	e777      	b.n	802443e <HAL_RCC_ClockConfig+0x22>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802454e:	6861      	ldr	r1, [r4, #4]
 8024550:	4b3e      	ldr	r3, [pc, #248]	@ (802464c <HAL_RCC_ClockConfig+0x230>)
 8024552:	2903      	cmp	r1, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8024554:	681a      	ldr	r2, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8024556:	d11d      	bne.n	8024594 <HAL_RCC_ClockConfig+0x178>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8024558:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 802455c:	f43f af63 	beq.w	8024426 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8024560:	69da      	ldr	r2, [r3, #28]
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8024562:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8024566:	f022 0203 	bic.w	r2, r2, #3
 802456a:	430a      	orrs	r2, r1
 802456c:	61da      	str	r2, [r3, #28]
    tickstart = HAL_GetTick();
 802456e:	f7fd fca7 	bl	8021ec0 <HAL_GetTick>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8024572:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8024574:	4606      	mov	r6, r0
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8024576:	2b03      	cmp	r3, #3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8024578:	4f34      	ldr	r7, [pc, #208]	@ (802464c <HAL_RCC_ClockConfig+0x230>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802457a:	d118      	bne.n	80245ae <HAL_RCC_ClockConfig+0x192>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 802457c:	69fb      	ldr	r3, [r7, #28]
 802457e:	f003 0318 	and.w	r3, r3, #24
 8024582:	2b18      	cmp	r3, #24
 8024584:	d089      	beq.n	802449a <HAL_RCC_ClockConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8024586:	f7fd fc9b 	bl	8021ec0 <HAL_GetTick>
 802458a:	1b80      	subs	r0, r0, r6
 802458c:	4540      	cmp	r0, r8
 802458e:	d9f5      	bls.n	802457c <HAL_RCC_ClockConfig+0x160>
          return HAL_TIMEOUT;
 8024590:	2003      	movs	r0, #3
 8024592:	e749      	b.n	8024428 <HAL_RCC_ClockConfig+0xc>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8024594:	2902      	cmp	r1, #2
 8024596:	d102      	bne.n	802459e <HAL_RCC_ClockConfig+0x182>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8024598:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 802459c:	e7de      	b.n	802455c <HAL_RCC_ClockConfig+0x140>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 802459e:	2901      	cmp	r1, #1
 80245a0:	d102      	bne.n	80245a8 <HAL_RCC_ClockConfig+0x18c>
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80245a2:	f412 7f00 	tst.w	r2, #512	@ 0x200
 80245a6:	e7d9      	b.n	802455c <HAL_RCC_ClockConfig+0x140>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80245a8:	f012 0f02 	tst.w	r2, #2
 80245ac:	e7d6      	b.n	802455c <HAL_RCC_ClockConfig+0x140>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80245ae:	2b02      	cmp	r3, #2
 80245b0:	d10b      	bne.n	80245ca <HAL_RCC_ClockConfig+0x1ae>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80245b2:	69fb      	ldr	r3, [r7, #28]
 80245b4:	f003 0318 	and.w	r3, r3, #24
 80245b8:	2b10      	cmp	r3, #16
 80245ba:	f43f af6e 	beq.w	802449a <HAL_RCC_ClockConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80245be:	f7fd fc7f 	bl	8021ec0 <HAL_GetTick>
 80245c2:	1b80      	subs	r0, r0, r6
 80245c4:	4540      	cmp	r0, r8
 80245c6:	d9f4      	bls.n	80245b2 <HAL_RCC_ClockConfig+0x196>
 80245c8:	e7e2      	b.n	8024590 <HAL_RCC_ClockConfig+0x174>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80245ca:	2b01      	cmp	r3, #1
 80245cc:	d110      	bne.n	80245f0 <HAL_RCC_ClockConfig+0x1d4>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80245ce:	69fb      	ldr	r3, [r7, #28]
 80245d0:	f003 0318 	and.w	r3, r3, #24
 80245d4:	2b08      	cmp	r3, #8
 80245d6:	f43f af60 	beq.w	802449a <HAL_RCC_ClockConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80245da:	f7fd fc71 	bl	8021ec0 <HAL_GetTick>
 80245de:	1b80      	subs	r0, r0, r6
 80245e0:	4540      	cmp	r0, r8
 80245e2:	d9f4      	bls.n	80245ce <HAL_RCC_ClockConfig+0x1b2>
 80245e4:	e7d4      	b.n	8024590 <HAL_RCC_ClockConfig+0x174>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80245e6:	f7fd fc6b 	bl	8021ec0 <HAL_GetTick>
 80245ea:	1b80      	subs	r0, r0, r6
 80245ec:	4540      	cmp	r0, r8
 80245ee:	d8cf      	bhi.n	8024590 <HAL_RCC_ClockConfig+0x174>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80245f0:	69fb      	ldr	r3, [r7, #28]
 80245f2:	f013 0f18 	tst.w	r3, #24
 80245f6:	d1f6      	bne.n	80245e6 <HAL_RCC_ClockConfig+0x1ca>
 80245f8:	e74f      	b.n	802449a <HAL_RCC_ClockConfig+0x7e>
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80245fa:	4914      	ldr	r1, [pc, #80]	@ (802464c <HAL_RCC_ClockConfig+0x230>)
 80245fc:	68a0      	ldr	r0, [r4, #8]
 80245fe:	6a0b      	ldr	r3, [r1, #32]
 8024600:	f003 030f 	and.w	r3, r3, #15
 8024604:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8024606:	bf3f      	itttt	cc
 8024608:	6a0b      	ldrcc	r3, [r1, #32]
 802460a:	f023 030f 	biccc.w	r3, r3, #15
 802460e:	4303      	orrcc	r3, r0
 8024610:	620b      	strcc	r3, [r1, #32]
 8024612:	e746      	b.n	80244a2 <HAL_RCC_ClockConfig+0x86>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024614:	680b      	ldr	r3, [r1, #0]
 8024616:	f023 030f 	bic.w	r3, r3, #15
 802461a:	432b      	orrs	r3, r5
 802461c:	600b      	str	r3, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802461e:	680b      	ldr	r3, [r1, #0]
 8024620:	f003 030f 	and.w	r3, r3, #15
 8024624:	42ab      	cmp	r3, r5
 8024626:	f47f aefe 	bne.w	8024426 <HAL_RCC_ClockConfig+0xa>
 802462a:	e741      	b.n	80244b0 <HAL_RCC_ClockConfig+0x94>
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 802462c:	4907      	ldr	r1, [pc, #28]	@ (802464c <HAL_RCC_ClockConfig+0x230>)
 802462e:	68e0      	ldr	r0, [r4, #12]
 8024630:	6a0b      	ldr	r3, [r1, #32]
 8024632:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8024636:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8024638:	bf3f      	itttt	cc
 802463a:	6a0b      	ldrcc	r3, [r1, #32]
 802463c:	f023 0370 	biccc.w	r3, r3, #112	@ 0x70
 8024640:	4303      	orrcc	r3, r0
 8024642:	620b      	strcc	r3, [r1, #32]
 8024644:	e737      	b.n	80244b6 <HAL_RCC_ClockConfig+0x9a>
 8024646:	bf00      	nop
 8024648:	40022000 	.word	0x40022000
 802464c:	44020c00 	.word	0x44020c00
 8024650:	0802c454 	.word	0x0802c454
 8024654:	20000000 	.word	0x20000000
 8024658:	20000008 	.word	0x20000008

0802465c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802465c:	b508      	push	{r3, lr}

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 802465e:	f7ff fe31 	bl	80242c4 <HAL_RCC_GetSysClockFreq>
 8024662:	4b06      	ldr	r3, [pc, #24]	@ (802467c <HAL_RCC_GetHCLKFreq+0x20>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8024664:	4a06      	ldr	r2, [pc, #24]	@ (8024680 <HAL_RCC_GetHCLKFreq+0x24>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8024666:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8024668:	f003 030f 	and.w	r3, r3, #15
 802466c:	5cd3      	ldrb	r3, [r2, r3]
 802466e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8024672:	40d8      	lsrs	r0, r3
 8024674:	4b03      	ldr	r3, [pc, #12]	@ (8024684 <HAL_RCC_GetHCLKFreq+0x28>)
 8024676:	6018      	str	r0, [r3, #0]

  return SystemCoreClock;
}
 8024678:	bd08      	pop	{r3, pc}
 802467a:	bf00      	nop
 802467c:	44020c00 	.word	0x44020c00
 8024680:	0802c454 	.word	0x0802c454
 8024684:	20000000 	.word	0x20000000

08024688 <HAL_RCC_OscConfig>:
{
 8024688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pOscInitStruct == NULL)
 802468c:	4604      	mov	r4, r0
 802468e:	2800      	cmp	r0, #0
 8024690:	d06a      	beq.n	8024768 <HAL_RCC_OscConfig+0xe0>
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8024692:	4b99      	ldr	r3, [pc, #612]	@ (80248f8 <HAL_RCC_OscConfig+0x270>)
 8024694:	69de      	ldr	r6, [r3, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8024696:	6a9f      	ldr	r7, [r3, #40]	@ 0x28
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8024698:	6803      	ldr	r3, [r0, #0]
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802469a:	f006 0618 	and.w	r6, r6, #24
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 802469e:	06da      	lsls	r2, r3, #27
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80246a0:	f007 0703 	and.w	r7, r7, #3
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80246a4:	d510      	bpl.n	80246c8 <HAL_RCC_OscConfig+0x40>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80246a6:	2e08      	cmp	r6, #8
 80246a8:	69c3      	ldr	r3, [r0, #28]
 80246aa:	d003      	beq.n	80246b4 <HAL_RCC_OscConfig+0x2c>
 80246ac:	2e18      	cmp	r6, #24
 80246ae:	d124      	bne.n	80246fa <HAL_RCC_OscConfig+0x72>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80246b0:	2f02      	cmp	r7, #2
 80246b2:	d122      	bne.n	80246fa <HAL_RCC_OscConfig+0x72>
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80246b4:	2b00      	cmp	r3, #0
 80246b6:	d057      	beq.n	8024768 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80246b8:	4a8f      	ldr	r2, [pc, #572]	@ (80248f8 <HAL_RCC_OscConfig+0x270>)
 80246ba:	6a21      	ldr	r1, [r4, #32]
 80246bc:	6993      	ldr	r3, [r2, #24]
 80246be:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80246c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80246c6:	6193      	str	r3, [r2, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80246c8:	6823      	ldr	r3, [r4, #0]
 80246ca:	07d9      	lsls	r1, r3, #31
 80246cc:	d443      	bmi.n	8024756 <HAL_RCC_OscConfig+0xce>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80246ce:	6823      	ldr	r3, [r4, #0]
 80246d0:	079a      	lsls	r2, r3, #30
 80246d2:	f100 809e 	bmi.w	8024812 <HAL_RCC_OscConfig+0x18a>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80246d6:	6823      	ldr	r3, [r4, #0]
 80246d8:	071d      	lsls	r5, r3, #28
 80246da:	f100 80f6 	bmi.w	80248ca <HAL_RCC_OscConfig+0x242>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80246de:	6823      	ldr	r3, [r4, #0]
 80246e0:	0758      	lsls	r0, r3, #29
 80246e2:	f100 8121 	bmi.w	8024928 <HAL_RCC_OscConfig+0x2a0>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80246e6:	6823      	ldr	r3, [r4, #0]
 80246e8:	069b      	lsls	r3, r3, #26
 80246ea:	f100 819a 	bmi.w	8024a22 <HAL_RCC_OscConfig+0x39a>
  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80246ee:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80246f0:	2900      	cmp	r1, #0
 80246f2:	f040 81bb 	bne.w	8024a6c <HAL_RCC_OscConfig+0x3e4>
  return HAL_OK;
 80246f6:	2000      	movs	r0, #0
 80246f8:	e01a      	b.n	8024730 <HAL_RCC_OscConfig+0xa8>
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80246fa:	4d7f      	ldr	r5, [pc, #508]	@ (80248f8 <HAL_RCC_OscConfig+0x270>)
 80246fc:	b1d3      	cbz	r3, 8024734 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_CSI_ENABLE();
 80246fe:	682b      	ldr	r3, [r5, #0]
 8024700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8024704:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8024706:	f7fd fbdb 	bl	8021ec0 <HAL_GetTick>
 802470a:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 802470c:	682b      	ldr	r3, [r5, #0]
 802470e:	059b      	lsls	r3, r3, #22
 8024710:	d507      	bpl.n	8024722 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8024712:	69ab      	ldr	r3, [r5, #24]
 8024714:	6a22      	ldr	r2, [r4, #32]
 8024716:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 802471a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802471e:	61ab      	str	r3, [r5, #24]
 8024720:	e7d2      	b.n	80246c8 <HAL_RCC_OscConfig+0x40>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8024722:	f7fd fbcd 	bl	8021ec0 <HAL_GetTick>
 8024726:	eba0 0008 	sub.w	r0, r0, r8
 802472a:	2802      	cmp	r0, #2
 802472c:	d9ee      	bls.n	802470c <HAL_RCC_OscConfig+0x84>
            return HAL_TIMEOUT;
 802472e:	2003      	movs	r0, #3
}
 8024730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_CSI_DISABLE();
 8024734:	682b      	ldr	r3, [r5, #0]
 8024736:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 802473a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 802473c:	f7fd fbc0 	bl	8021ec0 <HAL_GetTick>
 8024740:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8024742:	682b      	ldr	r3, [r5, #0]
 8024744:	0598      	lsls	r0, r3, #22
 8024746:	d5bf      	bpl.n	80246c8 <HAL_RCC_OscConfig+0x40>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8024748:	f7fd fbba 	bl	8021ec0 <HAL_GetTick>
 802474c:	eba0 0008 	sub.w	r0, r0, r8
 8024750:	2802      	cmp	r0, #2
 8024752:	d9f6      	bls.n	8024742 <HAL_RCC_OscConfig+0xba>
 8024754:	e7eb      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8024756:	2e10      	cmp	r6, #16
 8024758:	6863      	ldr	r3, [r4, #4]
 802475a:	d003      	beq.n	8024764 <HAL_RCC_OscConfig+0xdc>
 802475c:	2e18      	cmp	r6, #24
 802475e:	d105      	bne.n	802476c <HAL_RCC_OscConfig+0xe4>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8024760:	2f03      	cmp	r7, #3
 8024762:	d103      	bne.n	802476c <HAL_RCC_OscConfig+0xe4>
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8024764:	2b00      	cmp	r3, #0
 8024766:	d1b2      	bne.n	80246ce <HAL_RCC_OscConfig+0x46>
    return HAL_ERROR;
 8024768:	2001      	movs	r0, #1
 802476a:	e7e1      	b.n	8024730 <HAL_RCC_OscConfig+0xa8>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 802476c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024770:	4d61      	ldr	r5, [pc, #388]	@ (80248f8 <HAL_RCC_OscConfig+0x270>)
 8024772:	d112      	bne.n	802479a <HAL_RCC_OscConfig+0x112>
 8024774:	682b      	ldr	r3, [r5, #0]
 8024776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802477a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 802477c:	f7fd fba0 	bl	8021ec0 <HAL_GetTick>
 8024780:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8024782:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 80248f8 <HAL_RCC_OscConfig+0x270>
 8024786:	f8d8 3000 	ldr.w	r3, [r8]
 802478a:	039b      	lsls	r3, r3, #14
 802478c:	d49f      	bmi.n	80246ce <HAL_RCC_OscConfig+0x46>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 802478e:	f7fd fb97 	bl	8021ec0 <HAL_GetTick>
 8024792:	1b40      	subs	r0, r0, r5
 8024794:	2864      	cmp	r0, #100	@ 0x64
 8024796:	d9f6      	bls.n	8024786 <HAL_RCC_OscConfig+0xfe>
 8024798:	e7c9      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 802479a:	b9c3      	cbnz	r3, 80247ce <HAL_RCC_OscConfig+0x146>
 802479c:	682b      	ldr	r3, [r5, #0]
 802479e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80247a2:	602b      	str	r3, [r5, #0]
 80247a4:	682b      	ldr	r3, [r5, #0]
 80247a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80247aa:	602b      	str	r3, [r5, #0]
 80247ac:	682b      	ldr	r3, [r5, #0]
 80247ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80247b2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80247b4:	f7fd fb84 	bl	8021ec0 <HAL_GetTick>
 80247b8:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80247ba:	682b      	ldr	r3, [r5, #0]
 80247bc:	0398      	lsls	r0, r3, #14
 80247be:	d586      	bpl.n	80246ce <HAL_RCC_OscConfig+0x46>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80247c0:	f7fd fb7e 	bl	8021ec0 <HAL_GetTick>
 80247c4:	eba0 0008 	sub.w	r0, r0, r8
 80247c8:	2864      	cmp	r0, #100	@ 0x64
 80247ca:	d9f6      	bls.n	80247ba <HAL_RCC_OscConfig+0x132>
 80247cc:	e7af      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80247ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80247d2:	d108      	bne.n	80247e6 <HAL_RCC_OscConfig+0x15e>
 80247d4:	682b      	ldr	r3, [r5, #0]
 80247d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80247da:	602b      	str	r3, [r5, #0]
 80247dc:	682b      	ldr	r3, [r5, #0]
 80247de:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80247e2:	602b      	str	r3, [r5, #0]
 80247e4:	e7c6      	b.n	8024774 <HAL_RCC_OscConfig+0xec>
 80247e6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80247ea:	682b      	ldr	r3, [r5, #0]
 80247ec:	d106      	bne.n	80247fc <HAL_RCC_OscConfig+0x174>
 80247ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80247f2:	602b      	str	r3, [r5, #0]
 80247f4:	682b      	ldr	r3, [r5, #0]
 80247f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80247fa:	e7f2      	b.n	80247e2 <HAL_RCC_OscConfig+0x15a>
 80247fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8024800:	602b      	str	r3, [r5, #0]
 8024802:	682b      	ldr	r3, [r5, #0]
 8024804:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8024808:	602b      	str	r3, [r5, #0]
 802480a:	682b      	ldr	r3, [r5, #0]
 802480c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8024810:	e7b3      	b.n	802477a <HAL_RCC_OscConfig+0xf2>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8024812:	68e3      	ldr	r3, [r4, #12]
 8024814:	b11e      	cbz	r6, 802481e <HAL_RCC_OscConfig+0x196>
 8024816:	2e18      	cmp	r6, #24
 8024818:	d12e      	bne.n	8024878 <HAL_RCC_OscConfig+0x1f0>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 802481a:	2f01      	cmp	r7, #1
 802481c:	d12c      	bne.n	8024878 <HAL_RCC_OscConfig+0x1f0>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 802481e:	2b00      	cmp	r3, #0
 8024820:	d0a2      	beq.n	8024768 <HAL_RCC_OscConfig+0xe0>
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8024822:	b176      	cbz	r6, 8024842 <HAL_RCC_OscConfig+0x1ba>
        tickstart = HAL_GetTick();
 8024824:	f7fd fb4c 	bl	8021ec0 <HAL_GetTick>
 8024828:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 802482a:	4d33      	ldr	r5, [pc, #204]	@ (80248f8 <HAL_RCC_OscConfig+0x270>)
 802482c:	682b      	ldr	r3, [r5, #0]
 802482e:	0799      	lsls	r1, r3, #30
 8024830:	d51c      	bpl.n	802486c <HAL_RCC_OscConfig+0x1e4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8024832:	692b      	ldr	r3, [r5, #16]
 8024834:	6962      	ldr	r2, [r4, #20]
 8024836:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 802483a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802483e:	612b      	str	r3, [r5, #16]
 8024840:	e749      	b.n	80246d6 <HAL_RCC_OscConfig+0x4e>
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8024842:	4a2d      	ldr	r2, [pc, #180]	@ (80248f8 <HAL_RCC_OscConfig+0x270>)
 8024844:	6921      	ldr	r1, [r4, #16]
 8024846:	6813      	ldr	r3, [r2, #0]
 8024848:	f003 0318 	and.w	r3, r3, #24
 802484c:	428b      	cmp	r3, r1
 802484e:	d0e9      	beq.n	8024824 <HAL_RCC_OscConfig+0x19c>
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8024850:	6813      	ldr	r3, [r2, #0]
 8024852:	f023 0318 	bic.w	r3, r3, #24
 8024856:	430b      	orrs	r3, r1
 8024858:	6013      	str	r3, [r2, #0]
            (void) HAL_RCC_GetHCLKFreq();
 802485a:	f7ff feff 	bl	802465c <HAL_RCC_GetHCLKFreq>
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 802485e:	4b27      	ldr	r3, [pc, #156]	@ (80248fc <HAL_RCC_OscConfig+0x274>)
 8024860:	6818      	ldr	r0, [r3, #0]
 8024862:	f7fd fab5 	bl	8021dd0 <HAL_InitTick>
 8024866:	2800      	cmp	r0, #0
 8024868:	d0dc      	beq.n	8024824 <HAL_RCC_OscConfig+0x19c>
 802486a:	e77d      	b.n	8024768 <HAL_RCC_OscConfig+0xe0>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 802486c:	f7fd fb28 	bl	8021ec0 <HAL_GetTick>
 8024870:	1bc0      	subs	r0, r0, r7
 8024872:	2802      	cmp	r0, #2
 8024874:	d9da      	bls.n	802482c <HAL_RCC_OscConfig+0x1a4>
 8024876:	e75a      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8024878:	4d1f      	ldr	r5, [pc, #124]	@ (80248f8 <HAL_RCC_OscConfig+0x270>)
 802487a:	b1ab      	cbz	r3, 80248a8 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 802487c:	682b      	ldr	r3, [r5, #0]
 802487e:	6922      	ldr	r2, [r4, #16]
 8024880:	f023 0318 	bic.w	r3, r3, #24
 8024884:	4313      	orrs	r3, r2
 8024886:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8024888:	682b      	ldr	r3, [r5, #0]
 802488a:	f043 0301 	orr.w	r3, r3, #1
 802488e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8024890:	f7fd fb16 	bl	8021ec0 <HAL_GetTick>
 8024894:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8024896:	682b      	ldr	r3, [r5, #0]
 8024898:	079a      	lsls	r2, r3, #30
 802489a:	d4ca      	bmi.n	8024832 <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 802489c:	f7fd fb10 	bl	8021ec0 <HAL_GetTick>
 80248a0:	1bc0      	subs	r0, r0, r7
 80248a2:	2802      	cmp	r0, #2
 80248a4:	d9f7      	bls.n	8024896 <HAL_RCC_OscConfig+0x20e>
 80248a6:	e742      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_HSI_DISABLE();
 80248a8:	682b      	ldr	r3, [r5, #0]
 80248aa:	f023 0301 	bic.w	r3, r3, #1
 80248ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80248b0:	f7fd fb06 	bl	8021ec0 <HAL_GetTick>
 80248b4:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80248b6:	682b      	ldr	r3, [r5, #0]
 80248b8:	079b      	lsls	r3, r3, #30
 80248ba:	f57f af0c 	bpl.w	80246d6 <HAL_RCC_OscConfig+0x4e>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80248be:	f7fd faff 	bl	8021ec0 <HAL_GetTick>
 80248c2:	1bc0      	subs	r0, r0, r7
 80248c4:	2802      	cmp	r0, #2
 80248c6:	d9f6      	bls.n	80248b6 <HAL_RCC_OscConfig+0x22e>
 80248c8:	e731      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80248ca:	69a3      	ldr	r3, [r4, #24]
 80248cc:	4d0a      	ldr	r5, [pc, #40]	@ (80248f8 <HAL_RCC_OscConfig+0x270>)
 80248ce:	b1bb      	cbz	r3, 8024900 <HAL_RCC_OscConfig+0x278>
      __HAL_RCC_LSI_ENABLE();
 80248d0:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 80248d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80248d8:	f8c5 30f0 	str.w	r3, [r5, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 80248dc:	f7fd faf0 	bl	8021ec0 <HAL_GetTick>
 80248e0:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80248e2:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 80248e6:	0119      	lsls	r1, r3, #4
 80248e8:	f53f aef9 	bmi.w	80246de <HAL_RCC_OscConfig+0x56>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80248ec:	f7fd fae8 	bl	8021ec0 <HAL_GetTick>
 80248f0:	1bc0      	subs	r0, r0, r7
 80248f2:	2802      	cmp	r0, #2
 80248f4:	d9f5      	bls.n	80248e2 <HAL_RCC_OscConfig+0x25a>
 80248f6:	e71a      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
 80248f8:	44020c00 	.word	0x44020c00
 80248fc:	20000008 	.word	0x20000008
      __HAL_RCC_LSI_DISABLE();
 8024900:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 8024904:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8024908:	f8c5 30f0 	str.w	r3, [r5, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 802490c:	f7fd fad8 	bl	8021ec0 <HAL_GetTick>
 8024910:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8024912:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 8024916:	011a      	lsls	r2, r3, #4
 8024918:	f57f aee1 	bpl.w	80246de <HAL_RCC_OscConfig+0x56>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 802491c:	f7fd fad0 	bl	8021ec0 <HAL_GetTick>
 8024920:	1bc0      	subs	r0, r0, r7
 8024922:	2802      	cmp	r0, #2
 8024924:	d9f5      	bls.n	8024912 <HAL_RCC_OscConfig+0x28a>
 8024926:	e702      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8024928:	4daf      	ldr	r5, [pc, #700]	@ (8024be8 <HAL_RCC_OscConfig+0x560>)
 802492a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802492c:	07df      	lsls	r7, r3, #31
 802492e:	d51a      	bpl.n	8024966 <HAL_RCC_OscConfig+0x2de>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8024930:	68a3      	ldr	r3, [r4, #8]
 8024932:	4dae      	ldr	r5, [pc, #696]	@ (8024bec <HAL_RCC_OscConfig+0x564>)
 8024934:	2b01      	cmp	r3, #1
 8024936:	d126      	bne.n	8024986 <HAL_RCC_OscConfig+0x2fe>
 8024938:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 802493c:	f043 0301 	orr.w	r3, r3, #1
 8024940:	f8c5 30f0 	str.w	r3, [r5, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8024944:	f7fd fabc 	bl	8021ec0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8024948:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 802494c:	4605      	mov	r5, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 802494e:	4fa7      	ldr	r7, [pc, #668]	@ (8024bec <HAL_RCC_OscConfig+0x564>)
 8024950:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8024954:	0799      	lsls	r1, r3, #30
 8024956:	f53f aec6 	bmi.w	80246e6 <HAL_RCC_OscConfig+0x5e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802495a:	f7fd fab1 	bl	8021ec0 <HAL_GetTick>
 802495e:	1b40      	subs	r0, r0, r5
 8024960:	4540      	cmp	r0, r8
 8024962:	d9f5      	bls.n	8024950 <HAL_RCC_OscConfig+0x2c8>
 8024964:	e6e3      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8024966:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8024968:	f043 0301 	orr.w	r3, r3, #1
 802496c:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 802496e:	f7fd faa7 	bl	8021ec0 <HAL_GetTick>
 8024972:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8024974:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8024976:	07d8      	lsls	r0, r3, #31
 8024978:	d4da      	bmi.n	8024930 <HAL_RCC_OscConfig+0x2a8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802497a:	f7fd faa1 	bl	8021ec0 <HAL_GetTick>
 802497e:	1bc0      	subs	r0, r0, r7
 8024980:	2802      	cmp	r0, #2
 8024982:	d9f7      	bls.n	8024974 <HAL_RCC_OscConfig+0x2ec>
 8024984:	e6d3      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8024986:	bb0b      	cbnz	r3, 80249cc <HAL_RCC_OscConfig+0x344>
 8024988:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802498c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8024990:	f023 0301 	bic.w	r3, r3, #1
 8024994:	f8c5 30f0 	str.w	r3, [r5, #240]	@ 0xf0
 8024998:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 802499c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80249a0:	f8c5 30f0 	str.w	r3, [r5, #240]	@ 0xf0
 80249a4:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 80249a8:	f023 0304 	bic.w	r3, r3, #4
 80249ac:	f8c5 30f0 	str.w	r3, [r5, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 80249b0:	f7fd fa86 	bl	8021ec0 <HAL_GetTick>
 80249b4:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80249b6:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 80249ba:	079a      	lsls	r2, r3, #30
 80249bc:	f57f ae93 	bpl.w	80246e6 <HAL_RCC_OscConfig+0x5e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80249c0:	f7fd fa7e 	bl	8021ec0 <HAL_GetTick>
 80249c4:	1bc0      	subs	r0, r0, r7
 80249c6:	4540      	cmp	r0, r8
 80249c8:	d9f5      	bls.n	80249b6 <HAL_RCC_OscConfig+0x32e>
 80249ca:	e6b0      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80249cc:	2b05      	cmp	r3, #5
 80249ce:	d10c      	bne.n	80249ea <HAL_RCC_OscConfig+0x362>
 80249d0:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 80249d4:	f043 0304 	orr.w	r3, r3, #4
 80249d8:	f8c5 30f0 	str.w	r3, [r5, #240]	@ 0xf0
 80249dc:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 80249e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80249e4:	f8c5 30f0 	str.w	r3, [r5, #240]	@ 0xf0
 80249e8:	e7a6      	b.n	8024938 <HAL_RCC_OscConfig+0x2b0>
 80249ea:	2b85      	cmp	r3, #133	@ 0x85
 80249ec:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 80249f0:	d108      	bne.n	8024a04 <HAL_RCC_OscConfig+0x37c>
 80249f2:	f043 0304 	orr.w	r3, r3, #4
 80249f6:	f8c5 30f0 	str.w	r3, [r5, #240]	@ 0xf0
 80249fa:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 80249fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024a02:	e7ef      	b.n	80249e4 <HAL_RCC_OscConfig+0x35c>
 8024a04:	f023 0301 	bic.w	r3, r3, #1
 8024a08:	f8c5 30f0 	str.w	r3, [r5, #240]	@ 0xf0
 8024a0c:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 8024a10:	f023 0304 	bic.w	r3, r3, #4
 8024a14:	f8c5 30f0 	str.w	r3, [r5, #240]	@ 0xf0
 8024a18:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 8024a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8024a20:	e78e      	b.n	8024940 <HAL_RCC_OscConfig+0x2b8>
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8024a22:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8024a24:	4d71      	ldr	r5, [pc, #452]	@ (8024bec <HAL_RCC_OscConfig+0x564>)
 8024a26:	b183      	cbz	r3, 8024a4a <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8024a28:	682b      	ldr	r3, [r5, #0]
 8024a2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8024a2e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8024a30:	f7fd fa46 	bl	8021ec0 <HAL_GetTick>
 8024a34:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8024a36:	682b      	ldr	r3, [r5, #0]
 8024a38:	049b      	lsls	r3, r3, #18
 8024a3a:	f53f ae58 	bmi.w	80246ee <HAL_RCC_OscConfig+0x66>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8024a3e:	f7fd fa3f 	bl	8021ec0 <HAL_GetTick>
 8024a42:	1bc0      	subs	r0, r0, r7
 8024a44:	2802      	cmp	r0, #2
 8024a46:	d9f6      	bls.n	8024a36 <HAL_RCC_OscConfig+0x3ae>
 8024a48:	e671      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSI48_DISABLE();
 8024a4a:	682b      	ldr	r3, [r5, #0]
 8024a4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8024a50:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8024a52:	f7fd fa35 	bl	8021ec0 <HAL_GetTick>
 8024a56:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8024a58:	682b      	ldr	r3, [r5, #0]
 8024a5a:	0498      	lsls	r0, r3, #18
 8024a5c:	f57f ae47 	bpl.w	80246ee <HAL_RCC_OscConfig+0x66>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8024a60:	f7fd fa2e 	bl	8021ec0 <HAL_GetTick>
 8024a64:	1bc0      	subs	r0, r0, r7
 8024a66:	2802      	cmp	r0, #2
 8024a68:	d9f6      	bls.n	8024a58 <HAL_RCC_OscConfig+0x3d0>
 8024a6a:	e660      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8024a6c:	2e18      	cmp	r6, #24
 8024a6e:	4d5f      	ldr	r5, [pc, #380]	@ (8024bec <HAL_RCC_OscConfig+0x564>)
 8024a70:	d072      	beq.n	8024b58 <HAL_RCC_OscConfig+0x4d0>
        __HAL_RCC_PLL1_DISABLE();
 8024a72:	682b      	ldr	r3, [r5, #0]
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8024a74:	2902      	cmp	r1, #2
        __HAL_RCC_PLL1_DISABLE();
 8024a76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8024a7a:	602b      	str	r3, [r5, #0]
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8024a7c:	d159      	bne.n	8024b32 <HAL_RCC_OscConfig+0x4aa>
        tickstart = HAL_GetTick();
 8024a7e:	f7fd fa1f 	bl	8021ec0 <HAL_GetTick>
 8024a82:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8024a84:	682b      	ldr	r3, [r5, #0]
 8024a86:	0199      	lsls	r1, r3, #6
 8024a88:	d44d      	bmi.n	8024b26 <HAL_RCC_OscConfig+0x49e>
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8024a8a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8024a8c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8024a8e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8024a92:	f023 0303 	bic.w	r3, r3, #3
 8024a96:	4313      	orrs	r3, r2
 8024a98:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8024a9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8024a9e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8024aa0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8024aa2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8024aa4:	3b01      	subs	r3, #1
 8024aa6:	3a01      	subs	r2, #1
 8024aa8:	025b      	lsls	r3, r3, #9
 8024aaa:	0412      	lsls	r2, r2, #16
 8024aac:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8024ab0:	b29b      	uxth	r3, r3
 8024ab2:	4313      	orrs	r3, r2
 8024ab4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8024ab6:	3a01      	subs	r2, #1
 8024ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8024abc:	4313      	orrs	r3, r2
 8024abe:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8024ac0:	3a01      	subs	r2, #1
 8024ac2:	0612      	lsls	r2, r2, #24
 8024ac4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8024ac8:	4313      	orrs	r3, r2
 8024aca:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8024acc:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8024ace:	f023 0310 	bic.w	r3, r3, #16
 8024ad2:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8024ad4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8024ad6:	00db      	lsls	r3, r3, #3
 8024ad8:	63ab      	str	r3, [r5, #56]	@ 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8024ada:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8024adc:	f043 0310 	orr.w	r3, r3, #16
 8024ae0:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8024ae2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8024ae4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8024ae6:	f023 030c 	bic.w	r3, r3, #12
 8024aea:	4313      	orrs	r3, r2
 8024aec:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8024aee:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8024af0:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8024af2:	f023 0320 	bic.w	r3, r3, #32
 8024af6:	4313      	orrs	r3, r2
 8024af8:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8024afa:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8024afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8024b00:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_ENABLE();
 8024b02:	682b      	ldr	r3, [r5, #0]
 8024b04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8024b08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8024b0a:	f7fd f9d9 	bl	8021ec0 <HAL_GetTick>
 8024b0e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8024b10:	4d36      	ldr	r5, [pc, #216]	@ (8024bec <HAL_RCC_OscConfig+0x564>)
 8024b12:	682b      	ldr	r3, [r5, #0]
 8024b14:	019a      	lsls	r2, r3, #6
 8024b16:	f53f adee 	bmi.w	80246f6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8024b1a:	f7fd f9d1 	bl	8021ec0 <HAL_GetTick>
 8024b1e:	1b00      	subs	r0, r0, r4
 8024b20:	2802      	cmp	r0, #2
 8024b22:	d9f6      	bls.n	8024b12 <HAL_RCC_OscConfig+0x48a>
 8024b24:	e603      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8024b26:	f7fd f9cb 	bl	8021ec0 <HAL_GetTick>
 8024b2a:	1b80      	subs	r0, r0, r6
 8024b2c:	2802      	cmp	r0, #2
 8024b2e:	d9a9      	bls.n	8024a84 <HAL_RCC_OscConfig+0x3fc>
 8024b30:	e5fd      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
        tickstart = HAL_GetTick();
 8024b32:	f7fd f9c5 	bl	8021ec0 <HAL_GetTick>
 8024b36:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8024b38:	682b      	ldr	r3, [r5, #0]
 8024b3a:	019b      	lsls	r3, r3, #6
 8024b3c:	d406      	bmi.n	8024b4c <HAL_RCC_OscConfig+0x4c4>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8024b3e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8024b40:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8024b44:	f023 0303 	bic.w	r3, r3, #3
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8024b48:	62ab      	str	r3, [r5, #40]	@ 0x28
 8024b4a:	e5d4      	b.n	80246f6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8024b4c:	f7fd f9b8 	bl	8021ec0 <HAL_GetTick>
 8024b50:	1b00      	subs	r0, r0, r4
 8024b52:	2802      	cmp	r0, #2
 8024b54:	d9f0      	bls.n	8024b38 <HAL_RCC_OscConfig+0x4b0>
 8024b56:	e5ea      	b.n	802472e <HAL_RCC_OscConfig+0xa6>
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8024b58:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 8024b5a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8024b5c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8024b5e:	f43f ae03 	beq.w	8024768 <HAL_RCC_OscConfig+0xe0>
 8024b62:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8024b64:	f002 0103 	and.w	r1, r2, #3
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8024b68:	4281      	cmp	r1, r0
 8024b6a:	f47f adfd 	bne.w	8024768 <HAL_RCC_OscConfig+0xe0>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8024b6e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8024b70:	f3c2 2205 	ubfx	r2, r2, #8, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8024b74:	428a      	cmp	r2, r1
 8024b76:	f47f adf7 	bne.w	8024768 <HAL_RCC_OscConfig+0xe0>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8024b7a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8024b7c:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8024b80:	3a01      	subs	r2, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8024b82:	4291      	cmp	r1, r2
 8024b84:	f47f adf0 	bne.w	8024768 <HAL_RCC_OscConfig+0xe0>
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8024b88:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8024b8a:	f3c3 2146 	ubfx	r1, r3, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8024b8e:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8024b90:	4291      	cmp	r1, r2
 8024b92:	f47f ade9 	bne.w	8024768 <HAL_RCC_OscConfig+0xe0>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8024b96:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8024b98:	f3c3 4106 	ubfx	r1, r3, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8024b9c:	3a01      	subs	r2, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8024b9e:	4291      	cmp	r1, r2
 8024ba0:	f47f ade2 	bne.w	8024768 <HAL_RCC_OscConfig+0xe0>
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8024ba4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8024ba6:	f3c3 6306 	ubfx	r3, r3, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8024baa:	3a01      	subs	r2, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8024bac:	4293      	cmp	r3, r2
 8024bae:	f47f addb 	bne.w	8024768 <HAL_RCC_OscConfig+0xe0>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8024bb2:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8024bb4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8024bb6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8024bba:	4293      	cmp	r3, r2
 8024bbc:	f43f ad9b 	beq.w	80246f6 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8024bc0:	4d0a      	ldr	r5, [pc, #40]	@ (8024bec <HAL_RCC_OscConfig+0x564>)
 8024bc2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8024bc4:	f023 0310 	bic.w	r3, r3, #16
 8024bc8:	62ab      	str	r3, [r5, #40]	@ 0x28
        tickstart = HAL_GetTick();
 8024bca:	f7fd f979 	bl	8021ec0 <HAL_GetTick>
 8024bce:	4606      	mov	r6, r0
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8024bd0:	f7fd f976 	bl	8021ec0 <HAL_GetTick>
 8024bd4:	42b0      	cmp	r0, r6
 8024bd6:	d0fb      	beq.n	8024bd0 <HAL_RCC_OscConfig+0x548>
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8024bd8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8024bda:	00db      	lsls	r3, r3, #3
 8024bdc:	63ab      	str	r3, [r5, #56]	@ 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8024bde:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8024be0:	f043 0310 	orr.w	r3, r3, #16
 8024be4:	e7b0      	b.n	8024b48 <HAL_RCC_OscConfig+0x4c0>
 8024be6:	bf00      	nop
 8024be8:	44020800 	.word	0x44020800
 8024bec:	44020c00 	.word	0x44020c00

08024bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8024bf0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8024bf2:	f7ff fd33 	bl	802465c <HAL_RCC_GetHCLKFreq>
 8024bf6:	4b05      	ldr	r3, [pc, #20]	@ (8024c0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8024bf8:	4a05      	ldr	r2, [pc, #20]	@ (8024c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8024bfa:	6a1b      	ldr	r3, [r3, #32]
 8024bfc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8024c00:	5cd3      	ldrb	r3, [r2, r3]
 8024c02:	f003 031f 	and.w	r3, r3, #31
}
 8024c06:	40d8      	lsrs	r0, r3
 8024c08:	bd08      	pop	{r3, pc}
 8024c0a:	bf00      	nop
 8024c0c:	44020c00 	.word	0x44020c00
 8024c10:	0802c44c 	.word	0x0802c44c

08024c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8024c14:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8024c16:	f7ff fd21 	bl	802465c <HAL_RCC_GetHCLKFreq>
 8024c1a:	4b05      	ldr	r3, [pc, #20]	@ (8024c30 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8024c1c:	4a05      	ldr	r2, [pc, #20]	@ (8024c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8024c1e:	6a1b      	ldr	r3, [r3, #32]
 8024c20:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8024c24:	5cd3      	ldrb	r3, [r2, r3]
 8024c26:	f003 031f 	and.w	r3, r3, #31
}
 8024c2a:	40d8      	lsrs	r0, r3
 8024c2c:	bd08      	pop	{r3, pc}
 8024c2e:	bf00      	nop
 8024c30:	44020c00 	.word	0x44020c00
 8024c34:	0802c44c 	.word	0x0802c44c

08024c38 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8024c38:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8024c3a:	f7ff fd0f 	bl	802465c <HAL_RCC_GetHCLKFreq>
 8024c3e:	4b05      	ldr	r3, [pc, #20]	@ (8024c54 <HAL_RCC_GetPCLK3Freq+0x1c>)
 8024c40:	4a05      	ldr	r2, [pc, #20]	@ (8024c58 <HAL_RCC_GetPCLK3Freq+0x20>)
 8024c42:	6a1b      	ldr	r3, [r3, #32]
 8024c44:	f3c3 3302 	ubfx	r3, r3, #12, #3
 8024c48:	5cd3      	ldrb	r3, [r2, r3]
 8024c4a:	f003 031f 	and.w	r3, r3, #31
}
 8024c4e:	40d8      	lsrs	r0, r3
 8024c50:	bd08      	pop	{r3, pc}
 8024c52:	bf00      	nop
 8024c54:	44020c00 	.word	0x44020c00
 8024c58:	0802c44c 	.word	0x0802c44c

08024c5c <HAL_RCC_EnableCSS>:
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSECSSON);
 8024c5c:	4a02      	ldr	r2, [pc, #8]	@ (8024c68 <HAL_RCC_EnableCSS+0xc>)
 8024c5e:	6813      	ldr	r3, [r2, #0]
 8024c60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8024c64:	6013      	str	r3, [r2, #0]
}
 8024c66:	4770      	bx	lr
 8024c68:	44020c00 	.word	0x44020c00

08024c6c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8024c6c:	b508      	push	{r3, lr}
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_HSECSS))
 8024c6e:	4b05      	ldr	r3, [pc, #20]	@ (8024c84 <HAL_RCC_NMI_IRQHandler+0x18>)
 8024c70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8024c72:	0552      	lsls	r2, r2, #21
 8024c74:	d504      	bpl.n	8024c80 <HAL_RCC_NMI_IRQHandler+0x14>
  {
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_HSECSS);
 8024c76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8024c7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8024c7c:	f005 ff24 	bl	802aac8 <HAL_RCC_CSSCallback>
  }
}
 8024c80:	bd08      	pop	{r3, pc}
 8024c82:	bf00      	nop
 8024c84:	44020c00 	.word	0x44020c00

08024c88 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8024c88:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8024c8a:	4c34      	ldr	r4, [pc, #208]	@ (8024d5c <RCCEx_PLL2_Config+0xd4>)
{
 8024c8c:	4605      	mov	r5, r0
  __HAL_RCC_PLL2_DISABLE();
 8024c8e:	6823      	ldr	r3, [r4, #0]
 8024c90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8024c94:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8024c96:	f7fd f913 	bl	8021ec0 <HAL_GetTick>
 8024c9a:	4606      	mov	r6, r0

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8024c9c:	6823      	ldr	r3, [r4, #0]
 8024c9e:	011a      	lsls	r2, r3, #4
 8024ca0:	d44e      	bmi.n	8024d40 <RCCEx_PLL2_Config+0xb8>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8024ca2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8024ca4:	682a      	ldr	r2, [r5, #0]
 8024ca6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8024caa:	f023 0303 	bic.w	r3, r3, #3
 8024cae:	4313      	orrs	r3, r2
 8024cb0:	686a      	ldr	r2, [r5, #4]
 8024cb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8024cb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8024cb8:	68eb      	ldr	r3, [r5, #12]
 8024cba:	692a      	ldr	r2, [r5, #16]
 8024cbc:	3b01      	subs	r3, #1
 8024cbe:	3a01      	subs	r2, #1
 8024cc0:	025b      	lsls	r3, r3, #9
 8024cc2:	0412      	lsls	r2, r2, #16
 8024cc4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8024cc8:	b29b      	uxth	r3, r3
 8024cca:	4313      	orrs	r3, r2
 8024ccc:	68aa      	ldr	r2, [r5, #8]
 8024cce:	3a01      	subs	r2, #1
 8024cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8024cd4:	4313      	orrs	r3, r2
 8024cd6:	696a      	ldr	r2, [r5, #20]
 8024cd8:	3a01      	subs	r2, #1
 8024cda:	0612      	lsls	r2, r2, #24
 8024cdc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8024ce0:	4313      	orrs	r3, r2
 8024ce2:	63e3      	str	r3, [r4, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8024ce4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8024ce6:	69aa      	ldr	r2, [r5, #24]
 8024ce8:	f023 030c 	bic.w	r3, r3, #12
 8024cec:	4313      	orrs	r3, r2
 8024cee:	62e3      	str	r3, [r4, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8024cf0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8024cf2:	69ea      	ldr	r2, [r5, #28]
 8024cf4:	f023 0320 	bic.w	r3, r3, #32
 8024cf8:	4313      	orrs	r3, r2
 8024cfa:	62e3      	str	r3, [r4, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8024cfc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8024cfe:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8024d00:	4313      	orrs	r3, r2
 8024d02:	62e3      	str	r3, [r4, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8024d04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8024d06:	f023 0310 	bic.w	r3, r3, #16
 8024d0a:	62e3      	str	r3, [r4, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8024d0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8024d0e:	6a2a      	ldr	r2, [r5, #32]
 8024d10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8024d14:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8024d18:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8024d1c:	6423      	str	r3, [r4, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8024d1e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8024d20:	4d0e      	ldr	r5, [pc, #56]	@ (8024d5c <RCCEx_PLL2_Config+0xd4>)
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8024d22:	f043 0310 	orr.w	r3, r3, #16
 8024d26:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_ENABLE();
 8024d28:	6823      	ldr	r3, [r4, #0]
 8024d2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8024d2e:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8024d30:	f7fd f8c6 	bl	8021ec0 <HAL_GetTick>
 8024d34:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8024d36:	682b      	ldr	r3, [r5, #0]
 8024d38:	011b      	lsls	r3, r3, #4
 8024d3a:	d508      	bpl.n	8024d4e <RCCEx_PLL2_Config+0xc6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8024d3c:	2000      	movs	r0, #0
 8024d3e:	e005      	b.n	8024d4c <RCCEx_PLL2_Config+0xc4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8024d40:	f7fd f8be 	bl	8021ec0 <HAL_GetTick>
 8024d44:	1b80      	subs	r0, r0, r6
 8024d46:	2802      	cmp	r0, #2
 8024d48:	d9a8      	bls.n	8024c9c <RCCEx_PLL2_Config+0x14>
      return HAL_TIMEOUT;
 8024d4a:	2003      	movs	r0, #3

}
 8024d4c:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8024d4e:	f7fd f8b7 	bl	8021ec0 <HAL_GetTick>
 8024d52:	1b00      	subs	r0, r0, r4
 8024d54:	2802      	cmp	r0, #2
 8024d56:	d9ee      	bls.n	8024d36 <RCCEx_PLL2_Config+0xae>
 8024d58:	e7f7      	b.n	8024d4a <RCCEx_PLL2_Config+0xc2>
 8024d5a:	bf00      	nop
 8024d5c:	44020c00 	.word	0x44020c00

08024d60 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8024d60:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8024d62:	4c34      	ldr	r4, [pc, #208]	@ (8024e34 <RCCEx_PLL3_Config+0xd4>)
{
 8024d64:	4605      	mov	r5, r0
  __HAL_RCC_PLL3_DISABLE();
 8024d66:	6823      	ldr	r3, [r4, #0]
 8024d68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8024d6c:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8024d6e:	f7fd f8a7 	bl	8021ec0 <HAL_GetTick>
 8024d72:	4606      	mov	r6, r0

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8024d74:	6823      	ldr	r3, [r4, #0]
 8024d76:	009a      	lsls	r2, r3, #2
 8024d78:	d44e      	bmi.n	8024e18 <RCCEx_PLL3_Config+0xb8>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8024d7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8024d7c:	682a      	ldr	r2, [r5, #0]
 8024d7e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8024d82:	f023 0303 	bic.w	r3, r3, #3
 8024d86:	4313      	orrs	r3, r2
 8024d88:	686a      	ldr	r2, [r5, #4]
 8024d8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8024d8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8024d90:	68eb      	ldr	r3, [r5, #12]
 8024d92:	692a      	ldr	r2, [r5, #16]
 8024d94:	3b01      	subs	r3, #1
 8024d96:	3a01      	subs	r2, #1
 8024d98:	025b      	lsls	r3, r3, #9
 8024d9a:	0412      	lsls	r2, r2, #16
 8024d9c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8024da0:	b29b      	uxth	r3, r3
 8024da2:	4313      	orrs	r3, r2
 8024da4:	68aa      	ldr	r2, [r5, #8]
 8024da6:	3a01      	subs	r2, #1
 8024da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8024dac:	4313      	orrs	r3, r2
 8024dae:	696a      	ldr	r2, [r5, #20]
 8024db0:	3a01      	subs	r2, #1
 8024db2:	0612      	lsls	r2, r2, #24
 8024db4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8024db8:	4313      	orrs	r3, r2
 8024dba:	6463      	str	r3, [r4, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8024dbc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8024dbe:	69aa      	ldr	r2, [r5, #24]
 8024dc0:	f023 030c 	bic.w	r3, r3, #12
 8024dc4:	4313      	orrs	r3, r2
 8024dc6:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8024dc8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8024dca:	69ea      	ldr	r2, [r5, #28]
 8024dcc:	f023 0320 	bic.w	r3, r3, #32
 8024dd0:	4313      	orrs	r3, r2
 8024dd2:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8024dd4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8024dd6:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8024dd8:	4313      	orrs	r3, r2
 8024dda:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8024ddc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8024dde:	f023 0310 	bic.w	r3, r3, #16
 8024de2:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8024de4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8024de6:	6a2a      	ldr	r2, [r5, #32]
 8024de8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8024dec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8024df0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8024df4:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8024df6:	6b23      	ldr	r3, [r4, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8024df8:	4d0e      	ldr	r5, [pc, #56]	@ (8024e34 <RCCEx_PLL3_Config+0xd4>)
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8024dfa:	f043 0310 	orr.w	r3, r3, #16
 8024dfe:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_ENABLE();
 8024e00:	6823      	ldr	r3, [r4, #0]
 8024e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8024e06:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8024e08:	f7fd f85a 	bl	8021ec0 <HAL_GetTick>
 8024e0c:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8024e0e:	682b      	ldr	r3, [r5, #0]
 8024e10:	009b      	lsls	r3, r3, #2
 8024e12:	d508      	bpl.n	8024e26 <RCCEx_PLL3_Config+0xc6>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8024e14:	2000      	movs	r0, #0
 8024e16:	e005      	b.n	8024e24 <RCCEx_PLL3_Config+0xc4>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8024e18:	f7fd f852 	bl	8021ec0 <HAL_GetTick>
 8024e1c:	1b80      	subs	r0, r0, r6
 8024e1e:	2802      	cmp	r0, #2
 8024e20:	d9a8      	bls.n	8024d74 <RCCEx_PLL3_Config+0x14>
      return HAL_TIMEOUT;
 8024e22:	2003      	movs	r0, #3
}
 8024e24:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8024e26:	f7fd f84b 	bl	8021ec0 <HAL_GetTick>
 8024e2a:	1b00      	subs	r0, r0, r4
 8024e2c:	2802      	cmp	r0, #2
 8024e2e:	d9ee      	bls.n	8024e0e <RCCEx_PLL3_Config+0xae>
 8024e30:	e7f7      	b.n	8024e22 <RCCEx_PLL3_Config+0xc2>
 8024e32:	bf00      	nop
 8024e34:	44020c00 	.word	0x44020c00

08024e38 <HAL_RCCEx_PeriphCLKConfig>:
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8024e38:	6802      	ldr	r2, [r0, #0]
{
 8024e3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8024e3e:	01d4      	lsls	r4, r2, #7
{
 8024e40:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8024e42:	d508      	bpl.n	8024e56 <HAL_RCCEx_PeriphCLKConfig+0x1e>
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8024e44:	49a0      	ldr	r1, [pc, #640]	@ (80250c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8024e46:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8024e48:	f8d1 30e8 	ldr.w	r3, [r1, #232]	@ 0xe8
 8024e4c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8024e50:	4303      	orrs	r3, r0
 8024e52:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8024e56:	07d0      	lsls	r0, r2, #31
 8024e58:	d516      	bpl.n	8024e88 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8024e5a:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8024e5c:	2b05      	cmp	r3, #5
 8024e5e:	d827      	bhi.n	8024eb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8024e60:	e8df f003 	tbb	[pc, r3]
 8024e64:	09210309 	.word	0x09210309
 8024e68:	0909      	.short	0x0909
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8024e6a:	f105 0008 	add.w	r0, r5, #8
 8024e6e:	f7ff ff0b 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8024e72:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8024e74:	b948      	cbnz	r0, 8024e8a <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8024e76:	4a94      	ldr	r2, [pc, #592]	@ (80250c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8024e78:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 8024e7a:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 8024e7e:	f023 0307 	bic.w	r3, r3, #7
 8024e82:	430b      	orrs	r3, r1
 8024e84:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8024e88:	2600      	movs	r6, #0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8024e8a:	682b      	ldr	r3, [r5, #0]
 8024e8c:	0799      	lsls	r1, r3, #30
 8024e8e:	d508      	bpl.n	8024ea2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8024e90:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8024e92:	2b10      	cmp	r3, #16
 8024e94:	f000 80cf 	beq.w	8025036 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8024e98:	d80c      	bhi.n	8024eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8024e9a:	b18b      	cbz	r3, 8024ec0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8024e9c:	2b08      	cmp	r3, #8
 8024e9e:	d011      	beq.n	8024ec4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8024ea0:	2601      	movs	r6, #1
 8024ea2:	4634      	mov	r4, r6
 8024ea4:	e01f      	b.n	8024ee6 <HAL_RCCEx_PeriphCLKConfig+0xae>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8024ea6:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8024eaa:	f7ff ff59 	bl	8024d60 <RCCEx_PLL3_Config>
 8024eae:	e7e0      	b.n	8024e72 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8024eb0:	2601      	movs	r6, #1
 8024eb2:	e7ea      	b.n	8024e8a <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8024eb4:	f023 0208 	bic.w	r2, r3, #8
 8024eb8:	2a20      	cmp	r2, #32
 8024eba:	d001      	beq.n	8024ec0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8024ebc:	2b18      	cmp	r3, #24
 8024ebe:	d1ef      	bne.n	8024ea0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8024ec0:	4634      	mov	r4, r6
 8024ec2:	e004      	b.n	8024ece <HAL_RCCEx_PeriphCLKConfig+0x96>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8024ec4:	f105 0008 	add.w	r0, r5, #8
 8024ec8:	f7ff fede 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8024ecc:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8024ece:	2c00      	cmp	r4, #0
 8024ed0:	f040 80b6 	bne.w	8025040 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8024ed4:	4a7c      	ldr	r2, [pc, #496]	@ (80250c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8024ed6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8024ed8:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 8024edc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8024ee0:	430b      	orrs	r3, r1
 8024ee2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8024ee6:	682b      	ldr	r3, [r5, #0]
 8024ee8:	075a      	lsls	r2, r3, #29
 8024eea:	d50d      	bpl.n	8024f08 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (pPeriphClkInit->Usart3ClockSelection)
 8024eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024eee:	2b80      	cmp	r3, #128	@ 0x80
 8024ef0:	f000 80c1 	beq.w	8025076 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8024ef4:	f200 80a6 	bhi.w	8025044 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8024ef8:	2b00      	cmp	r3, #0
 8024efa:	f000 80ab 	beq.w	8025054 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8024efe:	2b40      	cmp	r3, #64	@ 0x40
 8024f00:	f000 80b3 	beq.w	802506a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8024f04:	2601      	movs	r6, #1
 8024f06:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8024f08:	682b      	ldr	r3, [r5, #0]
 8024f0a:	071b      	lsls	r3, r3, #28
 8024f0c:	d50f      	bpl.n	8024f2e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch (pPeriphClkInit->Uart4ClockSelection)
 8024f0e:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 8024f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8024f14:	f000 80d0 	beq.w	80250b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8024f18:	f200 80b4 	bhi.w	8025084 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8024f1c:	2b00      	cmp	r3, #0
 8024f1e:	f000 80ba 	beq.w	8025096 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8024f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024f26:	f000 80c1 	beq.w	80250ac <HAL_RCCEx_PeriphCLKConfig+0x274>
 8024f2a:	2601      	movs	r6, #1
 8024f2c:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8024f2e:	682b      	ldr	r3, [r5, #0]
 8024f30:	06df      	lsls	r7, r3, #27
 8024f32:	d50f      	bpl.n	8024f54 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (pPeriphClkInit->Uart5ClockSelection)
 8024f34:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8024f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8024f3a:	f000 80e1 	beq.w	8025100 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8024f3e:	f200 80c5 	bhi.w	80250cc <HAL_RCCEx_PeriphCLKConfig+0x294>
 8024f42:	2b00      	cmp	r3, #0
 8024f44:	f000 80cb 	beq.w	80250de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8024f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8024f4c:	f000 80d2 	beq.w	80250f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8024f50:	2601      	movs	r6, #1
 8024f52:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8024f54:	682b      	ldr	r3, [r5, #0]
 8024f56:	0698      	lsls	r0, r3, #26
 8024f58:	d50f      	bpl.n	8024f7a <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (pPeriphClkInit->Usart6ClockSelection)
 8024f5a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8024f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024f60:	f000 80ef 	beq.w	8025142 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8024f64:	f200 80d3 	bhi.w	802510e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8024f68:	2b00      	cmp	r3, #0
 8024f6a:	f000 80d9 	beq.w	8025120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8024f6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8024f72:	f000 80e0 	beq.w	8025136 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8024f76:	2601      	movs	r6, #1
 8024f78:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8024f7a:	682b      	ldr	r3, [r5, #0]
 8024f7c:	0659      	lsls	r1, r3, #25
 8024f7e:	d50f      	bpl.n	8024fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (pPeriphClkInit->Uart7ClockSelection)
 8024f80:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8024f82:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8024f86:	f000 80fd 	beq.w	8025184 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8024f8a:	f200 80e1 	bhi.w	8025150 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8024f8e:	2b00      	cmp	r3, #0
 8024f90:	f000 80e7 	beq.w	8025162 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8024f94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8024f98:	f000 80ee 	beq.w	8025178 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8024f9c:	2601      	movs	r6, #1
 8024f9e:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8024fa0:	682b      	ldr	r3, [r5, #0]
 8024fa2:	061a      	lsls	r2, r3, #24
 8024fa4:	d50f      	bpl.n	8024fc6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8024fa6:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8024fa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8024fac:	f000 810b 	beq.w	80251c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8024fb0:	f200 80ef 	bhi.w	8025192 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8024fb4:	2b00      	cmp	r3, #0
 8024fb6:	f000 80f5 	beq.w	80251a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8024fba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8024fbe:	f000 80fc 	beq.w	80251ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8024fc2:	2601      	movs	r6, #1
 8024fc4:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8024fc6:	682b      	ldr	r3, [r5, #0]
 8024fc8:	05db      	lsls	r3, r3, #23
 8024fca:	d50f      	bpl.n	8024fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    switch (pPeriphClkInit->Uart9ClockSelection)
 8024fcc:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8024fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8024fd2:	f000 8119 	beq.w	8025208 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8024fd6:	f200 80fd 	bhi.w	80251d4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8024fda:	2b00      	cmp	r3, #0
 8024fdc:	f000 8103 	beq.w	80251e6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8024fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8024fe4:	f000 810a 	beq.w	80251fc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8024fe8:	2601      	movs	r6, #1
 8024fea:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8024fec:	682b      	ldr	r3, [r5, #0]
 8024fee:	059f      	lsls	r7, r3, #22
 8024ff0:	d510      	bpl.n	8025014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8024ff2:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8024ff6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8024ffa:	f000 8127 	beq.w	802524c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8024ffe:	f200 810a 	bhi.w	8025216 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8025002:	2b00      	cmp	r3, #0
 8025004:	f000 8110 	beq.w	8025228 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8025008:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 802500c:	f000 8118 	beq.w	8025240 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8025010:	2601      	movs	r6, #1
 8025012:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8025014:	682b      	ldr	r3, [r5, #0]
 8025016:	0558      	lsls	r0, r3, #21
 8025018:	f140 8134 	bpl.w	8025284 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (pPeriphClkInit->Usart11ClockSelection)
 802501c:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8025020:	2b05      	cmp	r3, #5
 8025022:	f200 8244 	bhi.w	80254ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8025026:	e8df f013 	tbh	[pc, r3, lsl #1]
 802502a:	0120      	.short	0x0120
 802502c:	023d011b 	.word	0x023d011b
 8025030:	01200120 	.word	0x01200120
 8025034:	0120      	.short	0x0120
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025036:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 802503a:	f7ff fe91 	bl	8024d60 <RCCEx_PLL3_Config>
 802503e:	e745      	b.n	8024ecc <HAL_RCCEx_PeriphCLKConfig+0x94>
 8025040:	4626      	mov	r6, r4
 8025042:	e750      	b.n	8024ee6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch (pPeriphClkInit->Usart3ClockSelection)
 8025044:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8025048:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 802504c:	d002      	beq.n	8025054 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 802504e:	2bc0      	cmp	r3, #192	@ 0xc0
 8025050:	f47f af58 	bne.w	8024f04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if (ret == HAL_OK)
 8025054:	b9a4      	cbnz	r4, 8025080 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8025056:	4a1c      	ldr	r2, [pc, #112]	@ (80250c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8025058:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 802505a:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 802505e:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8025062:	430b      	orrs	r3, r1
 8025064:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8025068:	e74e      	b.n	8024f08 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 802506a:	f105 0008 	add.w	r0, r5, #8
 802506e:	f7ff fe0b 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025072:	4604      	mov	r4, r0
        break;
 8025074:	e7ee      	b.n	8025054 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025076:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 802507a:	f7ff fe71 	bl	8024d60 <RCCEx_PLL3_Config>
 802507e:	e7f8      	b.n	8025072 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8025080:	4626      	mov	r6, r4
 8025082:	e741      	b.n	8024f08 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (pPeriphClkInit->Uart4ClockSelection)
 8025084:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8025088:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 802508c:	d003      	beq.n	8025096 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 802508e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8025092:	f47f af4a 	bne.w	8024f2a <HAL_RCCEx_PeriphCLKConfig+0xf2>
    if (ret == HAL_OK)
 8025096:	b9a4      	cbnz	r4, 80250c2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8025098:	4a0b      	ldr	r2, [pc, #44]	@ (80250c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 802509a:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 802509c:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 80250a0:	f423 6360 	bic.w	r3, r3, #3584	@ 0xe00
 80250a4:	430b      	orrs	r3, r1
 80250a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80250aa:	e740      	b.n	8024f2e <HAL_RCCEx_PeriphCLKConfig+0xf6>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80250ac:	f105 0008 	add.w	r0, r5, #8
 80250b0:	f7ff fdea 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80250b4:	4604      	mov	r4, r0
        break;
 80250b6:	e7ee      	b.n	8025096 <HAL_RCCEx_PeriphCLKConfig+0x25e>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80250b8:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80250bc:	f7ff fe50 	bl	8024d60 <RCCEx_PLL3_Config>
 80250c0:	e7f8      	b.n	80250b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80250c2:	4626      	mov	r6, r4
 80250c4:	e733      	b.n	8024f2e <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80250c6:	bf00      	nop
 80250c8:	44020c00 	.word	0x44020c00
    switch (pPeriphClkInit->Uart5ClockSelection)
 80250cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80250d0:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 80250d4:	d003      	beq.n	80250de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80250d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80250da:	f47f af39 	bne.w	8024f50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if (ret == HAL_OK)
 80250de:	b9a4      	cbnz	r4, 802510a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80250e0:	4a5e      	ldr	r2, [pc, #376]	@ (802525c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80250e2:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 80250e4:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 80250e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80250ec:	430b      	orrs	r3, r1
 80250ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80250f2:	e72f      	b.n	8024f54 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80250f4:	f105 0008 	add.w	r0, r5, #8
 80250f8:	f7ff fdc6 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80250fc:	4604      	mov	r4, r0
        break;
 80250fe:	e7ee      	b.n	80250de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025100:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025104:	f7ff fe2c 	bl	8024d60 <RCCEx_PLL3_Config>
 8025108:	e7f8      	b.n	80250fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 802510a:	4626      	mov	r6, r4
 802510c:	e722      	b.n	8024f54 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (pPeriphClkInit->Usart6ClockSelection)
 802510e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8025112:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8025116:	d003      	beq.n	8025120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8025118:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 802511c:	f47f af2b 	bne.w	8024f76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    if (ret == HAL_OK)
 8025120:	b9a4      	cbnz	r4, 802514c <HAL_RCCEx_PeriphCLKConfig+0x314>
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8025122:	4a4e      	ldr	r2, [pc, #312]	@ (802525c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8025124:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8025126:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 802512a:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
 802512e:	430b      	orrs	r3, r1
 8025130:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8025134:	e721      	b.n	8024f7a <HAL_RCCEx_PeriphCLKConfig+0x142>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025136:	f105 0008 	add.w	r0, r5, #8
 802513a:	f7ff fda5 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 802513e:	4604      	mov	r4, r0
        break;
 8025140:	e7ee      	b.n	8025120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025142:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025146:	f7ff fe0b 	bl	8024d60 <RCCEx_PLL3_Config>
 802514a:	e7f8      	b.n	802513e <HAL_RCCEx_PeriphCLKConfig+0x306>
 802514c:	4626      	mov	r6, r4
 802514e:	e714      	b.n	8024f7a <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (pPeriphClkInit->Uart7ClockSelection)
 8025150:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8025154:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8025158:	d003      	beq.n	8025162 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 802515a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 802515e:	f47f af1d 	bne.w	8024f9c <HAL_RCCEx_PeriphCLKConfig+0x164>
    if (ret == HAL_OK)
 8025162:	b9a4      	cbnz	r4, 802518e <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8025164:	4a3d      	ldr	r2, [pc, #244]	@ (802525c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8025166:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8025168:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 802516c:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8025170:	430b      	orrs	r3, r1
 8025172:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8025176:	e713      	b.n	8024fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025178:	f105 0008 	add.w	r0, r5, #8
 802517c:	f7ff fd84 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025180:	4604      	mov	r4, r0
        break;
 8025182:	e7ee      	b.n	8025162 <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025184:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025188:	f7ff fdea 	bl	8024d60 <RCCEx_PLL3_Config>
 802518c:	e7f8      	b.n	8025180 <HAL_RCCEx_PeriphCLKConfig+0x348>
 802518e:	4626      	mov	r6, r4
 8025190:	e706      	b.n	8024fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8025192:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8025196:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 802519a:	d003      	beq.n	80251a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 802519c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80251a0:	f47f af0f 	bne.w	8024fc2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if (ret == HAL_OK)
 80251a4:	b9a4      	cbnz	r4, 80251d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80251a6:	4a2d      	ldr	r2, [pc, #180]	@ (802525c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80251a8:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 80251aa:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 80251ae:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 80251b2:	430b      	orrs	r3, r1
 80251b4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80251b8:	e705      	b.n	8024fc6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80251ba:	f105 0008 	add.w	r0, r5, #8
 80251be:	f7ff fd63 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80251c2:	4604      	mov	r4, r0
        break;
 80251c4:	e7ee      	b.n	80251a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80251c6:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80251ca:	f7ff fdc9 	bl	8024d60 <RCCEx_PLL3_Config>
 80251ce:	e7f8      	b.n	80251c2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 80251d0:	4626      	mov	r6, r4
 80251d2:	e6f8      	b.n	8024fc6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (pPeriphClkInit->Uart9ClockSelection)
 80251d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80251d8:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 80251dc:	d003      	beq.n	80251e6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80251de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80251e2:	f47f af01 	bne.w	8024fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    if (ret == HAL_OK)
 80251e6:	b9a4      	cbnz	r4, 8025212 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80251e8:	4a1c      	ldr	r2, [pc, #112]	@ (802525c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80251ea:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 80251ec:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 80251f0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80251f4:	430b      	orrs	r3, r1
 80251f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80251fa:	e6f7      	b.n	8024fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80251fc:	f105 0008 	add.w	r0, r5, #8
 8025200:	f7ff fd42 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025204:	4604      	mov	r4, r0
        break;
 8025206:	e7ee      	b.n	80251e6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025208:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 802520c:	f7ff fda8 	bl	8024d60 <RCCEx_PLL3_Config>
 8025210:	e7f8      	b.n	8025204 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8025212:	4626      	mov	r6, r4
 8025214:	e6ea      	b.n	8024fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8025216:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 802521a:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 802521e:	d003      	beq.n	8025228 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8025220:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8025224:	f47f aef4 	bne.w	8025010 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    if (ret == HAL_OK)
 8025228:	b9ac      	cbnz	r4, 8025256 <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 802522a:	4a0c      	ldr	r2, [pc, #48]	@ (802525c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 802522c:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 8025230:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 8025234:	f023 5360 	bic.w	r3, r3, #939524096	@ 0x38000000
 8025238:	430b      	orrs	r3, r1
 802523a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 802523e:	e6e9      	b.n	8025014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025240:	f105 0008 	add.w	r0, r5, #8
 8025244:	f7ff fd20 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025248:	4604      	mov	r4, r0
        break;
 802524a:	e7ed      	b.n	8025228 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 802524c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025250:	f7ff fd86 	bl	8024d60 <RCCEx_PLL3_Config>
 8025254:	e7f8      	b.n	8025248 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8025256:	4626      	mov	r6, r4
 8025258:	e6dc      	b.n	8025014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 802525a:	bf00      	nop
 802525c:	44020c00 	.word	0x44020c00
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025260:	f105 0008 	add.w	r0, r5, #8
 8025264:	f7ff fd10 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025268:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 802526a:	2c00      	cmp	r4, #0
 802526c:	f040 8122 	bne.w	80254b4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8025270:	4ab2      	ldr	r2, [pc, #712]	@ (802553c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8025272:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 8025276:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 802527a:	f023 0307 	bic.w	r3, r3, #7
 802527e:	430b      	orrs	r3, r1
 8025280:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8025284:	682b      	ldr	r3, [r5, #0]
 8025286:	0519      	lsls	r1, r3, #20
 8025288:	d50e      	bpl.n	80252a8 <HAL_RCCEx_PeriphCLKConfig+0x470>
    switch (pPeriphClkInit->Uart12ClockSelection)
 802528a:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 802528e:	2b20      	cmp	r3, #32
 8025290:	f000 812b 	beq.w	80254ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8025294:	f200 8110 	bhi.w	80254b8 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8025298:	2b00      	cmp	r3, #0
 802529a:	f000 8114 	beq.w	80254c6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 802529e:	2b10      	cmp	r3, #16
 80252a0:	f000 811d 	beq.w	80254de <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 80252a4:	2601      	movs	r6, #1
 80252a6:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80252a8:	682b      	ldr	r3, [r5, #0]
 80252aa:	04da      	lsls	r2, r3, #19
 80252ac:	d510      	bpl.n	80252d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80252ae:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 80252b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80252b6:	f000 813a 	beq.w	802552e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 80252ba:	f200 811d 	bhi.w	80254f8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80252be:	2b00      	cmp	r3, #0
 80252c0:	f000 8123 	beq.w	802550a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 80252c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80252c8:	f000 812b 	beq.w	8025522 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80252cc:	2601      	movs	r6, #1
 80252ce:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80252d0:	682b      	ldr	r3, [r5, #0]
 80252d2:	049b      	lsls	r3, r3, #18
 80252d4:	d50c      	bpl.n	80252f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    switch (pPeriphClkInit->I2c1ClockSelection)
 80252d6:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80252da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80252de:	f000 8141 	beq.w	8025564 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80252e2:	f200 812d 	bhi.w	8025540 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80252e6:	2b00      	cmp	r3, #0
 80252e8:	f000 8130 	beq.w	802554c <HAL_RCCEx_PeriphCLKConfig+0x714>
 80252ec:	2601      	movs	r6, #1
 80252ee:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80252f0:	682b      	ldr	r3, [r5, #0]
 80252f2:	045f      	lsls	r7, r3, #17
 80252f4:	d50c      	bpl.n	8025310 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (pPeriphClkInit->I2c2ClockSelection)
 80252f6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80252fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80252fe:	f000 814b 	beq.w	8025598 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8025302:	f200 8137 	bhi.w	8025574 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8025306:	2b00      	cmp	r3, #0
 8025308:	f000 813a 	beq.w	8025580 <HAL_RCCEx_PeriphCLKConfig+0x748>
 802530c:	2601      	movs	r6, #1
 802530e:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8025310:	682b      	ldr	r3, [r5, #0]
 8025312:	0418      	lsls	r0, r3, #16
 8025314:	d50c      	bpl.n	8025330 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    switch (pPeriphClkInit->I2c3ClockSelection)
 8025316:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 802531a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802531e:	f000 8155 	beq.w	80255cc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8025322:	f200 8141 	bhi.w	80255a8 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8025326:	2b00      	cmp	r3, #0
 8025328:	f000 8144 	beq.w	80255b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 802532c:	2601      	movs	r6, #1
 802532e:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8025330:	686b      	ldr	r3, [r5, #4]
 8025332:	0559      	lsls	r1, r3, #21
 8025334:	d50c      	bpl.n	8025350 <HAL_RCCEx_PeriphCLKConfig+0x518>
    switch (pPeriphClkInit->I2c4ClockSelection)
 8025336:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 802533a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 802533e:	f000 815f 	beq.w	8025600 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8025342:	f200 814b 	bhi.w	80255dc <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8025346:	2b00      	cmp	r3, #0
 8025348:	f000 814e 	beq.w	80255e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 802534c:	2601      	movs	r6, #1
 802534e:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8025350:	682b      	ldr	r3, [r5, #0]
 8025352:	03da      	lsls	r2, r3, #15
 8025354:	d50b      	bpl.n	802536e <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch (pPeriphClkInit->I3c1ClockSelection)
 8025356:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 802535a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802535e:	f000 8157 	beq.w	8025610 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8025362:	f033 7300 	bics.w	r3, r3, #33554432	@ 0x2000000
 8025366:	f000 8158 	beq.w	802561a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 802536a:	2601      	movs	r6, #1
 802536c:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 802536e:	e9d5 1300 	ldrd	r1, r3, [r5]
 8025372:	051b      	lsls	r3, r3, #20
 8025374:	d509      	bpl.n	802538a <HAL_RCCEx_PeriphCLKConfig+0x552>
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8025376:	4b71      	ldr	r3, [pc, #452]	@ (802553c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8025378:	69da      	ldr	r2, [r3, #28]
 802537a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 802537e:	61da      	str	r2, [r3, #28]
 8025380:	69da      	ldr	r2, [r3, #28]
 8025382:	f8d5 0100 	ldr.w	r0, [r5, #256]	@ 0x100
 8025386:	4302      	orrs	r2, r0
 8025388:	61da      	str	r2, [r3, #28]
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 802538a:	038f      	lsls	r7, r1, #14
 802538c:	d510      	bpl.n	80253b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 802538e:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 8025392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8025396:	f000 8169 	beq.w	802566c <HAL_RCCEx_PeriphCLKConfig+0x834>
 802539a:	f200 814c 	bhi.w	8025636 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 802539e:	2b00      	cmp	r3, #0
 80253a0:	f000 8152 	beq.w	8025648 <HAL_RCCEx_PeriphCLKConfig+0x810>
 80253a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80253a8:	f000 815a 	beq.w	8025660 <HAL_RCCEx_PeriphCLKConfig+0x828>
 80253ac:	2601      	movs	r6, #1
 80253ae:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80253b0:	682b      	ldr	r3, [r5, #0]
 80253b2:	0358      	lsls	r0, r3, #13
 80253b4:	d510      	bpl.n	80253d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 80253b6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 80253ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80253be:	f000 8177 	beq.w	80256b0 <HAL_RCCEx_PeriphCLKConfig+0x878>
 80253c2:	f200 815a 	bhi.w	802567a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80253c6:	2b00      	cmp	r3, #0
 80253c8:	f000 8160 	beq.w	802568c <HAL_RCCEx_PeriphCLKConfig+0x854>
 80253cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80253d0:	f000 8168 	beq.w	80256a4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 80253d4:	2601      	movs	r6, #1
 80253d6:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80253d8:	686b      	ldr	r3, [r5, #4]
 80253da:	0699      	lsls	r1, r3, #26
 80253dc:	d510      	bpl.n	8025400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 80253de:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 80253e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80253e6:	f000 8185 	beq.w	80256f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80253ea:	f200 8168 	bhi.w	80256be <HAL_RCCEx_PeriphCLKConfig+0x886>
 80253ee:	2b00      	cmp	r3, #0
 80253f0:	f000 816e 	beq.w	80256d0 <HAL_RCCEx_PeriphCLKConfig+0x898>
 80253f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80253f8:	f000 8176 	beq.w	80256e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80253fc:	2601      	movs	r6, #1
 80253fe:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8025400:	686b      	ldr	r3, [r5, #4]
 8025402:	065a      	lsls	r2, r3, #25
 8025404:	d510      	bpl.n	8025428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 8025406:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 802540a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 802540e:	f000 8193 	beq.w	8025738 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8025412:	f200 8176 	bhi.w	8025702 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8025416:	2b00      	cmp	r3, #0
 8025418:	f000 817c 	beq.w	8025714 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 802541c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8025420:	f000 8184 	beq.w	802572c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8025424:	2601      	movs	r6, #1
 8025426:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8025428:	686b      	ldr	r3, [r5, #4]
 802542a:	061b      	lsls	r3, r3, #24
 802542c:	d510      	bpl.n	8025450 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 802542e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8025432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8025436:	f000 81a1 	beq.w	802577c <HAL_RCCEx_PeriphCLKConfig+0x944>
 802543a:	f200 8184 	bhi.w	8025746 <HAL_RCCEx_PeriphCLKConfig+0x90e>
 802543e:	2b00      	cmp	r3, #0
 8025440:	f000 818a 	beq.w	8025758 <HAL_RCCEx_PeriphCLKConfig+0x920>
 8025444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8025448:	f000 8192 	beq.w	8025770 <HAL_RCCEx_PeriphCLKConfig+0x938>
 802544c:	2601      	movs	r6, #1
 802544e:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8025450:	686b      	ldr	r3, [r5, #4]
 8025452:	05df      	lsls	r7, r3, #23
 8025454:	d510      	bpl.n	8025478 <HAL_RCCEx_PeriphCLKConfig+0x640>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 8025456:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 802545a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802545e:	f000 81af 	beq.w	80257c0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8025462:	f200 8192 	bhi.w	802578a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8025466:	2b00      	cmp	r3, #0
 8025468:	f000 8198 	beq.w	802579c <HAL_RCCEx_PeriphCLKConfig+0x964>
 802546c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8025470:	f000 81a0 	beq.w	80257b4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8025474:	2601      	movs	r6, #1
 8025476:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8025478:	682b      	ldr	r3, [r5, #0]
 802547a:	0318      	lsls	r0, r3, #12
 802547c:	f140 81b9 	bpl.w	80257f2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8025480:	f8d5 30c0 	ldr.w	r3, [r5, #192]	@ 0xc0
 8025484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8025488:	f000 81d3 	beq.w	8025832 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 802548c:	f200 819f 	bhi.w	80257ce <HAL_RCCEx_PeriphCLKConfig+0x996>
 8025490:	2b00      	cmp	r3, #0
 8025492:	f000 81c2 	beq.w	802581a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8025496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802549a:	f000 81c4 	beq.w	8025826 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 802549e:	2601      	movs	r6, #1
 80254a0:	4634      	mov	r4, r6
 80254a2:	e1a6      	b.n	80257f2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80254a4:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80254a8:	f7ff fc5a 	bl	8024d60 <RCCEx_PLL3_Config>
 80254ac:	e6dc      	b.n	8025268 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (pPeriphClkInit->Usart11ClockSelection)
 80254ae:	2601      	movs	r6, #1
 80254b0:	4634      	mov	r4, r6
 80254b2:	e6e7      	b.n	8025284 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 80254b4:	4626      	mov	r6, r4
 80254b6:	e6e5      	b.n	8025284 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (pPeriphClkInit->Uart12ClockSelection)
 80254b8:	f023 0210 	bic.w	r2, r3, #16
 80254bc:	2a40      	cmp	r2, #64	@ 0x40
 80254be:	d002      	beq.n	80254c6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80254c0:	2b30      	cmp	r3, #48	@ 0x30
 80254c2:	f47f aeef 	bne.w	80252a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    if (ret == HAL_OK)
 80254c6:	b9ac      	cbnz	r4, 80254f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80254c8:	4a1c      	ldr	r2, [pc, #112]	@ (802553c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80254ca:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 80254ce:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 80254d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80254d6:	430b      	orrs	r3, r1
 80254d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80254dc:	e6e4      	b.n	80252a8 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80254de:	f105 0008 	add.w	r0, r5, #8
 80254e2:	f7ff fbd1 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80254e6:	4604      	mov	r4, r0
        break;
 80254e8:	e7ed      	b.n	80254c6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80254ea:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80254ee:	f7ff fc37 	bl	8024d60 <RCCEx_PLL3_Config>
 80254f2:	e7f8      	b.n	80254e6 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 80254f4:	4626      	mov	r6, r4
 80254f6:	e6d7      	b.n	80252a8 <HAL_RCCEx_PeriphCLKConfig+0x470>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80254f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80254fc:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 8025500:	d003      	beq.n	802550a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 8025502:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8025506:	f47f aee1 	bne.w	80252cc <HAL_RCCEx_PeriphCLKConfig+0x494>
    if (ret == HAL_OK)
 802550a:	b9ac      	cbnz	r4, 8025538 <HAL_RCCEx_PeriphCLKConfig+0x700>
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 802550c:	4a0b      	ldr	r2, [pc, #44]	@ (802553c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802550e:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 8025512:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8025516:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 802551a:	430b      	orrs	r3, r1
 802551c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8025520:	e6d6      	b.n	80252d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025522:	f105 0008 	add.w	r0, r5, #8
 8025526:	f7ff fbaf 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 802552a:	4604      	mov	r4, r0
        break;
 802552c:	e7ed      	b.n	802550a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 802552e:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025532:	f7ff fc15 	bl	8024d60 <RCCEx_PLL3_Config>
 8025536:	e7f8      	b.n	802552a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8025538:	4626      	mov	r6, r4
 802553a:	e6c9      	b.n	80252d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 802553c:	44020c00 	.word	0x44020c00
    switch (pPeriphClkInit->I2c1ClockSelection)
 8025540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8025544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8025548:	f47f aed0 	bne.w	80252ec <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    if (ret == HAL_OK)
 802554c:	b984      	cbnz	r4, 8025570 <HAL_RCCEx_PeriphCLKConfig+0x738>
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 802554e:	4abc      	ldr	r2, [pc, #752]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8025550:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8025554:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8025558:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 802555c:	430b      	orrs	r3, r1
 802555e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8025562:	e6c5      	b.n	80252f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025564:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025568:	f7ff fbfa 	bl	8024d60 <RCCEx_PLL3_Config>
 802556c:	4604      	mov	r4, r0
        break;
 802556e:	e7ed      	b.n	802554c <HAL_RCCEx_PeriphCLKConfig+0x714>
 8025570:	4626      	mov	r6, r4
 8025572:	e6bd      	b.n	80252f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    switch (pPeriphClkInit->I2c2ClockSelection)
 8025574:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8025578:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 802557c:	f47f aec6 	bne.w	802530c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    if (ret == HAL_OK)
 8025580:	b984      	cbnz	r4, 80255a4 <HAL_RCCEx_PeriphCLKConfig+0x76c>
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8025582:	4aaf      	ldr	r2, [pc, #700]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8025584:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 8025588:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 802558c:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8025590:	430b      	orrs	r3, r1
 8025592:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8025596:	e6bb      	b.n	8025310 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025598:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 802559c:	f7ff fbe0 	bl	8024d60 <RCCEx_PLL3_Config>
 80255a0:	4604      	mov	r4, r0
        break;
 80255a2:	e7ed      	b.n	8025580 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80255a4:	4626      	mov	r6, r4
 80255a6:	e6b3      	b.n	8025310 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (pPeriphClkInit->I2c3ClockSelection)
 80255a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80255ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80255b0:	f47f aebc 	bne.w	802532c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    if (ret == HAL_OK)
 80255b4:	b984      	cbnz	r4, 80255d8 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80255b6:	4aa2      	ldr	r2, [pc, #648]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80255b8:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 80255bc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80255c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80255c4:	430b      	orrs	r3, r1
 80255c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80255ca:	e6b1      	b.n	8025330 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80255cc:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80255d0:	f7ff fbc6 	bl	8024d60 <RCCEx_PLL3_Config>
 80255d4:	4604      	mov	r4, r0
        break;
 80255d6:	e7ed      	b.n	80255b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 80255d8:	4626      	mov	r6, r4
 80255da:	e6a9      	b.n	8025330 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    switch (pPeriphClkInit->I2c4ClockSelection)
 80255dc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80255e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80255e4:	f47f aeb2 	bne.w	802534c <HAL_RCCEx_PeriphCLKConfig+0x514>
    if (ret == HAL_OK)
 80255e8:	b984      	cbnz	r4, 802560c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80255ea:	4a95      	ldr	r2, [pc, #596]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80255ec:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 80255f0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80255f4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80255f8:	430b      	orrs	r3, r1
 80255fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80255fe:	e6a7      	b.n	8025350 <HAL_RCCEx_PeriphCLKConfig+0x518>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025600:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025604:	f7ff fbac 	bl	8024d60 <RCCEx_PLL3_Config>
 8025608:	4604      	mov	r4, r0
        break;
 802560a:	e7ed      	b.n	80255e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 802560c:	4626      	mov	r6, r4
 802560e:	e69f      	b.n	8025350 <HAL_RCCEx_PeriphCLKConfig+0x518>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025610:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025614:	f7ff fba4 	bl	8024d60 <RCCEx_PLL3_Config>
 8025618:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 802561a:	b954      	cbnz	r4, 8025632 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 802561c:	4a88      	ldr	r2, [pc, #544]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 802561e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 8025622:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8025626:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 802562a:	430b      	orrs	r3, r1
 802562c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8025630:	e69d      	b.n	802536e <HAL_RCCEx_PeriphCLKConfig+0x536>
 8025632:	4626      	mov	r6, r4
 8025634:	e69b      	b.n	802536e <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 8025636:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 802563a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 802563e:	d003      	beq.n	8025648 <HAL_RCCEx_PeriphCLKConfig+0x810>
 8025640:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8025644:	f47f aeb2 	bne.w	80253ac <HAL_RCCEx_PeriphCLKConfig+0x574>
    if (ret == HAL_OK)
 8025648:	b9ac      	cbnz	r4, 8025676 <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 802564a:	4a7d      	ldr	r2, [pc, #500]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 802564c:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8025650:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8025654:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8025658:	430b      	orrs	r3, r1
 802565a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 802565e:	e6a7      	b.n	80253b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025660:	f105 0008 	add.w	r0, r5, #8
 8025664:	f7ff fb10 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025668:	4604      	mov	r4, r0
        break;
 802566a:	e7ed      	b.n	8025648 <HAL_RCCEx_PeriphCLKConfig+0x810>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 802566c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025670:	f7ff fb76 	bl	8024d60 <RCCEx_PLL3_Config>
 8025674:	e7f8      	b.n	8025668 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8025676:	4626      	mov	r6, r4
 8025678:	e69a      	b.n	80253b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 802567a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 802567e:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8025682:	d003      	beq.n	802568c <HAL_RCCEx_PeriphCLKConfig+0x854>
 8025684:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8025688:	f47f aea4 	bne.w	80253d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    if (ret == HAL_OK)
 802568c:	b9ac      	cbnz	r4, 80256ba <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 802568e:	4a6c      	ldr	r2, [pc, #432]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8025690:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8025694:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8025698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 802569c:	430b      	orrs	r3, r1
 802569e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80256a2:	e699      	b.n	80253d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80256a4:	f105 0008 	add.w	r0, r5, #8
 80256a8:	f7ff faee 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80256ac:	4604      	mov	r4, r0
        break;
 80256ae:	e7ed      	b.n	802568c <HAL_RCCEx_PeriphCLKConfig+0x854>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80256b0:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80256b4:	f7ff fb54 	bl	8024d60 <RCCEx_PLL3_Config>
 80256b8:	e7f8      	b.n	80256ac <HAL_RCCEx_PeriphCLKConfig+0x874>
 80256ba:	4626      	mov	r6, r4
 80256bc:	e68c      	b.n	80253d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 80256be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80256c2:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80256c6:	d003      	beq.n	80256d0 <HAL_RCCEx_PeriphCLKConfig+0x898>
 80256c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80256cc:	f47f ae96 	bne.w	80253fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    if (ret == HAL_OK)
 80256d0:	b9ac      	cbnz	r4, 80256fe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80256d2:	4a5b      	ldr	r2, [pc, #364]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80256d4:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 80256d8:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 80256dc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80256e0:	430b      	orrs	r3, r1
 80256e2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80256e6:	e68b      	b.n	8025400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80256e8:	f105 0008 	add.w	r0, r5, #8
 80256ec:	f7ff facc 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80256f0:	4604      	mov	r4, r0
        break;
 80256f2:	e7ed      	b.n	80256d0 <HAL_RCCEx_PeriphCLKConfig+0x898>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80256f4:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80256f8:	f7ff fb32 	bl	8024d60 <RCCEx_PLL3_Config>
 80256fc:	e7f8      	b.n	80256f0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80256fe:	4626      	mov	r6, r4
 8025700:	e67e      	b.n	8025400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 8025702:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8025706:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 802570a:	d003      	beq.n	8025714 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 802570c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8025710:	f47f ae88 	bne.w	8025424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    if (ret == HAL_OK)
 8025714:	b9ac      	cbnz	r4, 8025742 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8025716:	4a4a      	ldr	r2, [pc, #296]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8025718:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 802571c:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8025720:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8025724:	430b      	orrs	r3, r1
 8025726:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 802572a:	e67d      	b.n	8025428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 802572c:	f105 0008 	add.w	r0, r5, #8
 8025730:	f7ff faaa 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025734:	4604      	mov	r4, r0
        break;
 8025736:	e7ed      	b.n	8025714 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025738:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 802573c:	f7ff fb10 	bl	8024d60 <RCCEx_PLL3_Config>
 8025740:	e7f8      	b.n	8025734 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8025742:	4626      	mov	r6, r4
 8025744:	e670      	b.n	8025428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8025746:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 802574a:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 802574e:	d003      	beq.n	8025758 <HAL_RCCEx_PeriphCLKConfig+0x920>
 8025750:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8025754:	f47f ae7a 	bne.w	802544c <HAL_RCCEx_PeriphCLKConfig+0x614>
    if (ret == HAL_OK)
 8025758:	b9ac      	cbnz	r4, 8025786 <HAL_RCCEx_PeriphCLKConfig+0x94e>
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 802575a:	4a39      	ldr	r2, [pc, #228]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 802575c:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 8025760:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8025764:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8025768:	430b      	orrs	r3, r1
 802576a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 802576e:	e66f      	b.n	8025450 <HAL_RCCEx_PeriphCLKConfig+0x618>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025770:	f105 0008 	add.w	r0, r5, #8
 8025774:	f7ff fa88 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025778:	4604      	mov	r4, r0
        break;
 802577a:	e7ed      	b.n	8025758 <HAL_RCCEx_PeriphCLKConfig+0x920>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 802577c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025780:	f7ff faee 	bl	8024d60 <RCCEx_PLL3_Config>
 8025784:	e7f8      	b.n	8025778 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8025786:	4626      	mov	r6, r4
 8025788:	e662      	b.n	8025450 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 802578a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 802578e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8025792:	d003      	beq.n	802579c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8025794:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8025798:	f47f ae6c 	bne.w	8025474 <HAL_RCCEx_PeriphCLKConfig+0x63c>
    if (ret == HAL_OK)
 802579c:	b9ac      	cbnz	r4, 80257ca <HAL_RCCEx_PeriphCLKConfig+0x992>
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 802579e:	4a28      	ldr	r2, [pc, #160]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80257a0:	f8d5 10b8 	ldr.w	r1, [r5, #184]	@ 0xb8
 80257a4:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 80257a8:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80257ac:	430b      	orrs	r3, r1
 80257ae:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80257b2:	e661      	b.n	8025478 <HAL_RCCEx_PeriphCLKConfig+0x640>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80257b4:	f105 0008 	add.w	r0, r5, #8
 80257b8:	f7ff fa66 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80257bc:	4604      	mov	r4, r0
        break;
 80257be:	e7ed      	b.n	802579c <HAL_RCCEx_PeriphCLKConfig+0x964>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80257c0:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80257c4:	f7ff facc 	bl	8024d60 <RCCEx_PLL3_Config>
 80257c8:	e7f8      	b.n	80257bc <HAL_RCCEx_PeriphCLKConfig+0x984>
 80257ca:	4626      	mov	r6, r4
 80257cc:	e654      	b.n	8025478 <HAL_RCCEx_PeriphCLKConfig+0x640>
    switch (pPeriphClkInit->Sai1ClockSelection)
 80257ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80257d2:	d003      	beq.n	80257dc <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80257d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80257d8:	f47f ae61 	bne.w	802549e <HAL_RCCEx_PeriphCLKConfig+0x666>
    if (ret == HAL_OK)
 80257dc:	bb74      	cbnz	r4, 802583c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80257de:	4a18      	ldr	r2, [pc, #96]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80257e0:	f8d5 10c0 	ldr.w	r1, [r5, #192]	@ 0xc0
 80257e4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80257e8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80257ec:	430b      	orrs	r3, r1
 80257ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80257f2:	682b      	ldr	r3, [r5, #0]
 80257f4:	02d9      	lsls	r1, r3, #11
 80257f6:	d538      	bpl.n	802586a <HAL_RCCEx_PeriphCLKConfig+0xa32>
    switch (pPeriphClkInit->Sai2ClockSelection)
 80257f8:	f8d5 30c4 	ldr.w	r3, [r5, #196]	@ 0xc4
 80257fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8025800:	f000 80cc 	beq.w	802599c <HAL_RCCEx_PeriphCLKConfig+0xb64>
 8025804:	d81e      	bhi.n	8025844 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8025806:	2b00      	cmp	r3, #0
 8025808:	f000 80bc 	beq.w	8025984 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 802580c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8025810:	f000 80be 	beq.w	8025990 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8025814:	2601      	movs	r6, #1
 8025816:	4634      	mov	r4, r6
 8025818:	e027      	b.n	802586a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802581a:	4a09      	ldr	r2, [pc, #36]	@ (8025840 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 802581c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 802581e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8025822:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8025824:	e7da      	b.n	80257dc <HAL_RCCEx_PeriphCLKConfig+0x9a4>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025826:	f105 0008 	add.w	r0, r5, #8
 802582a:	f7ff fa2d 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 802582e:	4604      	mov	r4, r0
        break;
 8025830:	e7d4      	b.n	80257dc <HAL_RCCEx_PeriphCLKConfig+0x9a4>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025832:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025836:	f7ff fa93 	bl	8024d60 <RCCEx_PLL3_Config>
 802583a:	e7f8      	b.n	802582e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 802583c:	4626      	mov	r6, r4
 802583e:	e7d8      	b.n	80257f2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8025840:	44020c00 	.word	0x44020c00
    switch (pPeriphClkInit->Sai2ClockSelection)
 8025844:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8025848:	d002      	beq.n	8025850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 802584a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 802584e:	d1e1      	bne.n	8025814 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
    if (ret == HAL_OK)
 8025850:	2c00      	cmp	r4, #0
 8025852:	f040 80a8 	bne.w	80259a6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8025856:	4aa8      	ldr	r2, [pc, #672]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 8025858:	f8d5 10c4 	ldr.w	r1, [r5, #196]	@ 0xc4
 802585c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8025860:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 8025864:	430b      	orrs	r3, r1
 8025866:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 802586a:	682b      	ldr	r3, [r5, #0]
 802586c:	029a      	lsls	r2, r3, #10
 802586e:	d516      	bpl.n	802589e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8025870:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8025874:	2b02      	cmp	r3, #2
 8025876:	f000 8098 	beq.w	80259aa <HAL_RCCEx_PeriphCLKConfig+0xb72>
 802587a:	d903      	bls.n	8025884 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 802587c:	3b03      	subs	r3, #3
 802587e:	2b02      	cmp	r3, #2
 8025880:	f200 8099 	bhi.w	80259b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    if (ret == HAL_OK)
 8025884:	2c00      	cmp	r4, #0
 8025886:	f040 8099 	bne.w	80259bc <HAL_RCCEx_PeriphCLKConfig+0xb84>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 802588a:	4a9b      	ldr	r2, [pc, #620]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 802588c:	f8d5 10d0 	ldr.w	r1, [r5, #208]	@ 0xd0
 8025890:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8025894:	f023 0307 	bic.w	r3, r3, #7
 8025898:	430b      	orrs	r3, r1
 802589a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 802589e:	e9d5 0300 	ldrd	r0, r3, [r5]
 80258a2:	059b      	lsls	r3, r3, #22
 80258a4:	d510      	bpl.n	80258c8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80258a6:	f8d5 10d4 	ldr.w	r1, [r5, #212]	@ 0xd4
 80258aa:	f031 0308 	bics.w	r3, r1, #8
 80258ae:	f040 8087 	bne.w	80259c0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
    if (ret == HAL_OK)
 80258b2:	2c00      	cmp	r4, #0
 80258b4:	f040 8087 	bne.w	80259c6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80258b8:	4a8f      	ldr	r2, [pc, #572]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 80258ba:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80258be:	f023 0308 	bic.w	r3, r3, #8
 80258c2:	430b      	orrs	r3, r1
 80258c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80258c8:	0187      	lsls	r7, r0, #6
 80258ca:	d534      	bpl.n	8025936 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80258cc:	4f8b      	ldr	r7, [pc, #556]	@ (8025afc <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 80258ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80258d0:	f043 0301 	orr.w	r3, r3, #1
 80258d4:	627b      	str	r3, [r7, #36]	@ 0x24
    tickstart = HAL_GetTick();
 80258d6:	f7fc faf3 	bl	8021ec0 <HAL_GetTick>
 80258da:	4680      	mov	r8, r0
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80258dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80258de:	07d8      	lsls	r0, r3, #31
 80258e0:	d573      	bpl.n	80259ca <HAL_RCCEx_PeriphCLKConfig+0xb92>
    if (ret == HAL_OK)
 80258e2:	2c00      	cmp	r4, #0
 80258e4:	f040 80a7 	bne.w	8025a36 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80258e8:	4b83      	ldr	r3, [pc, #524]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80258ea:	f8d5 20f4 	ldr.w	r2, [r5, #244]	@ 0xf4
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80258ee:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80258f2:	f411 7140 	ands.w	r1, r1, #768	@ 0x300
 80258f6:	d171      	bne.n	80259dc <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80258f8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80258fc:	497e      	ldr	r1, [pc, #504]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 80258fe:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8025902:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8025906:	f040 8092 	bne.w	8025a2e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 802590a:	69c8      	ldr	r0, [r1, #28]
 802590c:	4a7c      	ldr	r2, [pc, #496]	@ (8025b00 <HAL_RCCEx_PeriphCLKConfig+0xcc8>)
 802590e:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 8025912:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8025916:	4302      	orrs	r2, r0
 8025918:	61ca      	str	r2, [r1, #28]
 802591a:	4a77      	ldr	r2, [pc, #476]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 802591c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025920:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 8025924:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8025928:	f8c2 10f0 	str.w	r1, [r2, #240]	@ 0xf0
 802592c:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 8025930:	430b      	orrs	r3, r1
 8025932:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8025936:	6829      	ldr	r1, [r5, #0]
 8025938:	014b      	lsls	r3, r1, #5
 802593a:	d509      	bpl.n	8025950 <HAL_RCCEx_PeriphCLKConfig+0xb18>
    switch (pPeriphClkInit->RngClockSelection)
 802593c:	f8d5 20c8 	ldr.w	r2, [r5, #200]	@ 0xc8
 8025940:	2a10      	cmp	r2, #16
 8025942:	f000 8088 	beq.w	8025a56 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8025946:	d878      	bhi.n	8025a3a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8025948:	2a00      	cmp	r2, #0
 802594a:	d07a      	beq.n	8025a42 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 802594c:	2601      	movs	r6, #1
 802594e:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8025950:	024f      	lsls	r7, r1, #9
 8025952:	d509      	bpl.n	8025968 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8025954:	f8d5 30cc 	ldr.w	r3, [r5, #204]	@ 0xcc
 8025958:	2b00      	cmp	r3, #0
 802595a:	f000 8084 	beq.w	8025a66 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 802595e:	2b40      	cmp	r3, #64	@ 0x40
 8025960:	f000 8092 	beq.w	8025a88 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8025964:	2601      	movs	r6, #1
 8025966:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8025968:	682b      	ldr	r3, [r5, #0]
 802596a:	0118      	lsls	r0, r3, #4
 802596c:	f140 80a4 	bpl.w	8025ab8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
    switch (pPeriphClkInit->Spi1ClockSelection)
 8025970:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 8025974:	2b04      	cmp	r3, #4
 8025976:	f200 80b9 	bhi.w	8025aec <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 802597a:	e8df f003 	tbb	[pc, r3]
 802597e:	ac8d      	.short	0xac8d
 8025980:	92b2      	.short	0x92b2
 8025982:	92          	.byte	0x92
 8025983:	00          	.byte	0x00
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8025984:	4a5c      	ldr	r2, [pc, #368]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 8025986:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8025988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802598c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 802598e:	e75f      	b.n	8025850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025990:	f105 0008 	add.w	r0, r5, #8
 8025994:	f7ff f978 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025998:	4604      	mov	r4, r0
        break;
 802599a:	e759      	b.n	8025850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 802599c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80259a0:	f7ff f9de 	bl	8024d60 <RCCEx_PLL3_Config>
 80259a4:	e7f8      	b.n	8025998 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 80259a6:	4626      	mov	r6, r4
 80259a8:	e75f      	b.n	802586a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80259aa:	f105 0008 	add.w	r0, r5, #8
 80259ae:	f7ff f96b 	bl	8024c88 <RCCEx_PLL2_Config>
 80259b2:	4604      	mov	r4, r0
        break;
 80259b4:	e766      	b.n	8025884 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    switch (pPeriphClkInit->AdcDacClockSelection)
 80259b6:	2601      	movs	r6, #1
 80259b8:	4634      	mov	r4, r6
 80259ba:	e770      	b.n	802589e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80259bc:	4626      	mov	r6, r4
 80259be:	e76e      	b.n	802589e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80259c0:	2601      	movs	r6, #1
 80259c2:	4634      	mov	r4, r6
 80259c4:	e780      	b.n	80258c8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80259c6:	4626      	mov	r6, r4
 80259c8:	e77e      	b.n	80258c8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80259ca:	f7fc fa79 	bl	8021ec0 <HAL_GetTick>
 80259ce:	eba0 0008 	sub.w	r0, r0, r8
 80259d2:	2802      	cmp	r0, #2
 80259d4:	d982      	bls.n	80258dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
        ret = HAL_TIMEOUT;
 80259d6:	2603      	movs	r6, #3
 80259d8:	4634      	mov	r4, r6
 80259da:	e7ac      	b.n	8025936 <HAL_RCCEx_PeriphCLKConfig+0xafe>
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80259dc:	4291      	cmp	r1, r2
 80259de:	d011      	beq.n	8025a04 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80259e0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 80259e4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80259e8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80259ec:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80259f0:	f8c3 10f0 	str.w	r1, [r3, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80259f4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80259f8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80259fc:	f8c3 10f0 	str.w	r1, [r3, #240]	@ 0xf0
        RCC->BDCR = tmpregister;
 8025a00:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8025a04:	07d1      	lsls	r1, r2, #31
 8025a06:	f57f af77 	bpl.w	80258f8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
        tickstart = HAL_GetTick();
 8025a0a:	f7fc fa59 	bl	8021ec0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8025a0e:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8025a12:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8025a14:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8025a18:	f8d8 30f0 	ldr.w	r3, [r8, #240]	@ 0xf0
 8025a1c:	079a      	lsls	r2, r3, #30
 8025a1e:	f53f af6b 	bmi.w	80258f8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8025a22:	f7fc fa4d 	bl	8021ec0 <HAL_GetTick>
 8025a26:	1bc0      	subs	r0, r0, r7
 8025a28:	4548      	cmp	r0, r9
 8025a2a:	d9f5      	bls.n	8025a18 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
 8025a2c:	e7d3      	b.n	80259d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8025a2e:	69ca      	ldr	r2, [r1, #28]
 8025a30:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8025a34:	e770      	b.n	8025918 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8025a36:	4626      	mov	r6, r4
 8025a38:	e77d      	b.n	8025936 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    switch (pPeriphClkInit->RngClockSelection)
 8025a3a:	f022 0310 	bic.w	r3, r2, #16
 8025a3e:	2b20      	cmp	r3, #32
 8025a40:	d184      	bne.n	802594c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    if (ret == HAL_OK)
 8025a42:	b974      	cbnz	r4, 8025a62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8025a44:	482c      	ldr	r0, [pc, #176]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 8025a46:	f8d0 30e8 	ldr.w	r3, [r0, #232]	@ 0xe8
 8025a4a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8025a4e:	4313      	orrs	r3, r2
 8025a50:	f8c0 30e8 	str.w	r3, [r0, #232]	@ 0xe8
 8025a54:	e77c      	b.n	8025950 <HAL_RCCEx_PeriphCLKConfig+0xb18>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8025a56:	4828      	ldr	r0, [pc, #160]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 8025a58:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8025a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8025a5e:	6283      	str	r3, [r0, #40]	@ 0x28
        break;
 8025a60:	e7ef      	b.n	8025a42 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8025a62:	4626      	mov	r6, r4
 8025a64:	e774      	b.n	8025950 <HAL_RCCEx_PeriphCLKConfig+0xb18>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8025a66:	4a24      	ldr	r2, [pc, #144]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 8025a68:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8025a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8025a6e:	6293      	str	r3, [r2, #40]	@ 0x28
    if (ret == HAL_OK)
 8025a70:	b984      	cbnz	r4, 8025a94 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8025a72:	4a21      	ldr	r2, [pc, #132]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 8025a74:	f8d5 10cc 	ldr.w	r1, [r5, #204]	@ 0xcc
 8025a78:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8025a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8025a80:	430b      	orrs	r3, r1
 8025a82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8025a86:	e76f      	b.n	8025968 <HAL_RCCEx_PeriphCLKConfig+0xb30>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025a88:	f105 0008 	add.w	r0, r5, #8
 8025a8c:	f7ff f8fc 	bl	8024c88 <RCCEx_PLL2_Config>
 8025a90:	4604      	mov	r4, r0
        break;
 8025a92:	e7ed      	b.n	8025a70 <HAL_RCCEx_PeriphCLKConfig+0xc38>
 8025a94:	4626      	mov	r6, r4
 8025a96:	e767      	b.n	8025968 <HAL_RCCEx_PeriphCLKConfig+0xb30>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8025a98:	4a17      	ldr	r2, [pc, #92]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 8025a9a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8025a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8025aa0:	6293      	str	r3, [r2, #40]	@ 0x28
    if (ret == HAL_OK)
 8025aa2:	bb34      	cbnz	r4, 8025af2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8025aa4:	4a14      	ldr	r2, [pc, #80]	@ (8025af8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 8025aa6:	f8d5 10dc 	ldr.w	r1, [r5, #220]	@ 0xdc
 8025aaa:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8025aae:	f023 0307 	bic.w	r3, r3, #7
 8025ab2:	430b      	orrs	r3, r1
 8025ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8025ab8:	682b      	ldr	r3, [r5, #0]
 8025aba:	00d9      	lsls	r1, r3, #3
 8025abc:	d531      	bpl.n	8025b22 <HAL_RCCEx_PeriphCLKConfig+0xcea>
    switch (pPeriphClkInit->Spi2ClockSelection)
 8025abe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8025ac2:	2b10      	cmp	r3, #16
 8025ac4:	d048      	beq.n	8025b58 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8025ac6:	d81d      	bhi.n	8025b04 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8025ac8:	2b00      	cmp	r3, #0
 8025aca:	d039      	beq.n	8025b40 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8025acc:	2b08      	cmp	r3, #8
 8025ace:	d03d      	beq.n	8025b4c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8025ad0:	2601      	movs	r6, #1
 8025ad2:	4634      	mov	r4, r6
 8025ad4:	e025      	b.n	8025b22 <HAL_RCCEx_PeriphCLKConfig+0xcea>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025ad6:	f105 0008 	add.w	r0, r5, #8
 8025ada:	f7ff f8d5 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025ade:	4604      	mov	r4, r0
        break;
 8025ae0:	e7df      	b.n	8025aa2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025ae2:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025ae6:	f7ff f93b 	bl	8024d60 <RCCEx_PLL3_Config>
 8025aea:	e7f8      	b.n	8025ade <HAL_RCCEx_PeriphCLKConfig+0xca6>
    switch (pPeriphClkInit->Spi1ClockSelection)
 8025aec:	2601      	movs	r6, #1
 8025aee:	4634      	mov	r4, r6
 8025af0:	e7e2      	b.n	8025ab8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8025af2:	4626      	mov	r6, r4
 8025af4:	e7e0      	b.n	8025ab8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8025af6:	bf00      	nop
 8025af8:	44020c00 	.word	0x44020c00
 8025afc:	44020800 	.word	0x44020800
 8025b00:	00ffffcf 	.word	0x00ffffcf
    switch (pPeriphClkInit->Spi2ClockSelection)
 8025b04:	2b18      	cmp	r3, #24
 8025b06:	d001      	beq.n	8025b0c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8025b08:	2b20      	cmp	r3, #32
 8025b0a:	d1e1      	bne.n	8025ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    if (ret == HAL_OK)
 8025b0c:	bb4c      	cbnz	r4, 8025b62 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8025b0e:	4aa8      	ldr	r2, [pc, #672]	@ (8025db0 <HAL_RCCEx_PeriphCLKConfig+0xf78>)
 8025b10:	f8d5 10e0 	ldr.w	r1, [r5, #224]	@ 0xe0
 8025b14:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8025b18:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8025b1c:	430b      	orrs	r3, r1
 8025b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8025b22:	682b      	ldr	r3, [r5, #0]
 8025b24:	009a      	lsls	r2, r3, #2
 8025b26:	d52f      	bpl.n	8025b88 <HAL_RCCEx_PeriphCLKConfig+0xd50>
    switch (pPeriphClkInit->Spi3ClockSelection)
 8025b28:	f8d5 30e4 	ldr.w	r3, [r5, #228]	@ 0xe4
 8025b2c:	2b80      	cmp	r3, #128	@ 0x80
 8025b2e:	d075      	beq.n	8025c1c <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8025b30:	d819      	bhi.n	8025b66 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8025b32:	2b00      	cmp	r3, #0
 8025b34:	d066      	beq.n	8025c04 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
 8025b36:	2b40      	cmp	r3, #64	@ 0x40
 8025b38:	d06a      	beq.n	8025c10 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8025b3a:	2601      	movs	r6, #1
 8025b3c:	4634      	mov	r4, r6
 8025b3e:	e023      	b.n	8025b88 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8025b40:	4a9b      	ldr	r2, [pc, #620]	@ (8025db0 <HAL_RCCEx_PeriphCLKConfig+0xf78>)
 8025b42:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8025b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8025b48:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8025b4a:	e7df      	b.n	8025b0c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025b4c:	f105 0008 	add.w	r0, r5, #8
 8025b50:	f7ff f89a 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025b54:	4604      	mov	r4, r0
        break;
 8025b56:	e7d9      	b.n	8025b0c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025b58:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025b5c:	f7ff f900 	bl	8024d60 <RCCEx_PLL3_Config>
 8025b60:	e7f8      	b.n	8025b54 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8025b62:	4626      	mov	r6, r4
 8025b64:	e7dd      	b.n	8025b22 <HAL_RCCEx_PeriphCLKConfig+0xcea>
    switch (pPeriphClkInit->Spi3ClockSelection)
 8025b66:	2bc0      	cmp	r3, #192	@ 0xc0
 8025b68:	d002      	beq.n	8025b70 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8025b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8025b6e:	d1e4      	bne.n	8025b3a <HAL_RCCEx_PeriphCLKConfig+0xd02>
    if (ret == HAL_OK)
 8025b70:	2c00      	cmp	r4, #0
 8025b72:	d158      	bne.n	8025c26 <HAL_RCCEx_PeriphCLKConfig+0xdee>
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8025b74:	4a8e      	ldr	r2, [pc, #568]	@ (8025db0 <HAL_RCCEx_PeriphCLKConfig+0xf78>)
 8025b76:	f8d5 10e4 	ldr.w	r1, [r5, #228]	@ 0xe4
 8025b7a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8025b7e:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8025b82:	430b      	orrs	r3, r1
 8025b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8025b88:	682b      	ldr	r3, [r5, #0]
 8025b8a:	005b      	lsls	r3, r3, #1
 8025b8c:	d50c      	bpl.n	8025ba8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8025b8e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	@ 0xe8
 8025b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8025b96:	d062      	beq.n	8025c5e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8025b98:	d847      	bhi.n	8025c2a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
 8025b9a:	2b00      	cmp	r3, #0
 8025b9c:	d04d      	beq.n	8025c3a <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8025b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8025ba2:	d056      	beq.n	8025c52 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 8025ba4:	2601      	movs	r6, #1
 8025ba6:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8025ba8:	682b      	ldr	r3, [r5, #0]
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	da0c      	bge.n	8025bc8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    switch (pPeriphClkInit->Spi5ClockSelection)
 8025bae:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
 8025bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8025bb6:	d073      	beq.n	8025ca0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
 8025bb8:	d858      	bhi.n	8025c6c <HAL_RCCEx_PeriphCLKConfig+0xe34>
 8025bba:	2b00      	cmp	r3, #0
 8025bbc:	d05e      	beq.n	8025c7c <HAL_RCCEx_PeriphCLKConfig+0xe44>
 8025bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8025bc2:	d067      	beq.n	8025c94 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8025bc4:	2601      	movs	r6, #1
 8025bc6:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8025bc8:	686b      	ldr	r3, [r5, #4]
 8025bca:	07df      	lsls	r7, r3, #31
 8025bcc:	d50d      	bpl.n	8025bea <HAL_RCCEx_PeriphCLKConfig+0xdb2>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8025bce:	f8d5 30f0 	ldr.w	r3, [r5, #240]	@ 0xf0
 8025bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8025bd6:	f000 8084 	beq.w	8025ce2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
 8025bda:	d868      	bhi.n	8025cae <HAL_RCCEx_PeriphCLKConfig+0xe76>
 8025bdc:	2b00      	cmp	r3, #0
 8025bde:	d06e      	beq.n	8025cbe <HAL_RCCEx_PeriphCLKConfig+0xe86>
 8025be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8025be4:	d077      	beq.n	8025cd6 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8025be6:	2601      	movs	r6, #1
 8025be8:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8025bea:	686b      	ldr	r3, [r5, #4]
 8025bec:	0798      	lsls	r0, r3, #30
 8025bee:	f140 8090 	bpl.w	8025d12 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    switch (pPeriphClkInit->OspiClockSelection)
 8025bf2:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8025bf6:	2b03      	cmp	r3, #3
 8025bf8:	f200 80bb 	bhi.w	8025d72 <HAL_RCCEx_PeriphCLKConfig+0xf3a>
 8025bfc:	e8df f003 	tbb	[pc, r3]
 8025c00:	7db3787d 	.word	0x7db3787d
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8025c04:	4a6a      	ldr	r2, [pc, #424]	@ (8025db0 <HAL_RCCEx_PeriphCLKConfig+0xf78>)
 8025c06:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8025c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8025c0c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8025c0e:	e7af      	b.n	8025b70 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025c10:	f105 0008 	add.w	r0, r5, #8
 8025c14:	f7ff f838 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025c18:	4604      	mov	r4, r0
        break;
 8025c1a:	e7a9      	b.n	8025b70 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025c1c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025c20:	f7ff f89e 	bl	8024d60 <RCCEx_PLL3_Config>
 8025c24:	e7f8      	b.n	8025c18 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8025c26:	4626      	mov	r6, r4
 8025c28:	e7ae      	b.n	8025b88 <HAL_RCCEx_PeriphCLKConfig+0xd50>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8025c2a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8025c2e:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8025c32:	d002      	beq.n	8025c3a <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8025c34:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8025c38:	d1b4      	bne.n	8025ba4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    if (ret == HAL_OK)
 8025c3a:	b9ac      	cbnz	r4, 8025c68 <HAL_RCCEx_PeriphCLKConfig+0xe30>
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8025c3c:	4a5c      	ldr	r2, [pc, #368]	@ (8025db0 <HAL_RCCEx_PeriphCLKConfig+0xf78>)
 8025c3e:	f8d5 10e8 	ldr.w	r1, [r5, #232]	@ 0xe8
 8025c42:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8025c46:	f423 6360 	bic.w	r3, r3, #3584	@ 0xe00
 8025c4a:	430b      	orrs	r3, r1
 8025c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8025c50:	e7aa      	b.n	8025ba8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025c52:	f105 0008 	add.w	r0, r5, #8
 8025c56:	f7ff f817 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025c5a:	4604      	mov	r4, r0
        break;
 8025c5c:	e7ed      	b.n	8025c3a <HAL_RCCEx_PeriphCLKConfig+0xe02>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025c5e:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025c62:	f7ff f87d 	bl	8024d60 <RCCEx_PLL3_Config>
 8025c66:	e7f8      	b.n	8025c5a <HAL_RCCEx_PeriphCLKConfig+0xe22>
 8025c68:	4626      	mov	r6, r4
 8025c6a:	e79d      	b.n	8025ba8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    switch (pPeriphClkInit->Spi5ClockSelection)
 8025c6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8025c70:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8025c74:	d002      	beq.n	8025c7c <HAL_RCCEx_PeriphCLKConfig+0xe44>
 8025c76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8025c7a:	d1a3      	bne.n	8025bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
    if (ret == HAL_OK)
 8025c7c:	b9ac      	cbnz	r4, 8025caa <HAL_RCCEx_PeriphCLKConfig+0xe72>
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8025c7e:	4a4c      	ldr	r2, [pc, #304]	@ (8025db0 <HAL_RCCEx_PeriphCLKConfig+0xf78>)
 8025c80:	f8d5 10ec 	ldr.w	r1, [r5, #236]	@ 0xec
 8025c84:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8025c88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8025c8c:	430b      	orrs	r3, r1
 8025c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8025c92:	e799      	b.n	8025bc8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025c94:	f105 0008 	add.w	r0, r5, #8
 8025c98:	f7fe fff6 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025c9c:	4604      	mov	r4, r0
        break;
 8025c9e:	e7ed      	b.n	8025c7c <HAL_RCCEx_PeriphCLKConfig+0xe44>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025ca0:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025ca4:	f7ff f85c 	bl	8024d60 <RCCEx_PLL3_Config>
 8025ca8:	e7f8      	b.n	8025c9c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8025caa:	4626      	mov	r6, r4
 8025cac:	e78c      	b.n	8025bc8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8025cae:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8025cb2:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8025cb6:	d002      	beq.n	8025cbe <HAL_RCCEx_PeriphCLKConfig+0xe86>
 8025cb8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8025cbc:	d193      	bne.n	8025be6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
    if (ret == HAL_OK)
 8025cbe:	b9ac      	cbnz	r4, 8025cec <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8025cc0:	4a3b      	ldr	r2, [pc, #236]	@ (8025db0 <HAL_RCCEx_PeriphCLKConfig+0xf78>)
 8025cc2:	f8d5 10f0 	ldr.w	r1, [r5, #240]	@ 0xf0
 8025cc6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8025cca:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
 8025cce:	430b      	orrs	r3, r1
 8025cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8025cd4:	e789      	b.n	8025bea <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025cd6:	f105 0008 	add.w	r0, r5, #8
 8025cda:	f7fe ffd5 	bl	8024c88 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025cde:	4604      	mov	r4, r0
        break;
 8025ce0:	e7ed      	b.n	8025cbe <HAL_RCCEx_PeriphCLKConfig+0xe86>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025ce2:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025ce6:	f7ff f83b 	bl	8024d60 <RCCEx_PLL3_Config>
 8025cea:	e7f8      	b.n	8025cde <HAL_RCCEx_PeriphCLKConfig+0xea6>
 8025cec:	4626      	mov	r6, r4
 8025cee:	e77c      	b.n	8025bea <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8025cf0:	4a2f      	ldr	r2, [pc, #188]	@ (8025db0 <HAL_RCCEx_PeriphCLKConfig+0xf78>)
 8025cf2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8025cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8025cf8:	6293      	str	r3, [r2, #40]	@ 0x28
    if (ret == HAL_OK)
 8025cfa:	2c00      	cmp	r4, #0
 8025cfc:	d13c      	bne.n	8025d78 <HAL_RCCEx_PeriphCLKConfig+0xf40>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8025cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8025db0 <HAL_RCCEx_PeriphCLKConfig+0xf78>)
 8025d00:	f8d5 10d8 	ldr.w	r1, [r5, #216]	@ 0xd8
 8025d04:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8025d08:	f023 0303 	bic.w	r3, r3, #3
 8025d0c:	430b      	orrs	r3, r1
 8025d0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8025d12:	686b      	ldr	r3, [r5, #4]
 8025d14:	0759      	lsls	r1, r3, #29
 8025d16:	d50a      	bpl.n	8025d2e <HAL_RCCEx_PeriphCLKConfig+0xef6>
    switch (pPeriphClkInit->FdcanClockSelection)
 8025d18:	f8d5 30bc 	ldr.w	r3, [r5, #188]	@ 0xbc
 8025d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8025d20:	d02c      	beq.n	8025d7c <HAL_RCCEx_PeriphCLKConfig+0xf44>
 8025d22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8025d26:	d03a      	beq.n	8025d9e <HAL_RCCEx_PeriphCLKConfig+0xf66>
 8025d28:	b36b      	cbz	r3, 8025d86 <HAL_RCCEx_PeriphCLKConfig+0xf4e>
 8025d2a:	2601      	movs	r6, #1
 8025d2c:	4634      	mov	r4, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8025d2e:	686b      	ldr	r3, [r5, #4]
 8025d30:	06da      	lsls	r2, r3, #27
 8025d32:	d550      	bpl.n	8025dd6 <HAL_RCCEx_PeriphCLKConfig+0xf9e>
    switch (pPeriphClkInit->UsbClockSelection)
 8025d34:	f8d5 30fc 	ldr.w	r3, [r5, #252]	@ 0xfc
 8025d38:	2b20      	cmp	r3, #32
 8025d3a:	d04e      	beq.n	8025dda <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8025d3c:	2b30      	cmp	r3, #48	@ 0x30
 8025d3e:	d03e      	beq.n	8025dbe <HAL_RCCEx_PeriphCLKConfig+0xf86>
 8025d40:	2b10      	cmp	r3, #16
 8025d42:	d037      	beq.n	8025db4 <HAL_RCCEx_PeriphCLKConfig+0xf7c>
 8025d44:	2401      	movs	r4, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8025d46:	686b      	ldr	r3, [r5, #4]
 8025d48:	071b      	lsls	r3, r3, #28
 8025d4a:	d509      	bpl.n	8025d60 <HAL_RCCEx_PeriphCLKConfig+0xf28>
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8025d4c:	4a18      	ldr	r2, [pc, #96]	@ (8025db0 <HAL_RCCEx_PeriphCLKConfig+0xf78>)
 8025d4e:	f8d5 10f8 	ldr.w	r1, [r5, #248]	@ 0xf8
 8025d52:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8025d56:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8025d5a:	430b      	orrs	r3, r1
 8025d5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
}
 8025d60:	4620      	mov	r0, r4
 8025d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025d66:	f105 0008 	add.w	r0, r5, #8
 8025d6a:	f7fe ff8d 	bl	8024c88 <RCCEx_PLL2_Config>
 8025d6e:	4604      	mov	r4, r0
        break;
 8025d70:	e7c3      	b.n	8025cfa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    switch (pPeriphClkInit->OspiClockSelection)
 8025d72:	2601      	movs	r6, #1
 8025d74:	4634      	mov	r4, r6
 8025d76:	e7cc      	b.n	8025d12 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8025d78:	4626      	mov	r6, r4
 8025d7a:	e7ca      	b.n	8025d12 <HAL_RCCEx_PeriphCLKConfig+0xeda>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8025d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8025db0 <HAL_RCCEx_PeriphCLKConfig+0xf78>)
 8025d7e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8025d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8025d84:	6293      	str	r3, [r2, #40]	@ 0x28
    if (ret == HAL_OK)
 8025d86:	b984      	cbnz	r4, 8025daa <HAL_RCCEx_PeriphCLKConfig+0xf72>
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8025d88:	4a09      	ldr	r2, [pc, #36]	@ (8025db0 <HAL_RCCEx_PeriphCLKConfig+0xf78>)
 8025d8a:	f8d5 10bc 	ldr.w	r1, [r5, #188]	@ 0xbc
 8025d8e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8025d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8025d96:	430b      	orrs	r3, r1
 8025d98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8025d9c:	e7c7      	b.n	8025d2e <HAL_RCCEx_PeriphCLKConfig+0xef6>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8025d9e:	f105 0008 	add.w	r0, r5, #8
 8025da2:	f7fe ff71 	bl	8024c88 <RCCEx_PLL2_Config>
 8025da6:	4604      	mov	r4, r0
        break;
 8025da8:	e7ed      	b.n	8025d86 <HAL_RCCEx_PeriphCLKConfig+0xf4e>
 8025daa:	4626      	mov	r6, r4
 8025dac:	e7bf      	b.n	8025d2e <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8025dae:	bf00      	nop
 8025db0:	44020c00 	.word	0x44020c00
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8025db4:	4a0c      	ldr	r2, [pc, #48]	@ (8025de8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>)
 8025db6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8025db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8025dbc:	6293      	str	r3, [r2, #40]	@ 0x28
    if (ret == HAL_OK)
 8025dbe:	2c00      	cmp	r4, #0
 8025dc0:	d1c1      	bne.n	8025d46 <HAL_RCCEx_PeriphCLKConfig+0xf0e>
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8025dc2:	4a09      	ldr	r2, [pc, #36]	@ (8025de8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>)
 8025dc4:	f8d5 10fc 	ldr.w	r1, [r5, #252]	@ 0xfc
 8025dc8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8025dcc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8025dd0:	430b      	orrs	r3, r1
 8025dd2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
    switch (pPeriphClkInit->FdcanClockSelection)
 8025dd6:	4634      	mov	r4, r6
 8025dd8:	e7b5      	b.n	8025d46 <HAL_RCCEx_PeriphCLKConfig+0xf0e>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8025dda:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8025dde:	f7fe ffbf 	bl	8024d60 <RCCEx_PLL3_Config>
 8025de2:	4604      	mov	r4, r0
        break;
 8025de4:	e7eb      	b.n	8025dbe <HAL_RCCEx_PeriphCLKConfig+0xf86>
 8025de6:	bf00      	nop
 8025de8:	44020c00 	.word	0x44020c00

08025dec <HAL_RCCEx_GetPLL1ClockFreq>:
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8025dec:	4949      	ldr	r1, [pc, #292]	@ (8025f14 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
{
 8025dee:	b5f0      	push	{r4, r5, r6, r7, lr}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8025df0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8025df2:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8025df4:	6a8f      	ldr	r7, [r1, #40]	@ 0x28
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8025df6:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  if (pll1m != 0U)
 8025df8:	f417 5f7c 	tst.w	r7, #16128	@ 0x3f00
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8025dfc:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8025dfe:	f3c7 2205 	ubfx	r2, r7, #8, #6
  if (pll1m != 0U)
 8025e02:	f000 8082 	beq.w	8025f0a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8025e06:	ee07 2a90 	vmov	s15, r2
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8025e0a:	f3c4 02cc 	ubfx	r2, r4, #3, #13
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8025e0e:	f3c6 1400 	ubfx	r4, r6, #4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8025e12:	4362      	muls	r2, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8025e14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8025e18:	ee07 2a90 	vmov	s15, r2
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8025e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8025e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8025e24:	ee07 3a90 	vmov	s15, r3
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8025e28:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8025f18 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8025e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025e30:	eee7 7a06 	vfma.f32	s15, s14, s12
 8025e34:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8025e38:	f005 0303 	and.w	r3, r5, #3
    switch (pll1source)
 8025e3c:	2b02      	cmp	r3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8025e3e:	ee77 7a86 	vadd.f32	s15, s15, s12
    switch (pll1source)
 8025e42:	d058      	beq.n	8025ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x10a>
 8025e44:	2b03      	cmp	r3, #3
 8025e46:	d05d      	beq.n	8025f04 <HAL_RCCEx_GetPLL1ClockFreq+0x118>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8025e48:	680a      	ldr	r2, [r1, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8025e4a:	4b34      	ldr	r3, [pc, #208]	@ (8025f1c <HAL_RCCEx_GetPLL1ClockFreq+0x130>)
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8025e4c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8025e50:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8025e52:	ee07 3a10 	vmov	s14, r3
 8025e56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8025e5a:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8025e5e:	ee65 7aa7 	vmul.f32	s15, s11, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8025e62:	4a2c      	ldr	r2, [pc, #176]	@ (8025f14 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8025e64:	6813      	ldr	r3, [r2, #0]
 8025e66:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8025e6a:	d012      	beq.n	8025e92 <HAL_RCCEx_GetPLL1ClockFreq+0xa6>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8025e6c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8025e6e:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8025e72:	d00e      	beq.n	8025e92 <HAL_RCCEx_GetPLL1ClockFreq+0xa6>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8025e74:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8025e76:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8025e7a:	ee06 3a90 	vmov	s13, r3
 8025e7e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8025e82:	ee76 6a86 	vadd.f32	s13, s13, s12
                                         (uint32_t)(float_t)(pll1vco / \
 8025e86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8025e8a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8025e8e:	ee17 3a10 	vmov	r3, s14
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8025e92:	4a20      	ldr	r2, [pc, #128]	@ (8025f14 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8025e94:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8025e96:	6813      	ldr	r3, [r2, #0]
 8025e98:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8025e9c:	d012      	beq.n	8025ec4 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8025e9e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8025ea0:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8025ea4:	d00e      	beq.n	8025ec4 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8025ea6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8025ea8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8025eac:	ee06 3a90 	vmov	s13, r3
 8025eb0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8025eb4:	ee76 6a86 	vadd.f32	s13, s13, s12
                                         (uint32_t)(float_t)(pll1vco / \
 8025eb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8025ebc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8025ec0:	ee17 3a10 	vmov	r3, s14
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8025ec4:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8025ec6:	4b13      	ldr	r3, [pc, #76]	@ (8025f14 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8025ec8:	681a      	ldr	r2, [r3, #0]
 8025eca:	0191      	lsls	r1, r2, #6
 8025ecc:	d51f      	bpl.n	8025f0e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8025ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8025ed0:	0352      	lsls	r2, r2, #13
 8025ed2:	d51c      	bpl.n	8025f0e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8025ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025ed6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8025eda:	ee07 3a10 	vmov	s14, r3
 8025ede:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8025ee2:	ee37 7a06 	vadd.f32	s14, s14, s12
                                         (uint32_t)(float_t)(pll1vco / \
 8025ee6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8025eea:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8025eee:	ee17 3a90 	vmov	r3, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8025ef2:	6083      	str	r3, [r0, #8]
}
 8025ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8025ef6:	eddf 5a0a 	vldr	s11, [pc, #40]	@ 8025f20 <HAL_RCCEx_GetPLL1ClockFreq+0x134>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8025efa:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8025efe:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 8025f02:	e7ae      	b.n	8025e62 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8025f04:	eddf 5a07 	vldr	s11, [pc, #28]	@ 8025f24 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 8025f08:	e7f7      	b.n	8025efa <HAL_RCCEx_GetPLL1ClockFreq+0x10e>
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8025f0a:	e9c0 2200 	strd	r2, r2, [r0]
{
 8025f0e:	2300      	movs	r3, #0
 8025f10:	e7ef      	b.n	8025ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8025f12:	bf00      	nop
 8025f14:	44020c00 	.word	0x44020c00
 8025f18:	39000000 	.word	0x39000000
 8025f1c:	03d09000 	.word	0x03d09000
 8025f20:	4a742400 	.word	0x4a742400
 8025f24:	4b371b00 	.word	0x4b371b00

08025f28 <HAL_RCCEx_GetPLL2ClockFreq>:
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8025f28:	4949      	ldr	r1, [pc, #292]	@ (8026050 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
{
 8025f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8025f2c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8025f2e:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8025f30:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8025f32:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 8025f34:	f417 5f7c 	tst.w	r7, #16128	@ 0x3f00
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8025f38:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8025f3a:	f3c7 2205 	ubfx	r2, r7, #8, #6
  if (pll2m != 0U)
 8025f3e:	f000 8082 	beq.w	8026046 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8025f42:	ee07 2a90 	vmov	s15, r2
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8025f46:	f3c4 02cc 	ubfx	r2, r4, #3, #13
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8025f4a:	f3c6 1400 	ubfx	r4, r6, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8025f4e:	4362      	muls	r2, r4
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8025f50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8025f54:	ee07 2a90 	vmov	s15, r2
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8025f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8025f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8025f60:	ee07 3a90 	vmov	s15, r3
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8025f64:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8026054 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8025f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025f6c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8025f70:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8025f74:	f005 0303 	and.w	r3, r5, #3
    switch (pll2source)
 8025f78:	2b02      	cmp	r3, #2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8025f7a:	ee77 7a86 	vadd.f32	s15, s15, s12
    switch (pll2source)
 8025f7e:	d058      	beq.n	8026032 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8025f80:	2b03      	cmp	r3, #3
 8025f82:	d05d      	beq.n	8026040 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8025f84:	680a      	ldr	r2, [r1, #0]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8025f86:	4b34      	ldr	r3, [pc, #208]	@ (8026058 <HAL_RCCEx_GetPLL2ClockFreq+0x130>)
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8025f88:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8025f8c:	40d3      	lsrs	r3, r2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8025f8e:	ee07 3a10 	vmov	s14, r3
 8025f92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8025f96:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8025f9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8025f9e:	4a2c      	ldr	r2, [pc, #176]	@ (8026050 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8025fa0:	6813      	ldr	r3, [r2, #0]
 8025fa2:	f013 6300 	ands.w	r3, r3, #134217728	@ 0x8000000
 8025fa6:	d012      	beq.n	8025fce <HAL_RCCEx_GetPLL2ClockFreq+0xa6>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8025fa8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8025faa:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8025fae:	d00e      	beq.n	8025fce <HAL_RCCEx_GetPLL2ClockFreq+0xa6>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8025fb0:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8025fb2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8025fb6:	ee06 3a90 	vmov	s13, r3
 8025fba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8025fbe:	ee76 6a86 	vadd.f32	s13, s13, s12
                                         (uint32_t)(float_t)(pll2vco / \
 8025fc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8025fc6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8025fca:	ee17 3a10 	vmov	r3, s14
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8025fce:	4a20      	ldr	r2, [pc, #128]	@ (8026050 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8025fd0:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8025fd2:	6813      	ldr	r3, [r2, #0]
 8025fd4:	f013 6300 	ands.w	r3, r3, #134217728	@ 0x8000000
 8025fd8:	d012      	beq.n	8026000 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8025fda:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8025fdc:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8025fe0:	d00e      	beq.n	8026000 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8025fe2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8025fe4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8025fe8:	ee06 3a90 	vmov	s13, r3
 8025fec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8025ff0:	ee76 6a86 	vadd.f32	s13, s13, s12
                                         (uint32_t)(float_t)(pll2vco / \
 8025ff4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8025ff8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8025ffc:	ee17 3a10 	vmov	r3, s14
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8026000:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8026002:	4b13      	ldr	r3, [pc, #76]	@ (8026050 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8026004:	681a      	ldr	r2, [r3, #0]
 8026006:	0111      	lsls	r1, r2, #4
 8026008:	d51f      	bpl.n	802604a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 802600a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802600c:	0352      	lsls	r2, r2, #13
 802600e:	d51c      	bpl.n	802604a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8026010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8026012:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8026016:	ee07 3a10 	vmov	s14, r3
 802601a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 802601e:	ee37 7a06 	vadd.f32	s14, s14, s12
                                         (uint32_t)(float_t)(pll2vco / \
 8026022:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8026026:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 802602a:	ee17 3a90 	vmov	r3, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 802602e:	6083      	str	r3, [r0, #8]
}
 8026030:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8026032:	eddf 5a0a 	vldr	s11, [pc, #40]	@ 802605c <HAL_RCCEx_GetPLL2ClockFreq+0x134>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8026036:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 802603a:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 802603e:	e7ae      	b.n	8025f9e <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8026040:	eddf 5a07 	vldr	s11, [pc, #28]	@ 8026060 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
 8026044:	e7f7      	b.n	8026036 <HAL_RCCEx_GetPLL2ClockFreq+0x10e>
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8026046:	e9c0 2200 	strd	r2, r2, [r0]
{
 802604a:	2300      	movs	r3, #0
 802604c:	e7ef      	b.n	802602e <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 802604e:	bf00      	nop
 8026050:	44020c00 	.word	0x44020c00
 8026054:	39000000 	.word	0x39000000
 8026058:	03d09000 	.word	0x03d09000
 802605c:	4a742400 	.word	0x4a742400
 8026060:	4b371b00 	.word	0x4b371b00

08026064 <HAL_RCCEx_GetPLL3ClockFreq>:
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8026064:	4949      	ldr	r1, [pc, #292]	@ (802618c <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
{
 8026066:	b5f0      	push	{r4, r5, r6, r7, lr}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8026068:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 802606a:	6b0d      	ldr	r5, [r1, #48]	@ 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 802606c:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 802606e:	6b0e      	ldr	r6, [r1, #48]	@ 0x30
  if (pll3m != 0U)
 8026070:	f417 5f7c 	tst.w	r7, #16128	@ 0x3f00
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8026074:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8026076:	f3c7 2205 	ubfx	r2, r7, #8, #6
  if (pll3m != 0U)
 802607a:	f000 8082 	beq.w	8026182 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 802607e:	ee07 2a90 	vmov	s15, r2
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8026082:	f3c4 02cc 	ubfx	r2, r4, #3, #13
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8026086:	f3c6 1400 	ubfx	r4, r6, #4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 802608a:	4362      	muls	r2, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 802608c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8026090:	ee07 2a90 	vmov	s15, r2
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8026094:	f3c3 0308 	ubfx	r3, r3, #0, #9
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8026098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 802609c:	ee07 3a90 	vmov	s15, r3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80260a0:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8026190 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80260a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80260a8:	eee7 7a06 	vfma.f32	s15, s14, s12
 80260ac:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80260b0:	f005 0303 	and.w	r3, r5, #3
    switch (pll3source)
 80260b4:	2b02      	cmp	r3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80260b6:	ee77 7a86 	vadd.f32	s15, s15, s12
    switch (pll3source)
 80260ba:	d058      	beq.n	802616e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80260bc:	2b03      	cmp	r3, #3
 80260be:	d05d      	beq.n	802617c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80260c0:	680a      	ldr	r2, [r1, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80260c2:	4b34      	ldr	r3, [pc, #208]	@ (8026194 <HAL_RCCEx_GetPLL3ClockFreq+0x130>)
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80260c4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80260c8:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80260ca:	ee07 3a10 	vmov	s14, r3
 80260ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80260d2:	eec7 5a26 	vdiv.f32	s11, s14, s13
 80260d6:	ee65 7aa7 	vmul.f32	s15, s11, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80260da:	4a2c      	ldr	r2, [pc, #176]	@ (802618c <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 80260dc:	6813      	ldr	r3, [r2, #0]
 80260de:	f013 5300 	ands.w	r3, r3, #536870912	@ 0x20000000
 80260e2:	d012      	beq.n	802610a <HAL_RCCEx_GetPLL3ClockFreq+0xa6>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80260e4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80260e6:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80260ea:	d00e      	beq.n	802610a <HAL_RCCEx_GetPLL3ClockFreq+0xa6>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80260ec:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80260ee:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80260f2:	ee06 3a90 	vmov	s13, r3
 80260f6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80260fa:	ee76 6a86 	vadd.f32	s13, s13, s12
                                         (uint32_t)(float_t)(pll3vco / \
 80260fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8026102:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8026106:	ee17 3a10 	vmov	r3, s14
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 802610a:	4a20      	ldr	r2, [pc, #128]	@ (802618c <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 802610c:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 802610e:	6813      	ldr	r3, [r2, #0]
 8026110:	f013 5300 	ands.w	r3, r3, #536870912	@ 0x20000000
 8026114:	d012      	beq.n	802613c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8026116:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8026118:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 802611c:	d00e      	beq.n	802613c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 802611e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8026120:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8026124:	ee06 3a90 	vmov	s13, r3
 8026128:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 802612c:	ee76 6a86 	vadd.f32	s13, s13, s12
                                         (uint32_t)(float_t)(pll3vco / \
 8026130:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8026134:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8026138:	ee17 3a10 	vmov	r3, s14
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 802613c:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 802613e:	4b13      	ldr	r3, [pc, #76]	@ (802618c <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8026140:	681a      	ldr	r2, [r3, #0]
 8026142:	0091      	lsls	r1, r2, #2
 8026144:	d51f      	bpl.n	8026186 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8026146:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8026148:	0352      	lsls	r2, r2, #13
 802614a:	d51c      	bpl.n	8026186 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 802614c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802614e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8026152:	ee07 3a10 	vmov	s14, r3
 8026156:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 802615a:	ee37 7a06 	vadd.f32	s14, s14, s12
                                         (uint32_t)(float_t)(pll3vco / \
 802615e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8026162:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8026166:	ee17 3a90 	vmov	r3, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 802616a:	6083      	str	r3, [r0, #8]
}
 802616c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 802616e:	eddf 5a0a 	vldr	s11, [pc, #40]	@ 8026198 <HAL_RCCEx_GetPLL3ClockFreq+0x134>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8026172:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8026176:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 802617a:	e7ae      	b.n	80260da <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 802617c:	eddf 5a07 	vldr	s11, [pc, #28]	@ 802619c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
 8026180:	e7f7      	b.n	8026172 <HAL_RCCEx_GetPLL3ClockFreq+0x10e>
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8026182:	e9c0 2200 	strd	r2, r2, [r0]
{
 8026186:	2300      	movs	r3, #0
 8026188:	e7ef      	b.n	802616a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 802618a:	bf00      	nop
 802618c:	44020c00 	.word	0x44020c00
 8026190:	39000000 	.word	0x39000000
 8026194:	03d09000 	.word	0x03d09000
 8026198:	4a742400 	.word	0x4a742400
 802619c:	4b371b00 	.word	0x4b371b00

080261a0 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 80261a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80261a2:	f100 427e 	add.w	r2, r0, #4261412864	@ 0xfe000000
 80261a6:	430a      	orrs	r2, r1
{
 80261a8:	4603      	mov	r3, r0
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80261aa:	d12d      	bne.n	8026208 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80261ac:	4ab3      	ldr	r2, [pc, #716]	@ (802647c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80261ae:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80261b2:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80261b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80261ba:	0789      	lsls	r1, r1, #30
 80261bc:	d503      	bpl.n	80261c6 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80261be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80261c2:	f001 81ce 	beq.w	8027562 <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80261c6:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 80261ca:	0112      	lsls	r2, r2, #4
 80261cc:	d503      	bpl.n	80261d6 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 80261ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80261d2:	f001 81ca 	beq.w	802756a <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80261d6:	4aa9      	ldr	r2, [pc, #676]	@ (802647c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80261d8:	6810      	ldr	r0, [r2, #0]
 80261da:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80261de:	d010      	beq.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80261e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80261e4:	f041 81c5 	bne.w	8027572 <HAL_RCCEx_GetPeriphCLKFreq+0x13d2>
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80261e8:	69d3      	ldr	r3, [r2, #28]
 80261ea:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80261ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80261f2:	f0c1 81c1 	bcc.w	8027578 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80261f6:	69d3      	ldr	r3, [r2, #28]
 80261f8:	48a1      	ldr	r0, [pc, #644]	@ (8026480 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80261fa:	f3c3 2305 	ubfx	r3, r3, #8, #6
 80261fe:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8026202:	b005      	add	sp, #20
 8026204:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (PeriphClk)
 8026208:	f5a0 1280 	sub.w	r2, r0, #1048576	@ 0x100000
 802620c:	430a      	orrs	r2, r1
 802620e:	f000 81ba 	beq.w	8026586 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
 8026212:	4a9c      	ldr	r2, [pc, #624]	@ (8026484 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8026214:	4290      	cmp	r0, r2
 8026216:	f171 0200 	sbcs.w	r2, r1, #0
 802621a:	f080 809c 	bcs.w	8026356 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 802621e:	f5a0 6280 	sub.w	r2, r0, #1024	@ 0x400
 8026222:	430a      	orrs	r2, r1
 8026224:	f000 8420 	beq.w	8026a68 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8026228:	f240 4201 	movw	r2, #1025	@ 0x401
 802622c:	4290      	cmp	r0, r2
 802622e:	f171 0200 	sbcs.w	r2, r1, #0
 8026232:	d24a      	bcs.n	80262ca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8026234:	f1a0 0220 	sub.w	r2, r0, #32
 8026238:	430a      	orrs	r2, r1
 802623a:	f000 8300 	beq.w	802683e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 802623e:	2821      	cmp	r0, #33	@ 0x21
 8026240:	f171 0200 	sbcs.w	r2, r1, #0
 8026244:	d223      	bcs.n	802628e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8026246:	2809      	cmp	r0, #9
 8026248:	f171 0200 	sbcs.w	r2, r1, #0
 802624c:	d218      	bcs.n	8026280 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 802624e:	ea50 0201 	orrs.w	r2, r0, r1
 8026252:	f001 8194 	beq.w	802757e <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
 8026256:	1e43      	subs	r3, r0, #1
 8026258:	f141 31ff 	adc.w	r1, r1, #4294967295
 802625c:	2b08      	cmp	r3, #8
 802625e:	f171 0100 	sbcs.w	r1, r1, #0
 8026262:	f081 818f 	bcs.w	8027584 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 8026266:	2b07      	cmp	r3, #7
 8026268:	f201 818c 	bhi.w	8027584 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 802626c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8026270:	021401d4 	.word	0x021401d4
 8026274:	0245098a 	.word	0x0245098a
 8026278:	098a098a 	.word	0x098a098a
 802627c:	027c098a 	.word	0x027c098a
 8026280:	f1a0 0310 	sub.w	r3, r0, #16
 8026284:	430b      	orrs	r3, r1
 8026286:	f000 82a4 	beq.w	80267d2 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
        frequency = 0U;
 802628a:	2000      	movs	r0, #0
 802628c:	e7b9      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 802628e:	f5a0 7280 	sub.w	r2, r0, #256	@ 0x100
 8026292:	430a      	orrs	r2, r1
 8026294:	f000 8375 	beq.w	8026982 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8026298:	f240 1201 	movw	r2, #257	@ 0x101
 802629c:	4290      	cmp	r0, r2
 802629e:	f171 0200 	sbcs.w	r2, r1, #0
 80262a2:	d20b      	bcs.n	80262bc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 80262a4:	f1a0 0240 	sub.w	r2, r0, #64	@ 0x40
 80262a8:	430a      	orrs	r2, r1
 80262aa:	f000 82fe 	beq.w	80268aa <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80262ae:	f1a0 0380 	sub.w	r3, r0, #128	@ 0x80
 80262b2:	430b      	orrs	r3, r1
 80262b4:	f000 832f 	beq.w	8026916 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
        frequency = 0U;
 80262b8:	2000      	movs	r0, #0
 80262ba:	e7a2      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 80262bc:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 80262c0:	430b      	orrs	r3, r1
 80262c2:	f000 8399 	beq.w	80269f8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
        frequency = 0U;
 80262c6:	2000      	movs	r0, #0
 80262c8:	e79b      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 80262ca:	f5a0 4200 	sub.w	r2, r0, #32768	@ 0x8000
 80262ce:	430a      	orrs	r2, r1
 80262d0:	f000 850b 	beq.w	8026cea <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80262d4:	f248 0201 	movw	r2, #32769	@ 0x8001
 80262d8:	4290      	cmp	r0, r2
 80262da:	f171 0200 	sbcs.w	r2, r1, #0
 80262de:	d21d      	bcs.n	802631c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 80262e0:	f5a0 5200 	sub.w	r2, r0, #8192	@ 0x2000
 80262e4:	430a      	orrs	r2, r1
 80262e6:	f000 84ac 	beq.w	8026c42 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80262ea:	f242 0201 	movw	r2, #8193	@ 0x2001
 80262ee:	4290      	cmp	r0, r2
 80262f0:	f171 0200 	sbcs.w	r2, r1, #0
 80262f4:	d20b      	bcs.n	802630e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 80262f6:	f5a0 6200 	sub.w	r2, r0, #2048	@ 0x800
 80262fa:	430a      	orrs	r2, r1
 80262fc:	f000 83e7 	beq.w	8026ace <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8026300:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8026304:	430b      	orrs	r3, r1
 8026306:	f000 8416 	beq.w	8026b36 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
        frequency = 0U;
 802630a:	2000      	movs	r0, #0
 802630c:	e779      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 802630e:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8026312:	430b      	orrs	r3, r1
 8026314:	f000 84c5 	beq.w	8026ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
        frequency = 0U;
 8026318:	2000      	movs	r0, #0
 802631a:	e772      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 802631c:	f5a0 2280 	sub.w	r2, r0, #262144	@ 0x40000
 8026320:	430a      	orrs	r2, r1
 8026322:	f000 859c 	beq.w	8026e5e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8026326:	4a58      	ldr	r2, [pc, #352]	@ (8026488 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8026328:	4290      	cmp	r0, r2
 802632a:	f171 0200 	sbcs.w	r2, r1, #0
 802632e:	d20b      	bcs.n	8026348 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8026330:	f5a0 3280 	sub.w	r2, r0, #65536	@ 0x10000
 8026334:	430a      	orrs	r2, r1
 8026336:	f000 851f 	beq.w	8026d78 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 802633a:	f5a0 3300 	sub.w	r3, r0, #131072	@ 0x20000
 802633e:	430b      	orrs	r3, r1
 8026340:	f000 8535 	beq.w	8026dae <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
        frequency = 0U;
 8026344:	2000      	movs	r0, #0
 8026346:	e75c      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 8026348:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 802634c:	430b      	orrs	r3, r1
 802634e:	f000 80d5 	beq.w	80264fc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
        frequency = 0U;
 8026352:	2000      	movs	r0, #0
 8026354:	e755      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 8026356:	2200      	movs	r2, #0
 8026358:	2002      	movs	r0, #2
 802635a:	4281      	cmp	r1, r0
 802635c:	bf08      	it	eq
 802635e:	4293      	cmpeq	r3, r2
 8026360:	f001 807e 	beq.w	8027460 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8026364:	429a      	cmp	r2, r3
 8026366:	4188      	sbcs	r0, r1
 8026368:	d344      	bcc.n	80263f4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 802636a:	f103 4070 	add.w	r0, r3, #4026531840	@ 0xf0000000
 802636e:	4308      	orrs	r0, r1
 8026370:	f000 8754 	beq.w	802721c <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
 8026374:	4845      	ldr	r0, [pc, #276]	@ (802648c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8026376:	4283      	cmp	r3, r0
 8026378:	f171 0000 	sbcs.w	r0, r1, #0
 802637c:	d21c      	bcs.n	80263b8 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 802637e:	f103 427c 	add.w	r2, r3, #4227858432	@ 0xfc000000
 8026382:	430a      	orrs	r2, r1
 8026384:	f001 80ae 	beq.w	80274e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1344>
 8026388:	4a41      	ldr	r2, [pc, #260]	@ (8026490 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 802638a:	4293      	cmp	r3, r2
 802638c:	f171 0200 	sbcs.w	r2, r1, #0
 8026390:	d20b      	bcs.n	80263aa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8026392:	f5a3 1200 	sub.w	r2, r3, #2097152	@ 0x200000
 8026396:	430a      	orrs	r2, r1
 8026398:	f000 8402 	beq.w	8026ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
 802639c:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 80263a0:	430b      	orrs	r3, r1
 80263a2:	f000 812a 	beq.w	80265fa <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
        frequency = 0U;
 80263a6:	2000      	movs	r0, #0
 80263a8:	e72b      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 80263aa:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80263ae:	430b      	orrs	r3, r1
 80263b0:	f000 86f9 	beq.w	80271a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1006>
        frequency = 0U;
 80263b4:	2000      	movs	r0, #0
 80263b6:	e724      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 80263b8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80263bc:	4291      	cmp	r1, r2
 80263be:	bf08      	it	eq
 80263c0:	4283      	cmpeq	r3, r0
 80263c2:	f000 87df 	beq.w	8027384 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
 80263c6:	4298      	cmp	r0, r3
 80263c8:	eb72 0001 	sbcs.w	r0, r2, r1
 80263cc:	d30b      	bcc.n	80263e6 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 80263ce:	f103 4260 	add.w	r2, r3, #3758096384	@ 0xe0000000
 80263d2:	430a      	orrs	r2, r1
 80263d4:	f000 8763 	beq.w	802729e <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 80263d8:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80263dc:	430b      	orrs	r3, r1
 80263de:	f000 879a 	beq.w	8027316 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        frequency = 0U;
 80263e2:	2000      	movs	r0, #0
 80263e4:	e70d      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 80263e6:	2901      	cmp	r1, #1
 80263e8:	bf08      	it	eq
 80263ea:	4293      	cmpeq	r3, r2
 80263ec:	f001 8001 	beq.w	80273f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        frequency = 0U;
 80263f0:	2000      	movs	r0, #0
 80263f2:	e706      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 80263f4:	2040      	movs	r0, #64	@ 0x40
 80263f6:	4281      	cmp	r1, r0
 80263f8:	bf08      	it	eq
 80263fa:	4293      	cmpeq	r3, r2
 80263fc:	f000 85dd 	beq.w	8026fba <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8026400:	429a      	cmp	r2, r3
 8026402:	4188      	sbcs	r0, r1
 8026404:	d346      	bcc.n	8026494 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8026406:	2010      	movs	r0, #16
 8026408:	4281      	cmp	r1, r0
 802640a:	bf08      	it	eq
 802640c:	4293      	cmpeq	r3, r2
 802640e:	f001 808f 	beq.w	8027530 <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
 8026412:	429a      	cmp	r2, r3
 8026414:	4188      	sbcs	r0, r1
 8026416:	d329      	bcc.n	802646c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8026418:	2904      	cmp	r1, #4
 802641a:	bf08      	it	eq
 802641c:	4293      	cmpeq	r3, r2
 802641e:	f000 86ac 	beq.w	802717a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
 8026422:	2000      	movs	r0, #0
 8026424:	2908      	cmp	r1, #8
 8026426:	bf08      	it	eq
 8026428:	4283      	cmpeq	r3, r0
 802642a:	f47f aeea 	bne.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 802642e:	4a13      	ldr	r2, [pc, #76]	@ (802647c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8026430:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8026434:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8026438:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 802643c:	0789      	lsls	r1, r1, #30
 802643e:	d502      	bpl.n	8026446 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8026440:	2b00      	cmp	r3, #0
 8026442:	f001 811b 	beq.w	802767c <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8026446:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 802644a:	0110      	lsls	r0, r2, #4
 802644c:	d502      	bpl.n	8026454 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
 802644e:	2b40      	cmp	r3, #64	@ 0x40
 8026450:	f001 8118 	beq.w	8027684 <HAL_RCCEx_GetPeriphCLKFreq+0x14e4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8026454:	4a09      	ldr	r2, [pc, #36]	@ (802647c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8026456:	6810      	ldr	r0, [r2, #0]
 8026458:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 802645c:	f43f aed1 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
          frequency = CSI_VALUE / 122U;
 8026460:	2b80      	cmp	r3, #128	@ 0x80
 8026462:	f248 0012 	movw	r0, #32786	@ 0x8012
 8026466:	bf18      	it	ne
 8026468:	2000      	movne	r0, #0
 802646a:	e6ca      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 802646c:	2920      	cmp	r1, #32
 802646e:	bf08      	it	eq
 8026470:	4293      	cmpeq	r3, r2
 8026472:	f000 8546 	beq.w	8026f02 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
        frequency = 0U;
 8026476:	2000      	movs	r0, #0
 8026478:	e6c3      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 802647a:	bf00      	nop
 802647c:	44020c00 	.word	0x44020c00
 8026480:	00b71b00 	.word	0x00b71b00
 8026484:	00100001 	.word	0x00100001
 8026488:	00040001 	.word	0x00040001
 802648c:	10000001 	.word	0x10000001
 8026490:	04000001 	.word	0x04000001
    switch (PeriphClk)
 8026494:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8026498:	4281      	cmp	r1, r0
 802649a:	bf08      	it	eq
 802649c:	4293      	cmpeq	r3, r2
 802649e:	f000 83b7 	beq.w	8026c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80264a2:	429a      	cmp	r2, r3
 80264a4:	4188      	sbcs	r0, r1
 80264a6:	d321      	bcc.n	80264ec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80264a8:	2980      	cmp	r1, #128	@ 0x80
 80264aa:	bf08      	it	eq
 80264ac:	4293      	cmpeq	r3, r2
 80264ae:	f000 85d7 	beq.w	8027060 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
 80264b2:	2000      	movs	r0, #0
 80264b4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80264b8:	bf08      	it	eq
 80264ba:	4283      	cmpeq	r3, r0
 80264bc:	f47f aea1 	bne.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80264c0:	4a9c      	ldr	r2, [pc, #624]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80264c2:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 80264c6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
        switch (srcclk)
 80264ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80264ce:	f000 8630 	beq.w	8027132 <HAL_RCCEx_GetPeriphCLKFreq+0xf92>
 80264d2:	f200 8618 	bhi.w	8027106 <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 80264d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80264da:	d029      	beq.n	8026530 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80264dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80264e0:	f000 8484 	beq.w	8026dec <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80264e4:	2b00      	cmp	r3, #0
 80264e6:	f000 832c 	beq.w	8026b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
 80264ea:	e68a      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    switch (PeriphClk)
 80264ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80264f0:	bf08      	it	eq
 80264f2:	4293      	cmpeq	r3, r2
 80264f4:	f000 841c 	beq.w	8026d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
        frequency = 0U;
 80264f8:	2000      	movs	r0, #0
 80264fa:	e682      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80264fc:	4a8d      	ldr	r2, [pc, #564]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80264fe:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8026502:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
        switch (srcclk)
 8026506:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802650a:	d016      	beq.n	802653a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 802650c:	d807      	bhi.n	802651e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 802650e:	2b00      	cmp	r3, #0
 8026510:	f000 87b2 	beq.w	8027478 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
 8026514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8026518:	d00a      	beq.n	8026530 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = 0U;
 802651a:	2000      	movs	r0, #0
 802651c:	e671      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 802651e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8026522:	f001 8032 	beq.w	802758a <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
 8026526:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 802652a:	d00b      	beq.n	8026544 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 802652c:	2000      	movs	r0, #0
 802652e:	e668      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8026530:	a801      	add	r0, sp, #4
 8026532:	f7ff fcf9 	bl	8025f28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8026536:	9801      	ldr	r0, [sp, #4]
            break;
 8026538:	e663      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802653a:	a801      	add	r0, sp, #4
 802653c:	f7ff fd92 	bl	8026064 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8026540:	9801      	ldr	r0, [sp, #4]
            break;
 8026542:	e65e      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8026544:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8026548:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 802654a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 802654e:	0788      	lsls	r0, r1, #30
 8026550:	d506      	bpl.n	8026560 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8026552:	b92b      	cbnz	r3, 8026560 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026554:	6813      	ldr	r3, [r2, #0]
 8026556:	4878      	ldr	r0, [pc, #480]	@ (8026738 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8026558:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 802655c:	40d8      	lsrs	r0, r3
 802655e:	e650      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8026560:	4a74      	ldr	r2, [pc, #464]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8026562:	6811      	ldr	r1, [r2, #0]
 8026564:	0589      	lsls	r1, r1, #22
 8026566:	d503      	bpl.n	8026570 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
 8026568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802656c:	f001 8010 	beq.w	8027590 <HAL_RCCEx_GetPeriphCLKFreq+0x13f0>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8026570:	6810      	ldr	r0, [r2, #0]
 8026572:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8026576:	f43f ae44 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 802657a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 802657e:	486f      	ldr	r0, [pc, #444]	@ (802673c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8026580:	bf18      	it	ne
 8026582:	2000      	movne	r0, #0
 8026584:	e63d      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8026586:	4a6b      	ldr	r2, [pc, #428]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8026588:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 802658c:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
        switch (srcclk)
 8026590:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8026594:	d0d1      	beq.n	802653a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8026596:	d807      	bhi.n	80265a8 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8026598:	2b00      	cmp	r3, #0
 802659a:	f000 876d 	beq.w	8027478 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
 802659e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80265a2:	d0c5      	beq.n	8026530 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = 0U;
 80265a4:	2000      	movs	r0, #0
 80265a6:	e62c      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80265a8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80265ac:	f000 87f3 	beq.w	8027596 <HAL_RCCEx_GetPeriphCLKFreq+0x13f6>
 80265b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80265b4:	f040 87f2 	bne.w	802759c <HAL_RCCEx_GetPeriphCLKFreq+0x13fc>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80265b8:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80265bc:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80265be:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80265c2:	0788      	lsls	r0, r1, #30
 80265c4:	d506      	bpl.n	80265d4 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
 80265c6:	b92b      	cbnz	r3, 80265d4 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80265c8:	6813      	ldr	r3, [r2, #0]
 80265ca:	485b      	ldr	r0, [pc, #364]	@ (8026738 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80265cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80265d0:	40d8      	lsrs	r0, r3
 80265d2:	e616      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80265d4:	4a57      	ldr	r2, [pc, #348]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80265d6:	6811      	ldr	r1, [r2, #0]
 80265d8:	0589      	lsls	r1, r1, #22
 80265da:	d503      	bpl.n	80265e4 <HAL_RCCEx_GetPeriphCLKFreq+0x444>
 80265dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80265e0:	f000 87df 	beq.w	80275a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1402>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80265e4:	6810      	ldr	r0, [r2, #0]
 80265e6:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80265ea:	f43f ae0a 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 80265ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80265f2:	4852      	ldr	r0, [pc, #328]	@ (802673c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80265f4:	bf18      	it	ne
 80265f6:	2000      	movne	r0, #0
 80265f8:	e603      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80265fa:	4b4e      	ldr	r3, [pc, #312]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80265fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8026600:	0658      	lsls	r0, r3, #25
 8026602:	d404      	bmi.n	802660e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8026604:	a801      	add	r0, sp, #4
 8026606:	f7ff fbf1 	bl	8025dec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 802660a:	9802      	ldr	r0, [sp, #8]
 802660c:	e5f9      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802660e:	a801      	add	r0, sp, #4
 8026610:	f7ff fc8a 	bl	8025f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8026614:	9803      	ldr	r0, [sp, #12]
 8026616:	e5f4      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8026618:	4a46      	ldr	r2, [pc, #280]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 802661a:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 802661e:	f013 0307 	ands.w	r3, r3, #7
 8026622:	d104      	bne.n	802662e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
}
 8026624:	b005      	add	sp, #20
 8026626:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetPCLK2Freq();
 802662a:	f7fe baf3 	b.w	8024c14 <HAL_RCC_GetPCLK2Freq>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 802662e:	6811      	ldr	r1, [r2, #0]
 8026630:	0109      	lsls	r1, r1, #4
 8026632:	d506      	bpl.n	8026642 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8026634:	2b01      	cmp	r3, #1
 8026636:	d104      	bne.n	8026642 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8026638:	a801      	add	r0, sp, #4
 802663a:	f7ff fc75 	bl	8025f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 802663e:	9802      	ldr	r0, [sp, #8]
 8026640:	e5df      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8026642:	6812      	ldr	r2, [r2, #0]
 8026644:	0090      	lsls	r0, r2, #2
 8026646:	d506      	bpl.n	8026656 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8026648:	2b02      	cmp	r3, #2
 802664a:	d104      	bne.n	8026656 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802664c:	a801      	add	r0, sp, #4
 802664e:	f7ff fd09 	bl	8026064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8026652:	9802      	ldr	r0, [sp, #8]
 8026654:	e5d5      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8026656:	4a37      	ldr	r2, [pc, #220]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8026658:	6811      	ldr	r1, [r2, #0]
 802665a:	0789      	lsls	r1, r1, #30
 802665c:	d507      	bpl.n	802666e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 802665e:	2b03      	cmp	r3, #3
 8026660:	d105      	bne.n	802666e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026662:	6813      	ldr	r3, [r2, #0]
 8026664:	4834      	ldr	r0, [pc, #208]	@ (8026738 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8026666:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 802666a:	40d8      	lsrs	r0, r3
 802666c:	e5c9      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 802666e:	6812      	ldr	r2, [r2, #0]
 8026670:	0592      	lsls	r2, r2, #22
 8026672:	d502      	bpl.n	802667a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8026674:	2b04      	cmp	r3, #4
 8026676:	f000 8797 	beq.w	80275a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 802667a:	4a2e      	ldr	r2, [pc, #184]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 802667c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026680:	f010 0002 	ands.w	r0, r0, #2
 8026684:	f43f adbd 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026688:	f1a3 0c05 	sub.w	ip, r3, #5
 802668c:	f1dc 0300 	rsbs	r3, ip, #0
 8026690:	eb43 030c 	adc.w	r3, r3, ip
 8026694:	03d8      	lsls	r0, r3, #15
 8026696:	e5b4      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8026698:	4a26      	ldr	r2, [pc, #152]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 802669a:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 802669e:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80266a2:	d104      	bne.n	80266ae <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
}
 80266a4:	b005      	add	sp, #20
 80266a6:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK1Freq();
 80266aa:	f7fe baa1 	b.w	8024bf0 <HAL_RCC_GetPCLK1Freq>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80266ae:	6812      	ldr	r2, [r2, #0]
 80266b0:	0110      	lsls	r0, r2, #4
 80266b2:	d501      	bpl.n	80266b8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80266b4:	2b08      	cmp	r3, #8
 80266b6:	d0bf      	beq.n	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80266b8:	2b10      	cmp	r3, #16
 80266ba:	d0c7      	beq.n	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80266bc:	4a1d      	ldr	r2, [pc, #116]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80266be:	6811      	ldr	r1, [r2, #0]
 80266c0:	0789      	lsls	r1, r1, #30
 80266c2:	d507      	bpl.n	80266d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
 80266c4:	2b18      	cmp	r3, #24
 80266c6:	d105      	bne.n	80266d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80266c8:	6813      	ldr	r3, [r2, #0]
 80266ca:	481b      	ldr	r0, [pc, #108]	@ (8026738 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80266cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80266d0:	40d8      	lsrs	r0, r3
 80266d2:	e596      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80266d4:	6812      	ldr	r2, [r2, #0]
 80266d6:	0592      	lsls	r2, r2, #22
 80266d8:	d502      	bpl.n	80266e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80266da:	2b20      	cmp	r3, #32
 80266dc:	f000 8767 	beq.w	80275ae <HAL_RCCEx_GetPeriphCLKFreq+0x140e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80266e0:	4a14      	ldr	r2, [pc, #80]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80266e2:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80266e6:	f010 0002 	ands.w	r0, r0, #2
 80266ea:	f43f ad8a 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80266ee:	f1a3 0028 	sub.w	r0, r3, #40	@ 0x28
 80266f2:	4243      	negs	r3, r0
 80266f4:	4143      	adcs	r3, r0
 80266f6:	03d8      	lsls	r0, r3, #15
 80266f8:	e583      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80266fa:	4a0e      	ldr	r2, [pc, #56]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80266fc:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8026700:	f413 73e0 	ands.w	r3, r3, #448	@ 0x1c0
 8026704:	d0ce      	beq.n	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8026706:	6811      	ldr	r1, [r2, #0]
 8026708:	0109      	lsls	r1, r1, #4
 802670a:	d501      	bpl.n	8026710 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
 802670c:	2b40      	cmp	r3, #64	@ 0x40
 802670e:	d093      	beq.n	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8026710:	6812      	ldr	r2, [r2, #0]
 8026712:	0090      	lsls	r0, r2, #2
 8026714:	d501      	bpl.n	802671a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8026716:	2b80      	cmp	r3, #128	@ 0x80
 8026718:	d098      	beq.n	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 802671a:	4a06      	ldr	r2, [pc, #24]	@ (8026734 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 802671c:	6811      	ldr	r1, [r2, #0]
 802671e:	0789      	lsls	r1, r1, #30
 8026720:	d50e      	bpl.n	8026740 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8026722:	2bc0      	cmp	r3, #192	@ 0xc0
 8026724:	d10c      	bne.n	8026740 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026726:	6813      	ldr	r3, [r2, #0]
 8026728:	4803      	ldr	r0, [pc, #12]	@ (8026738 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 802672a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 802672e:	40d8      	lsrs	r0, r3
 8026730:	e567      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026732:	bf00      	nop
 8026734:	44020c00 	.word	0x44020c00
 8026738:	03d09000 	.word	0x03d09000
 802673c:	00b71b00 	.word	0x00b71b00
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8026740:	6812      	ldr	r2, [r2, #0]
 8026742:	0592      	lsls	r2, r2, #22
 8026744:	d503      	bpl.n	802674e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8026746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802674a:	f000 8733 	beq.w	80275b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1414>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 802674e:	4a9e      	ldr	r2, [pc, #632]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8026750:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026754:	f010 0002 	ands.w	r0, r0, #2
 8026758:	f43f ad53 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 802675c:	f5a3 70a0 	sub.w	r0, r3, #320	@ 0x140
 8026760:	4243      	negs	r3, r0
 8026762:	4143      	adcs	r3, r0
 8026764:	03d8      	lsls	r0, r3, #15
 8026766:	e54c      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8026768:	4a97      	ldr	r2, [pc, #604]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 802676a:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 802676e:	f413 6360 	ands.w	r3, r3, #3584	@ 0xe00
 8026772:	d097      	beq.n	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8026774:	6811      	ldr	r1, [r2, #0]
 8026776:	0109      	lsls	r1, r1, #4
 8026778:	d503      	bpl.n	8026782 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 802677a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802677e:	f43f af5b 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8026782:	6812      	ldr	r2, [r2, #0]
 8026784:	0090      	lsls	r0, r2, #2
 8026786:	d503      	bpl.n	8026790 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8026788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802678c:	f43f af5e 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8026790:	4a8d      	ldr	r2, [pc, #564]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8026792:	6811      	ldr	r1, [r2, #0]
 8026794:	0789      	lsls	r1, r1, #30
 8026796:	d508      	bpl.n	80267aa <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8026798:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 802679c:	d105      	bne.n	80267aa <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 802679e:	6813      	ldr	r3, [r2, #0]
 80267a0:	488a      	ldr	r0, [pc, #552]	@ (80269cc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 80267a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80267a6:	40d8      	lsrs	r0, r3
 80267a8:	e52b      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80267aa:	6812      	ldr	r2, [r2, #0]
 80267ac:	0592      	lsls	r2, r2, #22
 80267ae:	d503      	bpl.n	80267b8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80267b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80267b4:	f000 8701 	beq.w	80275ba <HAL_RCCEx_GetPeriphCLKFreq+0x141a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80267b8:	4a83      	ldr	r2, [pc, #524]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80267ba:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80267be:	f010 0002 	ands.w	r0, r0, #2
 80267c2:	f43f ad1e 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80267c6:	f5a3 6020 	sub.w	r0, r3, #2560	@ 0xa00
 80267ca:	4243      	negs	r3, r0
 80267cc:	4143      	adcs	r3, r0
 80267ce:	03d8      	lsls	r0, r3, #15
 80267d0:	e517      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80267d2:	4a7d      	ldr	r2, [pc, #500]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80267d4:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80267d8:	f413 43e0 	ands.w	r3, r3, #28672	@ 0x7000
 80267dc:	f43f af62 	beq.w	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80267e0:	6811      	ldr	r1, [r2, #0]
 80267e2:	0109      	lsls	r1, r1, #4
 80267e4:	d503      	bpl.n	80267ee <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
 80267e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80267ea:	f43f af25 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80267ee:	6812      	ldr	r2, [r2, #0]
 80267f0:	0090      	lsls	r0, r2, #2
 80267f2:	d503      	bpl.n	80267fc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80267f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80267f8:	f43f af28 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80267fc:	4a72      	ldr	r2, [pc, #456]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80267fe:	6811      	ldr	r1, [r2, #0]
 8026800:	0789      	lsls	r1, r1, #30
 8026802:	d508      	bpl.n	8026816 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8026804:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8026808:	d105      	bne.n	8026816 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 802680a:	6813      	ldr	r3, [r2, #0]
 802680c:	486f      	ldr	r0, [pc, #444]	@ (80269cc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 802680e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026812:	40d8      	lsrs	r0, r3
 8026814:	e4f5      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8026816:	6812      	ldr	r2, [r2, #0]
 8026818:	0592      	lsls	r2, r2, #22
 802681a:	d503      	bpl.n	8026824 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 802681c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8026820:	f000 86ce 	beq.w	80275c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8026824:	4a68      	ldr	r2, [pc, #416]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8026826:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 802682a:	f010 0002 	ands.w	r0, r0, #2
 802682e:	f43f ace8 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026832:	f5a3 40a0 	sub.w	r0, r3, #20480	@ 0x5000
 8026836:	4243      	negs	r3, r0
 8026838:	4143      	adcs	r3, r0
 802683a:	03d8      	lsls	r0, r3, #15
 802683c:	e4e1      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 802683e:	4a62      	ldr	r2, [pc, #392]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8026840:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8026844:	f413 3360 	ands.w	r3, r3, #229376	@ 0x38000
 8026848:	f43f af2c 	beq.w	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 802684c:	6811      	ldr	r1, [r2, #0]
 802684e:	0109      	lsls	r1, r1, #4
 8026850:	d503      	bpl.n	802685a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8026852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8026856:	f43f aeef 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 802685a:	6812      	ldr	r2, [r2, #0]
 802685c:	0090      	lsls	r0, r2, #2
 802685e:	d503      	bpl.n	8026868 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 8026860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8026864:	f43f aef2 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8026868:	4a57      	ldr	r2, [pc, #348]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 802686a:	6811      	ldr	r1, [r2, #0]
 802686c:	0789      	lsls	r1, r1, #30
 802686e:	d508      	bpl.n	8026882 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8026870:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8026874:	d105      	bne.n	8026882 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026876:	6813      	ldr	r3, [r2, #0]
 8026878:	4854      	ldr	r0, [pc, #336]	@ (80269cc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 802687a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 802687e:	40d8      	lsrs	r0, r3
 8026880:	e4bf      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8026882:	6812      	ldr	r2, [r2, #0]
 8026884:	0592      	lsls	r2, r2, #22
 8026886:	d503      	bpl.n	8026890 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8026888:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802688c:	f000 869b 	beq.w	80275c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1426>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8026890:	4a4d      	ldr	r2, [pc, #308]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8026892:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026896:	f010 0002 	ands.w	r0, r0, #2
 802689a:	f43f acb2 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 802689e:	f5a3 3020 	sub.w	r0, r3, #163840	@ 0x28000
 80268a2:	4243      	negs	r3, r0
 80268a4:	4143      	adcs	r3, r0
 80268a6:	03d8      	lsls	r0, r3, #15
 80268a8:	e4ab      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80268aa:	4a47      	ldr	r2, [pc, #284]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80268ac:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80268b0:	f413 13e0 	ands.w	r3, r3, #1835008	@ 0x1c0000
 80268b4:	f43f aef6 	beq.w	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80268b8:	6811      	ldr	r1, [r2, #0]
 80268ba:	0109      	lsls	r1, r1, #4
 80268bc:	d503      	bpl.n	80268c6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80268be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80268c2:	f43f aeb9 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80268c6:	6812      	ldr	r2, [r2, #0]
 80268c8:	0090      	lsls	r0, r2, #2
 80268ca:	d503      	bpl.n	80268d4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80268cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80268d0:	f43f aebc 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80268d4:	4a3c      	ldr	r2, [pc, #240]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80268d6:	6811      	ldr	r1, [r2, #0]
 80268d8:	0789      	lsls	r1, r1, #30
 80268da:	d508      	bpl.n	80268ee <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80268dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80268e0:	d105      	bne.n	80268ee <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80268e2:	6813      	ldr	r3, [r2, #0]
 80268e4:	4839      	ldr	r0, [pc, #228]	@ (80269cc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 80268e6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80268ea:	40d8      	lsrs	r0, r3
 80268ec:	e489      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80268ee:	6812      	ldr	r2, [r2, #0]
 80268f0:	0592      	lsls	r2, r2, #22
 80268f2:	d503      	bpl.n	80268fc <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 80268f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80268f8:	f000 8668 	beq.w	80275cc <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80268fc:	4a32      	ldr	r2, [pc, #200]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80268fe:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026902:	f010 0002 	ands.w	r0, r0, #2
 8026906:	f43f ac7c 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 802690a:	f5a3 10a0 	sub.w	r0, r3, #1310720	@ 0x140000
 802690e:	4243      	negs	r3, r0
 8026910:	4143      	adcs	r3, r0
 8026912:	03d8      	lsls	r0, r3, #15
 8026914:	e475      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8026916:	4a2c      	ldr	r2, [pc, #176]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8026918:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 802691c:	f413 0360 	ands.w	r3, r3, #14680064	@ 0xe00000
 8026920:	f43f aec0 	beq.w	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8026924:	6811      	ldr	r1, [r2, #0]
 8026926:	0109      	lsls	r1, r1, #4
 8026928:	d503      	bpl.n	8026932 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
 802692a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 802692e:	f43f ae83 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8026932:	6812      	ldr	r2, [r2, #0]
 8026934:	0090      	lsls	r0, r2, #2
 8026936:	d503      	bpl.n	8026940 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8026938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 802693c:	f43f ae86 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8026940:	4a21      	ldr	r2, [pc, #132]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8026942:	6811      	ldr	r1, [r2, #0]
 8026944:	0789      	lsls	r1, r1, #30
 8026946:	d508      	bpl.n	802695a <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
 8026948:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 802694c:	d105      	bne.n	802695a <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 802694e:	6813      	ldr	r3, [r2, #0]
 8026950:	481e      	ldr	r0, [pc, #120]	@ (80269cc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 8026952:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026956:	40d8      	lsrs	r0, r3
 8026958:	e453      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 802695a:	6812      	ldr	r2, [r2, #0]
 802695c:	0592      	lsls	r2, r2, #22
 802695e:	d503      	bpl.n	8026968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 8026960:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8026964:	f000 8635 	beq.w	80275d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8026968:	4a17      	ldr	r2, [pc, #92]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 802696a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 802696e:	f010 0002 	ands.w	r0, r0, #2
 8026972:	f43f ac46 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026976:	f5a3 0020 	sub.w	r0, r3, #10485760	@ 0xa00000
 802697a:	4243      	negs	r3, r0
 802697c:	4143      	adcs	r3, r0
 802697e:	03d8      	lsls	r0, r3, #15
 8026980:	e43f      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8026982:	4a11      	ldr	r2, [pc, #68]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8026984:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8026988:	f013 63e0 	ands.w	r3, r3, #117440512	@ 0x7000000
 802698c:	f43f ae8a 	beq.w	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8026990:	6811      	ldr	r1, [r2, #0]
 8026992:	0109      	lsls	r1, r1, #4
 8026994:	d503      	bpl.n	802699e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8026996:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802699a:	f43f ae4d 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 802699e:	6812      	ldr	r2, [r2, #0]
 80269a0:	0090      	lsls	r0, r2, #2
 80269a2:	d503      	bpl.n	80269ac <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 80269a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80269a8:	f43f ae50 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80269ac:	4a06      	ldr	r2, [pc, #24]	@ (80269c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80269ae:	6811      	ldr	r1, [r2, #0]
 80269b0:	0789      	lsls	r1, r1, #30
 80269b2:	d50d      	bpl.n	80269d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 80269b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80269b8:	d10a      	bne.n	80269d0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80269ba:	6813      	ldr	r3, [r2, #0]
 80269bc:	4803      	ldr	r0, [pc, #12]	@ (80269cc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 80269be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80269c2:	40d8      	lsrs	r0, r3
 80269c4:	e41d      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80269c6:	bf00      	nop
 80269c8:	44020c00 	.word	0x44020c00
 80269cc:	03d09000 	.word	0x03d09000
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80269d0:	6812      	ldr	r2, [r2, #0]
 80269d2:	0592      	lsls	r2, r2, #22
 80269d4:	d503      	bpl.n	80269de <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 80269d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80269da:	f000 85fd 	beq.w	80275d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80269de:	4aa7      	ldr	r2, [pc, #668]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80269e0:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80269e4:	f010 0002 	ands.w	r0, r0, #2
 80269e8:	f43f ac0b 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80269ec:	f103 407b 	add.w	r0, r3, #4211081216	@ 0xfb000000
 80269f0:	4243      	negs	r3, r0
 80269f2:	4143      	adcs	r3, r0
 80269f4:	03d8      	lsls	r0, r3, #15
 80269f6:	e404      	b.n	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80269f8:	4aa0      	ldr	r2, [pc, #640]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80269fa:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80269fe:	f013 5360 	ands.w	r3, r3, #939524096	@ 0x38000000
 8026a02:	f43f ae4f 	beq.w	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8026a06:	6811      	ldr	r1, [r2, #0]
 8026a08:	0109      	lsls	r1, r1, #4
 8026a0a:	d503      	bpl.n	8026a14 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8026a0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8026a10:	f43f ae12 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8026a14:	6812      	ldr	r2, [r2, #0]
 8026a16:	0090      	lsls	r0, r2, #2
 8026a18:	d503      	bpl.n	8026a22 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 8026a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8026a1e:	f43f ae15 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8026a22:	4a96      	ldr	r2, [pc, #600]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026a24:	6811      	ldr	r1, [r2, #0]
 8026a26:	0789      	lsls	r1, r1, #30
 8026a28:	d509      	bpl.n	8026a3e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8026a2a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8026a2e:	d106      	bne.n	8026a3e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026a30:	6813      	ldr	r3, [r2, #0]
 8026a32:	4893      	ldr	r0, [pc, #588]	@ (8026c80 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8026a34:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026a38:	40d8      	lsrs	r0, r3
 8026a3a:	f7ff bbe2 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8026a3e:	6812      	ldr	r2, [r2, #0]
 8026a40:	0592      	lsls	r2, r2, #22
 8026a42:	d503      	bpl.n	8026a4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8026a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8026a48:	f000 85c9 	beq.w	80275de <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8026a4c:	4a8b      	ldr	r2, [pc, #556]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026a4e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026a52:	f010 0002 	ands.w	r0, r0, #2
 8026a56:	f43f abd4 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026a5a:	f103 4058 	add.w	r0, r3, #3623878656	@ 0xd8000000
 8026a5e:	4243      	negs	r3, r0
 8026a60:	4143      	adcs	r3, r0
 8026a62:	03d8      	lsls	r0, r3, #15
 8026a64:	f7ff bbcd 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8026a68:	4a84      	ldr	r2, [pc, #528]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026a6a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8026a6e:	f013 0307 	ands.w	r3, r3, #7
 8026a72:	f43f ae17 	beq.w	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8026a76:	6811      	ldr	r1, [r2, #0]
 8026a78:	0109      	lsls	r1, r1, #4
 8026a7a:	d502      	bpl.n	8026a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8026a7c:	2b01      	cmp	r3, #1
 8026a7e:	f43f addb 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8026a82:	6812      	ldr	r2, [r2, #0]
 8026a84:	0090      	lsls	r0, r2, #2
 8026a86:	d502      	bpl.n	8026a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
 8026a88:	2b02      	cmp	r3, #2
 8026a8a:	f43f addf 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8026a8e:	4a7b      	ldr	r2, [pc, #492]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026a90:	6811      	ldr	r1, [r2, #0]
 8026a92:	0789      	lsls	r1, r1, #30
 8026a94:	d508      	bpl.n	8026aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
 8026a96:	2b03      	cmp	r3, #3
 8026a98:	d106      	bne.n	8026aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026a9a:	6813      	ldr	r3, [r2, #0]
 8026a9c:	4878      	ldr	r0, [pc, #480]	@ (8026c80 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8026a9e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026aa2:	40d8      	lsrs	r0, r3
 8026aa4:	f7ff bbad 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8026aa8:	6812      	ldr	r2, [r2, #0]
 8026aaa:	0592      	lsls	r2, r2, #22
 8026aac:	d502      	bpl.n	8026ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8026aae:	2b04      	cmp	r3, #4
 8026ab0:	f000 8598 	beq.w	80275e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1444>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8026ab4:	4a71      	ldr	r2, [pc, #452]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026ab6:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026aba:	f010 0002 	ands.w	r0, r0, #2
 8026abe:	f43f aba0 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026ac2:	1f58      	subs	r0, r3, #5
 8026ac4:	4243      	negs	r3, r0
 8026ac6:	4143      	adcs	r3, r0
 8026ac8:	03d8      	lsls	r0, r3, #15
 8026aca:	f7ff bb9a 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8026ace:	4a6b      	ldr	r2, [pc, #428]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026ad0:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8026ad4:	f013 0370 	ands.w	r3, r3, #112	@ 0x70
 8026ad8:	f43f ade4 	beq.w	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8026adc:	6811      	ldr	r1, [r2, #0]
 8026ade:	0109      	lsls	r1, r1, #4
 8026ae0:	d502      	bpl.n	8026ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8026ae2:	2b10      	cmp	r3, #16
 8026ae4:	f43f ada8 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8026ae8:	6812      	ldr	r2, [r2, #0]
 8026aea:	0090      	lsls	r0, r2, #2
 8026aec:	d502      	bpl.n	8026af4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8026aee:	2b20      	cmp	r3, #32
 8026af0:	f43f adac 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8026af4:	4a61      	ldr	r2, [pc, #388]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026af6:	6811      	ldr	r1, [r2, #0]
 8026af8:	0789      	lsls	r1, r1, #30
 8026afa:	d508      	bpl.n	8026b0e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8026afc:	2b30      	cmp	r3, #48	@ 0x30
 8026afe:	d106      	bne.n	8026b0e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026b00:	6813      	ldr	r3, [r2, #0]
 8026b02:	485f      	ldr	r0, [pc, #380]	@ (8026c80 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8026b04:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026b08:	40d8      	lsrs	r0, r3
 8026b0a:	f7ff bb7a 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8026b0e:	6812      	ldr	r2, [r2, #0]
 8026b10:	0592      	lsls	r2, r2, #22
 8026b12:	d502      	bpl.n	8026b1a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8026b14:	2b40      	cmp	r3, #64	@ 0x40
 8026b16:	f000 8568 	beq.w	80275ea <HAL_RCCEx_GetPeriphCLKFreq+0x144a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8026b1a:	4a58      	ldr	r2, [pc, #352]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026b1c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026b20:	f010 0002 	ands.w	r0, r0, #2
 8026b24:	f43f ab6d 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026b28:	f1a3 0050 	sub.w	r0, r3, #80	@ 0x50
 8026b2c:	4243      	negs	r3, r0
 8026b2e:	4143      	adcs	r3, r0
 8026b30:	03d8      	lsls	r0, r3, #15
 8026b32:	f7ff bb66 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8026b36:	4a51      	ldr	r2, [pc, #324]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026b38:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8026b3c:	f013 63e0 	ands.w	r3, r3, #117440512	@ 0x7000000
 8026b40:	d104      	bne.n	8026b4c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
}
 8026b42:	b005      	add	sp, #20
 8026b44:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK3Freq();
 8026b48:	f7fe b876 	b.w	8024c38 <HAL_RCC_GetPCLK3Freq>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8026b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8026b50:	f43f ad72 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8026b54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8026b58:	f43f ad78 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8026b5c:	6811      	ldr	r1, [r2, #0]
 8026b5e:	0789      	lsls	r1, r1, #30
 8026b60:	d509      	bpl.n	8026b76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 8026b62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8026b66:	d106      	bne.n	8026b76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026b68:	6813      	ldr	r3, [r2, #0]
 8026b6a:	4845      	ldr	r0, [pc, #276]	@ (8026c80 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8026b6c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026b70:	40d8      	lsrs	r0, r3
 8026b72:	f7ff bb46 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8026b76:	4a41      	ldr	r2, [pc, #260]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026b78:	6811      	ldr	r1, [r2, #0]
 8026b7a:	0588      	lsls	r0, r1, #22
 8026b7c:	d503      	bpl.n	8026b86 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8026b7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8026b82:	f000 8535 	beq.w	80275f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1450>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8026b86:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026b8a:	f010 0002 	ands.w	r0, r0, #2
 8026b8e:	f43f ab38 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026b92:	f103 417b 	add.w	r1, r3, #4211081216	@ 0xfb000000
 8026b96:	424b      	negs	r3, r1
 8026b98:	414b      	adcs	r3, r1
 8026b9a:	03d8      	lsls	r0, r3, #15
 8026b9c:	f7ff bb31 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8026ba0:	4a36      	ldr	r2, [pc, #216]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026ba2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8026ba6:	f013 0307 	ands.w	r3, r3, #7
 8026baa:	d104      	bne.n	8026bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
}
 8026bac:	b005      	add	sp, #20
 8026bae:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetHCLKFreq();
 8026bb2:	f7fd bd53 	b.w	802465c <HAL_RCC_GetHCLKFreq>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8026bb6:	2b01      	cmp	r3, #1
 8026bb8:	d104      	bne.n	8026bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
}
 8026bba:	b005      	add	sp, #20
 8026bbc:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetSysClockFreq();
 8026bc0:	f7fd bb80 	b.w	80242c4 <HAL_RCC_GetSysClockFreq>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8026bc4:	2b02      	cmp	r3, #2
 8026bc6:	d105      	bne.n	8026bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8026bc8:	a801      	add	r0, sp, #4
 8026bca:	f7ff f9ad 	bl	8025f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8026bce:	9803      	ldr	r0, [sp, #12]
 8026bd0:	f7ff bb17 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8026bd4:	6812      	ldr	r2, [r2, #0]
 8026bd6:	0392      	lsls	r2, r2, #14
 8026bd8:	d502      	bpl.n	8026be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 8026bda:	2b03      	cmp	r3, #3
 8026bdc:	f000 850b 	beq.w	80275f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8026be0:	4a26      	ldr	r2, [pc, #152]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026be2:	6811      	ldr	r1, [r2, #0]
 8026be4:	0788      	lsls	r0, r1, #30
 8026be6:	d508      	bpl.n	8026bfa <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
 8026be8:	2b04      	cmp	r3, #4
 8026bea:	d106      	bne.n	8026bfa <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026bec:	6813      	ldr	r3, [r2, #0]
 8026bee:	4824      	ldr	r0, [pc, #144]	@ (8026c80 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8026bf0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026bf4:	40d8      	lsrs	r0, r3
 8026bf6:	f7ff bb04 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8026bfa:	6810      	ldr	r0, [r2, #0]
 8026bfc:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8026c00:	f43f aaff 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = CSI_VALUE;
 8026c04:	2b05      	cmp	r3, #5
 8026c06:	481f      	ldr	r0, [pc, #124]	@ (8026c84 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8026c08:	bf18      	it	ne
 8026c0a:	2000      	movne	r0, #0
 8026c0c:	f7ff baf9 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8026c10:	4a1a      	ldr	r2, [pc, #104]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026c12:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8026c16:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8026c1a:	f003 0308 	and.w	r3, r3, #8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8026c1e:	0789      	lsls	r1, r1, #30
 8026c20:	d502      	bpl.n	8026c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
 8026c22:	2b00      	cmp	r3, #0
 8026c24:	f000 84ea 	beq.w	80275fc <HAL_RCCEx_GetPeriphCLKFreq+0x145c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8026c28:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026c2c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8026c30:	f43f aae7 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      frequency = LSI_VALUE;
 8026c34:	2b00      	cmp	r3, #0
 8026c36:	bf0c      	ite	eq
 8026c38:	2000      	moveq	r0, #0
 8026c3a:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8026c3e:	f7ff bae0 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8026c42:	4a0e      	ldr	r2, [pc, #56]	@ (8026c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8026c44:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8026c48:	f413 3340 	ands.w	r3, r3, #196608	@ 0x30000
 8026c4c:	f43f ad2a 	beq.w	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8026c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8026c54:	d105      	bne.n	8026c62 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8026c56:	a801      	add	r0, sp, #4
 8026c58:	f7ff fa04 	bl	8026064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8026c5c:	9803      	ldr	r0, [sp, #12]
 8026c5e:	f7ff bad0 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8026c62:	6811      	ldr	r1, [r2, #0]
 8026c64:	0788      	lsls	r0, r1, #30
 8026c66:	d50f      	bpl.n	8026c88 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8026c68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8026c6c:	d10c      	bne.n	8026c88 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026c6e:	6813      	ldr	r3, [r2, #0]
 8026c70:	4803      	ldr	r0, [pc, #12]	@ (8026c80 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8026c72:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026c76:	40d8      	lsrs	r0, r3
 8026c78:	f7ff bac3 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026c7c:	44020c00 	.word	0x44020c00
 8026c80:	03d09000 	.word	0x03d09000
 8026c84:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8026c88:	4ab6      	ldr	r2, [pc, #728]	@ (8026f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
 8026c8a:	6810      	ldr	r0, [r2, #0]
 8026c8c:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8026c90:	f43f aab7 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = CSI_VALUE;
 8026c94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8026c98:	48b3      	ldr	r0, [pc, #716]	@ (8026f68 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>)
 8026c9a:	bf18      	it	ne
 8026c9c:	2000      	movne	r0, #0
 8026c9e:	f7ff bab0 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8026ca2:	4ab0      	ldr	r2, [pc, #704]	@ (8026f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
 8026ca4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8026ca8:	f413 2340 	ands.w	r3, r3, #786432	@ 0xc0000
 8026cac:	f43f acfa 	beq.w	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8026cb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8026cb4:	d0cf      	beq.n	8026c56 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8026cb6:	6811      	ldr	r1, [r2, #0]
 8026cb8:	0789      	lsls	r1, r1, #30
 8026cba:	d509      	bpl.n	8026cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8026cbc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8026cc0:	d106      	bne.n	8026cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026cc2:	6813      	ldr	r3, [r2, #0]
 8026cc4:	48a9      	ldr	r0, [pc, #676]	@ (8026f6c <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8026cc6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026cca:	40d8      	lsrs	r0, r3
 8026ccc:	f7ff ba99 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8026cd0:	4aa4      	ldr	r2, [pc, #656]	@ (8026f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
 8026cd2:	6810      	ldr	r0, [r2, #0]
 8026cd4:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8026cd8:	f43f aa93 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = CSI_VALUE;
 8026cdc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8026ce0:	48a1      	ldr	r0, [pc, #644]	@ (8026f68 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>)
 8026ce2:	bf18      	it	ne
 8026ce4:	2000      	movne	r0, #0
 8026ce6:	f7ff ba8c 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8026cea:	4a9e      	ldr	r2, [pc, #632]	@ (8026f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
 8026cec:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8026cf0:	f413 1340 	ands.w	r3, r3, #3145728	@ 0x300000
 8026cf4:	f43f af25 	beq.w	8026b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8026cf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8026cfc:	d0ab      	beq.n	8026c56 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8026cfe:	6811      	ldr	r1, [r2, #0]
 8026d00:	0788      	lsls	r0, r1, #30
 8026d02:	d509      	bpl.n	8026d18 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8026d04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8026d08:	d106      	bne.n	8026d18 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026d0a:	6813      	ldr	r3, [r2, #0]
 8026d0c:	4897      	ldr	r0, [pc, #604]	@ (8026f6c <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8026d0e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026d12:	40d8      	lsrs	r0, r3
 8026d14:	f7ff ba75 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8026d18:	6810      	ldr	r0, [r2, #0]
 8026d1a:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8026d1e:	f43f aa70 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = CSI_VALUE;
 8026d22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8026d26:	4890      	ldr	r0, [pc, #576]	@ (8026f68 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>)
 8026d28:	bf18      	it	ne
 8026d2a:	2000      	movne	r0, #0
 8026d2c:	f7ff ba69 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8026d30:	4a8c      	ldr	r2, [pc, #560]	@ (8026f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
 8026d32:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8026d36:	f413 0340 	ands.w	r3, r3, #12582912	@ 0xc00000
 8026d3a:	f43f af02 	beq.w	8026b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8026d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8026d42:	d088      	beq.n	8026c56 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8026d44:	6811      	ldr	r1, [r2, #0]
 8026d46:	0789      	lsls	r1, r1, #30
 8026d48:	d509      	bpl.n	8026d5e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8026d4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8026d4e:	d106      	bne.n	8026d5e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026d50:	6813      	ldr	r3, [r2, #0]
 8026d52:	4886      	ldr	r0, [pc, #536]	@ (8026f6c <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8026d54:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026d58:	40d8      	lsrs	r0, r3
 8026d5a:	f7ff ba52 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8026d5e:	4a81      	ldr	r2, [pc, #516]	@ (8026f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
 8026d60:	6810      	ldr	r0, [r2, #0]
 8026d62:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8026d66:	f43f aa4c 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = CSI_VALUE;
 8026d6a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8026d6e:	487e      	ldr	r0, [pc, #504]	@ (8026f68 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>)
 8026d70:	bf18      	it	ne
 8026d72:	2000      	movne	r0, #0
 8026d74:	f7ff ba45 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8026d78:	4a7a      	ldr	r2, [pc, #488]	@ (8026f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
 8026d7a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8026d7e:	f013 7340 	ands.w	r3, r3, #50331648	@ 0x3000000
 8026d82:	f43f ac8f 	beq.w	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8026d86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8026d8a:	f43f af64 	beq.w	8026c56 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8026d8e:	6810      	ldr	r0, [r2, #0]
 8026d90:	f010 0002 	ands.w	r0, r0, #2
 8026d94:	f43f aa35 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026d98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8026d9c:	f040 8432 	bne.w	8027604 <HAL_RCCEx_GetPeriphCLKFreq+0x1464>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026da0:	6813      	ldr	r3, [r2, #0]
 8026da2:	4872      	ldr	r0, [pc, #456]	@ (8026f6c <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8026da4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026da8:	40d8      	lsrs	r0, r3
 8026daa:	f7ff ba2a 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8026dae:	4a6d      	ldr	r2, [pc, #436]	@ (8026f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
 8026db0:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8026db4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
        switch (srcclk)
 8026db8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8026dbc:	d01c      	beq.n	8026df8 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
 8026dbe:	d80c      	bhi.n	8026dda <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 8026dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8026dc4:	f43f abb4 	beq.w	8026530 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8026dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026dcc:	d00e      	beq.n	8026dec <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8026dce:	2b00      	cmp	r3, #0
 8026dd0:	f43f aeb7 	beq.w	8026b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
        frequency = 0U;
 8026dd4:	2000      	movs	r0, #0
 8026dd6:	f7ff ba14 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8026dde:	d012      	beq.n	8026e06 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8026de0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8026de4:	d018      	beq.n	8026e18 <HAL_RCCEx_GetPeriphCLKFreq+0xc78>
 8026de6:	2000      	movs	r0, #0
 8026de8:	f7ff ba0b 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8026dec:	a801      	add	r0, sp, #4
 8026dee:	f7ff f939 	bl	8026064 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8026df2:	9803      	ldr	r0, [sp, #12]
            break;
 8026df4:	f7ff ba05 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8026df8:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026dfc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8026e00:	03c0      	lsls	r0, r0, #15
 8026e02:	f7ff b9fe 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8026e06:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
      frequency = LSI_VALUE;
 8026e0a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8026e0e:	bf18      	it	ne
 8026e10:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8026e14:	f7ff b9f5 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8026e18:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8026e1c:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8026e1e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8026e22:	0788      	lsls	r0, r1, #30
 8026e24:	d507      	bpl.n	8026e36 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8026e26:	b933      	cbnz	r3, 8026e36 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026e28:	6813      	ldr	r3, [r2, #0]
 8026e2a:	4850      	ldr	r0, [pc, #320]	@ (8026f6c <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8026e2c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026e30:	40d8      	lsrs	r0, r3
 8026e32:	f7ff b9e6 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8026e36:	4a4b      	ldr	r2, [pc, #300]	@ (8026f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
 8026e38:	6811      	ldr	r1, [r2, #0]
 8026e3a:	0589      	lsls	r1, r1, #22
 8026e3c:	d503      	bpl.n	8026e46 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8026e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8026e42:	f000 83e2 	beq.w	802760a <HAL_RCCEx_GetPeriphCLKFreq+0x146a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8026e46:	6810      	ldr	r0, [r2, #0]
 8026e48:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8026e4c:	f43f a9d9 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 8026e50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8026e54:	4846      	ldr	r0, [pc, #280]	@ (8026f70 <HAL_RCCEx_GetPeriphCLKFreq+0xdd0>)
 8026e56:	bf18      	it	ne
 8026e58:	2000      	movne	r0, #0
 8026e5a:	f7ff b9d2 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8026e5e:	4a41      	ldr	r2, [pc, #260]	@ (8026f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
 8026e60:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8026e64:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
        switch (srcclk)
 8026e68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8026e6c:	d016      	beq.n	8026e9c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8026e6e:	d80c      	bhi.n	8026e8a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8026e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8026e74:	f43f ab5c 	beq.w	8026530 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8026e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8026e7c:	d0b6      	beq.n	8026dec <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8026e7e:	2b00      	cmp	r3, #0
 8026e80:	f43f ac10 	beq.w	80266a4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
        frequency = 0U;
 8026e84:	2000      	movs	r0, #0
 8026e86:	f7ff b9bc 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026e8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8026e8e:	d00c      	beq.n	8026eaa <HAL_RCCEx_GetPeriphCLKFreq+0xd0a>
 8026e90:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8026e94:	d012      	beq.n	8026ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8026e96:	2000      	movs	r0, #0
 8026e98:	f7ff b9b3 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8026e9c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026ea0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8026ea4:	03c0      	lsls	r0, r0, #15
 8026ea6:	f7ff b9ac 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8026eaa:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
      frequency = LSI_VALUE;
 8026eae:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8026eb2:	bf18      	it	ne
 8026eb4:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8026eb8:	f7ff b9a3 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8026ebc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8026ec0:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8026ec2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8026ec6:	0788      	lsls	r0, r1, #30
 8026ec8:	d507      	bpl.n	8026eda <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8026eca:	b933      	cbnz	r3, 8026eda <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026ecc:	6813      	ldr	r3, [r2, #0]
 8026ece:	4827      	ldr	r0, [pc, #156]	@ (8026f6c <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8026ed0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026ed4:	40d8      	lsrs	r0, r3
 8026ed6:	f7ff b994 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8026eda:	4a22      	ldr	r2, [pc, #136]	@ (8026f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
 8026edc:	6811      	ldr	r1, [r2, #0]
 8026ede:	0589      	lsls	r1, r1, #22
 8026ee0:	d503      	bpl.n	8026eea <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 8026ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8026ee6:	f000 8393 	beq.w	8027610 <HAL_RCCEx_GetPeriphCLKFreq+0x1470>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8026eea:	6810      	ldr	r0, [r2, #0]
 8026eec:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8026ef0:	f43f a987 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 8026ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8026ef8:	481d      	ldr	r0, [pc, #116]	@ (8026f70 <HAL_RCCEx_GetPeriphCLKFreq+0xdd0>)
 8026efa:	bf18      	it	ne
 8026efc:	2000      	movne	r0, #0
 8026efe:	f7ff b980 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8026f02:	4a18      	ldr	r2, [pc, #96]	@ (8026f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
 8026f04:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8026f08:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
        switch (srcclk)
 8026f0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8026f10:	d017      	beq.n	8026f42 <HAL_RCCEx_GetPeriphCLKFreq+0xda2>
 8026f12:	d80d      	bhi.n	8026f30 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8026f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8026f18:	f43f ab0a 	beq.w	8026530 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8026f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8026f20:	f43f af64 	beq.w	8026dec <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8026f24:	2b00      	cmp	r3, #0
 8026f26:	f43f ae0c 	beq.w	8026b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
        frequency = 0U;
 8026f2a:	2000      	movs	r0, #0
 8026f2c:	f7ff b969 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026f30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8026f34:	d00c      	beq.n	8026f50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8026f36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8026f3a:	d01b      	beq.n	8026f74 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
 8026f3c:	2000      	movs	r0, #0
 8026f3e:	f7ff b960 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8026f42:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026f46:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8026f4a:	03c0      	lsls	r0, r0, #15
 8026f4c:	f7ff b959 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8026f50:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
      frequency = LSI_VALUE;
 8026f54:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8026f58:	bf18      	it	ne
 8026f5a:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8026f5e:	f7ff b950 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026f62:	bf00      	nop
 8026f64:	44020c00 	.word	0x44020c00
 8026f68:	003d0900 	.word	0x003d0900
 8026f6c:	03d09000 	.word	0x03d09000
 8026f70:	00b71b00 	.word	0x00b71b00
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8026f74:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8026f78:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8026f7a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8026f7e:	0788      	lsls	r0, r1, #30
 8026f80:	d507      	bpl.n	8026f92 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8026f82:	b933      	cbnz	r3, 8026f92 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8026f84:	6813      	ldr	r3, [r2, #0]
 8026f86:	48ae      	ldr	r0, [pc, #696]	@ (8027240 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>)
 8026f88:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8026f8c:	40d8      	lsrs	r0, r3
 8026f8e:	f7ff b938 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8026f92:	4aac      	ldr	r2, [pc, #688]	@ (8027244 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>)
 8026f94:	6811      	ldr	r1, [r2, #0]
 8026f96:	0589      	lsls	r1, r1, #22
 8026f98:	d503      	bpl.n	8026fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 8026f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8026f9e:	f000 833a 	beq.w	8027616 <HAL_RCCEx_GetPeriphCLKFreq+0x1476>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8026fa2:	6810      	ldr	r0, [r2, #0]
 8026fa4:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8026fa8:	f43f a92b 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 8026fac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8026fb0:	48a5      	ldr	r0, [pc, #660]	@ (8027248 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>)
 8026fb2:	bf18      	it	ne
 8026fb4:	2000      	movne	r0, #0
 8026fb6:	f7ff b924 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8026fba:	4aa2      	ldr	r2, [pc, #648]	@ (8027244 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>)
 8026fbc:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8026fc0:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
        switch (srcclk)
 8026fc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8026fc8:	d017      	beq.n	8026ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe5a>
 8026fca:	d80d      	bhi.n	8026fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
 8026fcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8026fd0:	f43f aaae 	beq.w	8026530 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8026fd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8026fd8:	f43f af08 	beq.w	8026dec <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8026fdc:	2b00      	cmp	r3, #0
 8026fde:	f43f adb0 	beq.w	8026b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
        frequency = 0U;
 8026fe2:	2000      	movs	r0, #0
 8026fe4:	f7ff b90d 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8026fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8026fec:	d00c      	beq.n	8027008 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 8026fee:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8026ff2:	d012      	beq.n	802701a <HAL_RCCEx_GetPeriphCLKFreq+0xe7a>
 8026ff4:	2000      	movs	r0, #0
 8026ff6:	f7ff b904 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8026ffa:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8026ffe:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8027002:	03c0      	lsls	r0, r0, #15
 8027004:	f7ff b8fd 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8027008:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
      frequency = LSI_VALUE;
 802700c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8027010:	bf18      	it	ne
 8027012:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8027016:	f7ff b8f4 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 802701a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 802701e:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8027020:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8027024:	0788      	lsls	r0, r1, #30
 8027026:	d507      	bpl.n	8027038 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8027028:	b933      	cbnz	r3, 8027038 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 802702a:	6813      	ldr	r3, [r2, #0]
 802702c:	4884      	ldr	r0, [pc, #528]	@ (8027240 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>)
 802702e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8027032:	40d8      	lsrs	r0, r3
 8027034:	f7ff b8e5 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8027038:	4a82      	ldr	r2, [pc, #520]	@ (8027244 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>)
 802703a:	6811      	ldr	r1, [r2, #0]
 802703c:	0589      	lsls	r1, r1, #22
 802703e:	d503      	bpl.n	8027048 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8027040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8027044:	f000 82ea 	beq.w	802761c <HAL_RCCEx_GetPeriphCLKFreq+0x147c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8027048:	6810      	ldr	r0, [r2, #0]
 802704a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 802704e:	f43f a8d8 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 8027052:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8027056:	487c      	ldr	r0, [pc, #496]	@ (8027248 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>)
 8027058:	bf18      	it	ne
 802705a:	2000      	movne	r0, #0
 802705c:	f7ff b8d1 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8027060:	4a78      	ldr	r2, [pc, #480]	@ (8027244 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>)
 8027062:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8027066:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
        switch (srcclk)
 802706a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 802706e:	d017      	beq.n	80270a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8027070:	d80d      	bhi.n	802708e <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
 8027072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8027076:	f43f aa5b 	beq.w	8026530 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 802707a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802707e:	f43f aeb5 	beq.w	8026dec <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8027082:	2b00      	cmp	r3, #0
 8027084:	f43f ad5d 	beq.w	8026b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
        frequency = 0U;
 8027088:	2000      	movs	r0, #0
 802708a:	f7ff b8ba 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 802708e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8027092:	d00c      	beq.n	80270ae <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
 8027094:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8027098:	d012      	beq.n	80270c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 802709a:	2000      	movs	r0, #0
 802709c:	f7ff b8b1 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80270a0:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80270a4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80270a8:	03c0      	lsls	r0, r0, #15
 80270aa:	f7ff b8aa 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80270ae:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
      frequency = LSI_VALUE;
 80270b2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80270b6:	bf18      	it	ne
 80270b8:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 80270bc:	f7ff b8a1 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80270c0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80270c4:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80270c6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80270ca:	0788      	lsls	r0, r1, #30
 80270cc:	d507      	bpl.n	80270de <HAL_RCCEx_GetPeriphCLKFreq+0xf3e>
 80270ce:	b933      	cbnz	r3, 80270de <HAL_RCCEx_GetPeriphCLKFreq+0xf3e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80270d0:	6813      	ldr	r3, [r2, #0]
 80270d2:	485b      	ldr	r0, [pc, #364]	@ (8027240 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>)
 80270d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80270d8:	40d8      	lsrs	r0, r3
 80270da:	f7ff b892 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80270de:	4a59      	ldr	r2, [pc, #356]	@ (8027244 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>)
 80270e0:	6811      	ldr	r1, [r2, #0]
 80270e2:	0589      	lsls	r1, r1, #22
 80270e4:	d503      	bpl.n	80270ee <HAL_RCCEx_GetPeriphCLKFreq+0xf4e>
 80270e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80270ea:	f000 829a 	beq.w	8027622 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80270ee:	6810      	ldr	r0, [r2, #0]
 80270f0:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80270f4:	f43f a885 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 80270f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80270fc:	4852      	ldr	r0, [pc, #328]	@ (8027248 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>)
 80270fe:	bf18      	it	ne
 8027100:	2000      	movne	r0, #0
 8027102:	f7ff b87e 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8027106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802710a:	d019      	beq.n	8027140 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 802710c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8027110:	f47f a877 	bne.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8027114:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8027118:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 802711a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 802711e:	0788      	lsls	r0, r1, #30
 8027120:	d517      	bpl.n	8027152 <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
 8027122:	b9b3      	cbnz	r3, 8027152 <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8027124:	6813      	ldr	r3, [r2, #0]
 8027126:	4846      	ldr	r0, [pc, #280]	@ (8027240 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>)
 8027128:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 802712c:	40d8      	lsrs	r0, r3
 802712e:	f7ff b868 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8027132:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8027136:	f3c0 0040 	ubfx	r0, r0, #1, #1
 802713a:	03c0      	lsls	r0, r0, #15
 802713c:	f7ff b861 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8027140:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
      frequency = LSI_VALUE;
 8027144:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8027148:	bf18      	it	ne
 802714a:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 802714e:	f7ff b858 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8027152:	4a3c      	ldr	r2, [pc, #240]	@ (8027244 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>)
 8027154:	6811      	ldr	r1, [r2, #0]
 8027156:	0589      	lsls	r1, r1, #22
 8027158:	d503      	bpl.n	8027162 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 802715a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802715e:	f000 8263 	beq.w	8027628 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8027162:	6810      	ldr	r0, [r2, #0]
 8027164:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8027168:	f43f a84b 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 802716c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8027170:	4835      	ldr	r0, [pc, #212]	@ (8027248 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>)
 8027172:	bf18      	it	ne
 8027174:	2000      	movne	r0, #0
 8027176:	f7ff b844 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 802717a:	4a32      	ldr	r2, [pc, #200]	@ (8027244 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>)
 802717c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8027180:	6812      	ldr	r2, [r2, #0]
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8027182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8027186:	0390      	lsls	r0, r2, #14
 8027188:	d502      	bpl.n	8027190 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 802718a:	2b00      	cmp	r3, #0
 802718c:	f000 824f 	beq.w	802762e <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8027190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8027194:	f43f aa36 	beq.w	8026604 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8027198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802719c:	f43f aa4c 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        frequency = 0U;
 80271a0:	2000      	movs	r0, #0
 80271a2:	f7ff b82e 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80271a6:	4a27      	ldr	r2, [pc, #156]	@ (8027244 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>)
 80271a8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 80271ac:	f003 0307 	and.w	r3, r3, #7
 80271b0:	2b04      	cmp	r3, #4
 80271b2:	d80d      	bhi.n	80271d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80271b4:	a101      	add	r1, pc, #4	@ (adr r1, 80271bc <HAL_RCCEx_GetPeriphCLKFreq+0x101c>)
 80271b6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80271ba:	bf00      	nop
 80271bc:	08027479 	.word	0x08027479
 80271c0:	08026531 	.word	0x08026531
 80271c4:	0802653b 	.word	0x0802653b
 80271c8:	08027635 	.word	0x08027635
 80271cc:	080271d7 	.word	0x080271d7
        frequency = 0U;
 80271d0:	2000      	movs	r0, #0
 80271d2:	f7ff b816 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80271d6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80271da:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80271dc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80271e0:	0789      	lsls	r1, r1, #30
 80271e2:	d507      	bpl.n	80271f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 80271e4:	b933      	cbnz	r3, 80271f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80271e6:	6813      	ldr	r3, [r2, #0]
 80271e8:	4815      	ldr	r0, [pc, #84]	@ (8027240 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>)
 80271ea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80271ee:	40d8      	lsrs	r0, r3
 80271f0:	f7ff b807 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80271f4:	4a13      	ldr	r2, [pc, #76]	@ (8027244 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>)
 80271f6:	6811      	ldr	r1, [r2, #0]
 80271f8:	0588      	lsls	r0, r1, #22
 80271fa:	d503      	bpl.n	8027204 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>
 80271fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8027200:	f000 821b 	beq.w	802763a <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8027204:	6810      	ldr	r0, [r2, #0]
 8027206:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 802720a:	f43e affa 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 802720e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8027212:	480d      	ldr	r0, [pc, #52]	@ (8027248 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>)
 8027214:	bf18      	it	ne
 8027216:	2000      	movne	r0, #0
 8027218:	f7fe bff3 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 802721c:	4a09      	ldr	r2, [pc, #36]	@ (8027244 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>)
 802721e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8027222:	f003 0338 	and.w	r3, r3, #56	@ 0x38
        switch (srcclk)
 8027226:	2b10      	cmp	r3, #16
 8027228:	f43f a987 	beq.w	802653a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 802722c:	d80e      	bhi.n	802724c <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
 802722e:	2b00      	cmp	r3, #0
 8027230:	f000 8122 	beq.w	8027478 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
 8027234:	2b08      	cmp	r3, #8
 8027236:	f43f a97b 	beq.w	8026530 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = 0U;
 802723a:	2000      	movs	r0, #0
 802723c:	f7fe bfe1 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8027240:	03d09000 	.word	0x03d09000
 8027244:	44020c00 	.word	0x44020c00
 8027248:	00b71b00 	.word	0x00b71b00
 802724c:	2b18      	cmp	r3, #24
 802724e:	f000 81f7 	beq.w	8027640 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8027252:	2b20      	cmp	r3, #32
 8027254:	f040 81f7 	bne.w	8027646 <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8027258:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 802725c:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 802725e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8027262:	0789      	lsls	r1, r1, #30
 8027264:	d507      	bpl.n	8027276 <HAL_RCCEx_GetPeriphCLKFreq+0x10d6>
 8027266:	b933      	cbnz	r3, 8027276 <HAL_RCCEx_GetPeriphCLKFreq+0x10d6>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8027268:	6813      	ldr	r3, [r2, #0]
 802726a:	489b      	ldr	r0, [pc, #620]	@ (80274d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 802726c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8027270:	40d8      	lsrs	r0, r3
 8027272:	f7fe bfc6 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8027276:	4a99      	ldr	r2, [pc, #612]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 8027278:	6811      	ldr	r1, [r2, #0]
 802727a:	0588      	lsls	r0, r1, #22
 802727c:	d503      	bpl.n	8027286 <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
 802727e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8027282:	f000 81e3 	beq.w	802764c <HAL_RCCEx_GetPeriphCLKFreq+0x14ac>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8027286:	6810      	ldr	r0, [r2, #0]
 8027288:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 802728c:	f43e afb9 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 8027290:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8027294:	4892      	ldr	r0, [pc, #584]	@ (80274e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>)
 8027296:	bf18      	it	ne
 8027298:	2000      	movne	r0, #0
 802729a:	f7fe bfb2 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 802729e:	4a8f      	ldr	r2, [pc, #572]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 80272a0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 80272a4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
        switch (srcclk)
 80272a8:	2b80      	cmp	r3, #128	@ 0x80
 80272aa:	f43f a946 	beq.w	802653a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80272ae:	d808      	bhi.n	80272c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 80272b0:	2b00      	cmp	r3, #0
 80272b2:	f000 80e1 	beq.w	8027478 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
 80272b6:	2b40      	cmp	r3, #64	@ 0x40
 80272b8:	f43f a93a 	beq.w	8026530 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = 0U;
 80272bc:	2000      	movs	r0, #0
 80272be:	f7fe bfa0 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80272c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80272c4:	f000 81c5 	beq.w	8027652 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
 80272c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80272cc:	f040 81c4 	bne.w	8027658 <HAL_RCCEx_GetPeriphCLKFreq+0x14b8>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80272d0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80272d4:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80272d6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80272da:	0789      	lsls	r1, r1, #30
 80272dc:	d507      	bpl.n	80272ee <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
 80272de:	b933      	cbnz	r3, 80272ee <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80272e0:	6813      	ldr	r3, [r2, #0]
 80272e2:	487d      	ldr	r0, [pc, #500]	@ (80274d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 80272e4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80272e8:	40d8      	lsrs	r0, r3
 80272ea:	f7fe bf8a 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80272ee:	4a7b      	ldr	r2, [pc, #492]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 80272f0:	6811      	ldr	r1, [r2, #0]
 80272f2:	0588      	lsls	r0, r1, #22
 80272f4:	d503      	bpl.n	80272fe <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 80272f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80272fa:	f000 81b0 	beq.w	802765e <HAL_RCCEx_GetPeriphCLKFreq+0x14be>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80272fe:	6810      	ldr	r0, [r2, #0]
 8027300:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8027304:	f43e af7d 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 8027308:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 802730c:	4874      	ldr	r0, [pc, #464]	@ (80274e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>)
 802730e:	bf18      	it	ne
 8027310:	2000      	movne	r0, #0
 8027312:	f7fe bf76 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8027316:	4a71      	ldr	r2, [pc, #452]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 8027318:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 802731c:	f413 6360 	ands.w	r3, r3, #3584	@ 0xe00
 8027320:	f43f a980 	beq.w	8026624 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8027324:	6811      	ldr	r1, [r2, #0]
 8027326:	0109      	lsls	r1, r1, #4
 8027328:	d503      	bpl.n	8027332 <HAL_RCCEx_GetPeriphCLKFreq+0x1192>
 802732a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802732e:	f43f a983 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8027332:	6812      	ldr	r2, [r2, #0]
 8027334:	0090      	lsls	r0, r2, #2
 8027336:	d503      	bpl.n	8027340 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8027338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802733c:	f43f a986 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8027340:	4a66      	ldr	r2, [pc, #408]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 8027342:	6811      	ldr	r1, [r2, #0]
 8027344:	0789      	lsls	r1, r1, #30
 8027346:	d509      	bpl.n	802735c <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 8027348:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 802734c:	d106      	bne.n	802735c <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 802734e:	6813      	ldr	r3, [r2, #0]
 8027350:	4861      	ldr	r0, [pc, #388]	@ (80274d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 8027352:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8027356:	40d8      	lsrs	r0, r3
 8027358:	f7fe bf53 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 802735c:	6812      	ldr	r2, [r2, #0]
 802735e:	0590      	lsls	r0, r2, #22
 8027360:	d503      	bpl.n	802736a <HAL_RCCEx_GetPeriphCLKFreq+0x11ca>
 8027362:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8027366:	f000 817d 	beq.w	8027664 <HAL_RCCEx_GetPeriphCLKFreq+0x14c4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 802736a:	4a5c      	ldr	r2, [pc, #368]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 802736c:	6810      	ldr	r0, [r2, #0]
 802736e:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8027372:	f43e af46 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 8027376:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 802737a:	4859      	ldr	r0, [pc, #356]	@ (80274e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>)
 802737c:	bf18      	it	ne
 802737e:	2000      	movne	r0, #0
 8027380:	f7fe bf3f 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8027384:	4a55      	ldr	r2, [pc, #340]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 8027386:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 802738a:	f413 43e0 	ands.w	r3, r3, #28672	@ 0x7000
 802738e:	f43f abd8 	beq.w	8026b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8027392:	6811      	ldr	r1, [r2, #0]
 8027394:	0109      	lsls	r1, r1, #4
 8027396:	d503      	bpl.n	80273a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1200>
 8027398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802739c:	f43f a94c 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80273a0:	6812      	ldr	r2, [r2, #0]
 80273a2:	0090      	lsls	r0, r2, #2
 80273a4:	d503      	bpl.n	80273ae <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80273a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80273aa:	f43f a94f 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80273ae:	4a4b      	ldr	r2, [pc, #300]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 80273b0:	6811      	ldr	r1, [r2, #0]
 80273b2:	0789      	lsls	r1, r1, #30
 80273b4:	d509      	bpl.n	80273ca <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
 80273b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80273ba:	d106      	bne.n	80273ca <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80273bc:	6813      	ldr	r3, [r2, #0]
 80273be:	4846      	ldr	r0, [pc, #280]	@ (80274d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 80273c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80273c4:	40d8      	lsrs	r0, r3
 80273c6:	f7fe bf1c 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80273ca:	6812      	ldr	r2, [r2, #0]
 80273cc:	0590      	lsls	r0, r2, #22
 80273ce:	d503      	bpl.n	80273d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 80273d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80273d4:	f000 8149 	beq.w	802766a <HAL_RCCEx_GetPeriphCLKFreq+0x14ca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80273d8:	4a40      	ldr	r2, [pc, #256]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 80273da:	6810      	ldr	r0, [r2, #0]
 80273dc:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80273e0:	f43e af0f 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 80273e4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80273e8:	483d      	ldr	r0, [pc, #244]	@ (80274e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>)
 80273ea:	bf18      	it	ne
 80273ec:	2000      	movne	r0, #0
 80273ee:	f7fe bf08 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80273f2:	4a3a      	ldr	r2, [pc, #232]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 80273f4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 80273f8:	f413 3360 	ands.w	r3, r3, #229376	@ 0x38000
 80273fc:	f43f a912 	beq.w	8026624 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8027400:	6811      	ldr	r1, [r2, #0]
 8027402:	0109      	lsls	r1, r1, #4
 8027404:	d503      	bpl.n	802740e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8027406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802740a:	f43f a915 	beq.w	8026638 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 802740e:	6812      	ldr	r2, [r2, #0]
 8027410:	0090      	lsls	r0, r2, #2
 8027412:	d503      	bpl.n	802741c <HAL_RCCEx_GetPeriphCLKFreq+0x127c>
 8027414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8027418:	f43f a918 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 802741c:	4a2f      	ldr	r2, [pc, #188]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 802741e:	6811      	ldr	r1, [r2, #0]
 8027420:	0789      	lsls	r1, r1, #30
 8027422:	d509      	bpl.n	8027438 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8027424:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8027428:	d106      	bne.n	8027438 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 802742a:	6813      	ldr	r3, [r2, #0]
 802742c:	482a      	ldr	r0, [pc, #168]	@ (80274d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 802742e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8027432:	40d8      	lsrs	r0, r3
 8027434:	f7fe bee5 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8027438:	6812      	ldr	r2, [r2, #0]
 802743a:	0590      	lsls	r0, r2, #22
 802743c:	d503      	bpl.n	8027446 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
 802743e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8027442:	f000 8115 	beq.w	8027670 <HAL_RCCEx_GetPeriphCLKFreq+0x14d0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8027446:	4a25      	ldr	r2, [pc, #148]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 8027448:	6810      	ldr	r0, [r2, #0]
 802744a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 802744e:	f43e aed8 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 8027452:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8027456:	4822      	ldr	r0, [pc, #136]	@ (80274e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>)
 8027458:	bf18      	it	ne
 802745a:	2000      	movne	r0, #0
 802745c:	f7fe bed1 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8027460:	4a1e      	ldr	r2, [pc, #120]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 8027462:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8027466:	f003 0303 	and.w	r3, r3, #3
        switch (srcclk)
 802746a:	2b02      	cmp	r3, #2
 802746c:	d00a      	beq.n	8027484 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
 802746e:	2b03      	cmp	r3, #3
 8027470:	d00e      	beq.n	8027490 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>
 8027472:	2b01      	cmp	r3, #1
 8027474:	f47f ab9a 	bne.w	8026bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8027478:	a801      	add	r0, sp, #4
 802747a:	f7fe fcb7 	bl	8025dec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 802747e:	9802      	ldr	r0, [sp, #8]
            break;
 8027480:	f7fe bebf 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8027484:	a801      	add	r0, sp, #4
 8027486:	f7fe fd4f 	bl	8025f28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 802748a:	9803      	ldr	r0, [sp, #12]
            break;
 802748c:	f7fe beb9 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8027490:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8027494:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8027496:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 802749a:	0789      	lsls	r1, r1, #30
 802749c:	d507      	bpl.n	80274ae <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 802749e:	b933      	cbnz	r3, 80274ae <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80274a0:	6813      	ldr	r3, [r2, #0]
 80274a2:	480d      	ldr	r0, [pc, #52]	@ (80274d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 80274a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80274a8:	40d8      	lsrs	r0, r3
 80274aa:	f7fe beaa 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80274ae:	4a0b      	ldr	r2, [pc, #44]	@ (80274dc <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 80274b0:	6811      	ldr	r1, [r2, #0]
 80274b2:	0588      	lsls	r0, r1, #22
 80274b4:	d503      	bpl.n	80274be <HAL_RCCEx_GetPeriphCLKFreq+0x131e>
 80274b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80274ba:	f000 80dc 	beq.w	8027676 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80274be:	6810      	ldr	r0, [r2, #0]
 80274c0:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80274c4:	f43e ae9d 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 80274c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80274cc:	4804      	ldr	r0, [pc, #16]	@ (80274e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>)
 80274ce:	bf18      	it	ne
 80274d0:	2000      	movne	r0, #0
 80274d2:	f7fe be96 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80274d6:	bf00      	nop
 80274d8:	03d09000 	.word	0x03d09000
 80274dc:	44020c00 	.word	0x44020c00
 80274e0:	00b71b00 	.word	0x00b71b00
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80274e4:	4a6d      	ldr	r2, [pc, #436]	@ (802769c <HAL_RCCEx_GetPeriphCLKFreq+0x14fc>)
 80274e6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80274ea:	6811      	ldr	r1, [r2, #0]
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80274ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80274f0:	0489      	lsls	r1, r1, #18
 80274f2:	d502      	bpl.n	80274fa <HAL_RCCEx_GetPeriphCLKFreq+0x135a>
 80274f4:	2b00      	cmp	r3, #0
 80274f6:	f000 80c9 	beq.w	802768c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80274fa:	6812      	ldr	r2, [r2, #0]
 80274fc:	0192      	lsls	r2, r2, #6
 80274fe:	d502      	bpl.n	8027506 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8027500:	2b10      	cmp	r3, #16
 8027502:	f43f a87f 	beq.w	8026604 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8027506:	4a65      	ldr	r2, [pc, #404]	@ (802769c <HAL_RCCEx_GetPeriphCLKFreq+0x14fc>)
 8027508:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 802750c:	0788      	lsls	r0, r1, #30
 802750e:	d502      	bpl.n	8027516 <HAL_RCCEx_GetPeriphCLKFreq+0x1376>
 8027510:	2b20      	cmp	r3, #32
 8027512:	f000 80be 	beq.w	8027692 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8027516:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 802751a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 802751e:	f43e ae70 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      frequency = LSI_VALUE;
 8027522:	2b30      	cmp	r3, #48	@ 0x30
 8027524:	bf14      	ite	ne
 8027526:	2000      	movne	r0, #0
 8027528:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 802752c:	f7fe be69 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8027530:	4a5a      	ldr	r2, [pc, #360]	@ (802769c <HAL_RCCEx_GetPeriphCLKFreq+0x14fc>)
 8027532:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8027536:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 802753a:	2b10      	cmp	r3, #16
 802753c:	f43f a862 	beq.w	8026604 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8027540:	6811      	ldr	r1, [r2, #0]
 8027542:	0089      	lsls	r1, r1, #2
 8027544:	d502      	bpl.n	802754c <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>
 8027546:	2b20      	cmp	r3, #32
 8027548:	f43f a880 	beq.w	802664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 802754c:	6810      	ldr	r0, [r2, #0]
 802754e:	f410 5000 	ands.w	r0, r0, #8192	@ 0x2000
 8027552:	f43e ae56 	beq.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
          frequency = HSI48_VALUE;
 8027556:	2b30      	cmp	r3, #48	@ 0x30
 8027558:	4851      	ldr	r0, [pc, #324]	@ (80276a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1500>)
 802755a:	bf18      	it	ne
 802755c:	2000      	movne	r0, #0
 802755e:	f7fe be50 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      frequency = LSE_VALUE;
 8027562:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8027566:	f7fe be4c 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      frequency = LSI_VALUE;
 802756a:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 802756e:	f7fe be48 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        frequency = 0U;
 8027572:	2000      	movs	r0, #0
 8027574:	f7fe be45 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8027578:	2000      	movs	r0, #0
 802757a:	f7fe be42 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 802757e:	2000      	movs	r0, #0
 8027580:	f7fe be3f 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8027584:	2000      	movs	r0, #0
 8027586:	f7fe be3c 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            frequency = EXTERNAL_CLOCK_VALUE;
 802758a:	4846      	ldr	r0, [pc, #280]	@ (80276a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1504>)
 802758c:	f7fe be39 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = CSI_VALUE;
 8027590:	4845      	ldr	r0, [pc, #276]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 8027592:	f7fe be36 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            frequency = EXTERNAL_CLOCK_VALUE;
 8027596:	4843      	ldr	r0, [pc, #268]	@ (80276a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1504>)
 8027598:	f7fe be33 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        frequency = 0U;
 802759c:	2000      	movs	r0, #0
 802759e:	f7fe be30 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = CSI_VALUE;
 80275a2:	4841      	ldr	r0, [pc, #260]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275a4:	f7fe be2d 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275a8:	483f      	ldr	r0, [pc, #252]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275aa:	f7fe be2a 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275ae:	483e      	ldr	r0, [pc, #248]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275b0:	f7fe be27 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275b4:	483c      	ldr	r0, [pc, #240]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275b6:	f7fe be24 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275ba:	483b      	ldr	r0, [pc, #236]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275bc:	f7fe be21 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275c0:	4839      	ldr	r0, [pc, #228]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275c2:	f7fe be1e 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275c6:	4838      	ldr	r0, [pc, #224]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275c8:	f7fe be1b 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275cc:	4836      	ldr	r0, [pc, #216]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275ce:	f7fe be18 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275d2:	4835      	ldr	r0, [pc, #212]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275d4:	f7fe be15 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275d8:	4833      	ldr	r0, [pc, #204]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275da:	f7fe be12 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275de:	4832      	ldr	r0, [pc, #200]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275e0:	f7fe be0f 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275e4:	4830      	ldr	r0, [pc, #192]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275e6:	f7fe be0c 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275ea:	482f      	ldr	r0, [pc, #188]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275ec:	f7fe be09 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80275f0:	482d      	ldr	r0, [pc, #180]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 80275f2:	f7fe be06 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 80275f6:	482d      	ldr	r0, [pc, #180]	@ (80276ac <HAL_RCCEx_GetPeriphCLKFreq+0x150c>)
 80275f8:	f7fe be03 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      frequency = LSE_VALUE;
 80275fc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8027600:	f7fe bdff 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        frequency = 0U;
 8027604:	2000      	movs	r0, #0
 8027606:	f7fe bdfc 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = CSI_VALUE;
 802760a:	4827      	ldr	r0, [pc, #156]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 802760c:	f7fe bdf9 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8027610:	4825      	ldr	r0, [pc, #148]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 8027612:	f7fe bdf6 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8027616:	4824      	ldr	r0, [pc, #144]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 8027618:	f7fe bdf3 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 802761c:	4822      	ldr	r0, [pc, #136]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 802761e:	f7fe bdf0 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8027622:	4821      	ldr	r0, [pc, #132]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 8027624:	f7fe bded 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8027628:	481f      	ldr	r0, [pc, #124]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 802762a:	f7fe bdea 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = HSE_VALUE;
 802762e:	481f      	ldr	r0, [pc, #124]	@ (80276ac <HAL_RCCEx_GetPeriphCLKFreq+0x150c>)
 8027630:	f7fe bde7 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            frequency = EXTERNAL_CLOCK_VALUE;
 8027634:	481b      	ldr	r0, [pc, #108]	@ (80276a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1504>)
 8027636:	f7fe bde4 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = CSI_VALUE;
 802763a:	481b      	ldr	r0, [pc, #108]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 802763c:	f7fe bde1 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            frequency = EXTERNAL_CLOCK_VALUE;
 8027640:	4818      	ldr	r0, [pc, #96]	@ (80276a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1504>)
 8027642:	f7fe bdde 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        frequency = 0U;
 8027646:	2000      	movs	r0, #0
 8027648:	f7fe bddb 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = CSI_VALUE;
 802764c:	4816      	ldr	r0, [pc, #88]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 802764e:	f7fe bdd8 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
            frequency = EXTERNAL_CLOCK_VALUE;
 8027652:	4814      	ldr	r0, [pc, #80]	@ (80276a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1504>)
 8027654:	f7fe bdd5 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        frequency = 0U;
 8027658:	2000      	movs	r0, #0
 802765a:	f7fe bdd2 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
              frequency = CSI_VALUE;
 802765e:	4812      	ldr	r0, [pc, #72]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 8027660:	f7fe bdcf 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8027664:	4810      	ldr	r0, [pc, #64]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 8027666:	f7fe bdcc 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 802766a:	480f      	ldr	r0, [pc, #60]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 802766c:	f7fe bdc9 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8027670:	480d      	ldr	r0, [pc, #52]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 8027672:	f7fe bdc6 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8027676:	480c      	ldr	r0, [pc, #48]	@ (80276a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1508>)
 8027678:	f7fe bdc3 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      frequency = LSE_VALUE;
 802767c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8027680:	f7fe bdbf 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      frequency = LSI_VALUE;
 8027684:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8027688:	f7fe bdbb 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
          frequency = HSI48_VALUE;
 802768c:	4804      	ldr	r0, [pc, #16]	@ (80276a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1500>)
 802768e:	f7fe bdb8 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      frequency = LSE_VALUE;
 8027692:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8027696:	f7fe bdb4 	b.w	8026202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 802769a:	bf00      	nop
 802769c:	44020c00 	.word	0x44020c00
 80276a0:	02dc6c00 	.word	0x02dc6c00
 80276a4:	00bb8000 	.word	0x00bb8000
 80276a8:	003d0900 	.word	0x003d0900
 80276ac:	00b71b00 	.word	0x00b71b00

080276b0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80276b0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80276b2:	6a02      	ldr	r2, [r0, #32]
{
 80276b4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80276b6:	f022 0201 	bic.w	r2, r2, #1
 80276ba:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80276bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80276be:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80276c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80276c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80276c6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80276ca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80276cc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80276ce:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80276d2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80276d4:	4d2b      	ldr	r5, [pc, #172]	@ (8027784 <TIM_OC1_SetConfig+0xd4>)
 80276d6:	42a8      	cmp	r0, r5
 80276d8:	d01f      	beq.n	802771a <TIM_OC1_SetConfig+0x6a>
 80276da:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80276de:	42a8      	cmp	r0, r5
 80276e0:	d01b      	beq.n	802771a <TIM_OC1_SetConfig+0x6a>
 80276e2:	4d29      	ldr	r5, [pc, #164]	@ (8027788 <TIM_OC1_SetConfig+0xd8>)
 80276e4:	42a8      	cmp	r0, r5
 80276e6:	d018      	beq.n	802771a <TIM_OC1_SetConfig+0x6a>
 80276e8:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80276ec:	42a8      	cmp	r0, r5
 80276ee:	d014      	beq.n	802771a <TIM_OC1_SetConfig+0x6a>
 80276f0:	4d26      	ldr	r5, [pc, #152]	@ (802778c <TIM_OC1_SetConfig+0xdc>)
 80276f2:	42a8      	cmp	r0, r5
 80276f4:	d011      	beq.n	802771a <TIM_OC1_SetConfig+0x6a>
 80276f6:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80276fa:	42a8      	cmp	r0, r5
 80276fc:	d00d      	beq.n	802771a <TIM_OC1_SetConfig+0x6a>
 80276fe:	4d24      	ldr	r5, [pc, #144]	@ (8027790 <TIM_OC1_SetConfig+0xe0>)
 8027700:	42a8      	cmp	r0, r5
 8027702:	d00a      	beq.n	802771a <TIM_OC1_SetConfig+0x6a>
 8027704:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027708:	42a8      	cmp	r0, r5
 802770a:	d006      	beq.n	802771a <TIM_OC1_SetConfig+0x6a>
 802770c:	4d21      	ldr	r5, [pc, #132]	@ (8027794 <TIM_OC1_SetConfig+0xe4>)
 802770e:	42a8      	cmp	r0, r5
 8027710:	d003      	beq.n	802771a <TIM_OC1_SetConfig+0x6a>
 8027712:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027716:	42a8      	cmp	r0, r5
 8027718:	d12e      	bne.n	8027778 <TIM_OC1_SetConfig+0xc8>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 802771a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 802771c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8027720:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8027722:	4d18      	ldr	r5, [pc, #96]	@ (8027784 <TIM_OC1_SetConfig+0xd4>)
    tmpccer &= ~TIM_CCER_CC1NE;
 8027724:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8027728:	42a8      	cmp	r0, r5
 802772a:	d01f      	beq.n	802776c <TIM_OC1_SetConfig+0xbc>
 802772c:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027730:	42a8      	cmp	r0, r5
 8027732:	d01b      	beq.n	802776c <TIM_OC1_SetConfig+0xbc>
 8027734:	4d14      	ldr	r5, [pc, #80]	@ (8027788 <TIM_OC1_SetConfig+0xd8>)
 8027736:	42a8      	cmp	r0, r5
 8027738:	d018      	beq.n	802776c <TIM_OC1_SetConfig+0xbc>
 802773a:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 802773e:	42a8      	cmp	r0, r5
 8027740:	d014      	beq.n	802776c <TIM_OC1_SetConfig+0xbc>
 8027742:	4d12      	ldr	r5, [pc, #72]	@ (802778c <TIM_OC1_SetConfig+0xdc>)
 8027744:	42a8      	cmp	r0, r5
 8027746:	d011      	beq.n	802776c <TIM_OC1_SetConfig+0xbc>
 8027748:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 802774c:	42a8      	cmp	r0, r5
 802774e:	d00d      	beq.n	802776c <TIM_OC1_SetConfig+0xbc>
 8027750:	4d0f      	ldr	r5, [pc, #60]	@ (8027790 <TIM_OC1_SetConfig+0xe0>)
 8027752:	42a8      	cmp	r0, r5
 8027754:	d00a      	beq.n	802776c <TIM_OC1_SetConfig+0xbc>
 8027756:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 802775a:	42a8      	cmp	r0, r5
 802775c:	d006      	beq.n	802776c <TIM_OC1_SetConfig+0xbc>
 802775e:	4d0d      	ldr	r5, [pc, #52]	@ (8027794 <TIM_OC1_SetConfig+0xe4>)
 8027760:	42a8      	cmp	r0, r5
 8027762:	d003      	beq.n	802776c <TIM_OC1_SetConfig+0xbc>
 8027764:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027768:	42a8      	cmp	r0, r5
 802776a:	d105      	bne.n	8027778 <TIM_OC1_SetConfig+0xc8>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802776c:	f424 7540 	bic.w	r5, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8027770:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8027774:	4334      	orrs	r4, r6
 8027776:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8027778:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802777a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802777c:	684a      	ldr	r2, [r1, #4]
 802777e:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8027780:	6203      	str	r3, [r0, #32]
}
 8027782:	bd70      	pop	{r4, r5, r6, pc}
 8027784:	40012c00 	.word	0x40012c00
 8027788:	40013400 	.word	0x40013400
 802778c:	40014000 	.word	0x40014000
 8027790:	40014400 	.word	0x40014400
 8027794:	40014800 	.word	0x40014800

08027798 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8027798:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802779a:	6a02      	ldr	r2, [r0, #32]
{
 802779c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802779e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80277a2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80277a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80277a6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80277a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80277aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80277ae:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80277b2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80277b4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80277b6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80277ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80277be:	4d22      	ldr	r5, [pc, #136]	@ (8027848 <TIM_OC3_SetConfig+0xb0>)
 80277c0:	42a8      	cmp	r0, r5
 80277c2:	d00a      	beq.n	80277da <TIM_OC3_SetConfig+0x42>
 80277c4:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80277c8:	42a8      	cmp	r0, r5
 80277ca:	d006      	beq.n	80277da <TIM_OC3_SetConfig+0x42>
 80277cc:	4d1f      	ldr	r5, [pc, #124]	@ (802784c <TIM_OC3_SetConfig+0xb4>)
 80277ce:	42a8      	cmp	r0, r5
 80277d0:	d003      	beq.n	80277da <TIM_OC3_SetConfig+0x42>
 80277d2:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80277d6:	42a8      	cmp	r0, r5
 80277d8:	d114      	bne.n	8027804 <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80277da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80277dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80277e0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80277e4:	4d18      	ldr	r5, [pc, #96]	@ (8027848 <TIM_OC3_SetConfig+0xb0>)
    tmpccer &= ~TIM_CCER_CC3NE;
 80277e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80277ea:	42a8      	cmp	r0, r5
 80277ec:	d01f      	beq.n	802782e <TIM_OC3_SetConfig+0x96>
 80277ee:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80277f2:	42a8      	cmp	r0, r5
 80277f4:	d01b      	beq.n	802782e <TIM_OC3_SetConfig+0x96>
 80277f6:	4d15      	ldr	r5, [pc, #84]	@ (802784c <TIM_OC3_SetConfig+0xb4>)
 80277f8:	42a8      	cmp	r0, r5
 80277fa:	d018      	beq.n	802782e <TIM_OC3_SetConfig+0x96>
 80277fc:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027800:	42a8      	cmp	r0, r5
 8027802:	d014      	beq.n	802782e <TIM_OC3_SetConfig+0x96>
 8027804:	4d12      	ldr	r5, [pc, #72]	@ (8027850 <TIM_OC3_SetConfig+0xb8>)
 8027806:	42a8      	cmp	r0, r5
 8027808:	d011      	beq.n	802782e <TIM_OC3_SetConfig+0x96>
 802780a:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 802780e:	42a8      	cmp	r0, r5
 8027810:	d00d      	beq.n	802782e <TIM_OC3_SetConfig+0x96>
 8027812:	4d10      	ldr	r5, [pc, #64]	@ (8027854 <TIM_OC3_SetConfig+0xbc>)
 8027814:	42a8      	cmp	r0, r5
 8027816:	d00a      	beq.n	802782e <TIM_OC3_SetConfig+0x96>
 8027818:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 802781c:	42a8      	cmp	r0, r5
 802781e:	d006      	beq.n	802782e <TIM_OC3_SetConfig+0x96>
 8027820:	4d0d      	ldr	r5, [pc, #52]	@ (8027858 <TIM_OC3_SetConfig+0xc0>)
 8027822:	42a8      	cmp	r0, r5
 8027824:	d003      	beq.n	802782e <TIM_OC3_SetConfig+0x96>
 8027826:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 802782a:	42a8      	cmp	r0, r5
 802782c:	d106      	bne.n	802783c <TIM_OC3_SetConfig+0xa4>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802782e:	f424 5540 	bic.w	r5, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8027832:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8027836:	4334      	orrs	r4, r6
 8027838:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802783c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802783e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8027840:	684a      	ldr	r2, [r1, #4]
 8027842:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8027844:	6203      	str	r3, [r0, #32]
}
 8027846:	bd70      	pop	{r4, r5, r6, pc}
 8027848:	40012c00 	.word	0x40012c00
 802784c:	40013400 	.word	0x40013400
 8027850:	40014000 	.word	0x40014000
 8027854:	40014400 	.word	0x40014400
 8027858:	40014800 	.word	0x40014800

0802785c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802785c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802785e:	6a02      	ldr	r2, [r0, #32]
{
 8027860:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8027862:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8027866:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8027868:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802786a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802786c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802786e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8027872:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8027876:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802787a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 802787c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8027880:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8027884:	4d22      	ldr	r5, [pc, #136]	@ (8027910 <TIM_OC4_SetConfig+0xb4>)
 8027886:	42a8      	cmp	r0, r5
 8027888:	d00a      	beq.n	80278a0 <TIM_OC4_SetConfig+0x44>
 802788a:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 802788e:	42a8      	cmp	r0, r5
 8027890:	d006      	beq.n	80278a0 <TIM_OC4_SetConfig+0x44>
 8027892:	4d20      	ldr	r5, [pc, #128]	@ (8027914 <TIM_OC4_SetConfig+0xb8>)
 8027894:	42a8      	cmp	r0, r5
 8027896:	d003      	beq.n	80278a0 <TIM_OC4_SetConfig+0x44>
 8027898:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 802789c:	42a8      	cmp	r0, r5
 802789e:	d114      	bne.n	80278ca <TIM_OC4_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80278a0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80278a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80278a6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80278aa:	4d19      	ldr	r5, [pc, #100]	@ (8027910 <TIM_OC4_SetConfig+0xb4>)
    tmpccer &= ~TIM_CCER_CC4NE;
 80278ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80278b0:	42a8      	cmp	r0, r5
 80278b2:	d01f      	beq.n	80278f4 <TIM_OC4_SetConfig+0x98>
 80278b4:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80278b8:	42a8      	cmp	r0, r5
 80278ba:	d01b      	beq.n	80278f4 <TIM_OC4_SetConfig+0x98>
 80278bc:	4d15      	ldr	r5, [pc, #84]	@ (8027914 <TIM_OC4_SetConfig+0xb8>)
 80278be:	42a8      	cmp	r0, r5
 80278c0:	d018      	beq.n	80278f4 <TIM_OC4_SetConfig+0x98>
 80278c2:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80278c6:	42a8      	cmp	r0, r5
 80278c8:	d014      	beq.n	80278f4 <TIM_OC4_SetConfig+0x98>
 80278ca:	4d13      	ldr	r5, [pc, #76]	@ (8027918 <TIM_OC4_SetConfig+0xbc>)
 80278cc:	42a8      	cmp	r0, r5
 80278ce:	d011      	beq.n	80278f4 <TIM_OC4_SetConfig+0x98>
 80278d0:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80278d4:	42a8      	cmp	r0, r5
 80278d6:	d00d      	beq.n	80278f4 <TIM_OC4_SetConfig+0x98>
 80278d8:	4d10      	ldr	r5, [pc, #64]	@ (802791c <TIM_OC4_SetConfig+0xc0>)
 80278da:	42a8      	cmp	r0, r5
 80278dc:	d00a      	beq.n	80278f4 <TIM_OC4_SetConfig+0x98>
 80278de:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80278e2:	42a8      	cmp	r0, r5
 80278e4:	d006      	beq.n	80278f4 <TIM_OC4_SetConfig+0x98>
 80278e6:	4d0e      	ldr	r5, [pc, #56]	@ (8027920 <TIM_OC4_SetConfig+0xc4>)
 80278e8:	42a8      	cmp	r0, r5
 80278ea:	d003      	beq.n	80278f4 <TIM_OC4_SetConfig+0x98>
 80278ec:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80278f0:	42a8      	cmp	r0, r5
 80278f2:	d106      	bne.n	8027902 <TIM_OC4_SetConfig+0xa6>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80278f4:	f424 4540 	bic.w	r5, r4, #49152	@ 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80278f8:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80278fc:	4334      	orrs	r4, r6
 80278fe:	ea45 1484 	orr.w	r4, r5, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8027902:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8027904:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8027906:	684a      	ldr	r2, [r1, #4]
 8027908:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802790a:	6203      	str	r3, [r0, #32]
}
 802790c:	bd70      	pop	{r4, r5, r6, pc}
 802790e:	bf00      	nop
 8027910:	40012c00 	.word	0x40012c00
 8027914:	40013400 	.word	0x40013400
 8027918:	40014000 	.word	0x40014000
 802791c:	40014400 	.word	0x40014400
 8027920:	40014800 	.word	0x40014800

08027924 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8027924:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8027926:	6a02      	ldr	r2, [r0, #32]
{
 8027928:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 802792a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 802792e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8027930:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8027932:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8027934:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8027936:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 802793a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 802793e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8027940:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8027942:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8027946:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802794a:	4d17      	ldr	r5, [pc, #92]	@ (80279a8 <TIM_OC5_SetConfig+0x84>)
 802794c:	42a8      	cmp	r0, r5
 802794e:	d01f      	beq.n	8027990 <TIM_OC5_SetConfig+0x6c>
 8027950:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027954:	42a8      	cmp	r0, r5
 8027956:	d01b      	beq.n	8027990 <TIM_OC5_SetConfig+0x6c>
 8027958:	4d14      	ldr	r5, [pc, #80]	@ (80279ac <TIM_OC5_SetConfig+0x88>)
 802795a:	42a8      	cmp	r0, r5
 802795c:	d018      	beq.n	8027990 <TIM_OC5_SetConfig+0x6c>
 802795e:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027962:	42a8      	cmp	r0, r5
 8027964:	d014      	beq.n	8027990 <TIM_OC5_SetConfig+0x6c>
 8027966:	4d12      	ldr	r5, [pc, #72]	@ (80279b0 <TIM_OC5_SetConfig+0x8c>)
 8027968:	42a8      	cmp	r0, r5
 802796a:	d011      	beq.n	8027990 <TIM_OC5_SetConfig+0x6c>
 802796c:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027970:	42a8      	cmp	r0, r5
 8027972:	d00d      	beq.n	8027990 <TIM_OC5_SetConfig+0x6c>
 8027974:	4d0f      	ldr	r5, [pc, #60]	@ (80279b4 <TIM_OC5_SetConfig+0x90>)
 8027976:	42a8      	cmp	r0, r5
 8027978:	d00a      	beq.n	8027990 <TIM_OC5_SetConfig+0x6c>
 802797a:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 802797e:	42a8      	cmp	r0, r5
 8027980:	d006      	beq.n	8027990 <TIM_OC5_SetConfig+0x6c>
 8027982:	4d0d      	ldr	r5, [pc, #52]	@ (80279b8 <TIM_OC5_SetConfig+0x94>)
 8027984:	42a8      	cmp	r0, r5
 8027986:	d003      	beq.n	8027990 <TIM_OC5_SetConfig+0x6c>
 8027988:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 802798c:	42a8      	cmp	r0, r5
 802798e:	d104      	bne.n	802799a <TIM_OC5_SetConfig+0x76>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8027990:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8027992:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8027996:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802799a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 802799c:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 802799e:	684a      	ldr	r2, [r1, #4]
 80279a0:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80279a2:	6203      	str	r3, [r0, #32]
}
 80279a4:	bd30      	pop	{r4, r5, pc}
 80279a6:	bf00      	nop
 80279a8:	40012c00 	.word	0x40012c00
 80279ac:	40013400 	.word	0x40013400
 80279b0:	40014000 	.word	0x40014000
 80279b4:	40014400 	.word	0x40014400
 80279b8:	40014800 	.word	0x40014800

080279bc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80279bc:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80279be:	6a02      	ldr	r2, [r0, #32]
{
 80279c0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80279c2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80279c6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80279c8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80279ca:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80279cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80279ce:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80279d2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80279d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80279da:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80279dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80279e0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80279e4:	4d16      	ldr	r5, [pc, #88]	@ (8027a40 <TIM_OC6_SetConfig+0x84>)
 80279e6:	42a8      	cmp	r0, r5
 80279e8:	d01f      	beq.n	8027a2a <TIM_OC6_SetConfig+0x6e>
 80279ea:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80279ee:	42a8      	cmp	r0, r5
 80279f0:	d01b      	beq.n	8027a2a <TIM_OC6_SetConfig+0x6e>
 80279f2:	4d14      	ldr	r5, [pc, #80]	@ (8027a44 <TIM_OC6_SetConfig+0x88>)
 80279f4:	42a8      	cmp	r0, r5
 80279f6:	d018      	beq.n	8027a2a <TIM_OC6_SetConfig+0x6e>
 80279f8:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80279fc:	42a8      	cmp	r0, r5
 80279fe:	d014      	beq.n	8027a2a <TIM_OC6_SetConfig+0x6e>
 8027a00:	4d11      	ldr	r5, [pc, #68]	@ (8027a48 <TIM_OC6_SetConfig+0x8c>)
 8027a02:	42a8      	cmp	r0, r5
 8027a04:	d011      	beq.n	8027a2a <TIM_OC6_SetConfig+0x6e>
 8027a06:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027a0a:	42a8      	cmp	r0, r5
 8027a0c:	d00d      	beq.n	8027a2a <TIM_OC6_SetConfig+0x6e>
 8027a0e:	4d0f      	ldr	r5, [pc, #60]	@ (8027a4c <TIM_OC6_SetConfig+0x90>)
 8027a10:	42a8      	cmp	r0, r5
 8027a12:	d00a      	beq.n	8027a2a <TIM_OC6_SetConfig+0x6e>
 8027a14:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027a18:	42a8      	cmp	r0, r5
 8027a1a:	d006      	beq.n	8027a2a <TIM_OC6_SetConfig+0x6e>
 8027a1c:	4d0c      	ldr	r5, [pc, #48]	@ (8027a50 <TIM_OC6_SetConfig+0x94>)
 8027a1e:	42a8      	cmp	r0, r5
 8027a20:	d003      	beq.n	8027a2a <TIM_OC6_SetConfig+0x6e>
 8027a22:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027a26:	42a8      	cmp	r0, r5
 8027a28:	d104      	bne.n	8027a34 <TIM_OC6_SetConfig+0x78>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8027a2a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8027a2c:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8027a30:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8027a34:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8027a36:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8027a38:	684a      	ldr	r2, [r1, #4]
 8027a3a:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8027a3c:	6203      	str	r3, [r0, #32]
}
 8027a3e:	bd30      	pop	{r4, r5, pc}
 8027a40:	40012c00 	.word	0x40012c00
 8027a44:	40013400 	.word	0x40013400
 8027a48:	40014000 	.word	0x40014000
 8027a4c:	40014400 	.word	0x40014400
 8027a50:	40014800 	.word	0x40014800

08027a54 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8027a54:	4770      	bx	lr

08027a56 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8027a56:	4770      	bx	lr

08027a58 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8027a58:	4770      	bx	lr

08027a5a <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8027a5a:	4770      	bx	lr

08027a5c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8027a5c:	4770      	bx	lr

08027a5e <HAL_TIM_IC_CaptureHalfCpltCallback>:
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
 8027a5e:	4770      	bx	lr

08027a60 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8027a60:	4770      	bx	lr

08027a62 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8027a62:	4770      	bx	lr

08027a64 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8027a64:	4770      	bx	lr

08027a66 <HAL_TIM_TriggerHalfCpltCallback>:
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
 8027a66:	4770      	bx	lr

08027a68 <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8027a68:	4770      	bx	lr
	...

08027a6c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8027a6c:	4a5e      	ldr	r2, [pc, #376]	@ (8027be8 <TIM_Base_SetConfig+0x17c>)
  tmpcr1 = TIMx->CR1;
 8027a6e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8027a70:	4290      	cmp	r0, r2
 8027a72:	d025      	beq.n	8027ac0 <TIM_Base_SetConfig+0x54>
 8027a74:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027a78:	4290      	cmp	r0, r2
 8027a7a:	d021      	beq.n	8027ac0 <TIM_Base_SetConfig+0x54>
 8027a7c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8027a80:	d01e      	beq.n	8027ac0 <TIM_Base_SetConfig+0x54>
 8027a82:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
 8027a86:	d01b      	beq.n	8027ac0 <TIM_Base_SetConfig+0x54>
 8027a88:	4a58      	ldr	r2, [pc, #352]	@ (8027bec <TIM_Base_SetConfig+0x180>)
 8027a8a:	4290      	cmp	r0, r2
 8027a8c:	d018      	beq.n	8027ac0 <TIM_Base_SetConfig+0x54>
 8027a8e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027a92:	4290      	cmp	r0, r2
 8027a94:	d014      	beq.n	8027ac0 <TIM_Base_SetConfig+0x54>
 8027a96:	4a56      	ldr	r2, [pc, #344]	@ (8027bf0 <TIM_Base_SetConfig+0x184>)
 8027a98:	4290      	cmp	r0, r2
 8027a9a:	d011      	beq.n	8027ac0 <TIM_Base_SetConfig+0x54>
 8027a9c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027aa0:	4290      	cmp	r0, r2
 8027aa2:	d00d      	beq.n	8027ac0 <TIM_Base_SetConfig+0x54>
 8027aa4:	4a53      	ldr	r2, [pc, #332]	@ (8027bf4 <TIM_Base_SetConfig+0x188>)
 8027aa6:	4290      	cmp	r0, r2
 8027aa8:	d00a      	beq.n	8027ac0 <TIM_Base_SetConfig+0x54>
 8027aaa:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027aae:	4290      	cmp	r0, r2
 8027ab0:	d006      	beq.n	8027ac0 <TIM_Base_SetConfig+0x54>
 8027ab2:	4a51      	ldr	r2, [pc, #324]	@ (8027bf8 <TIM_Base_SetConfig+0x18c>)
 8027ab4:	4290      	cmp	r0, r2
 8027ab6:	d003      	beq.n	8027ac0 <TIM_Base_SetConfig+0x54>
 8027ab8:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027abc:	4290      	cmp	r0, r2
 8027abe:	d12c      	bne.n	8027b1a <TIM_Base_SetConfig+0xae>
    tmpcr1 |= Structure->CounterMode;
 8027ac0:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8027ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8027ac6:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8027ac8:	4a47      	ldr	r2, [pc, #284]	@ (8027be8 <TIM_Base_SetConfig+0x17c>)
 8027aca:	4290      	cmp	r0, r2
 8027acc:	d04f      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027ace:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027ad2:	4290      	cmp	r0, r2
 8027ad4:	d04b      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027ad6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8027ada:	d048      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027adc:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
 8027ae0:	d045      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027ae2:	4a42      	ldr	r2, [pc, #264]	@ (8027bec <TIM_Base_SetConfig+0x180>)
 8027ae4:	4290      	cmp	r0, r2
 8027ae6:	d042      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027ae8:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027aec:	4290      	cmp	r0, r2
 8027aee:	d03e      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027af0:	4a3f      	ldr	r2, [pc, #252]	@ (8027bf0 <TIM_Base_SetConfig+0x184>)
 8027af2:	4290      	cmp	r0, r2
 8027af4:	d03b      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027af6:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027afa:	4290      	cmp	r0, r2
 8027afc:	d037      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027afe:	4a3d      	ldr	r2, [pc, #244]	@ (8027bf4 <TIM_Base_SetConfig+0x188>)
 8027b00:	4290      	cmp	r0, r2
 8027b02:	d034      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b04:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027b08:	4290      	cmp	r0, r2
 8027b0a:	d030      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8027bf8 <TIM_Base_SetConfig+0x18c>)
 8027b0e:	4290      	cmp	r0, r2
 8027b10:	d02d      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b12:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027b16:	4290      	cmp	r0, r2
 8027b18:	d029      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b1a:	4a38      	ldr	r2, [pc, #224]	@ (8027bfc <TIM_Base_SetConfig+0x190>)
 8027b1c:	4290      	cmp	r0, r2
 8027b1e:	d026      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b20:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027b24:	4290      	cmp	r0, r2
 8027b26:	d022      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b28:	4a35      	ldr	r2, [pc, #212]	@ (8027c00 <TIM_Base_SetConfig+0x194>)
 8027b2a:	4290      	cmp	r0, r2
 8027b2c:	d01f      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b2e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027b32:	4290      	cmp	r0, r2
 8027b34:	d01b      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b36:	4a33      	ldr	r2, [pc, #204]	@ (8027c04 <TIM_Base_SetConfig+0x198>)
 8027b38:	4290      	cmp	r0, r2
 8027b3a:	d018      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b3c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027b40:	4290      	cmp	r0, r2
 8027b42:	d014      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b44:	4a30      	ldr	r2, [pc, #192]	@ (8027c08 <TIM_Base_SetConfig+0x19c>)
 8027b46:	4290      	cmp	r0, r2
 8027b48:	d011      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b4a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027b4e:	4290      	cmp	r0, r2
 8027b50:	d00d      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b52:	4a2e      	ldr	r2, [pc, #184]	@ (8027c0c <TIM_Base_SetConfig+0x1a0>)
 8027b54:	4290      	cmp	r0, r2
 8027b56:	d00a      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b58:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027b5c:	4290      	cmp	r0, r2
 8027b5e:	d006      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b60:	4a2b      	ldr	r2, [pc, #172]	@ (8027c10 <TIM_Base_SetConfig+0x1a4>)
 8027b62:	4290      	cmp	r0, r2
 8027b64:	d003      	beq.n	8027b6e <TIM_Base_SetConfig+0x102>
 8027b66:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8027b6a:	4290      	cmp	r0, r2
 8027b6c:	d103      	bne.n	8027b76 <TIM_Base_SetConfig+0x10a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8027b6e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8027b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8027b74:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8027b76:	694a      	ldr	r2, [r1, #20]
 8027b78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8027b7c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8027b7e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8027b80:	688b      	ldr	r3, [r1, #8]
 8027b82:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8027b84:	680b      	ldr	r3, [r1, #0]
 8027b86:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8027b88:	4b17      	ldr	r3, [pc, #92]	@ (8027be8 <TIM_Base_SetConfig+0x17c>)
 8027b8a:	4298      	cmp	r0, r3
 8027b8c:	d01f      	beq.n	8027bce <TIM_Base_SetConfig+0x162>
 8027b8e:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8027b92:	4298      	cmp	r0, r3
 8027b94:	d01b      	beq.n	8027bce <TIM_Base_SetConfig+0x162>
 8027b96:	4b18      	ldr	r3, [pc, #96]	@ (8027bf8 <TIM_Base_SetConfig+0x18c>)
 8027b98:	4298      	cmp	r0, r3
 8027b9a:	d018      	beq.n	8027bce <TIM_Base_SetConfig+0x162>
 8027b9c:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8027ba0:	4298      	cmp	r0, r3
 8027ba2:	d014      	beq.n	8027bce <TIM_Base_SetConfig+0x162>
 8027ba4:	4b18      	ldr	r3, [pc, #96]	@ (8027c08 <TIM_Base_SetConfig+0x19c>)
 8027ba6:	4298      	cmp	r0, r3
 8027ba8:	d011      	beq.n	8027bce <TIM_Base_SetConfig+0x162>
 8027baa:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8027bae:	4298      	cmp	r0, r3
 8027bb0:	d00d      	beq.n	8027bce <TIM_Base_SetConfig+0x162>
 8027bb2:	4b16      	ldr	r3, [pc, #88]	@ (8027c0c <TIM_Base_SetConfig+0x1a0>)
 8027bb4:	4298      	cmp	r0, r3
 8027bb6:	d00a      	beq.n	8027bce <TIM_Base_SetConfig+0x162>
 8027bb8:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8027bbc:	4298      	cmp	r0, r3
 8027bbe:	d006      	beq.n	8027bce <TIM_Base_SetConfig+0x162>
 8027bc0:	4b13      	ldr	r3, [pc, #76]	@ (8027c10 <TIM_Base_SetConfig+0x1a4>)
 8027bc2:	4298      	cmp	r0, r3
 8027bc4:	d003      	beq.n	8027bce <TIM_Base_SetConfig+0x162>
 8027bc6:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8027bca:	4298      	cmp	r0, r3
 8027bcc:	d101      	bne.n	8027bd2 <TIM_Base_SetConfig+0x166>
    TIMx->RCR = Structure->RepetitionCounter;
 8027bce:	690b      	ldr	r3, [r1, #16]
 8027bd0:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8027bd2:	2301      	movs	r3, #1
 8027bd4:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8027bd6:	6903      	ldr	r3, [r0, #16]
 8027bd8:	07db      	lsls	r3, r3, #31
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8027bda:	bf42      	ittt	mi
 8027bdc:	6903      	ldrmi	r3, [r0, #16]
 8027bde:	f023 0301 	bicmi.w	r3, r3, #1
 8027be2:	6103      	strmi	r3, [r0, #16]
}
 8027be4:	4770      	bx	lr
 8027be6:	bf00      	nop
 8027be8:	40012c00 	.word	0x40012c00
 8027bec:	40000400 	.word	0x40000400
 8027bf0:	40000800 	.word	0x40000800
 8027bf4:	40000c00 	.word	0x40000c00
 8027bf8:	40013400 	.word	0x40013400
 8027bfc:	40001800 	.word	0x40001800
 8027c00:	40001c00 	.word	0x40001c00
 8027c04:	40002000 	.word	0x40002000
 8027c08:	40014000 	.word	0x40014000
 8027c0c:	40014400 	.word	0x40014400
 8027c10:	40014800 	.word	0x40014800

08027c14 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8027c14:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8027c16:	6a02      	ldr	r2, [r0, #32]
{
 8027c18:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8027c1a:	f022 0210 	bic.w	r2, r2, #16
 8027c1e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8027c20:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8027c22:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8027c24:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8027c26:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8027c2a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8027c2e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8027c32:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8027c34:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8027c38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8027c3c:	4d22      	ldr	r5, [pc, #136]	@ (8027cc8 <TIM_OC2_SetConfig+0xb4>)
 8027c3e:	42a8      	cmp	r0, r5
 8027c40:	d00a      	beq.n	8027c58 <TIM_OC2_SetConfig+0x44>
 8027c42:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027c46:	42a8      	cmp	r0, r5
 8027c48:	d006      	beq.n	8027c58 <TIM_OC2_SetConfig+0x44>
 8027c4a:	4d20      	ldr	r5, [pc, #128]	@ (8027ccc <TIM_OC2_SetConfig+0xb8>)
 8027c4c:	42a8      	cmp	r0, r5
 8027c4e:	d003      	beq.n	8027c58 <TIM_OC2_SetConfig+0x44>
 8027c50:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027c54:	42a8      	cmp	r0, r5
 8027c56:	d114      	bne.n	8027c82 <TIM_OC2_SetConfig+0x6e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8027c58:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8027c5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8027c5e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8027c62:	4d19      	ldr	r5, [pc, #100]	@ (8027cc8 <TIM_OC2_SetConfig+0xb4>)
    tmpccer &= ~TIM_CCER_CC2NE;
 8027c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8027c68:	42a8      	cmp	r0, r5
 8027c6a:	d01f      	beq.n	8027cac <TIM_OC2_SetConfig+0x98>
 8027c6c:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027c70:	42a8      	cmp	r0, r5
 8027c72:	d01b      	beq.n	8027cac <TIM_OC2_SetConfig+0x98>
 8027c74:	4d15      	ldr	r5, [pc, #84]	@ (8027ccc <TIM_OC2_SetConfig+0xb8>)
 8027c76:	42a8      	cmp	r0, r5
 8027c78:	d018      	beq.n	8027cac <TIM_OC2_SetConfig+0x98>
 8027c7a:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027c7e:	42a8      	cmp	r0, r5
 8027c80:	d014      	beq.n	8027cac <TIM_OC2_SetConfig+0x98>
 8027c82:	4d13      	ldr	r5, [pc, #76]	@ (8027cd0 <TIM_OC2_SetConfig+0xbc>)
 8027c84:	42a8      	cmp	r0, r5
 8027c86:	d011      	beq.n	8027cac <TIM_OC2_SetConfig+0x98>
 8027c88:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027c8c:	42a8      	cmp	r0, r5
 8027c8e:	d00d      	beq.n	8027cac <TIM_OC2_SetConfig+0x98>
 8027c90:	4d10      	ldr	r5, [pc, #64]	@ (8027cd4 <TIM_OC2_SetConfig+0xc0>)
 8027c92:	42a8      	cmp	r0, r5
 8027c94:	d00a      	beq.n	8027cac <TIM_OC2_SetConfig+0x98>
 8027c96:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027c9a:	42a8      	cmp	r0, r5
 8027c9c:	d006      	beq.n	8027cac <TIM_OC2_SetConfig+0x98>
 8027c9e:	4d0e      	ldr	r5, [pc, #56]	@ (8027cd8 <TIM_OC2_SetConfig+0xc4>)
 8027ca0:	42a8      	cmp	r0, r5
 8027ca2:	d003      	beq.n	8027cac <TIM_OC2_SetConfig+0x98>
 8027ca4:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8027ca8:	42a8      	cmp	r0, r5
 8027caa:	d106      	bne.n	8027cba <TIM_OC2_SetConfig+0xa6>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8027cac:	f424 6540 	bic.w	r5, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8027cb0:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8027cb4:	4334      	orrs	r4, r6
 8027cb6:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8027cba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8027cbc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8027cbe:	684a      	ldr	r2, [r1, #4]
 8027cc0:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8027cc2:	6203      	str	r3, [r0, #32]
}
 8027cc4:	bd70      	pop	{r4, r5, r6, pc}
 8027cc6:	bf00      	nop
 8027cc8:	40012c00 	.word	0x40012c00
 8027ccc:	40013400 	.word	0x40013400
 8027cd0:	40014000 	.word	0x40014000
 8027cd4:	40014400 	.word	0x40014400
 8027cd8:	40014800 	.word	0x40014800

08027cdc <HAL_TIM_PWM_ConfigChannel>:
{
 8027cdc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8027cde:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8027ce2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8027ce4:	2b01      	cmp	r3, #1
 8027ce6:	d073      	beq.n	8027dd0 <HAL_TIM_PWM_ConfigChannel+0xf4>
 8027ce8:	2001      	movs	r0, #1
  switch (Channel)
 8027cea:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8027cec:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 8027cf0:	d04e      	beq.n	8027d90 <HAL_TIM_PWM_ConfigChannel+0xb4>
 8027cf2:	d808      	bhi.n	8027d06 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8027cf4:	2a04      	cmp	r2, #4
 8027cf6:	d02b      	beq.n	8027d50 <HAL_TIM_PWM_ConfigChannel+0x74>
 8027cf8:	2a08      	cmp	r2, #8
 8027cfa:	d039      	beq.n	8027d70 <HAL_TIM_PWM_ConfigChannel+0x94>
 8027cfc:	b1ba      	cbz	r2, 8027d2e <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_UNLOCK(htim);
 8027cfe:	2300      	movs	r3, #0
 8027d00:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8027d04:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8027d06:	2a10      	cmp	r2, #16
 8027d08:	d052      	beq.n	8027db0 <HAL_TIM_PWM_ConfigChannel+0xd4>
 8027d0a:	2a14      	cmp	r2, #20
 8027d0c:	d1f7      	bne.n	8027cfe <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8027d0e:	6820      	ldr	r0, [r4, #0]
 8027d10:	f7ff fe54 	bl	80279bc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8027d14:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8027d16:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8027d18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8027d1c:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8027d1e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8027d20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8027d24:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8027d26:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8027d28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8027d2c:	e04e      	b.n	8027dcc <HAL_TIM_PWM_ConfigChannel+0xf0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8027d2e:	6820      	ldr	r0, [r4, #0]
 8027d30:	f7ff fcbe 	bl	80276b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8027d34:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8027d36:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8027d38:	f043 0308 	orr.w	r3, r3, #8
 8027d3c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8027d3e:	6983      	ldr	r3, [r0, #24]
 8027d40:	f023 0304 	bic.w	r3, r3, #4
 8027d44:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8027d46:	6983      	ldr	r3, [r0, #24]
 8027d48:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8027d4a:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8027d4c:	2000      	movs	r0, #0
 8027d4e:	e7d6      	b.n	8027cfe <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8027d50:	6820      	ldr	r0, [r4, #0]
 8027d52:	f7ff ff5f 	bl	8027c14 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8027d56:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8027d58:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8027d5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8027d5e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8027d60:	6983      	ldr	r3, [r0, #24]
 8027d62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8027d66:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8027d68:	6983      	ldr	r3, [r0, #24]
 8027d6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8027d6e:	e7ec      	b.n	8027d4a <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8027d70:	6820      	ldr	r0, [r4, #0]
 8027d72:	f7ff fd11 	bl	8027798 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8027d76:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8027d78:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8027d7a:	f043 0308 	orr.w	r3, r3, #8
 8027d7e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8027d80:	69c3      	ldr	r3, [r0, #28]
 8027d82:	f023 0304 	bic.w	r3, r3, #4
 8027d86:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8027d88:	69c3      	ldr	r3, [r0, #28]
 8027d8a:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8027d8c:	61c3      	str	r3, [r0, #28]
      break;
 8027d8e:	e7dd      	b.n	8027d4c <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8027d90:	6820      	ldr	r0, [r4, #0]
 8027d92:	f7ff fd63 	bl	802785c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8027d96:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8027d98:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8027d9a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8027d9e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8027da0:	69c3      	ldr	r3, [r0, #28]
 8027da2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8027da6:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8027da8:	69c3      	ldr	r3, [r0, #28]
 8027daa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8027dae:	e7ed      	b.n	8027d8c <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8027db0:	6820      	ldr	r0, [r4, #0]
 8027db2:	f7ff fdb7 	bl	8027924 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8027db6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8027db8:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8027dba:	f043 0308 	orr.w	r3, r3, #8
 8027dbe:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8027dc0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8027dc2:	f023 0304 	bic.w	r3, r3, #4
 8027dc6:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8027dc8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8027dca:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8027dcc:	6503      	str	r3, [r0, #80]	@ 0x50
      break;
 8027dce:	e7bd      	b.n	8027d4c <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 8027dd0:	2002      	movs	r0, #2
 8027dd2:	e797      	b.n	8027d04 <HAL_TIM_PWM_ConfigChannel+0x28>

08027dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8027dd4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8027dd6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8027dd8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8027dda:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8027dde:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8027de2:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8027de4:	6082      	str	r2, [r0, #8]
}
 8027de6:	bd10      	pop	{r4, pc}

08027de8 <HAL_TIM_ConfigClockSource>:
{
 8027de8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8027dea:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8027dee:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8027df0:	2b01      	cmp	r3, #1
 8027df2:	f04f 0002 	mov.w	r0, #2
 8027df6:	d021      	beq.n	8027e3c <HAL_TIM_ConfigClockSource+0x54>
 8027df8:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8027dfa:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8027dfe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8027e00:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8027e04:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8027e06:	4b58      	ldr	r3, [pc, #352]	@ (8027f68 <HAL_TIM_ConfigClockSource+0x180>)
 8027e08:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8027e0a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8027e0c:	680b      	ldr	r3, [r1, #0]
 8027e0e:	2b70      	cmp	r3, #112	@ 0x70
 8027e10:	d04a      	beq.n	8027ea8 <HAL_TIM_ConfigClockSource+0xc0>
 8027e12:	d824      	bhi.n	8027e5e <HAL_TIM_ConfigClockSource+0x76>
 8027e14:	2b50      	cmp	r3, #80	@ 0x50
 8027e16:	d05a      	beq.n	8027ece <HAL_TIM_ConfigClockSource+0xe6>
 8027e18:	d81d      	bhi.n	8027e56 <HAL_TIM_ConfigClockSource+0x6e>
 8027e1a:	2b40      	cmp	r3, #64	@ 0x40
 8027e1c:	f000 808a 	beq.w	8027f34 <HAL_TIM_ConfigClockSource+0x14c>
 8027e20:	d81b      	bhi.n	8027e5a <HAL_TIM_ConfigClockSource+0x72>
 8027e22:	2b20      	cmp	r3, #32
 8027e24:	d00d      	beq.n	8027e42 <HAL_TIM_ConfigClockSource+0x5a>
 8027e26:	d80a      	bhi.n	8027e3e <HAL_TIM_ConfigClockSource+0x56>
 8027e28:	f033 0210 	bics.w	r2, r3, #16
 8027e2c:	d009      	beq.n	8027e42 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8027e2e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8027e30:	2301      	movs	r3, #1
 8027e32:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8027e36:	2300      	movs	r3, #0
 8027e38:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8027e3c:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8027e3e:	2b30      	cmp	r3, #48	@ 0x30
 8027e40:	d1f5      	bne.n	8027e2e <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8027e42:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8027e44:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8027e48:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8027e4c:	431a      	orrs	r2, r3
 8027e4e:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8027e52:	6082      	str	r2, [r0, #8]
}
 8027e54:	e00a      	b.n	8027e6c <HAL_TIM_ConfigClockSource+0x84>
  switch (sClockSourceConfig->ClockSource)
 8027e56:	2b60      	cmp	r3, #96	@ 0x60
 8027e58:	d052      	beq.n	8027f00 <HAL_TIM_ConfigClockSource+0x118>
      status = HAL_ERROR;
 8027e5a:	4610      	mov	r0, r2
 8027e5c:	e7e8      	b.n	8027e30 <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 8027e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8027e62:	d02b      	beq.n	8027ebc <HAL_TIM_ConfigClockSource+0xd4>
 8027e64:	d804      	bhi.n	8027e70 <HAL_TIM_ConfigClockSource+0x88>
 8027e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8027e6a:	d1f6      	bne.n	8027e5a <HAL_TIM_ConfigClockSource+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8027e6c:	2000      	movs	r0, #0
 8027e6e:	e7df      	b.n	8027e30 <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 8027e70:	4a3e      	ldr	r2, [pc, #248]	@ (8027f6c <HAL_TIM_ConfigClockSource+0x184>)
 8027e72:	4293      	cmp	r3, r2
 8027e74:	d0e5      	beq.n	8027e42 <HAL_TIM_ConfigClockSource+0x5a>
 8027e76:	d80b      	bhi.n	8027e90 <HAL_TIM_ConfigClockSource+0xa8>
 8027e78:	3a20      	subs	r2, #32
 8027e7a:	4293      	cmp	r3, r2
 8027e7c:	d0e1      	beq.n	8027e42 <HAL_TIM_ConfigClockSource+0x5a>
 8027e7e:	d804      	bhi.n	8027e8a <HAL_TIM_ConfigClockSource+0xa2>
 8027e80:	f023 0210 	bic.w	r2, r3, #16
 8027e84:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8027e88:	e7da      	b.n	8027e40 <HAL_TIM_ConfigClockSource+0x58>
 8027e8a:	4a39      	ldr	r2, [pc, #228]	@ (8027f70 <HAL_TIM_ConfigClockSource+0x188>)
 8027e8c:	4293      	cmp	r3, r2
 8027e8e:	e7d7      	b.n	8027e40 <HAL_TIM_ConfigClockSource+0x58>
 8027e90:	4a38      	ldr	r2, [pc, #224]	@ (8027f74 <HAL_TIM_ConfigClockSource+0x18c>)
 8027e92:	4293      	cmp	r3, r2
 8027e94:	d0d5      	beq.n	8027e42 <HAL_TIM_ConfigClockSource+0x5a>
 8027e96:	d804      	bhi.n	8027ea2 <HAL_TIM_ConfigClockSource+0xba>
 8027e98:	3a20      	subs	r2, #32
 8027e9a:	4293      	cmp	r3, r2
 8027e9c:	d0d1      	beq.n	8027e42 <HAL_TIM_ConfigClockSource+0x5a>
 8027e9e:	3210      	adds	r2, #16
 8027ea0:	e7f4      	b.n	8027e8c <HAL_TIM_ConfigClockSource+0xa4>
 8027ea2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8027ea6:	e7cb      	b.n	8027e40 <HAL_TIM_ConfigClockSource+0x58>
      TIM_ETR_SetConfig(htim->Instance,
 8027ea8:	68cb      	ldr	r3, [r1, #12]
 8027eaa:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8027eae:	f7ff ff91 	bl	8027dd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8027eb2:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8027eb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8027eb8:	6083      	str	r3, [r0, #8]
      break;
 8027eba:	e7d7      	b.n	8027e6c <HAL_TIM_ConfigClockSource+0x84>
      TIM_ETR_SetConfig(htim->Instance,
 8027ebc:	68cb      	ldr	r3, [r1, #12]
 8027ebe:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8027ec2:	f7ff ff87 	bl	8027dd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8027ec6:	6883      	ldr	r3, [r0, #8]
 8027ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8027ecc:	e7f4      	b.n	8027eb8 <HAL_TIM_ConfigClockSource+0xd0>
                               sClockSourceConfig->ClockPolarity,
 8027ece:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8027ed0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8027ed2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8027ed4:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8027ed6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8027eda:	f023 0301 	bic.w	r3, r3, #1
 8027ede:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8027ee0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8027ee2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8027ee4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8027ee8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8027eec:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8027eee:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8027ef0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8027ef2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8027ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8027efa:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8027efe:	e7db      	b.n	8027eb8 <HAL_TIM_ConfigClockSource+0xd0>
  tmpccer = TIMx->CCER;
 8027f00:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8027f02:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8027f04:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8027f06:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8027f0a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8027f0c:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8027f0e:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8027f10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8027f14:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8027f18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8027f1c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8027f20:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8027f22:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8027f24:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8027f26:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8027f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8027f2e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8027f32:	e7c1      	b.n	8027eb8 <HAL_TIM_ConfigClockSource+0xd0>
                               sClockSourceConfig->ClockPolarity,
 8027f34:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8027f36:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8027f38:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8027f3a:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8027f3c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8027f40:	f023 0301 	bic.w	r3, r3, #1
 8027f44:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8027f46:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8027f48:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8027f4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8027f4e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8027f52:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8027f54:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8027f56:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8027f58:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8027f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8027f60:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8027f64:	e7a8      	b.n	8027eb8 <HAL_TIM_ConfigClockSource+0xd0>
 8027f66:	bf00      	nop
 8027f68:	ffce0088 	.word	0xffce0088
 8027f6c:	00100040 	.word	0x00100040
 8027f70:	00100030 	.word	0x00100030
 8027f74:	00100070 	.word	0x00100070

08027f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8027f78:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8027f7a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8027f7c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8027f7e:	f001 011f 	and.w	r1, r1, #31
 8027f82:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8027f84:	ea23 0304 	bic.w	r3, r3, r4
 8027f88:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8027f8a:	6a03      	ldr	r3, [r0, #32]
 8027f8c:	408a      	lsls	r2, r1
 8027f8e:	431a      	orrs	r2, r3
 8027f90:	6202      	str	r2, [r0, #32]
}
 8027f92:	bd10      	pop	{r4, pc}

08027f94 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8027f94:	2908      	cmp	r1, #8
{
 8027f96:	b508      	push	{r3, lr}
 8027f98:	d018      	beq.n	8027fcc <HAL_TIM_OC_Start+0x38>
 8027f9a:	d805      	bhi.n	8027fa8 <HAL_TIM_OC_Start+0x14>
 8027f9c:	b159      	cbz	r1, 8027fb6 <HAL_TIM_OC_Start+0x22>
 8027f9e:	2904      	cmp	r1, #4
 8027fa0:	d011      	beq.n	8027fc6 <HAL_TIM_OC_Start+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8027fa2:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8027fa6:	e008      	b.n	8027fba <HAL_TIM_OC_Start+0x26>
 8027fa8:	290c      	cmp	r1, #12
 8027faa:	d012      	beq.n	8027fd2 <HAL_TIM_OC_Start+0x3e>
 8027fac:	2910      	cmp	r1, #16
 8027fae:	d1f8      	bne.n	8027fa2 <HAL_TIM_OC_Start+0xe>
 8027fb0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8027fb4:	e001      	b.n	8027fba <HAL_TIM_OC_Start+0x26>
 8027fb6:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8027fba:	3b01      	subs	r3, #1
 8027fbc:	bf18      	it	ne
 8027fbe:	2301      	movne	r3, #1
 8027fc0:	b153      	cbz	r3, 8027fd8 <HAL_TIM_OC_Start+0x44>
    return HAL_ERROR;
 8027fc2:	2001      	movs	r0, #1
 8027fc4:	e04d      	b.n	8028062 <HAL_TIM_OC_Start+0xce>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8027fc6:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8027fca:	e7f6      	b.n	8027fba <HAL_TIM_OC_Start+0x26>
 8027fcc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8027fd0:	e7f3      	b.n	8027fba <HAL_TIM_OC_Start+0x26>
 8027fd2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8027fd6:	e7f0      	b.n	8027fba <HAL_TIM_OC_Start+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8027fd8:	2908      	cmp	r1, #8
 8027fda:	f04f 0302 	mov.w	r3, #2
 8027fde:	d044      	beq.n	802806a <HAL_TIM_OC_Start+0xd6>
 8027fe0:	d806      	bhi.n	8027ff0 <HAL_TIM_OC_Start+0x5c>
 8027fe2:	b161      	cbz	r1, 8027ffe <HAL_TIM_OC_Start+0x6a>
 8027fe4:	2904      	cmp	r1, #4
 8027fe6:	d03d      	beq.n	8028064 <HAL_TIM_OC_Start+0xd0>
 8027fe8:	2302      	movs	r3, #2
 8027fea:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 8027fee:	e008      	b.n	8028002 <HAL_TIM_OC_Start+0x6e>
 8027ff0:	290c      	cmp	r1, #12
 8027ff2:	d03d      	beq.n	8028070 <HAL_TIM_OC_Start+0xdc>
 8027ff4:	2910      	cmp	r1, #16
 8027ff6:	d1f7      	bne.n	8027fe8 <HAL_TIM_OC_Start+0x54>
 8027ff8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 8027ffc:	e001      	b.n	8028002 <HAL_TIM_OC_Start+0x6e>
 8027ffe:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8028002:	6800      	ldr	r0, [r0, #0]
 8028004:	2201      	movs	r2, #1
 8028006:	f7ff ffb7 	bl	8027f78 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 802800a:	4b3b      	ldr	r3, [pc, #236]	@ (80280f8 <HAL_TIM_OC_Start+0x164>)
 802800c:	4298      	cmp	r0, r3
 802800e:	d032      	beq.n	8028076 <HAL_TIM_OC_Start+0xe2>
 8028010:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8028014:	4298      	cmp	r0, r3
 8028016:	d02e      	beq.n	8028076 <HAL_TIM_OC_Start+0xe2>
 8028018:	4b38      	ldr	r3, [pc, #224]	@ (80280fc <HAL_TIM_OC_Start+0x168>)
 802801a:	4298      	cmp	r0, r3
 802801c:	d02b      	beq.n	8028076 <HAL_TIM_OC_Start+0xe2>
 802801e:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8028022:	4298      	cmp	r0, r3
 8028024:	d027      	beq.n	8028076 <HAL_TIM_OC_Start+0xe2>
 8028026:	4b36      	ldr	r3, [pc, #216]	@ (8028100 <HAL_TIM_OC_Start+0x16c>)
 8028028:	4298      	cmp	r0, r3
 802802a:	d024      	beq.n	8028076 <HAL_TIM_OC_Start+0xe2>
 802802c:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8028030:	4298      	cmp	r0, r3
 8028032:	d020      	beq.n	8028076 <HAL_TIM_OC_Start+0xe2>
 8028034:	4b33      	ldr	r3, [pc, #204]	@ (8028104 <HAL_TIM_OC_Start+0x170>)
 8028036:	4298      	cmp	r0, r3
 8028038:	d01d      	beq.n	8028076 <HAL_TIM_OC_Start+0xe2>
 802803a:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 802803e:	4298      	cmp	r0, r3
 8028040:	d019      	beq.n	8028076 <HAL_TIM_OC_Start+0xe2>
 8028042:	4b31      	ldr	r3, [pc, #196]	@ (8028108 <HAL_TIM_OC_Start+0x174>)
 8028044:	4298      	cmp	r0, r3
 8028046:	d016      	beq.n	8028076 <HAL_TIM_OC_Start+0xe2>
 8028048:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 802804c:	4298      	cmp	r0, r3
 802804e:	d012      	beq.n	8028076 <HAL_TIM_OC_Start+0xe2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028050:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8028054:	d11a      	bne.n	802808c <HAL_TIM_OC_Start+0xf8>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028056:	6882      	ldr	r2, [r0, #8]
 8028058:	4b2c      	ldr	r3, [pc, #176]	@ (802810c <HAL_TIM_OC_Start+0x178>)
 802805a:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802805c:	2b06      	cmp	r3, #6
 802805e:	d147      	bne.n	80280f0 <HAL_TIM_OC_Start+0x15c>
  return HAL_OK;
 8028060:	2000      	movs	r0, #0
}
 8028062:	bd08      	pop	{r3, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8028064:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8028068:	e7cb      	b.n	8028002 <HAL_TIM_OC_Start+0x6e>
 802806a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 802806e:	e7c8      	b.n	8028002 <HAL_TIM_OC_Start+0x6e>
 8028070:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8028074:	e7c5      	b.n	8028002 <HAL_TIM_OC_Start+0x6e>
    __HAL_TIM_MOE_ENABLE(htim);
 8028076:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8028078:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 802807c:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802807e:	4b1e      	ldr	r3, [pc, #120]	@ (80280f8 <HAL_TIM_OC_Start+0x164>)
 8028080:	4298      	cmp	r0, r3
 8028082:	d0e8      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 8028084:	4b22      	ldr	r3, [pc, #136]	@ (8028110 <HAL_TIM_OC_Start+0x17c>)
 8028086:	4298      	cmp	r0, r3
 8028088:	d1e2      	bne.n	8028050 <HAL_TIM_OC_Start+0xbc>
 802808a:	e7e4      	b.n	8028056 <HAL_TIM_OC_Start+0xc2>
 802808c:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
 8028090:	d0e1      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 8028092:	4b20      	ldr	r3, [pc, #128]	@ (8028114 <HAL_TIM_OC_Start+0x180>)
 8028094:	4298      	cmp	r0, r3
 8028096:	d0de      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 8028098:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 802809c:	4298      	cmp	r0, r3
 802809e:	d0da      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 80280a0:	4b1d      	ldr	r3, [pc, #116]	@ (8028118 <HAL_TIM_OC_Start+0x184>)
 80280a2:	4298      	cmp	r0, r3
 80280a4:	d0d7      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 80280a6:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 80280aa:	4298      	cmp	r0, r3
 80280ac:	d0d3      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 80280ae:	4b1b      	ldr	r3, [pc, #108]	@ (802811c <HAL_TIM_OC_Start+0x188>)
 80280b0:	4298      	cmp	r0, r3
 80280b2:	d0d0      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 80280b4:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 80280b8:	4298      	cmp	r0, r3
 80280ba:	d0cc      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 80280bc:	4b0f      	ldr	r3, [pc, #60]	@ (80280fc <HAL_TIM_OC_Start+0x168>)
 80280be:	4298      	cmp	r0, r3
 80280c0:	d0c9      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 80280c2:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 80280c6:	4298      	cmp	r0, r3
 80280c8:	d0c5      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 80280ca:	4b15      	ldr	r3, [pc, #84]	@ (8028120 <HAL_TIM_OC_Start+0x18c>)
 80280cc:	4298      	cmp	r0, r3
 80280ce:	d0c2      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 80280d0:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 80280d4:	4298      	cmp	r0, r3
 80280d6:	d0be      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 80280d8:	4b09      	ldr	r3, [pc, #36]	@ (8028100 <HAL_TIM_OC_Start+0x16c>)
 80280da:	4298      	cmp	r0, r3
 80280dc:	d0bb      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
 80280de:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 80280e2:	4298      	cmp	r0, r3
 80280e4:	d0b7      	beq.n	8028056 <HAL_TIM_OC_Start+0xc2>
      __HAL_TIM_ENABLE(htim);
 80280e6:	6803      	ldr	r3, [r0, #0]
 80280e8:	f043 0301 	orr.w	r3, r3, #1
 80280ec:	6003      	str	r3, [r0, #0]
 80280ee:	e7b7      	b.n	8028060 <HAL_TIM_OC_Start+0xcc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80280f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80280f4:	d1f7      	bne.n	80280e6 <HAL_TIM_OC_Start+0x152>
 80280f6:	e7b3      	b.n	8028060 <HAL_TIM_OC_Start+0xcc>
 80280f8:	40012c00 	.word	0x40012c00
 80280fc:	40013400 	.word	0x40013400
 8028100:	40014000 	.word	0x40014000
 8028104:	40014400 	.word	0x40014400
 8028108:	40014800 	.word	0x40014800
 802810c:	00010007 	.word	0x00010007
 8028110:	50012c00 	.word	0x50012c00
 8028114:	40000400 	.word	0x40000400
 8028118:	40000800 	.word	0x40000800
 802811c:	40000c00 	.word	0x40000c00
 8028120:	40001800 	.word	0x40001800

08028124 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8028124:	f7ff bf36 	b.w	8027f94 <HAL_TIM_OC_Start>

08028128 <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8028128:	4b1b      	ldr	r3, [pc, #108]	@ (8028198 <TIM_ResetCallback+0x70>)
 802812a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 802812e:	4b1b      	ldr	r3, [pc, #108]	@ (802819c <TIM_ResetCallback+0x74>)
 8028130:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8028134:	4b1a      	ldr	r3, [pc, #104]	@ (80281a0 <TIM_ResetCallback+0x78>)
 8028136:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 802813a:	4b1a      	ldr	r3, [pc, #104]	@ (80281a4 <TIM_ResetCallback+0x7c>)
 802813c:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8028140:	4b19      	ldr	r3, [pc, #100]	@ (80281a8 <TIM_ResetCallback+0x80>)
 8028142:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8028146:	4b19      	ldr	r3, [pc, #100]	@ (80281ac <TIM_ResetCallback+0x84>)
 8028148:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 802814c:	4b18      	ldr	r3, [pc, #96]	@ (80281b0 <TIM_ResetCallback+0x88>)
 802814e:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8028152:	4b18      	ldr	r3, [pc, #96]	@ (80281b4 <TIM_ResetCallback+0x8c>)
 8028154:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8028158:	4b17      	ldr	r3, [pc, #92]	@ (80281b8 <TIM_ResetCallback+0x90>)
 802815a:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 802815e:	4b17      	ldr	r3, [pc, #92]	@ (80281bc <TIM_ResetCallback+0x94>)
 8028160:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8028164:	4b16      	ldr	r3, [pc, #88]	@ (80281c0 <TIM_ResetCallback+0x98>)
 8028166:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 802816a:	4b16      	ldr	r3, [pc, #88]	@ (80281c4 <TIM_ResetCallback+0x9c>)
 802816c:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8028170:	4b15      	ldr	r3, [pc, #84]	@ (80281c8 <TIM_ResetCallback+0xa0>)
 8028172:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8028176:	4b15      	ldr	r3, [pc, #84]	@ (80281cc <TIM_ResetCallback+0xa4>)
 8028178:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 802817c:	4b14      	ldr	r3, [pc, #80]	@ (80281d0 <TIM_ResetCallback+0xa8>)
 802817e:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8028182:	4b14      	ldr	r3, [pc, #80]	@ (80281d4 <TIM_ResetCallback+0xac>)
 8028184:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8028188:	4b13      	ldr	r3, [pc, #76]	@ (80281d8 <TIM_ResetCallback+0xb0>)
 802818a:	f8c0 30c4 	str.w	r3, [r0, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 802818e:	4b13      	ldr	r3, [pc, #76]	@ (80281dc <TIM_ResetCallback+0xb4>)
 8028190:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
}
 8028194:	4770      	bx	lr
 8028196:	bf00      	nop
 8028198:	08027a57 	.word	0x08027a57
 802819c:	08027a59 	.word	0x08027a59
 80281a0:	08027a65 	.word	0x08027a65
 80281a4:	08027a67 	.word	0x08027a67
 80281a8:	08027a5d 	.word	0x08027a5d
 80281ac:	08027a5f 	.word	0x08027a5f
 80281b0:	08027a5b 	.word	0x08027a5b
 80281b4:	08027a61 	.word	0x08027a61
 80281b8:	08027a63 	.word	0x08027a63
 80281bc:	08027a69 	.word	0x08027a69
 80281c0:	080283b9 	.word	0x080283b9
 80281c4:	080283bb 	.word	0x080283bb
 80281c8:	080283bd 	.word	0x080283bd
 80281cc:	080283bf 	.word	0x080283bf
 80281d0:	080283c1 	.word	0x080283c1
 80281d4:	080283c3 	.word	0x080283c3
 80281d8:	080283c5 	.word	0x080283c5
 80281dc:	080283c7 	.word	0x080283c7

080281e0 <HAL_TIM_Base_Init>:
{
 80281e0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80281e2:	4604      	mov	r4, r0
 80281e4:	b388      	cbz	r0, 802824a <HAL_TIM_Base_Init+0x6a>
  if (htim->State == HAL_TIM_STATE_RESET)
 80281e6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80281ea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80281ee:	b953      	cbnz	r3, 8028206 <HAL_TIM_Base_Init+0x26>
    htim->Lock = HAL_UNLOCKED;
 80281f0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 80281f4:	f7ff ff98 	bl	8028128 <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 80281f8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80281fa:	b90b      	cbnz	r3, 8028200 <HAL_TIM_Base_Init+0x20>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80281fc:	4b14      	ldr	r3, [pc, #80]	@ (8028250 <HAL_TIM_Base_Init+0x70>)
 80281fe:	64c3      	str	r3, [r0, #76]	@ 0x4c
    htim->Base_MspInitCallback(htim);
 8028200:	4620      	mov	r0, r4
 8028202:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8028204:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8028206:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028208:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 802820a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802820e:	1d21      	adds	r1, r4, #4
 8028210:	f7ff fc2c 	bl	8027a6c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028214:	2301      	movs	r3, #1
  return HAL_OK;
 8028216:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028218:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802821c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8028220:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8028224:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8028228:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 802822c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8028230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028234:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8028238:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 802823c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8028240:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8028244:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8028248:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 802824a:	2001      	movs	r0, #1
 802824c:	e7fc      	b.n	8028248 <HAL_TIM_Base_Init+0x68>
 802824e:	bf00      	nop
 8028250:	08021a41 	.word	0x08021a41

08028254 <HAL_TIM_PWM_Init>:
{
 8028254:	b510      	push	{r4, lr}
  if (htim == NULL)
 8028256:	4604      	mov	r4, r0
 8028258:	b388      	cbz	r0, 80282be <HAL_TIM_PWM_Init+0x6a>
  if (htim->State == HAL_TIM_STATE_RESET)
 802825a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 802825e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8028262:	b953      	cbnz	r3, 802827a <HAL_TIM_PWM_Init+0x26>
    htim->Lock = HAL_UNLOCKED;
 8028264:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 8028268:	f7ff ff5e 	bl	8028128 <TIM_ResetCallback>
    if (htim->PWM_MspInitCallback == NULL)
 802826c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 802826e:	b90b      	cbnz	r3, 8028274 <HAL_TIM_PWM_Init+0x20>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8028270:	4b14      	ldr	r3, [pc, #80]	@ (80282c4 <HAL_TIM_PWM_Init+0x70>)
 8028272:	6643      	str	r3, [r0, #100]	@ 0x64
    htim->PWM_MspInitCallback(htim);
 8028274:	4620      	mov	r0, r4
 8028276:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028278:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 802827a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802827c:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 802827e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028282:	1d21      	adds	r1, r4, #4
 8028284:	f7ff fbf2 	bl	8027a6c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028288:	2301      	movs	r3, #1
  return HAL_OK;
 802828a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802828c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028290:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8028294:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8028298:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 802829c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80282a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80282a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80282a8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80282ac:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80282b0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80282b4:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80282b8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80282bc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80282be:	2001      	movs	r0, #1
 80282c0:	e7fc      	b.n	80282bc <HAL_TIM_PWM_Init+0x68>
 80282c2:	bf00      	nop
 80282c4:	08027a55 	.word	0x08027a55

080282c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80282c8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80282ca:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80282ce:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80282d0:	2b01      	cmp	r3, #1
 80282d2:	f04f 0002 	mov.w	r0, #2
 80282d6:	d05f      	beq.n	8028398 <HAL_TIMEx_MasterConfigSynchronization+0xd0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80282d8:	6823      	ldr	r3, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80282da:	4d30      	ldr	r5, [pc, #192]	@ (802839c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80282dc:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80282e0:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80282e2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80282e4:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80282e6:	d00a      	beq.n	80282fe <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80282e8:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80282ec:	42ab      	cmp	r3, r5
 80282ee:	d006      	beq.n	80282fe <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80282f0:	4d2b      	ldr	r5, [pc, #172]	@ (80283a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80282f2:	42ab      	cmp	r3, r5
 80282f4:	d003      	beq.n	80282fe <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80282f6:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80282fa:	42ab      	cmp	r3, r5
 80282fc:	d103      	bne.n	8028306 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80282fe:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8028300:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8028304:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8028306:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8028308:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 802830c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8028310:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8028312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028314:	4a21      	ldr	r2, [pc, #132]	@ (802839c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8028316:	4293      	cmp	r3, r2
 8028318:	d033      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 802831a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 802831e:	4293      	cmp	r3, r2
 8028320:	d02f      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8028322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8028326:	d02c      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8028328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 802832c:	d029      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 802832e:	4a1d      	ldr	r2, [pc, #116]	@ (80283a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8028330:	4293      	cmp	r3, r2
 8028332:	d026      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8028334:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8028338:	4293      	cmp	r3, r2
 802833a:	d022      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 802833c:	4a1a      	ldr	r2, [pc, #104]	@ (80283a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802833e:	4293      	cmp	r3, r2
 8028340:	d01f      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8028342:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8028346:	4293      	cmp	r3, r2
 8028348:	d01b      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 802834a:	4a18      	ldr	r2, [pc, #96]	@ (80283ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802834c:	4293      	cmp	r3, r2
 802834e:	d018      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8028350:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8028354:	4293      	cmp	r3, r2
 8028356:	d014      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8028358:	4a11      	ldr	r2, [pc, #68]	@ (80283a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 802835a:	4293      	cmp	r3, r2
 802835c:	d011      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 802835e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8028362:	4293      	cmp	r3, r2
 8028364:	d00d      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8028366:	4a12      	ldr	r2, [pc, #72]	@ (80283b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8028368:	4293      	cmp	r3, r2
 802836a:	d00a      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 802836c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8028370:	4293      	cmp	r3, r2
 8028372:	d006      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8028374:	4a0f      	ldr	r2, [pc, #60]	@ (80283b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8028376:	4293      	cmp	r3, r2
 8028378:	d003      	beq.n	8028382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 802837a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 802837e:	4293      	cmp	r3, r2
 8028380:	d104      	bne.n	802838c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8028382:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8028384:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8028388:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802838a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802838c:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 802838e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8028390:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8028394:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8028398:	bd30      	pop	{r4, r5, pc}
 802839a:	bf00      	nop
 802839c:	40012c00 	.word	0x40012c00
 80283a0:	40013400 	.word	0x40013400
 80283a4:	40000400 	.word	0x40000400
 80283a8:	40000800 	.word	0x40000800
 80283ac:	40000c00 	.word	0x40000c00
 80283b0:	40001800 	.word	0x40001800
 80283b4:	40014000 	.word	0x40014000

080283b8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80283b8:	4770      	bx	lr

080283ba <HAL_TIMEx_CommutHalfCpltCallback>:
/**
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
 80283ba:	4770      	bx	lr

080283bc <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80283bc:	4770      	bx	lr

080283be <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80283be:	4770      	bx	lr

080283c0 <HAL_TIMEx_EncoderIndexCallback>:
/**
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
 80283c0:	4770      	bx	lr

080283c2 <HAL_TIMEx_DirectionChangeCallback>:
/**
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
 80283c2:	4770      	bx	lr

080283c4 <HAL_TIMEx_IndexErrorCallback>:
/**
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
 80283c4:	4770      	bx	lr

080283c6 <HAL_TIMEx_TransitionErrorCallback>:
/**
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
 80283c6:	4770      	bx	lr

080283c8 <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80283c8:	4770      	bx	lr

080283ca <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80283ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80283cc:	e852 3f00 	ldrex	r3, [r2]
 80283d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80283d4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80283d8:	6802      	ldr	r2, [r0, #0]
 80283da:	2900      	cmp	r1, #0
 80283dc:	d1f5      	bne.n	80283ca <UART_EndTxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80283de:	f102 0308 	add.w	r3, r2, #8
 80283e2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80283e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80283ea:	f102 0c08 	add.w	ip, r2, #8
 80283ee:	e84c 3100 	strex	r1, r3, [ip]
 80283f2:	2900      	cmp	r1, #0
 80283f4:	d1f3      	bne.n	80283de <UART_EndTxTransfer+0x14>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80283f6:	2320      	movs	r3, #32
 80283f8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 80283fc:	4770      	bx	lr
	...

08028400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8028400:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8028402:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028404:	e852 3f00 	ldrex	r3, [r2]
 8028408:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802840c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8028410:	6802      	ldr	r2, [r0, #0]
 8028412:	2900      	cmp	r1, #0
 8028414:	d1f5      	bne.n	8028402 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8028416:	4c0f      	ldr	r4, [pc, #60]	@ (8028454 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028418:	f102 0308 	add.w	r3, r2, #8
 802841c:	e853 3f00 	ldrex	r3, [r3]
 8028420:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028422:	f102 0c08 	add.w	ip, r2, #8
 8028426:	e84c 3100 	strex	r1, r3, [ip]
 802842a:	2900      	cmp	r1, #0
 802842c:	d1f4      	bne.n	8028418 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802842e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8028430:	2b01      	cmp	r3, #1
 8028432:	d107      	bne.n	8028444 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028434:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8028438:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802843c:	e842 3100 	strex	r1, r3, [r2]
 8028440:	2900      	cmp	r1, #0
 8028442:	d1f7      	bne.n	8028434 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8028444:	2320      	movs	r3, #32
 8028446:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802844a:	2300      	movs	r3, #0
 802844c:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 802844e:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8028450:	bd10      	pop	{r4, pc}
 8028452:	bf00      	nop
 8028454:	effffffe 	.word	0xeffffffe

08028458 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8028458:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 802845a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802845c:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 802845e:	2b81      	cmp	r3, #129	@ 0x81
 8028460:	d00c      	beq.n	802847c <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 8028462:	2300      	movs	r3, #0
 8028464:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8028468:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802846a:	e852 3f00 	ldrex	r3, [r2]
 802846e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028472:	e842 3100 	strex	r1, r3, [r2]
 8028476:	2900      	cmp	r1, #0
 8028478:	d1f6      	bne.n	8028468 <UART_DMATransmitCplt+0x10>
 802847a:	4770      	bx	lr
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 802847c:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 8028480:	4718      	bx	r3

08028482 <UART_DMATxHalfCplt>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8028482:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8028484:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 8028488:	4718      	bx	r3

0802848a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 802848a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 802848c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
{
 802848e:	b410      	push	{r4}
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8028490:	2a81      	cmp	r2, #129	@ 0x81
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8028492:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8028494:	d026      	beq.n	80284e4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8028496:	2200      	movs	r2, #0
 8028498:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802849c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802849e:	e851 2f00 	ldrex	r2, [r1]
 80284a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80284a6:	e841 2400 	strex	r4, r2, [r1]
   return(result);
 80284aa:	6801      	ldr	r1, [r0, #0]
 80284ac:	2c00      	cmp	r4, #0
 80284ae:	d1f5      	bne.n	802849c <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80284b0:	f101 0208 	add.w	r2, r1, #8
 80284b4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80284b8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80284bc:	f101 0c08 	add.w	ip, r1, #8
 80284c0:	e84c 2400 	strex	r4, r2, [ip]
 80284c4:	2c00      	cmp	r4, #0
 80284c6:	d1f3      	bne.n	80284b0 <UART_DMAReceiveCplt+0x26>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80284c8:	2220      	movs	r2, #32
 80284ca:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80284ce:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 80284d0:	2a01      	cmp	r2, #1
 80284d2:	d107      	bne.n	80284e4 <UART_DMAReceiveCplt+0x5a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80284d4:	e851 2f00 	ldrex	r2, [r1]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80284d8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80284dc:	e841 2400 	strex	r4, r2, [r1]
 80284e0:	2c00      	cmp	r4, #0
 80284e2:	d1f7      	bne.n	80284d4 <UART_DMAReceiveCplt+0x4a>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80284e4:	2200      	movs	r2, #0
 80284e6:	6702      	str	r2, [r0, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80284e8:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 80284ea:	2901      	cmp	r1, #1
 80284ec:	d113      	bne.n	8028516 <UART_DMAReceiveCplt+0x8c>
    huart->RxXferCount = 0;

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80284ee:	681b      	ldr	r3, [r3, #0]
    huart->RxXferCount = 0;
 80284f0:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80284f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    if (nb_remaining_rx_data < huart->RxXferSize)
 80284f6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80284fa:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data < huart->RxXferSize)
 80284fc:	4299      	cmp	r1, r3
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80284fe:	bf88      	it	hi
 8028500:	f8a0 305e 	strhhi.w	r3, [r0, #94]	@ 0x5e
    }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8028504:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8028508:	f85d 4b04 	ldr.w	r4, [sp], #4
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802850c:	1ac9      	subs	r1, r1, r3
 802850e:	b289      	uxth	r1, r1
 8028510:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8028514:	4718      	bx	r3
    huart->RxCpltCallback(huart);
 8028516:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
}
 802851a:	f85d 4b04 	ldr.w	r4, [sp], #4
    huart->RxCpltCallback(huart);
 802851e:	4718      	bx	r3

08028520 <UART_DMARxHalfCplt>:
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8028520:	2201      	movs	r2, #1
{
 8028522:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8028524:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8028526:	6702      	str	r2, [r0, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8028528:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 802852a:	2a01      	cmp	r2, #1
 802852c:	d112      	bne.n	8028554 <UART_DMARxHalfCplt+0x34>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 802852e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8028532:	681b      	ldr	r3, [r3, #0]
    huart->RxXferCount = huart->RxXferSize / 2U;
 8028534:	084a      	lsrs	r2, r1, #1
 8028536:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 802853a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802853c:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data <= huart->RxXferSize)
 802853e:	4299      	cmp	r1, r3
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8028540:	bf28      	it	cs
 8028542:	f8a0 305e 	strhcs.w	r3, [r0, #94]	@ 0x5e
    }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8028546:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 802854a:	1ac9      	subs	r1, r1, r3
 802854c:	b289      	uxth	r1, r1
 802854e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8028552:	4718      	bx	r3
  else
  {
    /* In other cases : use Rx Half Complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Half complete callback*/
    huart->RxHalfCpltCallback(huart);
 8028554:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8028558:	4718      	bx	r3

0802855a <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802855a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
{
 802855c:	b570      	push	{r4, r5, r6, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 802855e:	6804      	ldr	r4, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8028560:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8028564:	f8d0 508c 	ldr.w	r5, [r0, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8028568:	68a2      	ldr	r2, [r4, #8]
 802856a:	0612      	lsls	r2, r2, #24
 802856c:	d506      	bpl.n	802857c <UART_DMAError+0x22>
 802856e:	2b21      	cmp	r3, #33	@ 0x21
 8028570:	d104      	bne.n	802857c <UART_DMAError+0x22>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8028572:	2300      	movs	r3, #0
 8028574:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8028578:	f7ff ff27 	bl	80283ca <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 802857c:	68a3      	ldr	r3, [r4, #8]
 802857e:	065b      	lsls	r3, r3, #25
 8028580:	d506      	bpl.n	8028590 <UART_DMAError+0x36>
 8028582:	2d22      	cmp	r5, #34	@ 0x22
 8028584:	d104      	bne.n	8028590 <UART_DMAError+0x36>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8028586:	2300      	movs	r3, #0
 8028588:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 802858c:	f7ff ff38 	bl	8028400 <UART_EndRxTransfer>
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8028590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8028594:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8028598:	f043 0310 	orr.w	r3, r3, #16
 802859c:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->ErrorCallback(huart);
 80285a0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80285a4:	4718      	bx	r3

080285a6 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 80285a6:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80285a8:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  huart->RxXferCount = 0U;
 80285aa:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80285ae:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80285b2:	4718      	bx	r3

080285b4 <HAL_UART_AbortReceiveCpltCallback>:
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
 80285b4:	4770      	bx	lr

080285b6 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80285b6:	4770      	bx	lr

080285b8 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 80285b8:	4770      	bx	lr

080285ba <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 80285ba:	4770      	bx	lr

080285bc <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 80285bc:	4770      	bx	lr

080285be <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80285be:	4770      	bx	lr

080285c0 <HAL_UART_AbortCpltCallback>:
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
 80285c0:	4770      	bx	lr

080285c2 <HAL_UART_AbortTransmitCpltCallback>:
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
 80285c2:	4770      	bx	lr

080285c4 <HAL_UART_RegisterCallback>:
  if (pCallback == NULL)
 80285c4:	b93a      	cbnz	r2, 80285d6 <HAL_UART_RegisterCallback+0x12>
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80285c6:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 80285ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80285ce:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    return HAL_ERROR;
 80285d2:	2001      	movs	r0, #1
}
 80285d4:	4770      	bx	lr
  if (huart->gState == HAL_UART_STATE_READY)
 80285d6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80285da:	2b20      	cmp	r3, #32
 80285dc:	d12f      	bne.n	802863e <HAL_UART_RegisterCallback+0x7a>
    switch (CallbackID)
 80285de:	290c      	cmp	r1, #12
 80285e0:	d8f1      	bhi.n	80285c6 <HAL_UART_RegisterCallback+0x2>
 80285e2:	e8df f001 	tbb	[pc, r1]
 80285e6:	0b07      	.short	0x0b07
 80285e8:	1714110e 	.word	0x1714110e
 80285ec:	23201d1a 	.word	0x23201d1a
 80285f0:	2926      	.short	0x2926
 80285f2:	34          	.byte	0x34
 80285f3:	00          	.byte	0x00
        huart->TxHalfCpltCallback = pCallback;
 80285f4:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94
  HAL_StatusTypeDef status = HAL_OK;
 80285f8:	2000      	movs	r0, #0
 80285fa:	4770      	bx	lr
        huart->TxCpltCallback = pCallback;
 80285fc:	f8c0 2098 	str.w	r2, [r0, #152]	@ 0x98
        break;
 8028600:	e7fa      	b.n	80285f8 <HAL_UART_RegisterCallback+0x34>
        huart->RxHalfCpltCallback = pCallback;
 8028602:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
        break;
 8028606:	e7f7      	b.n	80285f8 <HAL_UART_RegisterCallback+0x34>
        huart->RxCpltCallback = pCallback;
 8028608:	f8c0 20a0 	str.w	r2, [r0, #160]	@ 0xa0
        break;
 802860c:	e7f4      	b.n	80285f8 <HAL_UART_RegisterCallback+0x34>
        huart->ErrorCallback = pCallback;
 802860e:	f8c0 20a4 	str.w	r2, [r0, #164]	@ 0xa4
        break;
 8028612:	e7f1      	b.n	80285f8 <HAL_UART_RegisterCallback+0x34>
        huart->AbortCpltCallback = pCallback;
 8028614:	f8c0 20a8 	str.w	r2, [r0, #168]	@ 0xa8
        break;
 8028618:	e7ee      	b.n	80285f8 <HAL_UART_RegisterCallback+0x34>
        huart->AbortTransmitCpltCallback = pCallback;
 802861a:	f8c0 20ac 	str.w	r2, [r0, #172]	@ 0xac
        break;
 802861e:	e7eb      	b.n	80285f8 <HAL_UART_RegisterCallback+0x34>
        huart->AbortReceiveCpltCallback = pCallback;
 8028620:	f8c0 20b0 	str.w	r2, [r0, #176]	@ 0xb0
        break;
 8028624:	e7e8      	b.n	80285f8 <HAL_UART_RegisterCallback+0x34>
        huart->WakeupCallback = pCallback;
 8028626:	f8c0 20b4 	str.w	r2, [r0, #180]	@ 0xb4
        break;
 802862a:	e7e5      	b.n	80285f8 <HAL_UART_RegisterCallback+0x34>
        huart->RxFifoFullCallback = pCallback;
 802862c:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
        break;
 8028630:	e7e2      	b.n	80285f8 <HAL_UART_RegisterCallback+0x34>
        huart->TxFifoEmptyCallback = pCallback;
 8028632:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc
        break;
 8028636:	e7df      	b.n	80285f8 <HAL_UART_RegisterCallback+0x34>
        huart->MspInitCallback = pCallback;
 8028638:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
        break;
 802863c:	e7dc      	b.n	80285f8 <HAL_UART_RegisterCallback+0x34>
  else if (huart->gState == HAL_UART_STATE_RESET)
 802863e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8028642:	2b00      	cmp	r3, #0
 8028644:	d1bf      	bne.n	80285c6 <HAL_UART_RegisterCallback+0x2>
    switch (CallbackID)
 8028646:	290b      	cmp	r1, #11
 8028648:	d0f6      	beq.n	8028638 <HAL_UART_RegisterCallback+0x74>
 802864a:	290c      	cmp	r1, #12
 802864c:	d1bb      	bne.n	80285c6 <HAL_UART_RegisterCallback+0x2>
        huart->MspDeInitCallback = pCallback;
 802864e:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
        break;
 8028652:	e7d1      	b.n	80285f8 <HAL_UART_RegisterCallback+0x34>

08028654 <HAL_UART_UnRegisterCallback>:
  if (HAL_UART_STATE_READY == huart->gState)
 8028654:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8028658:	2b20      	cmp	r3, #32
 802865a:	d13f      	bne.n	80286dc <HAL_UART_UnRegisterCallback+0x88>
    switch (CallbackID)
 802865c:	290c      	cmp	r1, #12
 802865e:	d844      	bhi.n	80286ea <HAL_UART_UnRegisterCallback+0x96>
 8028660:	e8df f001 	tbb	[pc, r1]
 8028664:	14100c07 	.word	0x14100c07
 8028668:	24201c18 	.word	0x24201c18
 802866c:	34302c28 	.word	0x34302c28
 8028670:	38          	.byte	0x38
 8028671:	00          	.byte	0x00
        huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHalfCpltCallback    */
 8028672:	4b22      	ldr	r3, [pc, #136]	@ (80286fc <HAL_UART_UnRegisterCallback+0xa8>)
 8028674:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
  HAL_StatusTypeDef status = HAL_OK;
 8028678:	2000      	movs	r0, #0
 802867a:	4770      	bx	lr
        huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpltCallback         */
 802867c:	4b20      	ldr	r3, [pc, #128]	@ (8028700 <HAL_UART_UnRegisterCallback+0xac>)
 802867e:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
        break;
 8028682:	e7f9      	b.n	8028678 <HAL_UART_UnRegisterCallback+0x24>
        huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHalfCpltCallback     */
 8028684:	4b1f      	ldr	r3, [pc, #124]	@ (8028704 <HAL_UART_UnRegisterCallback+0xb0>)
 8028686:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        break;
 802868a:	e7f5      	b.n	8028678 <HAL_UART_UnRegisterCallback+0x24>
        huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpltCallback         */
 802868c:	4b1e      	ldr	r3, [pc, #120]	@ (8028708 <HAL_UART_UnRegisterCallback+0xb4>)
 802868e:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
        break;
 8028692:	e7f1      	b.n	8028678 <HAL_UART_UnRegisterCallback+0x24>
        huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak ErrorCallback          */
 8028694:	4b1d      	ldr	r3, [pc, #116]	@ (802870c <HAL_UART_UnRegisterCallback+0xb8>)
 8028696:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
        break;
 802869a:	e7ed      	b.n	8028678 <HAL_UART_UnRegisterCallback+0x24>
        huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak AbortCpltCallback      */
 802869c:	4b1c      	ldr	r3, [pc, #112]	@ (8028710 <HAL_UART_UnRegisterCallback+0xbc>)
 802869e:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
        break;
 80286a2:	e7e9      	b.n	8028678 <HAL_UART_UnRegisterCallback+0x24>
        huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak
 80286a4:	4b1b      	ldr	r3, [pc, #108]	@ (8028714 <HAL_UART_UnRegisterCallback+0xc0>)
 80286a6:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
        break;
 80286aa:	e7e5      	b.n	8028678 <HAL_UART_UnRegisterCallback+0x24>
        huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak
 80286ac:	4b1a      	ldr	r3, [pc, #104]	@ (8028718 <HAL_UART_UnRegisterCallback+0xc4>)
 80286ae:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
        break;
 80286b2:	e7e1      	b.n	8028678 <HAL_UART_UnRegisterCallback+0x24>
        huart->WakeupCallback = HAL_UARTEx_WakeupCallback;                     /* Legacy weak WakeupCallback         */
 80286b4:	4b19      	ldr	r3, [pc, #100]	@ (802871c <HAL_UART_UnRegisterCallback+0xc8>)
 80286b6:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
        break;
 80286ba:	e7dd      	b.n	8028678 <HAL_UART_UnRegisterCallback+0x24>
        huart->RxFifoFullCallback = HAL_UARTEx_RxFifoFullCallback;             /* Legacy weak RxFifoFullCallback     */
 80286bc:	4b18      	ldr	r3, [pc, #96]	@ (8028720 <HAL_UART_UnRegisterCallback+0xcc>)
 80286be:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
        break;
 80286c2:	e7d9      	b.n	8028678 <HAL_UART_UnRegisterCallback+0x24>
        huart->TxFifoEmptyCallback = HAL_UARTEx_TxFifoEmptyCallback;           /* Legacy weak TxFifoEmptyCallback    */
 80286c4:	4b17      	ldr	r3, [pc, #92]	@ (8028724 <HAL_UART_UnRegisterCallback+0xd0>)
 80286c6:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
        break;
 80286ca:	e7d5      	b.n	8028678 <HAL_UART_UnRegisterCallback+0x24>
        huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspInitCallback        */
 80286cc:	4b16      	ldr	r3, [pc, #88]	@ (8028728 <HAL_UART_UnRegisterCallback+0xd4>)
 80286ce:	f8c0 30c4 	str.w	r3, [r0, #196]	@ 0xc4
        break;
 80286d2:	e7d1      	b.n	8028678 <HAL_UART_UnRegisterCallback+0x24>
        huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDeInitCallback      */
 80286d4:	4b15      	ldr	r3, [pc, #84]	@ (802872c <HAL_UART_UnRegisterCallback+0xd8>)
 80286d6:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
        break;
 80286da:	e7cd      	b.n	8028678 <HAL_UART_UnRegisterCallback+0x24>
  else if (HAL_UART_STATE_RESET == huart->gState)
 80286dc:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80286e0:	b91b      	cbnz	r3, 80286ea <HAL_UART_UnRegisterCallback+0x96>
    switch (CallbackID)
 80286e2:	290b      	cmp	r1, #11
 80286e4:	d0f2      	beq.n	80286cc <HAL_UART_UnRegisterCallback+0x78>
 80286e6:	290c      	cmp	r1, #12
 80286e8:	d0f4      	beq.n	80286d4 <HAL_UART_UnRegisterCallback+0x80>
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80286ea:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 80286ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80286f2:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    status =  HAL_ERROR;
 80286f6:	2001      	movs	r0, #1
}
 80286f8:	4770      	bx	lr
 80286fa:	bf00      	nop
 80286fc:	080285b9 	.word	0x080285b9
 8028700:	080285b7 	.word	0x080285b7
 8028704:	080285bd 	.word	0x080285bd
 8028708:	080285bb 	.word	0x080285bb
 802870c:	080285bf 	.word	0x080285bf
 8028710:	080285c1 	.word	0x080285c1
 8028714:	080285c3 	.word	0x080285c3
 8028718:	080285b5 	.word	0x080285b5
 802871c:	08029241 	.word	0x08029241
 8028720:	08029243 	.word	0x08029243
 8028724:	08029245 	.word	0x08029245
 8028728:	08021bcd 	.word	0x08021bcd
 802872c:	08021d31 	.word	0x08021d31

08028730 <HAL_UART_RegisterRxEventCallback>:
  if (pCallback == NULL)
 8028730:	b939      	cbnz	r1, 8028742 <HAL_UART_RegisterRxEventCallback+0x12>
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8028732:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8028736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802873a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    return HAL_ERROR;
 802873e:	2001      	movs	r0, #1
}
 8028740:	4770      	bx	lr
  if (huart->RxState == HAL_UART_STATE_READY)
 8028742:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8028746:	2b20      	cmp	r3, #32
 8028748:	d1f3      	bne.n	8028732 <HAL_UART_RegisterRxEventCallback+0x2>
    huart->RxEventCallback = pCallback;
 802874a:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
  HAL_StatusTypeDef status = HAL_OK;
 802874e:	2000      	movs	r0, #0
 8028750:	4770      	bx	lr
	...

08028754 <HAL_UART_UnRegisterRxEventCallback>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8028754:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8028758:	2b20      	cmp	r3, #32
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 802875a:	bf15      	itete	ne
 802875c:	f8d0 3090 	ldrne.w	r3, [r0, #144]	@ 0x90
    huart->RxEventCallback = HAL_UARTEx_RxEventCallback; /* Legacy weak UART Rx Event Callback  */
 8028760:	4b05      	ldreq	r3, [pc, #20]	@ (8028778 <HAL_UART_UnRegisterRxEventCallback+0x24>)
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8028762:	f043 0340 	orrne.w	r3, r3, #64	@ 0x40
    huart->RxEventCallback = HAL_UARTEx_RxEventCallback; /* Legacy weak UART Rx Event Callback  */
 8028766:	f8c0 30c0 	streq.w	r3, [r0, #192]	@ 0xc0
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 802876a:	bf16      	itet	ne
 802876c:	f8c0 3090 	strne.w	r3, [r0, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;
 8028770:	2000      	moveq	r0, #0
    status =  HAL_ERROR;
 8028772:	2001      	movne	r0, #1
}
 8028774:	4770      	bx	lr
 8028776:	bf00      	nop
 8028778:	080283c9 	.word	0x080283c9

0802877c <HAL_UART_Transmit_DMA>:
{
 802877c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 802877e:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
{
 8028782:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8028784:	2a20      	cmp	r2, #32
{
 8028786:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8028788:	d149      	bne.n	802881e <HAL_UART_Transmit_DMA+0xa2>
    if ((pData == NULL) || (Size == 0U))
 802878a:	2900      	cmp	r1, #0
 802878c:	d034      	beq.n	80287f8 <HAL_UART_Transmit_DMA+0x7c>
 802878e:	2b00      	cmp	r3, #0
 8028790:	d032      	beq.n	80287f8 <HAL_UART_Transmit_DMA+0x7c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8028792:	2221      	movs	r2, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028794:	2500      	movs	r5, #0
    huart->TxXferCount = Size;
 8028796:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->pTxBuffPtr  = pData;
 802879a:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802879c:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->TxXferSize  = Size;
 80287a0:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80287a4:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80287a8:	6802      	ldr	r2, [r0, #0]
 80287aa:	2040      	movs	r0, #64	@ 0x40
 80287ac:	6210      	str	r0, [r2, #32]
    if (huart->hdmatx != NULL)
 80287ae:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80287b0:	b340      	cbz	r0, 8028804 <HAL_UART_Transmit_DMA+0x88>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80287b2:	4e1c      	ldr	r6, [pc, #112]	@ (8028824 <HAL_UART_Transmit_DMA+0xa8>)
 80287b4:	6606      	str	r6, [r0, #96]	@ 0x60
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80287b6:	4e1c      	ldr	r6, [pc, #112]	@ (8028828 <HAL_UART_Transmit_DMA+0xac>)
 80287b8:	6646      	str	r6, [r0, #100]	@ 0x64
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80287ba:	4e1c      	ldr	r6, [pc, #112]	@ (802882c <HAL_UART_Transmit_DMA+0xb0>)
      huart->hdmatx->XferAbortCallback = NULL;
 80287bc:	e9c0 651a 	strd	r6, r5, [r0, #104]	@ 0x68
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80287c0:	68a5      	ldr	r5, [r4, #8]
 80287c2:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80287c6:	d103      	bne.n	80287d0 <HAL_UART_Transmit_DMA+0x54>
 80287c8:	6925      	ldr	r5, [r4, #16]
 80287ca:	b90d      	cbnz	r5, 80287d0 <HAL_UART_Transmit_DMA+0x54>
        nbByte = Size * 2U;
 80287cc:	005b      	lsls	r3, r3, #1
 80287ce:	b29b      	uxth	r3, r3
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80287d0:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 80287d2:	062d      	lsls	r5, r5, #24
 80287d4:	d512      	bpl.n	80287fc <HAL_UART_Transmit_DMA+0x80>
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 80287d6:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 80287d8:	b145      	cbz	r5, 80287ec <HAL_UART_Transmit_DMA+0x70>
 80287da:	682d      	ldr	r5, [r5, #0]
 80287dc:	b135      	cbz	r5, 80287ec <HAL_UART_Transmit_DMA+0x70>
            (uint32_t)&huart->Instance->TDR;
 80287de:	3228      	adds	r2, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 80287e0:	e9c5 3102 	strd	r3, r1, [r5, #8]
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 80287e4:	612a      	str	r2, [r5, #16]
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 80287e6:	f7fa fdfb 	bl	80233e0 <HAL_DMAEx_List_Start_IT>
      if (status != HAL_OK)
 80287ea:	b158      	cbz	r0, 8028804 <HAL_UART_Transmit_DMA+0x88>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80287ec:	2310      	movs	r3, #16
 80287ee:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 80287f2:	2320      	movs	r3, #32
 80287f4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 80287f8:	2001      	movs	r0, #1
}
 80287fa:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 80287fc:	3228      	adds	r2, #40	@ 0x28
 80287fe:	f7fa fc5d 	bl	80230bc <HAL_DMA_Start_IT>
 8028802:	e7f2      	b.n	80287ea <HAL_UART_Transmit_DMA+0x6e>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8028804:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028806:	f102 0308 	add.w	r3, r2, #8
 802880a:	e853 3f00 	ldrex	r3, [r3]
 802880e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028812:	3208      	adds	r2, #8
 8028814:	e842 3000 	strex	r0, r3, [r2]
 8028818:	2800      	cmp	r0, #0
 802881a:	d1f3      	bne.n	8028804 <HAL_UART_Transmit_DMA+0x88>
 802881c:	e7ed      	b.n	80287fa <HAL_UART_Transmit_DMA+0x7e>
    return HAL_BUSY;
 802881e:	2002      	movs	r0, #2
 8028820:	e7eb      	b.n	80287fa <HAL_UART_Transmit_DMA+0x7e>
 8028822:	bf00      	nop
 8028824:	08028459 	.word	0x08028459
 8028828:	08028483 	.word	0x08028483
 802882c:	0802855b 	.word	0x0802855b

08028830 <HAL_UART_Abort>:
{
 8028830:	b510      	push	{r4, lr}
 8028832:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8028834:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028836:	e852 3f00 	ldrex	r3, [r2]
 802883a:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802883e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8028842:	6823      	ldr	r3, [r4, #0]
 8028844:	2900      	cmp	r1, #0
 8028846:	d1f5      	bne.n	8028834 <HAL_UART_Abort+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8028848:	482c      	ldr	r0, [pc, #176]	@ (80288fc <HAL_UART_Abort+0xcc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802884a:	f103 0208 	add.w	r2, r3, #8
 802884e:	e852 2f00 	ldrex	r2, [r2]
 8028852:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028854:	f103 0c08 	add.w	ip, r3, #8
 8028858:	e84c 2100 	strex	r1, r2, [ip]
 802885c:	2900      	cmp	r1, #0
 802885e:	d1f4      	bne.n	802884a <HAL_UART_Abort+0x1a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8028860:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8028862:	2a01      	cmp	r2, #1
 8028864:	d107      	bne.n	8028876 <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028866:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 802886a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802886e:	e843 2100 	strex	r1, r2, [r3]
 8028872:	2900      	cmp	r1, #0
 8028874:	d1f7      	bne.n	8028866 <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8028876:	689b      	ldr	r3, [r3, #8]
 8028878:	061a      	lsls	r2, r3, #24
 802887a:	d50f      	bpl.n	802889c <HAL_UART_Abort+0x6c>
    if (huart->hdmatx != NULL)
 802887c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 802887e:	b168      	cbz	r0, 802889c <HAL_UART_Abort+0x6c>
      huart->hdmatx->XferAbortCallback = NULL;
 8028880:	2300      	movs	r3, #0
 8028882:	66c3      	str	r3, [r0, #108]	@ 0x6c
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8028884:	f7fa fc59 	bl	802313a <HAL_DMA_Abort>
 8028888:	b140      	cbz	r0, 802889c <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 802888a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 802888c:	f7fa fd73 	bl	8023376 <HAL_DMA_GetError>
 8028890:	2810      	cmp	r0, #16
 8028892:	d103      	bne.n	802889c <HAL_UART_Abort+0x6c>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8028894:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8028898:	2003      	movs	r0, #3
}
 802889a:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802889c:	6823      	ldr	r3, [r4, #0]
 802889e:	689b      	ldr	r3, [r3, #8]
 80288a0:	065b      	lsls	r3, r3, #25
 80288a2:	d50d      	bpl.n	80288c0 <HAL_UART_Abort+0x90>
    if (huart->hdmarx != NULL)
 80288a4:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80288a8:	b150      	cbz	r0, 80288c0 <HAL_UART_Abort+0x90>
      huart->hdmarx->XferAbortCallback = NULL;
 80288aa:	2300      	movs	r3, #0
 80288ac:	66c3      	str	r3, [r0, #108]	@ 0x6c
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80288ae:	f7fa fc44 	bl	802313a <HAL_DMA_Abort>
 80288b2:	b128      	cbz	r0, 80288c0 <HAL_UART_Abort+0x90>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80288b4:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80288b8:	f7fa fd5d 	bl	8023376 <HAL_DMA_GetError>
 80288bc:	2810      	cmp	r0, #16
 80288be:	d0e9      	beq.n	8028894 <HAL_UART_Abort+0x64>
  huart->TxXferCount = 0U;
 80288c0:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80288c2:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 80288c4:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80288c8:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80288cc:	6823      	ldr	r3, [r4, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80288ce:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80288d0:	621a      	str	r2, [r3, #32]
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80288d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80288d4:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80288d8:	bf02      	ittt	eq
 80288da:	699a      	ldreq	r2, [r3, #24]
 80288dc:	f042 0210 	orreq.w	r2, r2, #16
 80288e0:	619a      	streq	r2, [r3, #24]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80288e2:	699a      	ldr	r2, [r3, #24]
 80288e4:	f042 0208 	orr.w	r2, r2, #8
 80288e8:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 80288ea:	2320      	movs	r3, #32
 80288ec:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80288f0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80288f4:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80288f6:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
  return HAL_OK;
 80288fa:	e7ce      	b.n	802889a <HAL_UART_Abort+0x6a>
 80288fc:	ef7ffffe 	.word	0xef7ffffe

08028900 <HAL_UART_AbortTransmit>:
{
 8028900:	b510      	push	{r4, lr}
 8028902:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
 8028904:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028906:	e852 3f00 	ldrex	r3, [r2]
 802890a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802890e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8028912:	6822      	ldr	r2, [r4, #0]
 8028914:	2900      	cmp	r1, #0
 8028916:	d1f5      	bne.n	8028904 <HAL_UART_AbortTransmit+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028918:	f102 0308 	add.w	r3, r2, #8
 802891c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8028920:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028924:	f102 0008 	add.w	r0, r2, #8
 8028928:	e840 3100 	strex	r1, r3, [r0]
 802892c:	2900      	cmp	r1, #0
 802892e:	d1f3      	bne.n	8028918 <HAL_UART_AbortTransmit+0x18>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8028930:	6893      	ldr	r3, [r2, #8]
 8028932:	061b      	lsls	r3, r3, #24
 8028934:	d50e      	bpl.n	8028954 <HAL_UART_AbortTransmit+0x54>
    if (huart->hdmatx != NULL)
 8028936:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8028938:	b160      	cbz	r0, 8028954 <HAL_UART_AbortTransmit+0x54>
      huart->hdmatx->XferAbortCallback = NULL;
 802893a:	66c1      	str	r1, [r0, #108]	@ 0x6c
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 802893c:	f7fa fbfd 	bl	802313a <HAL_DMA_Abort>
 8028940:	b140      	cbz	r0, 8028954 <HAL_UART_AbortTransmit+0x54>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8028942:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8028944:	f7fa fd17 	bl	8023376 <HAL_DMA_GetError>
 8028948:	2810      	cmp	r0, #16
 802894a:	d103      	bne.n	8028954 <HAL_UART_AbortTransmit+0x54>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 802894c:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8028950:	2003      	movs	r0, #3
}
 8028952:	bd10      	pop	{r4, pc}
  huart->TxXferCount = 0U;
 8028954:	2300      	movs	r3, #0
 8028956:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 802895a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  return HAL_OK;
 802895c:	2000      	movs	r0, #0
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 802895e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8028962:	bf01      	itttt	eq
 8028964:	6822      	ldreq	r2, [r4, #0]
 8028966:	6993      	ldreq	r3, [r2, #24]
 8028968:	f043 0310 	orreq.w	r3, r3, #16
 802896c:	6193      	streq	r3, [r2, #24]
  huart->gState = HAL_UART_STATE_READY;
 802896e:	2320      	movs	r3, #32
 8028970:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  return HAL_OK;
 8028974:	e7ed      	b.n	8028952 <HAL_UART_AbortTransmit+0x52>
	...

08028978 <HAL_UART_IRQHandler>:
{
 8028978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == 0U)
 802897c:	f640 060f 	movw	r6, #2063	@ 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8028980:	6803      	ldr	r3, [r0, #0]
{
 8028982:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8028984:	69d9      	ldr	r1, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8028986:	681a      	ldr	r2, [r3, #0]
  if (errorflags == 0U)
 8028988:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802898a:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 802898c:	d10f      	bne.n	80289ae <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 802898e:	068e      	lsls	r6, r1, #26
 8028990:	f140 808a 	bpl.w	8028aa8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8028994:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8028998:	f005 5780 	and.w	r7, r5, #268435456	@ 0x10000000
 802899c:	433e      	orrs	r6, r7
 802899e:	f000 8083 	beq.w	8028aa8 <HAL_UART_IRQHandler+0x130>
      if (huart->RxISR != NULL)
 80289a2:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 80289a4:	2b00      	cmp	r3, #0
 80289a6:	d07d      	beq.n	8028aa4 <HAL_UART_IRQHandler+0x12c>
}
 80289a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    huart->RxFifoFullCallback(huart);
 80289ac:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80289ae:	4e9f      	ldr	r6, [pc, #636]	@ (8028c2c <HAL_UART_IRQHandler+0x2b4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80289b0:	489f      	ldr	r0, [pc, #636]	@ (8028c30 <HAL_UART_IRQHandler+0x2b8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80289b2:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80289b4:	4010      	ands	r0, r2
 80289b6:	4330      	orrs	r0, r6
 80289b8:	d076      	beq.n	8028aa8 <HAL_UART_IRQHandler+0x130>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80289ba:	07cf      	lsls	r7, r1, #31
 80289bc:	d509      	bpl.n	80289d2 <HAL_UART_IRQHandler+0x5a>
 80289be:	05d0      	lsls	r0, r2, #23
 80289c0:	d507      	bpl.n	80289d2 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80289c2:	2001      	movs	r0, #1
 80289c4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80289c6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80289ca:	f040 0001 	orr.w	r0, r0, #1
 80289ce:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80289d2:	078f      	lsls	r7, r1, #30
 80289d4:	d509      	bpl.n	80289ea <HAL_UART_IRQHandler+0x72>
 80289d6:	07e8      	lsls	r0, r5, #31
 80289d8:	d507      	bpl.n	80289ea <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80289da:	2002      	movs	r0, #2
 80289dc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80289de:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80289e2:	f040 0004 	orr.w	r0, r0, #4
 80289e6:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80289ea:	074f      	lsls	r7, r1, #29
 80289ec:	d509      	bpl.n	8028a02 <HAL_UART_IRQHandler+0x8a>
 80289ee:	07e8      	lsls	r0, r5, #31
 80289f0:	d507      	bpl.n	8028a02 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80289f2:	2004      	movs	r0, #4
 80289f4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80289f6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80289fa:	f040 0002 	orr.w	r0, r0, #2
 80289fe:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8028a02:	070f      	lsls	r7, r1, #28
 8028a04:	d50b      	bpl.n	8028a1e <HAL_UART_IRQHandler+0xa6>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8028a06:	f002 0020 	and.w	r0, r2, #32
 8028a0a:	4330      	orrs	r0, r6
 8028a0c:	d007      	beq.n	8028a1e <HAL_UART_IRQHandler+0xa6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8028a0e:	2008      	movs	r0, #8
 8028a10:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8028a12:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8028a16:	f040 0008 	orr.w	r0, r0, #8
 8028a1a:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8028a1e:	050e      	lsls	r6, r1, #20
 8028a20:	d50a      	bpl.n	8028a38 <HAL_UART_IRQHandler+0xc0>
 8028a22:	0150      	lsls	r0, r2, #5
 8028a24:	d508      	bpl.n	8028a38 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8028a26:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8028a2a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8028a2c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8028a30:	f043 0320 	orr.w	r3, r3, #32
 8028a34:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8028a38:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8028a3c:	b393      	cbz	r3, 8028aa4 <HAL_UART_IRQHandler+0x12c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8028a3e:	068b      	lsls	r3, r1, #26
 8028a40:	d509      	bpl.n	8028a56 <HAL_UART_IRQHandler+0xde>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8028a42:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8028a46:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 8028a4a:	432a      	orrs	r2, r5
 8028a4c:	d003      	beq.n	8028a56 <HAL_UART_IRQHandler+0xde>
        if (huart->RxISR != NULL)
 8028a4e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8028a50:	b10b      	cbz	r3, 8028a56 <HAL_UART_IRQHandler+0xde>
          huart->RxISR(huart);
 8028a52:	4620      	mov	r0, r4
 8028a54:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8028a56:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 8028a58:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8028a5c:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8028a5e:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8028a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8028a66:	ea53 0502 	orrs.w	r5, r3, r2
 8028a6a:	d015      	beq.n	8028a98 <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 8028a6c:	4620      	mov	r0, r4
 8028a6e:	f7ff fcc7 	bl	8028400 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028a72:	68b3      	ldr	r3, [r6, #8]
 8028a74:	065f      	lsls	r7, r3, #25
 8028a76:	d50c      	bpl.n	8028a92 <HAL_UART_IRQHandler+0x11a>
          if (huart->hdmarx != NULL)
 8028a78:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8028a7c:	b14b      	cbz	r3, 8028a92 <HAL_UART_IRQHandler+0x11a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8028a7e:	4a6d      	ldr	r2, [pc, #436]	@ (8028c34 <HAL_UART_IRQHandler+0x2bc>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8028a80:	4618      	mov	r0, r3
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8028a82:	66da      	str	r2, [r3, #108]	@ 0x6c
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8028a84:	f7fa fba3 	bl	80231ce <HAL_DMA_Abort_IT>
 8028a88:	b160      	cbz	r0, 8028aa4 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8028a8a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8028a8e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8028a90:	e78a      	b.n	80289a8 <HAL_UART_IRQHandler+0x30>
          huart->ErrorCallback(huart);
 8028a92:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8028a96:	e787      	b.n	80289a8 <HAL_UART_IRQHandler+0x30>
        huart->ErrorCallback(huart);
 8028a98:	4620      	mov	r0, r4
 8028a9a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8028a9e:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028aa0:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 8028aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8028aa8:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8028aaa:	2801      	cmp	r0, #1
 8028aac:	f040 8084 	bne.w	8028bb8 <HAL_UART_IRQHandler+0x240>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8028ab0:	06ce      	lsls	r6, r1, #27
 8028ab2:	f140 8081 	bpl.w	8028bb8 <HAL_UART_IRQHandler+0x240>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8028ab6:	06d0      	lsls	r0, r2, #27
 8028ab8:	d57e      	bpl.n	8028bb8 <HAL_UART_IRQHandler+0x240>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8028aba:	2210      	movs	r2, #16
 8028abc:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028abe:	6899      	ldr	r1, [r3, #8]
          && (nb_remaining_rx_data < huart->RxXferSize))
 8028ac0:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028ac4:	0649      	lsls	r1, r1, #25
 8028ac6:	d549      	bpl.n	8028b5c <HAL_UART_IRQHandler+0x1e4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8028ac8:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8028acc:	6801      	ldr	r1, [r0, #0]
 8028ace:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 8028ad0:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8028ad2:	2900      	cmp	r1, #0
 8028ad4:	d038      	beq.n	8028b48 <HAL_UART_IRQHandler+0x1d0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8028ad6:	4291      	cmp	r1, r2
 8028ad8:	d236      	bcs.n	8028b48 <HAL_UART_IRQHandler+0x1d0>
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8028ada:	6d02      	ldr	r2, [r0, #80]	@ 0x50
        huart->RxXferCount = nb_remaining_rx_data;
 8028adc:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8028ae0:	2a81      	cmp	r2, #129	@ 0x81
 8028ae2:	d023      	beq.n	8028b2c <HAL_UART_IRQHandler+0x1b4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028ae4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8028ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028aec:	e843 2100 	strex	r1, r2, [r3]
 8028af0:	2900      	cmp	r1, #0
 8028af2:	d1f7      	bne.n	8028ae4 <HAL_UART_IRQHandler+0x16c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028af4:	f103 0208 	add.w	r2, r3, #8
 8028af8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8028afc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028b00:	f103 0008 	add.w	r0, r3, #8
 8028b04:	e840 2100 	strex	r1, r2, [r0]
 8028b08:	2900      	cmp	r1, #0
 8028b0a:	d1f3      	bne.n	8028af4 <HAL_UART_IRQHandler+0x17c>
          huart->RxState = HAL_UART_STATE_READY;
 8028b0c:	2220      	movs	r2, #32
 8028b0e:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8028b12:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028b14:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8028b18:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028b1c:	e843 2100 	strex	r1, r2, [r3]
 8028b20:	2900      	cmp	r1, #0
 8028b22:	d1f7      	bne.n	8028b14 <HAL_UART_IRQHandler+0x19c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8028b24:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8028b28:	f7fa fb07 	bl	802313a <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8028b2c:	2302      	movs	r3, #2
 8028b2e:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8028b30:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8028b34:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8028b38:	1ac9      	subs	r1, r1, r3
 8028b3a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8028b3e:	b289      	uxth	r1, r1
        huart->RxEventCallback(huart, nb_rx_data);
 8028b40:	4620      	mov	r0, r4
}
 8028b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        huart->RxEventCallback(huart, nb_rx_data);
 8028b46:	4718      	bx	r3
        if (nb_remaining_rx_data == huart->RxXferSize)
 8028b48:	4291      	cmp	r1, r2
 8028b4a:	d1ab      	bne.n	8028aa4 <HAL_UART_IRQHandler+0x12c>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8028b4c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8028b4e:	2b81      	cmp	r3, #129	@ 0x81
 8028b50:	d1a8      	bne.n	8028aa4 <HAL_UART_IRQHandler+0x12c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8028b52:	2302      	movs	r3, #2
 8028b54:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, nb_rx_data);
 8028b56:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8028b5a:	e7f1      	b.n	8028b40 <HAL_UART_IRQHandler+0x1c8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8028b5c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 8028b60:	f8b4 005e 	ldrh.w	r0, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8028b64:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8028b66:	b280      	uxth	r0, r0
 8028b68:	2800      	cmp	r0, #0
 8028b6a:	d09b      	beq.n	8028aa4 <HAL_UART_IRQHandler+0x12c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8028b6c:	1a52      	subs	r2, r2, r1
 8028b6e:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8028b70:	2900      	cmp	r1, #0
 8028b72:	d097      	beq.n	8028aa4 <HAL_UART_IRQHandler+0x12c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028b74:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8028b78:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028b7c:	e843 2000 	strex	r0, r2, [r3]
 8028b80:	2800      	cmp	r0, #0
 8028b82:	d1f7      	bne.n	8028b74 <HAL_UART_IRQHandler+0x1fc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8028b84:	4d2c      	ldr	r5, [pc, #176]	@ (8028c38 <HAL_UART_IRQHandler+0x2c0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028b86:	f103 0208 	add.w	r2, r3, #8
 8028b8a:	e852 2f00 	ldrex	r2, [r2]
 8028b8e:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028b90:	f103 0608 	add.w	r6, r3, #8
 8028b94:	e846 2000 	strex	r0, r2, [r6]
 8028b98:	2800      	cmp	r0, #0
 8028b9a:	d1f4      	bne.n	8028b86 <HAL_UART_IRQHandler+0x20e>
        huart->RxState = HAL_UART_STATE_READY;
 8028b9c:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8028b9e:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8028ba0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8028ba4:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028ba6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8028baa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028bae:	e843 2000 	strex	r0, r2, [r3]
 8028bb2:	2800      	cmp	r0, #0
 8028bb4:	d1f7      	bne.n	8028ba6 <HAL_UART_IRQHandler+0x22e>
 8028bb6:	e7cc      	b.n	8028b52 <HAL_UART_IRQHandler+0x1da>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8028bb8:	02cf      	lsls	r7, r1, #11
 8028bba:	d508      	bpl.n	8028bce <HAL_UART_IRQHandler+0x256>
 8028bbc:	026e      	lsls	r6, r5, #9
 8028bbe:	d506      	bpl.n	8028bce <HAL_UART_IRQHandler+0x256>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8028bc0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8028bc4:	621a      	str	r2, [r3, #32]
    huart->WakeupCallback(huart);
 8028bc6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
    huart->RxFifoFullCallback(huart);
 8028bca:	4620      	mov	r0, r4
 8028bcc:	e6ec      	b.n	80289a8 <HAL_UART_IRQHandler+0x30>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8028bce:	0608      	lsls	r0, r1, #24
 8028bd0:	d509      	bpl.n	8028be6 <HAL_UART_IRQHandler+0x26e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8028bd2:	f002 0080 	and.w	r0, r2, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8028bd6:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
 8028bda:	4328      	orrs	r0, r5
 8028bdc:	d003      	beq.n	8028be6 <HAL_UART_IRQHandler+0x26e>
    if (huart->TxISR != NULL)
 8028bde:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8028be0:	2b00      	cmp	r3, #0
 8028be2:	d1f2      	bne.n	8028bca <HAL_UART_IRQHandler+0x252>
 8028be4:	e75e      	b.n	8028aa4 <HAL_UART_IRQHandler+0x12c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8028be6:	064f      	lsls	r7, r1, #25
 8028be8:	d510      	bpl.n	8028c0c <HAL_UART_IRQHandler+0x294>
 8028bea:	0656      	lsls	r6, r2, #25
 8028bec:	d50e      	bpl.n	8028c0c <HAL_UART_IRQHandler+0x294>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028bee:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8028bf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028bf6:	e843 2100 	strex	r1, r2, [r3]
 8028bfa:	2900      	cmp	r1, #0
 8028bfc:	d1f7      	bne.n	8028bee <HAL_UART_IRQHandler+0x276>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8028bfe:	2320      	movs	r3, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8028c00:	67a1      	str	r1, [r4, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_READY;
 8028c02:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8028c06:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8028c0a:	e7de      	b.n	8028bca <HAL_UART_IRQHandler+0x252>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8028c0c:	020d      	lsls	r5, r1, #8
 8028c0e:	d504      	bpl.n	8028c1a <HAL_UART_IRQHandler+0x2a2>
 8028c10:	0050      	lsls	r0, r2, #1
 8028c12:	d502      	bpl.n	8028c1a <HAL_UART_IRQHandler+0x2a2>
    huart->TxFifoEmptyCallback(huart);
 8028c14:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 8028c18:	e7d7      	b.n	8028bca <HAL_UART_IRQHandler+0x252>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8028c1a:	01cb      	lsls	r3, r1, #7
 8028c1c:	f57f af42 	bpl.w	8028aa4 <HAL_UART_IRQHandler+0x12c>
 8028c20:	2a00      	cmp	r2, #0
 8028c22:	f6bf af3f 	bge.w	8028aa4 <HAL_UART_IRQHandler+0x12c>
    huart->RxFifoFullCallback(huart);
 8028c26:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 8028c2a:	e7ce      	b.n	8028bca <HAL_UART_IRQHandler+0x252>
 8028c2c:	10000001 	.word	0x10000001
 8028c30:	04000120 	.word	0x04000120
 8028c34:	080285a7 	.word	0x080285a7
 8028c38:	effffffe 	.word	0xeffffffe

08028c3c <UART_InitCallbacksToDefault>:
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8028c3c:	4b12      	ldr	r3, [pc, #72]	@ (8028c88 <UART_InitCallbacksToDefault+0x4c>)
 8028c3e:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8028c42:	4b12      	ldr	r3, [pc, #72]	@ (8028c8c <UART_InitCallbacksToDefault+0x50>)
 8028c44:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8028c48:	4b11      	ldr	r3, [pc, #68]	@ (8028c90 <UART_InitCallbacksToDefault+0x54>)
 8028c4a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8028c4e:	4b11      	ldr	r3, [pc, #68]	@ (8028c94 <UART_InitCallbacksToDefault+0x58>)
 8028c50:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8028c54:	4b10      	ldr	r3, [pc, #64]	@ (8028c98 <UART_InitCallbacksToDefault+0x5c>)
 8028c56:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8028c5a:	4b10      	ldr	r3, [pc, #64]	@ (8028c9c <UART_InitCallbacksToDefault+0x60>)
 8028c5c:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8028c60:	4b0f      	ldr	r3, [pc, #60]	@ (8028ca0 <UART_InitCallbacksToDefault+0x64>)
 8028c62:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8028c66:	4b0f      	ldr	r3, [pc, #60]	@ (8028ca4 <UART_InitCallbacksToDefault+0x68>)
 8028c68:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8028c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8028ca8 <UART_InitCallbacksToDefault+0x6c>)
 8028c6e:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8028c72:	4b0e      	ldr	r3, [pc, #56]	@ (8028cac <UART_InitCallbacksToDefault+0x70>)
 8028c74:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8028c78:	4b0d      	ldr	r3, [pc, #52]	@ (8028cb0 <UART_InitCallbacksToDefault+0x74>)
 8028c7a:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8028c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8028cb4 <UART_InitCallbacksToDefault+0x78>)
 8028c80:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0
}
 8028c84:	4770      	bx	lr
 8028c86:	bf00      	nop
 8028c88:	080285b9 	.word	0x080285b9
 8028c8c:	080285b7 	.word	0x080285b7
 8028c90:	080285bd 	.word	0x080285bd
 8028c94:	080285bb 	.word	0x080285bb
 8028c98:	080285bf 	.word	0x080285bf
 8028c9c:	080285c1 	.word	0x080285c1
 8028ca0:	080285c3 	.word	0x080285c3
 8028ca4:	080285b5 	.word	0x080285b5
 8028ca8:	08029241 	.word	0x08029241
 8028cac:	08029243 	.word	0x08029243
 8028cb0:	08029245 	.word	0x08029245
 8028cb4:	080283c9 	.word	0x080283c9

08028cb8 <UART_SetConfig>:
{
 8028cb8:	b538      	push	{r3, r4, r5, lr}
 8028cba:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8028cbc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8028cbe:	69c1      	ldr	r1, [r0, #28]
 8028cc0:	6882      	ldr	r2, [r0, #8]
 8028cc2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8028cc4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8028cc6:	4302      	orrs	r2, r0
 8028cc8:	6960      	ldr	r0, [r4, #20]
 8028cca:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8028ccc:	4877      	ldr	r0, [pc, #476]	@ (8028eac <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8028cce:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8028cd0:	4028      	ands	r0, r5
 8028cd2:	4302      	orrs	r2, r0
 8028cd4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8028cd6:	685a      	ldr	r2, [r3, #4]
 8028cd8:	68e0      	ldr	r0, [r4, #12]
 8028cda:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8028cde:	4302      	orrs	r2, r0
 8028ce0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8028ce2:	4a73      	ldr	r2, [pc, #460]	@ (8028eb0 <UART_SetConfig+0x1f8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8028ce4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8028ce6:	4293      	cmp	r3, r2
 8028ce8:	d005      	beq.n	8028cf6 <UART_SetConfig+0x3e>
 8028cea:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8028cee:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8028cf0:	bf1c      	itt	ne
 8028cf2:	6a22      	ldrne	r2, [r4, #32]
 8028cf4:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8028cf6:	689a      	ldr	r2, [r3, #8]
 8028cf8:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 8028cfc:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 8028d00:	4302      	orrs	r2, r0
 8028d02:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8028d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028d06:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8028d08:	f022 020f 	bic.w	r2, r2, #15
 8028d0c:	4302      	orrs	r2, r0
 8028d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8028d10:	4a68      	ldr	r2, [pc, #416]	@ (8028eb4 <UART_SetConfig+0x1fc>)
 8028d12:	4293      	cmp	r3, r2
 8028d14:	d072      	beq.n	8028dfc <UART_SetConfig+0x144>
 8028d16:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 8028d1a:	4293      	cmp	r3, r2
 8028d1c:	f000 8093 	beq.w	8028e46 <UART_SetConfig+0x18e>
 8028d20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8028d24:	4293      	cmp	r3, r2
 8028d26:	f000 8090 	beq.w	8028e4a <UART_SetConfig+0x192>
 8028d2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8028d2e:	4293      	cmp	r3, r2
 8028d30:	f000 808d 	beq.w	8028e4e <UART_SetConfig+0x196>
 8028d34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8028d38:	4293      	cmp	r3, r2
 8028d3a:	f000 808a 	beq.w	8028e52 <UART_SetConfig+0x19a>
 8028d3e:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 8028d42:	4293      	cmp	r3, r2
 8028d44:	f000 8087 	beq.w	8028e56 <UART_SetConfig+0x19e>
 8028d48:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 8028d4c:	4293      	cmp	r3, r2
 8028d4e:	f000 8084 	beq.w	8028e5a <UART_SetConfig+0x1a2>
 8028d52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8028d56:	4293      	cmp	r3, r2
 8028d58:	f000 8081 	beq.w	8028e5e <UART_SetConfig+0x1a6>
 8028d5c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8028d60:	4293      	cmp	r3, r2
 8028d62:	d07e      	beq.n	8028e62 <UART_SetConfig+0x1aa>
 8028d64:	f5a2 52c0 	sub.w	r2, r2, #6144	@ 0x1800
 8028d68:	4293      	cmp	r3, r2
 8028d6a:	d07d      	beq.n	8028e68 <UART_SetConfig+0x1b0>
 8028d6c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8028d70:	4293      	cmp	r3, r2
 8028d72:	d07c      	beq.n	8028e6e <UART_SetConfig+0x1b6>
 8028d74:	f502 52c0 	add.w	r2, r2, #6144	@ 0x1800
 8028d78:	4293      	cmp	r3, r2
 8028d7a:	d07b      	beq.n	8028e74 <UART_SetConfig+0x1bc>
 8028d7c:	4a4c      	ldr	r2, [pc, #304]	@ (8028eb0 <UART_SetConfig+0x1f8>)
 8028d7e:	4293      	cmp	r3, r2
 8028d80:	d01c      	beq.n	8028dbc <UART_SetConfig+0x104>
  if (UART_INSTANCE_LOWPOWER(huart))
 8028d82:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8028d86:	4293      	cmp	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8028d88:	f04f 0000 	mov.w	r0, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 8028d8c:	d137      	bne.n	8028dfe <UART_SetConfig+0x146>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8028d8e:	2100      	movs	r1, #0
 8028d90:	f7fd fa06 	bl	80261a0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8028d94:	b380      	cbz	r0, 8028df8 <UART_SetConfig+0x140>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8028d96:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8028d98:	4a47      	ldr	r2, [pc, #284]	@ (8028eb8 <UART_SetConfig+0x200>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8028d9a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8028d9c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8028da0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8028da4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8028da8:	4299      	cmp	r1, r3
 8028daa:	d90a      	bls.n	8028dc2 <UART_SetConfig+0x10a>
        ret = HAL_ERROR;
 8028dac:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 8028dae:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8028db2:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8028db4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8028db6:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 8028dba:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8028dbc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8028dc0:	e7e5      	b.n	8028d8e <UART_SetConfig+0xd6>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8028dc2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8028dc6:	d8f1      	bhi.n	8028dac <UART_SetConfig+0xf4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8028dc8:	2300      	movs	r3, #0
 8028dca:	4619      	mov	r1, r3
 8028dcc:	f7f8 f924 	bl	8021018 <__aeabi_uldivmod>
 8028dd0:	0209      	lsls	r1, r1, #8
 8028dd2:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8028dd6:	086b      	lsrs	r3, r5, #1
 8028dd8:	0200      	lsls	r0, r0, #8
 8028dda:	18c0      	adds	r0, r0, r3
 8028ddc:	462a      	mov	r2, r5
 8028dde:	f04f 0300 	mov.w	r3, #0
 8028de2:	f141 0100 	adc.w	r1, r1, #0
 8028de6:	f7f8 f917 	bl	8021018 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8028dea:	4b34      	ldr	r3, [pc, #208]	@ (8028ebc <UART_SetConfig+0x204>)
 8028dec:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8028df0:	429a      	cmp	r2, r3
 8028df2:	d8db      	bhi.n	8028dac <UART_SetConfig+0xf4>
          huart->Instance->BRR = usartdiv;
 8028df4:	6823      	ldr	r3, [r4, #0]
 8028df6:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8028df8:	2000      	movs	r0, #0
 8028dfa:	e7d8      	b.n	8028dae <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8028dfc:	2001      	movs	r0, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8028dfe:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8028e02:	f04f 0100 	mov.w	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8028e06:	d138      	bne.n	8028e7a <UART_SetConfig+0x1c2>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8028e08:	f7fd f9ca 	bl	80261a0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8028e0c:	2800      	cmp	r0, #0
 8028e0e:	d0f3      	beq.n	8028df8 <UART_SetConfig+0x140>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8028e10:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8028e12:	4b29      	ldr	r3, [pc, #164]	@ (8028eb8 <UART_SetConfig+0x200>)
 8028e14:	6862      	ldr	r2, [r4, #4]
 8028e16:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8028e1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8028e1e:	0853      	lsrs	r3, r2, #1
 8028e20:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8028e24:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8028e28:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8028e2c:	f1a3 0110 	sub.w	r1, r3, #16
 8028e30:	4291      	cmp	r1, r2
 8028e32:	d8bb      	bhi.n	8028dac <UART_SetConfig+0xf4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8028e34:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8028e38:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8028e3a:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8028e3c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8028e40:	4313      	orrs	r3, r2
 8028e42:	60cb      	str	r3, [r1, #12]
 8028e44:	e7d8      	b.n	8028df8 <UART_SetConfig+0x140>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8028e46:	2002      	movs	r0, #2
 8028e48:	e7d9      	b.n	8028dfe <UART_SetConfig+0x146>
 8028e4a:	2004      	movs	r0, #4
 8028e4c:	e7d7      	b.n	8028dfe <UART_SetConfig+0x146>
 8028e4e:	2008      	movs	r0, #8
 8028e50:	e7d5      	b.n	8028dfe <UART_SetConfig+0x146>
 8028e52:	2010      	movs	r0, #16
 8028e54:	e7d3      	b.n	8028dfe <UART_SetConfig+0x146>
 8028e56:	2020      	movs	r0, #32
 8028e58:	e7d1      	b.n	8028dfe <UART_SetConfig+0x146>
 8028e5a:	2040      	movs	r0, #64	@ 0x40
 8028e5c:	e7cf      	b.n	8028dfe <UART_SetConfig+0x146>
 8028e5e:	2080      	movs	r0, #128	@ 0x80
 8028e60:	e7cd      	b.n	8028dfe <UART_SetConfig+0x146>
 8028e62:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8028e66:	e7ca      	b.n	8028dfe <UART_SetConfig+0x146>
 8028e68:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8028e6c:	e7c7      	b.n	8028dfe <UART_SetConfig+0x146>
 8028e6e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8028e72:	e7c4      	b.n	8028dfe <UART_SetConfig+0x146>
 8028e74:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8028e78:	e7c1      	b.n	8028dfe <UART_SetConfig+0x146>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8028e7a:	f7fd f991 	bl	80261a0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8028e7e:	2800      	cmp	r0, #0
 8028e80:	d0ba      	beq.n	8028df8 <UART_SetConfig+0x140>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8028e82:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8028e84:	4b0c      	ldr	r3, [pc, #48]	@ (8028eb8 <UART_SetConfig+0x200>)
 8028e86:	6862      	ldr	r2, [r4, #4]
 8028e88:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8028e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8028e90:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8028e94:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8028e98:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8028e9c:	f1a3 0110 	sub.w	r1, r3, #16
 8028ea0:	4291      	cmp	r1, r2
 8028ea2:	d883      	bhi.n	8028dac <UART_SetConfig+0xf4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8028ea4:	6822      	ldr	r2, [r4, #0]
 8028ea6:	60d3      	str	r3, [r2, #12]
 8028ea8:	e7a6      	b.n	8028df8 <UART_SetConfig+0x140>
 8028eaa:	bf00      	nop
 8028eac:	cfff69f3 	.word	0xcfff69f3
 8028eb0:	44002400 	.word	0x44002400
 8028eb4:	40013800 	.word	0x40013800
 8028eb8:	0802c464 	.word	0x0802c464
 8028ebc:	000ffcff 	.word	0x000ffcff

08028ec0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8028ec0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8028ec2:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8028ec4:	071a      	lsls	r2, r3, #28
 8028ec6:	d506      	bpl.n	8028ed6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8028ec8:	6801      	ldr	r1, [r0, #0]
 8028eca:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8028ecc:	684a      	ldr	r2, [r1, #4]
 8028ece:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8028ed2:	4322      	orrs	r2, r4
 8028ed4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8028ed6:	07dc      	lsls	r4, r3, #31
 8028ed8:	d506      	bpl.n	8028ee8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8028eda:	6801      	ldr	r1, [r0, #0]
 8028edc:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8028ede:	684a      	ldr	r2, [r1, #4]
 8028ee0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8028ee4:	4322      	orrs	r2, r4
 8028ee6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8028ee8:	0799      	lsls	r1, r3, #30
 8028eea:	d506      	bpl.n	8028efa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8028eec:	6801      	ldr	r1, [r0, #0]
 8028eee:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8028ef0:	684a      	ldr	r2, [r1, #4]
 8028ef2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8028ef6:	4322      	orrs	r2, r4
 8028ef8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8028efa:	075a      	lsls	r2, r3, #29
 8028efc:	d506      	bpl.n	8028f0c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8028efe:	6801      	ldr	r1, [r0, #0]
 8028f00:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8028f02:	684a      	ldr	r2, [r1, #4]
 8028f04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8028f08:	4322      	orrs	r2, r4
 8028f0a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8028f0c:	06dc      	lsls	r4, r3, #27
 8028f0e:	d506      	bpl.n	8028f1e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8028f10:	6801      	ldr	r1, [r0, #0]
 8028f12:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8028f14:	688a      	ldr	r2, [r1, #8]
 8028f16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8028f1a:	4322      	orrs	r2, r4
 8028f1c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8028f1e:	0699      	lsls	r1, r3, #26
 8028f20:	d506      	bpl.n	8028f30 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8028f22:	6801      	ldr	r1, [r0, #0]
 8028f24:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8028f26:	688a      	ldr	r2, [r1, #8]
 8028f28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8028f2c:	4322      	orrs	r2, r4
 8028f2e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8028f30:	065a      	lsls	r2, r3, #25
 8028f32:	d510      	bpl.n	8028f56 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8028f34:	6801      	ldr	r1, [r0, #0]
 8028f36:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8028f38:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8028f3a:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8028f3e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8028f42:	ea42 0204 	orr.w	r2, r2, r4
 8028f46:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8028f48:	d105      	bne.n	8028f56 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8028f4a:	684a      	ldr	r2, [r1, #4]
 8028f4c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8028f4e:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8028f52:	4322      	orrs	r2, r4
 8028f54:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8028f56:	061b      	lsls	r3, r3, #24
 8028f58:	d506      	bpl.n	8028f68 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8028f5a:	6802      	ldr	r2, [r0, #0]
 8028f5c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8028f5e:	6853      	ldr	r3, [r2, #4]
 8028f60:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8028f64:	430b      	orrs	r3, r1
 8028f66:	6053      	str	r3, [r2, #4]
}
 8028f68:	bd10      	pop	{r4, pc}

08028f6a <UART_WaitOnFlagUntilTimeout>:
{
 8028f6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028f6e:	4604      	mov	r4, r0
 8028f70:	460d      	mov	r5, r1
 8028f72:	4617      	mov	r7, r2
 8028f74:	4698      	mov	r8, r3
 8028f76:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8028f7a:	6822      	ldr	r2, [r4, #0]
 8028f7c:	69d3      	ldr	r3, [r2, #28]
 8028f7e:	ea35 0303 	bics.w	r3, r5, r3
 8028f82:	bf0c      	ite	eq
 8028f84:	2301      	moveq	r3, #1
 8028f86:	2300      	movne	r3, #0
 8028f88:	42bb      	cmp	r3, r7
 8028f8a:	d001      	beq.n	8028f90 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8028f8c:	2000      	movs	r0, #0
 8028f8e:	e022      	b.n	8028fd6 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8028f90:	f1b9 3fff 	cmp.w	r9, #4294967295
 8028f94:	d0f2      	beq.n	8028f7c <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8028f96:	f7f8 ff93 	bl	8021ec0 <HAL_GetTick>
 8028f9a:	eba0 0008 	sub.w	r0, r0, r8
 8028f9e:	4548      	cmp	r0, r9
 8028fa0:	d829      	bhi.n	8028ff6 <UART_WaitOnFlagUntilTimeout+0x8c>
 8028fa2:	f1b9 0f00 	cmp.w	r9, #0
 8028fa6:	d026      	beq.n	8028ff6 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8028fa8:	6821      	ldr	r1, [r4, #0]
 8028faa:	680b      	ldr	r3, [r1, #0]
 8028fac:	075a      	lsls	r2, r3, #29
 8028fae:	d5e4      	bpl.n	8028f7a <UART_WaitOnFlagUntilTimeout+0x10>
 8028fb0:	2d80      	cmp	r5, #128	@ 0x80
 8028fb2:	d0e2      	beq.n	8028f7a <UART_WaitOnFlagUntilTimeout+0x10>
 8028fb4:	2d40      	cmp	r5, #64	@ 0x40
 8028fb6:	d0e0      	beq.n	8028f7a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8028fb8:	69ce      	ldr	r6, [r1, #28]
 8028fba:	f016 0608 	ands.w	r6, r6, #8
 8028fbe:	d00c      	beq.n	8028fda <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8028fc0:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8028fc2:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8028fc4:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8028fc6:	f7ff fa1b 	bl	8028400 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8028fca:	2300      	movs	r3, #0
          return HAL_ERROR;
 8028fcc:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8028fce:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8028fd2:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8028fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8028fda:	69cb      	ldr	r3, [r1, #28]
 8028fdc:	051b      	lsls	r3, r3, #20
 8028fde:	d5cc      	bpl.n	8028f7a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8028fe0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 8028fe4:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8028fe6:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8028fe8:	f7ff fa0a 	bl	8028400 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8028fec:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8028fee:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8028ff2:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 8028ff6:	2003      	movs	r0, #3
 8028ff8:	e7ed      	b.n	8028fd6 <UART_WaitOnFlagUntilTimeout+0x6c>

08028ffa <UART_CheckIdleState>:
{
 8028ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028ffc:	2600      	movs	r6, #0
{
 8028ffe:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029000:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8029004:	f7f8 ff5c 	bl	8021ec0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8029008:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 802900a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802900c:	681b      	ldr	r3, [r3, #0]
 802900e:	071a      	lsls	r2, r3, #28
 8029010:	d51c      	bpl.n	802904c <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8029012:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8029016:	4632      	mov	r2, r6
 8029018:	9300      	str	r3, [sp, #0]
 802901a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 802901e:	4603      	mov	r3, r0
 8029020:	4620      	mov	r0, r4
 8029022:	f7ff ffa2 	bl	8028f6a <UART_WaitOnFlagUntilTimeout>
 8029026:	b188      	cbz	r0, 802904c <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8029028:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802902a:	e852 3f00 	ldrex	r3, [r2]
 802902e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029032:	e842 3100 	strex	r1, r3, [r2]
 8029036:	2900      	cmp	r1, #0
 8029038:	d1f6      	bne.n	8029028 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 802903a:	2320      	movs	r3, #32
 802903c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8029040:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8029042:	2300      	movs	r3, #0
 8029044:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8029048:	b002      	add	sp, #8
 802904a:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802904c:	6823      	ldr	r3, [r4, #0]
 802904e:	681b      	ldr	r3, [r3, #0]
 8029050:	075b      	lsls	r3, r3, #29
 8029052:	d524      	bpl.n	802909e <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8029054:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8029058:	2200      	movs	r2, #0
 802905a:	9300      	str	r3, [sp, #0]
 802905c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8029060:	462b      	mov	r3, r5
 8029062:	4620      	mov	r0, r4
 8029064:	f7ff ff81 	bl	8028f6a <UART_WaitOnFlagUntilTimeout>
 8029068:	b1c8      	cbz	r0, 802909e <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802906a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802906c:	e852 3f00 	ldrex	r3, [r2]
 8029070:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029074:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8029078:	6822      	ldr	r2, [r4, #0]
 802907a:	2900      	cmp	r1, #0
 802907c:	d1f5      	bne.n	802906a <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802907e:	f102 0308 	add.w	r3, r2, #8
 8029082:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029086:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802908a:	f102 0008 	add.w	r0, r2, #8
 802908e:	e840 3100 	strex	r1, r3, [r0]
 8029092:	2900      	cmp	r1, #0
 8029094:	d1f3      	bne.n	802907e <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8029096:	2320      	movs	r3, #32
 8029098:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 802909c:	e7d0      	b.n	8029040 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 802909e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80290a0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80290a2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80290a6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80290aa:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80290ac:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 80290ae:	e7c8      	b.n	8029042 <UART_CheckIdleState+0x48>

080290b0 <HAL_UART_Init>:
{
 80290b0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80290b2:	4604      	mov	r4, r0
 80290b4:	2800      	cmp	r0, #0
 80290b6:	d034      	beq.n	8029122 <HAL_UART_Init+0x72>
  if (huart->gState == HAL_UART_STATE_RESET)
 80290b8:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80290bc:	b96b      	cbnz	r3, 80290da <HAL_UART_Init+0x2a>
    huart->Lock = HAL_UNLOCKED;
 80290be:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    UART_InitCallbacksToDefault(huart);
 80290c2:	f7ff fdbb 	bl	8028c3c <UART_InitCallbacksToDefault>
    if (huart->MspInitCallback == NULL)
 80290c6:	f8d0 30c4 	ldr.w	r3, [r0, #196]	@ 0xc4
 80290ca:	b913      	cbnz	r3, 80290d2 <HAL_UART_Init+0x22>
      huart->MspInitCallback = HAL_UART_MspInit;
 80290cc:	4b16      	ldr	r3, [pc, #88]	@ (8029128 <HAL_UART_Init+0x78>)
 80290ce:	f8c0 30c4 	str.w	r3, [r0, #196]	@ 0xc4
    huart->MspInitCallback(huart);
 80290d2:	4620      	mov	r0, r4
 80290d4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80290d8:	4798      	blx	r3
  huart->gState = HAL_UART_STATE_BUSY;
 80290da:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80290dc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80290de:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80290e2:	6813      	ldr	r3, [r2, #0]
 80290e4:	f023 0301 	bic.w	r3, r3, #1
 80290e8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80290ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80290ec:	b113      	cbz	r3, 80290f4 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 80290ee:	4620      	mov	r0, r4
 80290f0:	f7ff fee6 	bl	8028ec0 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80290f4:	4620      	mov	r0, r4
 80290f6:	f7ff fddf 	bl	8028cb8 <UART_SetConfig>
 80290fa:	2801      	cmp	r0, #1
 80290fc:	d011      	beq.n	8029122 <HAL_UART_Init+0x72>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80290fe:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8029100:	4620      	mov	r0, r4
}
 8029102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8029106:	685a      	ldr	r2, [r3, #4]
 8029108:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 802910c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802910e:	689a      	ldr	r2, [r3, #8]
 8029110:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8029114:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8029116:	681a      	ldr	r2, [r3, #0]
 8029118:	f042 0201 	orr.w	r2, r2, #1
 802911c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 802911e:	f7ff bf6c 	b.w	8028ffa <UART_CheckIdleState>
}
 8029122:	2001      	movs	r0, #1
 8029124:	bd10      	pop	{r4, pc}
 8029126:	bf00      	nop
 8029128:	08021bcd 	.word	0x08021bcd

0802912c <UART_Start_Receive_DMA>:
{
 802912c:	b538      	push	{r3, r4, r5, lr}
  huart->RxXferSize = Size;
 802912e:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
{
 8029132:	4613      	mov	r3, r2
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029134:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8029136:	2222      	movs	r2, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029138:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
{
 802913c:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 802913e:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8029140:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  if (huart->hdmarx != NULL)
 8029144:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8029148:	b338      	cbz	r0, 802919a <UART_Start_Receive_DMA+0x6e>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 802914a:	4a29      	ldr	r2, [pc, #164]	@ (80291f0 <UART_Start_Receive_DMA+0xc4>)
 802914c:	6602      	str	r2, [r0, #96]	@ 0x60
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 802914e:	4a29      	ldr	r2, [pc, #164]	@ (80291f4 <UART_Start_Receive_DMA+0xc8>)
 8029150:	6642      	str	r2, [r0, #100]	@ 0x64
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8029152:	4a29      	ldr	r2, [pc, #164]	@ (80291f8 <UART_Start_Receive_DMA+0xcc>)
    huart->hdmarx->XferAbortCallback = NULL;
 8029154:	e9c0 251a 	strd	r2, r5, [r0, #104]	@ 0x68
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8029158:	68a2      	ldr	r2, [r4, #8]
 802915a:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 802915e:	d103      	bne.n	8029168 <UART_Start_Receive_DMA+0x3c>
 8029160:	6922      	ldr	r2, [r4, #16]
 8029162:	b90a      	cbnz	r2, 8029168 <UART_Start_Receive_DMA+0x3c>
      nbByte = Size * 2U;
 8029164:	005b      	lsls	r3, r3, #1
 8029166:	b29b      	uxth	r3, r3
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8029168:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 802916a:	062a      	lsls	r2, r5, #24
 802916c:	d539      	bpl.n	80291e2 <UART_Start_Receive_DMA+0xb6>
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 802916e:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8029170:	b93d      	cbnz	r5, 8029182 <UART_Start_Receive_DMA+0x56>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8029172:	2310      	movs	r3, #16
 8029174:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      huart->RxState = HAL_UART_STATE_READY;
 8029178:	2320      	movs	r3, #32
      return HAL_ERROR;
 802917a:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 802917c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
}
 8029180:	bd38      	pop	{r3, r4, r5, pc}
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 8029182:	682d      	ldr	r5, [r5, #0]
 8029184:	2d00      	cmp	r5, #0
 8029186:	d0f4      	beq.n	8029172 <UART_Start_Receive_DMA+0x46>
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8029188:	60ab      	str	r3, [r5, #8]
          (uint32_t)&huart->Instance->RDR;
 802918a:	6823      	ldr	r3, [r4, #0]
 802918c:	3324      	adds	r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 802918e:	e9c5 3103 	strd	r3, r1, [r5, #12]
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 8029192:	f7fa f925 	bl	80233e0 <HAL_DMAEx_List_Start_IT>
    if (status != HAL_OK)
 8029196:	2800      	cmp	r0, #0
 8029198:	d1eb      	bne.n	8029172 <UART_Start_Receive_DMA+0x46>
  if (huart->Init.Parity != UART_PARITY_NONE)
 802919a:	6922      	ldr	r2, [r4, #16]
 802919c:	6823      	ldr	r3, [r4, #0]
 802919e:	b13a      	cbz	r2, 80291b0 <UART_Start_Receive_DMA+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80291a0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80291a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80291a8:	e843 2100 	strex	r1, r2, [r3]
 80291ac:	2900      	cmp	r1, #0
 80291ae:	d1f7      	bne.n	80291a0 <UART_Start_Receive_DMA+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80291b0:	f103 0208 	add.w	r2, r3, #8
 80291b4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80291b8:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80291bc:	f103 0008 	add.w	r0, r3, #8
 80291c0:	e840 2100 	strex	r1, r2, [r0]
 80291c4:	2900      	cmp	r1, #0
 80291c6:	d1f3      	bne.n	80291b0 <UART_Start_Receive_DMA+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80291c8:	f103 0208 	add.w	r2, r3, #8
 80291cc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80291d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80291d4:	f103 0108 	add.w	r1, r3, #8
 80291d8:	e841 2000 	strex	r0, r2, [r1]
 80291dc:	2800      	cmp	r0, #0
 80291de:	d1f3      	bne.n	80291c8 <UART_Start_Receive_DMA+0x9c>
 80291e0:	e7ce      	b.n	8029180 <UART_Start_Receive_DMA+0x54>
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 80291e2:	6825      	ldr	r5, [r4, #0]
 80291e4:	460a      	mov	r2, r1
 80291e6:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 80291ea:	f7f9 ff67 	bl	80230bc <HAL_DMA_Start_IT>
 80291ee:	e7d2      	b.n	8029196 <UART_Start_Receive_DMA+0x6a>
 80291f0:	0802848b 	.word	0x0802848b
 80291f4:	08028521 	.word	0x08028521
 80291f8:	0802855b 	.word	0x0802855b

080291fc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80291fc:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 80291fe:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8029200:	b92b      	cbnz	r3, 802920e <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8029202:	2301      	movs	r3, #1
 8029204:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8029208:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 802920c:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802920e:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8029210:	4d09      	ldr	r5, [pc, #36]	@ (8029238 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8029212:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8029214:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8029216:	4c09      	ldr	r4, [pc, #36]	@ (802923c <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8029218:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802921a:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 802921c:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802921e:	00db      	lsls	r3, r3, #3
 8029220:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8029224:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8029228:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802922c:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 802922e:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8029230:	00db      	lsls	r3, r3, #3
 8029232:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8029236:	e7e7      	b.n	8029208 <UARTEx_SetNbDataToProcess+0xc>
 8029238:	0802c484 	.word	0x0802c484
 802923c:	0802c47c 	.word	0x0802c47c

08029240 <HAL_UARTEx_WakeupCallback>:
}
 8029240:	4770      	bx	lr

08029242 <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8029242:	4770      	bx	lr

08029244 <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8029244:	4770      	bx	lr

08029246 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8029246:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 802924a:	2b01      	cmp	r3, #1
 802924c:	d014      	beq.n	8029278 <HAL_UARTEx_DisableFifoMode+0x32>
  huart->gState = HAL_UART_STATE_BUSY;
 802924e:	2324      	movs	r3, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8029250:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8029252:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8029256:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8029258:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802925a:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 802925e:	f023 0301 	bic.w	r3, r3, #1
 8029262:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8029264:	2300      	movs	r3, #0
 8029266:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8029268:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 802926a:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 802926c:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8029270:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 8029274:	4618      	mov	r0, r3
 8029276:	4770      	bx	lr
  __HAL_LOCK(huart);
 8029278:	2002      	movs	r0, #2
}
 802927a:	4770      	bx	lr

0802927c <HAL_UARTEx_SetTxFifoThreshold>:
{
 802927c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 802927e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 8029282:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8029284:	2b01      	cmp	r3, #1
 8029286:	d017      	beq.n	80292b8 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8029288:	2324      	movs	r3, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802928a:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 802928c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8029290:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8029292:	682b      	ldr	r3, [r5, #0]
 8029294:	f023 0301 	bic.w	r3, r3, #1
 8029298:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802929a:	68ab      	ldr	r3, [r5, #8]
 802929c:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80292a0:	4319      	orrs	r1, r3
 80292a2:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80292a4:	f7ff ffaa 	bl	80291fc <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80292a8:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80292aa:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80292ac:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80292b0:	2000      	movs	r0, #0
 80292b2:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80292b6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80292b8:	2002      	movs	r0, #2
 80292ba:	e7fc      	b.n	80292b6 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

080292bc <HAL_UARTEx_SetRxFifoThreshold>:
{
 80292bc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80292be:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 80292c2:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80292c4:	2b01      	cmp	r3, #1
 80292c6:	d017      	beq.n	80292f8 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 80292c8:	2324      	movs	r3, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80292ca:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80292cc:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80292d0:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80292d2:	682b      	ldr	r3, [r5, #0]
 80292d4:	f023 0301 	bic.w	r3, r3, #1
 80292d8:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80292da:	68ab      	ldr	r3, [r5, #8]
 80292dc:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80292e0:	4319      	orrs	r1, r3
 80292e2:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80292e4:	f7ff ff8a 	bl	80291fc <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80292e8:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80292ea:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80292ec:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80292f0:	2000      	movs	r0, #0
 80292f2:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80292f6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80292f8:	2002      	movs	r0, #2
 80292fa:	e7fc      	b.n	80292f6 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

080292fc <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 80292fc:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80292fe:	f8d0 608c 	ldr.w	r6, [r0, #140]	@ 0x8c
{
 8029302:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8029304:	2e20      	cmp	r6, #32
 8029306:	d11c      	bne.n	8029342 <HAL_UARTEx_ReceiveToIdle_DMA+0x46>
    if ((pData == NULL) || (Size == 0U))
 8029308:	b909      	cbnz	r1, 802930e <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
      return HAL_ERROR;
 802930a:	2001      	movs	r0, #1
}
 802930c:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 802930e:	2a00      	cmp	r2, #0
 8029310:	d0fb      	beq.n	802930a <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8029312:	2301      	movs	r3, #1
 8029314:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8029316:	2300      	movs	r3, #0
 8029318:	6703      	str	r3, [r0, #112]	@ 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 802931a:	f7ff ff07 	bl	802912c <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 802931e:	2800      	cmp	r0, #0
 8029320:	d1f4      	bne.n	802930c <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029322:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8029324:	2b01      	cmp	r3, #1
 8029326:	d1f0      	bne.n	802930a <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8029328:	2210      	movs	r2, #16
 802932a:	6823      	ldr	r3, [r4, #0]
 802932c:	621a      	str	r2, [r3, #32]
 802932e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029330:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029334:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029338:	e842 3100 	strex	r1, r3, [r2]
 802933c:	2900      	cmp	r1, #0
 802933e:	d1f7      	bne.n	8029330 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8029340:	e7e4      	b.n	802930c <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
    return HAL_BUSY;
 8029342:	2002      	movs	r0, #2
 8029344:	e7e2      	b.n	802930c <HAL_UARTEx_ReceiveToIdle_DMA+0x10>

08029346 <gAppPreInit>:
void gAppPreInit(void)
{
  /* USER CODE BEGIN App PreInitializes */

  /* USER CODE END App PreInitializes */
}
 8029346:	4770      	bx	lr

08029348 <gAppInit>:
 * @param  None
 * @return None
 * @note   This function is called after all other initialization routines
 */
void gAppInit(void)
{
 8029348:	b508      	push	{r3, lr}
  /* USER CODE BEGIN App Initializes */
  gVibInit();
 802934a:	f000 f80f 	bl	802936c <gVibInit>
  gBuzPlay(gbuz_beep_beep_);
  /* USER CODE END App Initializes */
}
 802934e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  gBuzPlay(gbuz_beep_beep_);
 8029352:	4801      	ldr	r0, [pc, #4]	@ (8029358 <gAppInit+0x10>)
 8029354:	f000 bbd2 	b.w	8029afc <gBuzPlay>
 8029358:	0802c48c 	.word	0x0802c48c

0802935c <gAppLoop>:
 * @param  None
 * @return None
 * @note   This function runs continuously, executing in core application tasks and responding to events
 */
void gAppLoop(void)
{
 802935c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN core Loop */
  gVibLoop();
 802935e:	f000 f9e7 	bl	8029730 <gVibLoop>
  mp8859Loop();
  /* USER CODE END core Loop */
}
 8029362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mp8859Loop();
 8029366:	f000 bb31 	b.w	80299cc <mp8859Loop>
	...

0802936c <gVibInit>:
 *         the `mp8859` component up to 500 times, with a 10 ms delay between each attempt.
 *         Halts the system if initialization fails.
 *         This function also refreshes the watchdog timer to prevent system reset during long delays.
 */
void gVibInit(void)
{
 802936c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802936e:	b08f      	sub	sp, #60	@ 0x3c
  const GVibGpioStruct gpio_pin_list[] = GVIB_GPIO_LIST;
 8029370:	466c      	mov	r4, sp
 8029372:	4d30      	ldr	r5, [pc, #192]	@ (8029434 <gVibInit+0xc8>)
 8029374:	4e30      	ldr	r6, [pc, #192]	@ (8029438 <gVibInit+0xcc>)
 8029376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8029378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802937a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802937c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802937e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8029380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8029382:	e895 0003 	ldmia.w	r5, {r0, r1}
  bool found = false;
  memset(&gvib_, 0, sizeof(GVibHandle));
 8029386:	4a2d      	ldr	r2, [pc, #180]	@ (802943c <gVibInit+0xd0>)
  const GVibGpioStruct gpio_pin_list[] = GVIB_GPIO_LIST;
 8029388:	e884 0003 	stmia.w	r4, {r0, r1}
  memset(&gvib_, 0, sizeof(GVibHandle));
 802938c:	2100      	movs	r1, #0
 802938e:	482a      	ldr	r0, [pc, #168]	@ (8029438 <gVibInit+0xcc>)
 8029390:	f002 f952 	bl	802b638 <memset>
  for (int i = 0; i < GVIB_STIMULATION_CHANNEL; i++)
 8029394:	466c      	mov	r4, sp
 8029396:	2500      	movs	r5, #0
 8029398:	f106 071a 	add.w	r7, r6, #26
  {
    gvib_.gpio[i] = gpio_pin_list[i].gpio;
 802939c:	6820      	ldr	r0, [r4, #0]
    gvib_.pin[i] = gpio_pin_list[i].pin;
 802939e:	88a1      	ldrh	r1, [r4, #4]
    gvib_.gpio[i] = gpio_pin_list[i].gpio;
 80293a0:	f846 0b04 	str.w	r0, [r6], #4
    HAL_GPIO_WritePin(gvib_.gpio[i], gvib_.pin[i], GPIO_PIN_RESET);
 80293a4:	2200      	movs	r2, #0
    gvib_.pin[i] = gpio_pin_list[i].pin;
 80293a6:	f827 1f02 	strh.w	r1, [r7, #2]!
  for (int i = 0; i < GVIB_STIMULATION_CHANNEL; i++)
 80293aa:	3501      	adds	r5, #1
    HAL_GPIO_WritePin(gvib_.gpio[i], gvib_.pin[i], GPIO_PIN_RESET);
 80293ac:	f7fa faec 	bl	8023988 <HAL_GPIO_WritePin>
  for (int i = 0; i < GVIB_STIMULATION_CHANNEL; i++)
 80293b0:	2d07      	cmp	r5, #7
 80293b2:	f104 0408 	add.w	r4, r4, #8
 80293b6:	d1f1      	bne.n	802939c <gVibInit+0x30>
  }
  HAL_GPIO_WritePin(GVIB_TRIG_GPIO, GVIB_TRIG_PIN, GPIO_PIN_RESET);
 80293b8:	2200      	movs	r2, #0
 80293ba:	2110      	movs	r1, #16
 80293bc:	4820      	ldr	r0, [pc, #128]	@ (8029440 <gVibInit+0xd4>)
 80293be:	f7fa fae3 	bl	8023988 <HAL_GPIO_WritePin>
  gvib_.config.is_constant_trig = ginfo_storage_.config.is_constant_trig;
 80293c2:	4b20      	ldr	r3, [pc, #128]	@ (8029444 <gVibInit+0xd8>)
 80293c4:	4a20      	ldr	r2, [pc, #128]	@ (8029448 <gVibInit+0xdc>)
 80293c6:	f893 1204 	ldrb.w	r1, [r3, #516]	@ 0x204
  gvib_.config.max_ch = ginfo_storage_.config.max_ch;
  gvib_.config.trig_length = ginfo_storage_.config.trig_length;
  gvib_.config.sequence_len = 1;
  gvib_.config.led_on_duration = ginfo_storage_.config.led_on_duration;
  gvib_.config.led_off_duration = ginfo_storage_.config.led_off_duration;
 80293ca:	f44f 74fa 	mov.w	r4, #500	@ 0x1f4
  gvib_.config.is_constant_trig = ginfo_storage_.config.is_constant_trig;
 80293ce:	3900      	subs	r1, #0
 80293d0:	bf18      	it	ne
 80293d2:	2101      	movne	r1, #1
 80293d4:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
  gvib_.config.max_ch = ginfo_storage_.config.max_ch;
 80293d8:	f893 1207 	ldrb.w	r1, [r3, #519]	@ 0x207
  for (int i = 0; i < 500; i++)
  {
    HAL_IWDG_Refresh(&hiwdg);
 80293dc:	4d1b      	ldr	r5, [pc, #108]	@ (802944c <gVibInit+0xe0>)
  gvib_.config.max_ch = ginfo_storage_.config.max_ch;
 80293de:	f882 102b 	strb.w	r1, [r2, #43]	@ 0x2b
  gvib_.config.trig_length = ginfo_storage_.config.trig_length;
 80293e2:	f893 0206 	ldrb.w	r0, [r3, #518]	@ 0x206
 80293e6:	f893 1205 	ldrb.w	r1, [r3, #517]	@ 0x205
 80293ea:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80293ee:	8591      	strh	r1, [r2, #44]	@ 0x2c
  gvib_.config.sequence_len = 1;
 80293f0:	2101      	movs	r1, #1
 80293f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
  gvib_.config.led_on_duration = ginfo_storage_.config.led_on_duration;
 80293f4:	f893 120c 	ldrb.w	r1, [r3, #524]	@ 0x20c
 80293f8:	f893 020d 	ldrb.w	r0, [r3, #525]	@ 0x20d
 80293fc:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8029400:	8611      	strh	r1, [r2, #48]	@ 0x30
  gvib_.config.led_off_duration = ginfo_storage_.config.led_off_duration;
 8029402:	f893 120e 	ldrb.w	r1, [r3, #526]	@ 0x20e
 8029406:	f893 320f 	ldrb.w	r3, [r3, #527]	@ 0x20f
 802940a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 802940e:	8653      	strh	r3, [r2, #50]	@ 0x32
    HAL_IWDG_Refresh(&hiwdg);
 8029410:	4628      	mov	r0, r5
 8029412:	f7fa ff49 	bl	80242a8 <HAL_IWDG_Refresh>
    HAL_Delay(10);
 8029416:	200a      	movs	r0, #10
 8029418:	f7f8 fd58 	bl	8021ecc <HAL_Delay>
		if (mp8859Init())
 802941c:	f000 fa98 	bl	8029950 <mp8859Init>
 8029420:	b930      	cbnz	r0, 8029430 <gVibInit+0xc4>
  for (int i = 0; i < 500; i++)
 8029422:	3c01      	subs	r4, #1
 8029424:	d1f4      	bne.n	8029410 <gVibInit+0xa4>
  }
  if (found == false)
  {
    gCoreHalt();
  }
}
 8029426:	b00f      	add	sp, #60	@ 0x3c
 8029428:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    gCoreHalt();
 802942c:	f001 bac4 	b.w	802a9b8 <gCoreHalt>
}
 8029430:	b00f      	add	sp, #60	@ 0x3c
 8029432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029434:	0802c394 	.word	0x0802c394
 8029438:	2000042c 	.word	0x2000042c
 802943c:	0004004c 	.word	0x0004004c
 8029440:	42020800 	.word	0x42020800
 8029444:	200424dc 	.word	0x200424dc
 8029448:	2004042c 	.word	0x2004042c
 802944c:	20000188 	.word	0x20000188

08029450 <gVibGetState>:
 * @note   This function returns the state from the global vibration handle.
 */
GVibStateEnum gVibGetState(void)
{
  return gvib_.state;
}
 8029450:	4b01      	ldr	r3, [pc, #4]	@ (8029458 <gVibGetState+0x8>)
 8029452:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
 8029456:	4770      	bx	lr
 8029458:	2004042c 	.word	0x2004042c

0802945c <gVibGetConstantTrig>:
 *         trigger length. If constant triggering is disabled, the length value remains unchanged.
 */

void gVibGetConstantTrig(uint8_t *enabled, uint16_t *length)
{
  if (length != NULL)
 802945c:	b111      	cbz	r1, 8029464 <gVibGetConstantTrig+0x8>
  {
    *length = gvib_.config.trig_length;
 802945e:	4b04      	ldr	r3, [pc, #16]	@ (8029470 <gVibGetConstantTrig+0x14>)
 8029460:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8029462:	800b      	strh	r3, [r1, #0]
  }
  if (enabled != NULL)
 8029464:	b118      	cbz	r0, 802946e <gVibGetConstantTrig+0x12>
  {
    *enabled = gvib_.config.is_constant_trig;
 8029466:	4b02      	ldr	r3, [pc, #8]	@ (8029470 <gVibGetConstantTrig+0x14>)
 8029468:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 802946c:	7003      	strb	r3, [r0, #0]
  }
}
 802946e:	4770      	bx	lr
 8029470:	2004042c 	.word	0x2004042c

08029474 <gVibSetConstantTrig>:
 *         and sets the duration for which it should be active.
 */

void gVibSetConstantTrig(bool enable, uint16_t length)
{
  gvib_.config.is_constant_trig = enable;
 8029474:	4b02      	ldr	r3, [pc, #8]	@ (8029480 <gVibSetConstantTrig+0xc>)
 8029476:	f883 002a 	strb.w	r0, [r3, #42]	@ 0x2a
  gvib_.config.trig_length = length;
 802947a:	8599      	strh	r1, [r3, #44]	@ 0x2c
}
 802947c:	4770      	bx	lr
 802947e:	bf00      	nop
 8029480:	2004042c 	.word	0x2004042c

08029484 <gVibGetMaxCh>:
 */

uint8_t gVibGetMaxCh(void)
{
  return gvib_.config.max_ch;
}
 8029484:	4b01      	ldr	r3, [pc, #4]	@ (802948c <gVibGetMaxCh+0x8>)
 8029486:	f893 002b 	ldrb.w	r0, [r3, #43]	@ 0x2b
 802948a:	4770      	bx	lr
 802948c:	2004042c 	.word	0x2004042c

08029490 <gVibSetMaxCh>:
bool gVibSetMaxCh(uint8_t max_ch)
{
  bool answer = false;
  do
  {
    if ((max_ch == 0) || (max_ch > GVIB_STIMULATION_CHANNEL))
 8029490:	1e43      	subs	r3, r0, #1
 8029492:	2b06      	cmp	r3, #6
    {
      break;
    }
    gvib_.config.max_ch = max_ch;
 8029494:	bf9d      	ittte	ls
 8029496:	4b03      	ldrls	r3, [pc, #12]	@ (80294a4 <gVibSetMaxCh+0x14>)
 8029498:	f883 002b 	strbls.w	r0, [r3, #43]	@ 0x2b
    answer = true;
 802949c:	2001      	movls	r0, #1
  bool answer = false;
 802949e:	2000      	movhi	r0, #0

  } while (0);

  return answer;
}
 80294a0:	4770      	bx	lr
 80294a2:	bf00      	nop
 80294a4:	2004042c 	.word	0x2004042c

080294a8 <gVibGetSeqLen>:
 */

uint16_t gVibGetSeqLen(void)
{
  return gvib_.config.sequence_len;
}
 80294a8:	4b01      	ldr	r3, [pc, #4]	@ (80294b0 <gVibGetSeqLen+0x8>)
 80294aa:	8dd8      	ldrh	r0, [r3, #46]	@ 0x2e
 80294ac:	4770      	bx	lr
 80294ae:	bf00      	nop
 80294b0:	2004042c 	.word	0x2004042c

080294b4 <gVibSetSeqLen>:
bool gVibSetSeqLen(uint16_t len)
{
  bool answer = false;
  do
  {
    if (len == 0)
 80294b4:	b110      	cbz	r0, 80294bc <gVibSetSeqLen+0x8>
    {
      break;
    }
    gvib_.config.sequence_len = len;
 80294b6:	4b02      	ldr	r3, [pc, #8]	@ (80294c0 <gVibSetSeqLen+0xc>)
 80294b8:	85d8      	strh	r0, [r3, #46]	@ 0x2e
    answer = true;
 80294ba:	2001      	movs	r0, #1

  } while (0);

  return answer;
}
 80294bc:	4770      	bx	lr
 80294be:	bf00      	nop
 80294c0:	2004042c 	.word	0x2004042c

080294c4 <gVibGetSettings>:
 * @note   This function checks if the input parameters are valid and retrieves the specified number
 *         of settings starting from the given index into the provided settings array.
 */

bool gVibGetSettings(uint16_t start_index, uint16_t cnt, GVibSettingsStruct *settings)
{
 80294c4:	b530      	push	{r4, r5, lr}
  bool answer = false;
  GVibSettingsStruct *settings_tmp = settings;
  do
  {
    if (settings == NULL)
 80294c6:	b1c2      	cbz	r2, 80294fa <gVibGetSettings+0x36>
    {
      break;
    }
    if (start_index + cnt > GVIB_MAX_SETTINGS)
 80294c8:	1843      	adds	r3, r0, r1
 80294ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80294ce:	dc14      	bgt.n	80294fa <gVibGetSettings+0x36>
 80294d0:	4b0b      	ldr	r3, [pc, #44]	@ (8029500 <gVibGetSettings+0x3c>)
      break;
    }
    for (uint16_t i = 0; i < cnt; i++)
    {
      settings_tmp->ch = gvib_.settings[start_index + i].ch;
      settings_tmp->length = gvib_.settings[start_index + i].length;
 80294d2:	1c95      	adds	r5, r2, #2
 80294d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    if (start_index + cnt > GVIB_MAX_SETTINGS)
 80294d8:	2300      	movs	r3, #0
    for (uint16_t i = 0; i < cnt; i++)
 80294da:	b29c      	uxth	r4, r3
 80294dc:	42a1      	cmp	r1, r4
 80294de:	f100 0004 	add.w	r0, r0, #4
 80294e2:	d801      	bhi.n	80294e8 <gVibGetSettings+0x24>
      settings_tmp++;
    }
    answer = true;
 80294e4:	2001      	movs	r0, #1

  } while (0);

  return answer;
}
 80294e6:	bd30      	pop	{r4, r5, pc}
      settings_tmp->ch = gvib_.settings[start_index + i].ch;
 80294e8:	f890 4026 	ldrb.w	r4, [r0, #38]	@ 0x26
 80294ec:	f802 4023 	strb.w	r4, [r2, r3, lsl #2]
      settings_tmp->length = gvib_.settings[start_index + i].length;
 80294f0:	8d04      	ldrh	r4, [r0, #40]	@ 0x28
 80294f2:	f825 4023 	strh.w	r4, [r5, r3, lsl #2]
    for (uint16_t i = 0; i < cnt; i++)
 80294f6:	3301      	adds	r3, #1
 80294f8:	e7ef      	b.n	80294da <gVibGetSettings+0x16>
  bool answer = false;
 80294fa:	2000      	movs	r0, #0
 80294fc:	e7f3      	b.n	80294e6 <gVibGetSettings+0x22>
 80294fe:	bf00      	nop
 8029500:	2000042c 	.word	0x2000042c

08029504 <gVibSetSettings>:
 *         settings. It also validates the number of channels specified in each setting against
 *         the maximum channel configuration. If any setting fails validation, no settings are added.
 */

bool gVibSetSettings(uint16_t cnt, GVibSettingsStruct *settings)
{
 8029504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool answer = false;
  bool error_max_ch = false;
  GVibSettingsStruct *settings_tmp = settings;
  do
  {
    if (cnt > (GVIB_MAX_SETTINGS - gvib_.instance.settings_len))
 8029508:	4e23      	ldr	r6, [pc, #140]	@ (8029598 <gVibSetSettings+0x94>)
 802950a:	f8b6 7048 	ldrh.w	r7, [r6, #72]	@ 0x48
 802950e:	f5c7 3380 	rsb	r3, r7, #65536	@ 0x10000
 8029512:	4298      	cmp	r0, r3
 8029514:	dc3d      	bgt.n	8029592 <gVibSetSettings+0x8e>
        if ((settings_tmp->ch & (1 << found_idx)) != 0)
        {
          sum++;
        }
      }
      if (sum > gvib_.config.max_ch)
 8029516:	2500      	movs	r5, #0
 8029518:	46aa      	mov	sl, r5
 802951a:	f896 e02b 	ldrb.w	lr, [r6, #43]	@ 0x2b
      {
        error_max_ch = true;
        break;
      }
      gvib_.settings[gvib_.instance.settings_len].ch = settings_tmp->ch;
 802951e:	f5a6 2880 	sub.w	r8, r6, #262144	@ 0x40000
      gvib_.settings[gvib_.instance.settings_len].length = settings_tmp->length;
 8029522:	f1a1 0902 	sub.w	r9, r1, #2
 8029526:	b2aa      	uxth	r2, r5
 8029528:	fa17 f385 	uxtah	r3, r7, r5
    for (uint16_t i = 0; i < cnt; i++)
 802952c:	4290      	cmp	r0, r2
 802952e:	b29b      	uxth	r3, r3
 8029530:	d806      	bhi.n	8029540 <gVibSetSettings+0x3c>
 8029532:	f1ba 0f00 	cmp.w	sl, #0
 8029536:	d001      	beq.n	802953c <gVibSetSettings+0x38>
 8029538:	f8a6 3048 	strh.w	r3, [r6, #72]	@ 0x48
  bool error_max_ch = false;
 802953c:	2000      	movs	r0, #0
 802953e:	e019      	b.n	8029574 <gVibSetSettings+0x70>
        if ((settings_tmp->ch & (1 << found_idx)) != 0)
 8029540:	2400      	movs	r4, #0
      uint8_t sum = 0;
 8029542:	4622      	mov	r2, r4
        if ((settings_tmp->ch & (1 << found_idx)) != 0)
 8029544:	f811 c025 	ldrb.w	ip, [r1, r5, lsl #2]
 8029548:	fa4c fb04 	asr.w	fp, ip, r4
 802954c:	f01b 0f01 	tst.w	fp, #1
          sum++;
 8029550:	bf18      	it	ne
 8029552:	3201      	addne	r2, #1
      for (uint16_t found_idx = 0; found_idx < GVIB_STIMULATION_CHANNEL; found_idx++)
 8029554:	f104 0401 	add.w	r4, r4, #1
          sum++;
 8029558:	bf18      	it	ne
 802955a:	b2d2      	uxtbne	r2, r2
      for (uint16_t found_idx = 0; found_idx < GVIB_STIMULATION_CHANNEL; found_idx++)
 802955c:	2c07      	cmp	r4, #7
 802955e:	d1f3      	bne.n	8029548 <gVibSetSettings+0x44>
      if (sum > gvib_.config.max_ch)
 8029560:	4596      	cmp	lr, r2
 8029562:	f105 0501 	add.w	r5, r5, #1
 8029566:	d209      	bcs.n	802957c <gVibSetSettings+0x78>
 8029568:	f1ba 0f00 	cmp.w	sl, #0
 802956c:	d001      	beq.n	8029572 <gVibSetSettings+0x6e>
 802956e:	f8a6 3048 	strh.w	r3, [r6, #72]	@ 0x48
        error_max_ch = true;
 8029572:	2001      	movs	r0, #1
      gvib_.instance.settings_len++;
      settings_tmp++;
    }
    if (!error_max_ch)
 8029574:	f080 0001 	eor.w	r0, r0, #1
    }

  } while (0);

  return answer;
}
 8029578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      gvib_.settings[gvib_.instance.settings_len].ch = settings_tmp->ch;
 802957c:	330a      	adds	r3, #10
 802957e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8029582:	f883 c002 	strb.w	ip, [r3, #2]
      gvib_.settings[gvib_.instance.settings_len].length = settings_tmp->length;
 8029586:	f839 2025 	ldrh.w	r2, [r9, r5, lsl #2]
 802958a:	f04f 0a01 	mov.w	sl, #1
 802958e:	809a      	strh	r2, [r3, #4]
    for (uint16_t i = 0; i < cnt; i++)
 8029590:	e7c9      	b.n	8029526 <gVibSetSettings+0x22>
  bool answer = false;
 8029592:	2000      	movs	r0, #0
 8029594:	e7f0      	b.n	8029578 <gVibSetSettings+0x74>
 8029596:	bf00      	nop
 8029598:	2004042c 	.word	0x2004042c

0802959c <gVibGetSeqIndex>:
 */

uint16_t gVibGetSeqIndex(void)
{
  return gvib_.instance.sequence_index;
}
 802959c:	4b01      	ldr	r3, [pc, #4]	@ (80295a4 <gVibGetSeqIndex+0x8>)
 802959e:	f8b3 0044 	ldrh.w	r0, [r3, #68]	@ 0x44
 80295a2:	4770      	bx	lr
 80295a4:	2004042c 	.word	0x2004042c

080295a8 <gVibGetSettingsIndex>:
 */

uint16_t gVibGetSettingsIndex(void)
{
  return gvib_.instance.settings_index;
}
 80295a8:	4b01      	ldr	r3, [pc, #4]	@ (80295b0 <gVibGetSettingsIndex+0x8>)
 80295aa:	f8b3 0046 	ldrh.w	r0, [r3, #70]	@ 0x46
 80295ae:	4770      	bx	lr
 80295b0:	2004042c 	.word	0x2004042c

080295b4 <gVibGetLedDuration>:
 * @note   This function populates the provided pointers with the current on and off durations
 *         for the LED, which are used to control the LED behavior during vibration stimulation.
 */
void gVibGetLedDuration(uint16_t *on_duration, uint16_t *off_duration)
{
  if (on_duration != NULL)
 80295b4:	b110      	cbz	r0, 80295bc <gVibGetLedDuration+0x8>
  {
    *on_duration = gvib_.config.led_on_duration;
 80295b6:	4b04      	ldr	r3, [pc, #16]	@ (80295c8 <gVibGetLedDuration+0x14>)
 80295b8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80295ba:	8003      	strh	r3, [r0, #0]
  }
  if (off_duration != NULL)
 80295bc:	b111      	cbz	r1, 80295c4 <gVibGetLedDuration+0x10>
  {
    *off_duration = gvib_.config.led_off_duration;
 80295be:	4b02      	ldr	r3, [pc, #8]	@ (80295c8 <gVibGetLedDuration+0x14>)
 80295c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80295c2:	800b      	strh	r3, [r1, #0]
  }
}
 80295c4:	4770      	bx	lr
 80295c6:	bf00      	nop
 80295c8:	2004042c 	.word	0x2004042c

080295cc <gVibSetLedDuration>:
 * @note   This function updates the configuration for the LED durations used during vibration
 *         stimulation, allowing for customizable LED behavior.
 */
void gVibSetLedDuration(uint16_t on_duration, uint16_t off_duration)
{
  gvib_.config.led_on_duration = on_duration;
 80295cc:	4b01      	ldr	r3, [pc, #4]	@ (80295d4 <gVibSetLedDuration+0x8>)
 80295ce:	8618      	strh	r0, [r3, #48]	@ 0x30
  gvib_.config.led_off_duration = off_duration;
 80295d0:	8659      	strh	r1, [r3, #50]	@ 0x32
}
 80295d2:	4770      	bx	lr
 80295d4:	2004042c 	.word	0x2004042c

080295d8 <gVibGetSettingsLen>:
 *         vibration system, which can be useful for managing or iterating through the settings.
 */
uint16_t gVibGetSettingsLen(void)
{
  return gvib_.instance.settings_len;
}
 80295d8:	4b01      	ldr	r3, [pc, #4]	@ (80295e0 <gVibGetSettingsLen+0x8>)
 80295da:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 80295de:	4770      	bx	lr
 80295e0:	2004042c 	.word	0x2004042c

080295e4 <gVibResetSettings>:
 * @note   This function clears the settings array and resets the instance state,
 *         ensuring that all previously configured vibration settings are removed.
 *         It can be used to initialize the system before setting new configurations.
 */
void gVibResetSettings(void)
{
 80295e4:	b508      	push	{r3, lr}
  memset(gvib_.settings, 0, sizeof(GVibSettingsStruct) * GVIB_MAX_SETTINGS);
 80295e6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80295ea:	2100      	movs	r1, #0
 80295ec:	4804      	ldr	r0, [pc, #16]	@ (8029600 <gVibResetSettings+0x1c>)
 80295ee:	f002 f823 	bl	802b638 <memset>
  memset(&gvib_.instance, 0, sizeof(GVibInstanceStruct));
}
 80295f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memset(&gvib_.instance, 0, sizeof(GVibInstanceStruct));
 80295f6:	2214      	movs	r2, #20
 80295f8:	2100      	movs	r1, #0
 80295fa:	4802      	ldr	r0, [pc, #8]	@ (8029604 <gVibResetSettings+0x20>)
 80295fc:	f002 b81c 	b.w	802b638 <memset>
 8029600:	20000456 	.word	0x20000456
 8029604:	20040464 	.word	0x20040464

08029608 <gVibClearSettings>:
{
 8029608:	b508      	push	{r3, lr}
    if (gvib_.state == GVIB_STATE_STOP)
 802960a:	4b05      	ldr	r3, [pc, #20]	@ (8029620 <gVibClearSettings+0x18>)
 802960c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8029610:	b91b      	cbnz	r3, 802961a <gVibClearSettings+0x12>
      gVibResetSettings();
 8029612:	f7ff ffe7 	bl	80295e4 <gVibResetSettings>
      answer = true;
 8029616:	2001      	movs	r0, #1
}
 8029618:	bd08      	pop	{r3, pc}
  bool answer = false;
 802961a:	2000      	movs	r0, #0
 802961c:	e7fc      	b.n	8029618 <gVibClearSettings+0x10>
 802961e:	bf00      	nop
 8029620:	2004042c 	.word	0x2004042c

08029624 <gVibSetPins>:
 *         based on the constant trigger configuration.
 *         If a channel is active and constant triggering is enabled, it sets the trigger pin high
 *         and records the current time for potential timing purposes.
 */
void gVibSetPins(uint8_t mask)
{
 8029624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t count_ch = 0;
  for (int i = 0; i < GVIB_STIMULATION_CHANNEL; i++)
 8029628:	2500      	movs	r5, #0
{
 802962a:	4607      	mov	r7, r0
  uint8_t count_ch = 0;
 802962c:	462c      	mov	r4, r5
 802962e:	4e18      	ldr	r6, [pc, #96]	@ (8029690 <gVibSetPins+0x6c>)
  {
    if (gvib_.gpio[i] != NULL)
 8029630:	f1c6 0800 	rsb	r8, r6, #0
 8029634:	f858 0016 	ldr.w	r0, [r8, r6, lsl #1]
 8029638:	b138      	cbz	r0, 802964a <gVibSetPins+0x26>
    {
      if ((mask & (1 << i)) == 0)
 802963a:	fa47 f205 	asr.w	r2, r7, r5
 802963e:	f012 0201 	ands.w	r2, r2, #1
      {
        HAL_GPIO_WritePin(gvib_.gpio[i], gvib_.pin[i], GPIO_PIN_RESET);
 8029642:	8bb1      	ldrh	r1, [r6, #28]
      if ((mask & (1 << i)) == 0)
 8029644:	d114      	bne.n	8029670 <gVibSetPins+0x4c>
        HAL_GPIO_WritePin(gvib_.gpio[i], gvib_.pin[i], GPIO_PIN_RESET);
 8029646:	f7fa f99f 	bl	8023988 <HAL_GPIO_WritePin>
  for (int i = 0; i < GVIB_STIMULATION_CHANNEL; i++)
 802964a:	3501      	adds	r5, #1
 802964c:	2d07      	cmp	r5, #7
 802964e:	f106 0602 	add.w	r6, r6, #2
 8029652:	d1ef      	bne.n	8029634 <gVibSetPins+0x10>
      }
    }
  }
  if (count_ch == 0)
  {
    if (gvib_.config.is_constant_trig == false)
 8029654:	4d0f      	ldr	r5, [pc, #60]	@ (8029694 <gVibSetPins+0x70>)
 8029656:	f895 302a 	ldrb.w	r3, [r5, #42]	@ 0x2a
  if (count_ch == 0)
 802965a:	b97c      	cbnz	r4, 802967c <gVibSetPins+0x58>
    if (gvib_.config.is_constant_trig == false)
 802965c:	b9ab      	cbnz	r3, 802968a <gVibSetPins+0x66>
    {
      if ((mask & (1 << GVIB_STIMULATION_CHANNEL)) == 0)
 802965e:	063b      	lsls	r3, r7, #24
 8029660:	d411      	bmi.n	8029686 <gVibSetPins+0x62>
      {
        HAL_GPIO_WritePin(GVIB_TRIG_GPIO, GVIB_TRIG_PIN, GPIO_PIN_RESET);
 8029662:	2200      	movs	r2, #0
      {
        HAL_GPIO_WritePin(GVIB_TRIG_GPIO, GVIB_TRIG_PIN, GPIO_PIN_SET);
      }
    }
  }
}
 8029664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      HAL_GPIO_WritePin(GVIB_TRIG_GPIO, GVIB_TRIG_PIN, GPIO_PIN_SET);
 8029668:	2110      	movs	r1, #16
 802966a:	480b      	ldr	r0, [pc, #44]	@ (8029698 <gVibSetPins+0x74>)
 802966c:	f7fa b98c 	b.w	8023988 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(gvib_.gpio[i], gvib_.pin[i], GPIO_PIN_SET);
 8029670:	2201      	movs	r2, #1
        count_ch++;
 8029672:	3401      	adds	r4, #1
        HAL_GPIO_WritePin(gvib_.gpio[i], gvib_.pin[i], GPIO_PIN_SET);
 8029674:	f7fa f988 	bl	8023988 <HAL_GPIO_WritePin>
        count_ch++;
 8029678:	b2e4      	uxtb	r4, r4
 802967a:	e7e6      	b.n	802964a <gVibSetPins+0x26>
    if (gvib_.config.is_constant_trig == true)
 802967c:	2b00      	cmp	r3, #0
 802967e:	d0ee      	beq.n	802965e <gVibSetPins+0x3a>
      gvib_.instance.time_trig = HAL_GetTick();
 8029680:	f7f8 fc1e 	bl	8021ec0 <HAL_GetTick>
 8029684:	63e8      	str	r0, [r5, #60]	@ 0x3c
      HAL_GPIO_WritePin(GVIB_TRIG_GPIO, GVIB_TRIG_PIN, GPIO_PIN_SET);
 8029686:	2201      	movs	r2, #1
 8029688:	e7ec      	b.n	8029664 <gVibSetPins+0x40>
}
 802968a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802968e:	bf00      	nop
 8029690:	2000042c 	.word	0x2000042c
 8029694:	2004042c 	.word	0x2004042c
 8029698:	42020800 	.word	0x42020800

0802969c <gVibSetState>:
    switch (state)
 802969c:	2801      	cmp	r0, #1
{
 802969e:	b570      	push	{r4, r5, r6, lr}
 80296a0:	4604      	mov	r4, r0
    switch (state)
 80296a2:	d015      	beq.n	80296d0 <gVibSetState+0x34>
 80296a4:	2802      	cmp	r0, #2
 80296a6:	d02f      	beq.n	8029708 <gVibSetState+0x6c>
 80296a8:	2800      	cmp	r0, #0
 80296aa:	d139      	bne.n	8029720 <gVibSetState+0x84>
      HAL_GPIO_WritePin(GVIB_TRIG_GPIO, GVIB_TRIG_PIN, GPIO_PIN_RESET);
 80296ac:	4602      	mov	r2, r0
 80296ae:	2110      	movs	r1, #16
 80296b0:	481c      	ldr	r0, [pc, #112]	@ (8029724 <gVibSetState+0x88>)
 80296b2:	f7fa f969 	bl	8023988 <HAL_GPIO_WritePin>
      gVibSetPins(0x00);
 80296b6:	4620      	mov	r0, r4
 80296b8:	f7ff ffb4 	bl	8029624 <gVibSetPins>
      gVibResetSettings();
 80296bc:	f7ff ff92 	bl	80295e4 <gVibResetSettings>
      mp8859Enable(true);
 80296c0:	2001      	movs	r0, #1
 80296c2:	f000 f8f5 	bl	80298b0 <mp8859Enable>
      answer = true;
 80296c6:	2001      	movs	r0, #1
        gvib_.state = GVIB_STATE_PAUSE;
 80296c8:	4b17      	ldr	r3, [pc, #92]	@ (8029728 <gVibSetState+0x8c>)
 80296ca:	f883 4034 	strb.w	r4, [r3, #52]	@ 0x34
}
 80296ce:	bd70      	pop	{r4, r5, r6, pc}
      if ((gvib_.state == GVIB_STATE_STOP) && (gvib_.instance.settings_len > 0))
 80296d0:	4d16      	ldr	r5, [pc, #88]	@ (802972c <gVibSetState+0x90>)
 80296d2:	f505 2680 	add.w	r6, r5, #262144	@ 0x40000
 80296d6:	f896 3034 	ldrb.w	r3, [r6, #52]	@ 0x34
 80296da:	b95b      	cbnz	r3, 80296f4 <gVibSetState+0x58>
 80296dc:	f8b6 0048 	ldrh.w	r0, [r6, #72]	@ 0x48
 80296e0:	2800      	cmp	r0, #0
 80296e2:	d0f4      	beq.n	80296ce <gVibSetState+0x32>
        gvib_.instance.time = HAL_GetTick();
 80296e4:	f7f8 fbec 	bl	8021ec0 <HAL_GetTick>
 80296e8:	63b0      	str	r0, [r6, #56]	@ 0x38
        gVibSetPins(gvib_.settings[gvib_.instance.settings_index].ch);
 80296ea:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
        gVibSetPins(0x00);
 80296ee:	f7ff ff99 	bl	8029624 <gVibSetPins>
        answer = true;
 80296f2:	e7e8      	b.n	80296c6 <gVibSetState+0x2a>
      else if (gvib_.state == GVIB_STATE_PAUSE)
 80296f4:	2b02      	cmp	r3, #2
 80296f6:	d113      	bne.n	8029720 <gVibSetState+0x84>
        gvib_.instance.time = HAL_GetTick();
 80296f8:	f7f8 fbe2 	bl	8021ec0 <HAL_GetTick>
        gVibSetPins(gvib_.settings[gvib_.instance.settings_index].ch);
 80296fc:	f8b6 3046 	ldrh.w	r3, [r6, #70]	@ 0x46
        gvib_.instance.time = HAL_GetTick();
 8029700:	63b0      	str	r0, [r6, #56]	@ 0x38
        gVibSetPins(gvib_.settings[gvib_.instance.settings_index].ch);
 8029702:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8029706:	e7f0      	b.n	80296ea <gVibSetState+0x4e>
      if (gvib_.state == GVIB_STATE_STIMULATION)
 8029708:	4b07      	ldr	r3, [pc, #28]	@ (8029728 <gVibSetState+0x8c>)
 802970a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 802970e:	2b01      	cmp	r3, #1
 8029710:	d106      	bne.n	8029720 <gVibSetState+0x84>
        HAL_GPIO_WritePin(GVIB_TRIG_GPIO, GVIB_TRIG_PIN, GPIO_PIN_RESET);
 8029712:	4804      	ldr	r0, [pc, #16]	@ (8029724 <gVibSetState+0x88>)
 8029714:	2200      	movs	r2, #0
 8029716:	2110      	movs	r1, #16
 8029718:	f7fa f936 	bl	8023988 <HAL_GPIO_WritePin>
        gVibSetPins(0x00);
 802971c:	2000      	movs	r0, #0
 802971e:	e7e6      	b.n	80296ee <gVibSetState+0x52>
 8029720:	2000      	movs	r0, #0
 8029722:	e7d4      	b.n	80296ce <gVibSetState+0x32>
 8029724:	42020800 	.word	0x42020800
 8029728:	2004042c 	.word	0x2004042c
 802972c:	2000042c 	.word	0x2000042c

08029730 <gVibLoop>:
{
 8029730:	b538      	push	{r3, r4, r5, lr}
  if (gvib_.state == GVIB_STATE_STIMULATION)
 8029732:	4d3d      	ldr	r5, [pc, #244]	@ (8029828 <gVibLoop+0xf8>)
 8029734:	f505 2480 	add.w	r4, r5, #262144	@ 0x40000
 8029738:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 802973c:	2b01      	cmp	r3, #1
 802973e:	d16c      	bne.n	802981a <gVibLoop+0xea>
    if (gvib_.settings[gvib_.instance.settings_index].length != 0xFFFF)
 8029740:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8029744:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8029748:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802974a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802974e:	429a      	cmp	r2, r3
 8029750:	d025      	beq.n	802979e <gVibLoop+0x6e>
      if (HAL_GetTick() - gvib_.instance.time  >= gvib_.settings[gvib_.instance.settings_index].length)
 8029752:	f7f8 fbb5 	bl	8021ec0 <HAL_GetTick>
 8029756:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8029758:	1ac0      	subs	r0, r0, r3
 802975a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 802975e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8029762:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8029764:	4298      	cmp	r0, r3
 8029766:	d31a      	bcc.n	802979e <gVibLoop+0x6e>
        gvib_.instance.time = HAL_GetTick();
 8029768:	f7f8 fbaa 	bl	8021ec0 <HAL_GetTick>
        gvib_.instance.settings_index++;
 802976c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        if (gvib_.instance.settings_index >= gvib_.instance.settings_len)
 8029770:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
        gvib_.instance.settings_index++;
 8029774:	3301      	adds	r3, #1
 8029776:	b29b      	uxth	r3, r3
        if (gvib_.instance.settings_index >= gvib_.instance.settings_len)
 8029778:	429a      	cmp	r2, r3
        gvib_.instance.time = HAL_GetTick();
 802977a:	63a0      	str	r0, [r4, #56]	@ 0x38
        gvib_.instance.settings_index++;
 802977c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        if (gvib_.instance.settings_index >= gvib_.instance.settings_len)
 8029780:	d838      	bhi.n	80297f4 <gVibLoop+0xc4>
          gvib_.instance.settings_index = 0;
 8029782:	2000      	movs	r0, #0
          gvib_.instance.sequence_index++;
 8029784:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
          if (gvib_.instance.sequence_index == gvib_.config.sequence_len)
 8029788:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
          gvib_.instance.sequence_index++;
 802978a:	3301      	adds	r3, #1
 802978c:	b29b      	uxth	r3, r3
          if (gvib_.instance.sequence_index == gvib_.config.sequence_len)
 802978e:	429a      	cmp	r2, r3
          gvib_.instance.settings_index = 0;
 8029790:	f8a4 0046 	strh.w	r0, [r4, #70]	@ 0x46
          gvib_.instance.sequence_index++;
 8029794:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
          if (gvib_.instance.sequence_index == gvib_.config.sequence_len)
 8029798:	d12e      	bne.n	80297f8 <gVibLoop+0xc8>
            gVibSetState(GVIB_STATE_STOP);
 802979a:	f7ff ff7f 	bl	802969c <gVibSetState>
    if ((gvib_.config.is_constant_trig == true)  && (HAL_GPIO_ReadPin(GVIB_TRIG_GPIO, GVIB_TRIG_PIN) == GPIO_PIN_SET))
 802979e:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80297a2:	b18b      	cbz	r3, 80297c8 <gVibLoop+0x98>
 80297a4:	2110      	movs	r1, #16
 80297a6:	4821      	ldr	r0, [pc, #132]	@ (802982c <gVibLoop+0xfc>)
 80297a8:	f7fa f8e8 	bl	802397c <HAL_GPIO_ReadPin>
 80297ac:	2801      	cmp	r0, #1
 80297ae:	d10b      	bne.n	80297c8 <gVibLoop+0x98>
      if (HAL_GetTick() - gvib_.instance.time_trig >= (uint32_t) gvib_.config.trig_length)
 80297b0:	f7f8 fb86 	bl	8021ec0 <HAL_GetTick>
 80297b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80297b6:	1ac0      	subs	r0, r0, r3
 80297b8:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80297ba:	4298      	cmp	r0, r3
 80297bc:	d304      	bcc.n	80297c8 <gVibLoop+0x98>
        HAL_GPIO_WritePin(GVIB_TRIG_GPIO, GVIB_TRIG_PIN, GPIO_PIN_RESET);
 80297be:	2200      	movs	r2, #0
 80297c0:	2110      	movs	r1, #16
 80297c2:	481a      	ldr	r0, [pc, #104]	@ (802982c <gVibLoop+0xfc>)
 80297c4:	f7fa f8e0 	bl	8023988 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(GVIB_LED_GPIO, GVIB_LED_PIN) == GPIO_PIN_RESET)
 80297c8:	2101      	movs	r1, #1
 80297ca:	4818      	ldr	r0, [pc, #96]	@ (802982c <gVibLoop+0xfc>)
 80297cc:	f7fa f8d6 	bl	802397c <HAL_GPIO_ReadPin>
 80297d0:	b9b8      	cbnz	r0, 8029802 <gVibLoop+0xd2>
      if (HAL_GetTick() - gvib_.instance.time_led >= (uint32_t) gvib_.config.led_on_duration)
 80297d2:	f7f8 fb75 	bl	8021ec0 <HAL_GetTick>
 80297d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80297d8:	1ac0      	subs	r0, r0, r3
 80297da:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80297dc:	4298      	cmp	r0, r3
 80297de:	d322      	bcc.n	8029826 <gVibLoop+0xf6>
        gvib_.instance.time_led = HAL_GetTick();
 80297e0:	f7f8 fb6e 	bl	8021ec0 <HAL_GetTick>
        HAL_GPIO_WritePin(GVIB_LED_GPIO, GVIB_LED_PIN, GPIO_PIN_SET);
 80297e4:	2201      	movs	r2, #1
        gvib_.instance.time_led = HAL_GetTick();
 80297e6:	6420      	str	r0, [r4, #64]	@ 0x40
    HAL_GPIO_WritePin(GVIB_LED_GPIO, GVIB_LED_PIN, GPIO_PIN_RESET);
 80297e8:	2101      	movs	r1, #1
}
 80297ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_WritePin(GVIB_LED_GPIO, GVIB_LED_PIN, GPIO_PIN_RESET);
 80297ee:	480f      	ldr	r0, [pc, #60]	@ (802982c <gVibLoop+0xfc>)
 80297f0:	f7fa b8ca 	b.w	8023988 <HAL_GPIO_WritePin>
        	gVibSetPins(gvib_.settings[gvib_.instance.settings_index].ch);
 80297f4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80297f8:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 80297fc:	f7ff ff12 	bl	8029624 <gVibSetPins>
 8029800:	e7cd      	b.n	802979e <gVibLoop+0x6e>
      if (HAL_GetTick() - gvib_.instance.time_led >= (uint32_t) gvib_.config.led_off_duration)
 8029802:	f7f8 fb5d 	bl	8021ec0 <HAL_GetTick>
 8029806:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8029808:	1ac0      	subs	r0, r0, r3
 802980a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 802980c:	4298      	cmp	r0, r3
 802980e:	d30a      	bcc.n	8029826 <gVibLoop+0xf6>
        gvib_.instance.time_led = HAL_GetTick();
 8029810:	f7f8 fb56 	bl	8021ec0 <HAL_GetTick>
 8029814:	6420      	str	r0, [r4, #64]	@ 0x40
    HAL_GPIO_WritePin(GVIB_LED_GPIO, GVIB_LED_PIN, GPIO_PIN_RESET);
 8029816:	2200      	movs	r2, #0
 8029818:	e7e6      	b.n	80297e8 <gVibLoop+0xb8>
    HAL_GPIO_WritePin(GVIB_TRIG_GPIO, GVIB_TRIG_PIN, GPIO_PIN_RESET);
 802981a:	2200      	movs	r2, #0
 802981c:	2110      	movs	r1, #16
 802981e:	4803      	ldr	r0, [pc, #12]	@ (802982c <gVibLoop+0xfc>)
 8029820:	f7fa f8b2 	bl	8023988 <HAL_GPIO_WritePin>
 8029824:	e7f7      	b.n	8029816 <gVibLoop+0xe6>
}
 8029826:	bd38      	pop	{r3, r4, r5, pc}
 8029828:	2000042c 	.word	0x2000042c
 802982c:	42020800 	.word	0x42020800

08029830 <gVibSingleSetting>:
{
 8029830:	2300      	movs	r3, #0
 8029832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029836:	4680      	mov	r8, r0
 8029838:	460f      	mov	r7, r1
    uint8_t sum = 0;
 802983a:	461c      	mov	r4, r3
      if ((ch & (1 << found_idx)) != 0)
 802983c:	fa48 f203 	asr.w	r2, r8, r3
 8029840:	07d2      	lsls	r2, r2, #31
        sum++;
 8029842:	bf48      	it	mi
 8029844:	3401      	addmi	r4, #1
    for (uint16_t found_idx = 0; found_idx < GVIB_STIMULATION_CHANNEL; found_idx++)
 8029846:	f103 0301 	add.w	r3, r3, #1
        sum++;
 802984a:	bf48      	it	mi
 802984c:	b2e4      	uxtbmi	r4, r4
    for (uint16_t found_idx = 0; found_idx < GVIB_STIMULATION_CHANNEL; found_idx++)
 802984e:	2b07      	cmp	r3, #7
 8029850:	d1f4      	bne.n	802983c <gVibSingleSetting+0xc>
    if (sum <= gvib_.config.max_ch)
 8029852:	4e11      	ldr	r6, [pc, #68]	@ (8029898 <gVibSingleSetting+0x68>)
 8029854:	f506 2580 	add.w	r5, r6, #262144	@ 0x40000
 8029858:	f895 302b 	ldrb.w	r3, [r5, #43]	@ 0x2b
 802985c:	42a3      	cmp	r3, r4
 802985e:	d319      	bcc.n	8029894 <gVibSingleSetting+0x64>
      gVibResetSettings();
 8029860:	f7ff fec0 	bl	80295e4 <gVibResetSettings>
      gvib_.instance.settings_len = 1;
 8029864:	2301      	movs	r3, #1
      gvib_.settings[0].ch = ch;
 8029866:	f886 802a 	strb.w	r8, [r6, #42]	@ 0x2a
      gvib_.settings[0].length = duration;
 802986a:	85b7      	strh	r7, [r6, #44]	@ 0x2c
      gvib_.instance.settings_len = 1;
 802986c:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
      if ((sum == 0) || (duration == 0))
 8029870:	b104      	cbz	r4, 8029874 <gVibSingleSetting+0x44>
 8029872:	b93f      	cbnz	r7, 8029884 <gVibSingleSetting+0x54>
        gvib_.state = GVIB_STATE_STOP;
 8029874:	2000      	movs	r0, #0
 8029876:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
        gVibSetPins(0);
 802987a:	f7ff fed3 	bl	8029624 <gVibSetPins>
      answer = true;
 802987e:	2001      	movs	r0, #1
}
 8029880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        gvib_.state = GVIB_STATE_STIMULATION;
 8029884:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        gvib_.instance.time = HAL_GetTick();
 8029888:	f7f8 fb1a 	bl	8021ec0 <HAL_GetTick>
 802988c:	63a8      	str	r0, [r5, #56]	@ 0x38
        gVibSetPins(gvib_.settings[0].ch);
 802988e:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 8029892:	e7f2      	b.n	802987a <gVibSingleSetting+0x4a>
  bool answer = false;
 8029894:	2000      	movs	r0, #0
 8029896:	e7f3      	b.n	8029880 <gVibSingleSetting+0x50>
 8029898:	2000042c 	.word	0x2000042c

0802989c <mp8859CallbackOverCurrent>:
 * @brief  OverCurrent callback
 * @return None
 * @note   This function is a weak function in mp8859 library. it calls after over current
 */
void mp8859CallbackOverCurrent(void)
{
 802989c:	b508      	push	{r3, lr}
  gVibSetState(GVIB_STATE_STOP);
 802989e:	2000      	movs	r0, #0
 80298a0:	f7ff fefc 	bl	802969c <gVibSetState>
  gComSetStatusCode(GCOM_STATUS_CODE_OVER_CURRENT);
}
 80298a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  gComSetStatusCode(GCOM_STATUS_CODE_OVER_CURRENT);
 80298a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80298ac:	f000 ba18 	b.w	8029ce0 <gComSetStatusCode>

080298b0 <mp8859Enable>:
/**
 * ************************************************************************************************
 *
 */
void mp8859Enable(bool enable_disable)
{
 80298b0:	b508      	push	{r3, lr}
 80298b2:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(MP8859_EN_GPIO, MP8859_EN_PIN, (GPIO_PinState)enable_disable);
 80298b4:	2140      	movs	r1, #64	@ 0x40
 80298b6:	4804      	ldr	r0, [pc, #16]	@ (80298c8 <mp8859Enable+0x18>)
 80298b8:	f7fa f866 	bl	8023988 <HAL_GPIO_WritePin>
  HAL_Delay(1);
}
 80298bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(1);
 80298c0:	2001      	movs	r0, #1
 80298c2:	f7f8 bb03 	b.w	8021ecc <HAL_Delay>
 80298c6:	bf00      	nop
 80298c8:	42020800 	.word	0x42020800

080298cc <mp8859WriteReg>:
/**
 * ************************************************************************************************
 *
 */
bool mp8859WriteReg(Mp8859Reg reg, uint8_t data)
{
 80298cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool answer = false;
  do
  {
    if (HAL_I2C_Mem_Write(&MP8859_I2C, MP8859_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 10) != HAL_OK)
 80298ce:	2301      	movs	r3, #1
{
 80298d0:	f88d 1017 	strb.w	r1, [sp, #23]
    if (HAL_I2C_Mem_Write(&MP8859_I2C, MP8859_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 10) != HAL_OK)
 80298d4:	210a      	movs	r1, #10
 80298d6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80298da:	f10d 0117 	add.w	r1, sp, #23
{
 80298de:	4602      	mov	r2, r0
    if (HAL_I2C_Mem_Write(&MP8859_I2C, MP8859_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 10) != HAL_OK)
 80298e0:	9100      	str	r1, [sp, #0]
 80298e2:	4805      	ldr	r0, [pc, #20]	@ (80298f8 <mp8859WriteReg+0x2c>)
 80298e4:	21c0      	movs	r1, #192	@ 0xc0
 80298e6:	f7fa f9e5 	bl	8023cb4 <HAL_I2C_Mem_Write>
    answer = true;

  } while (0);

  return answer;
}
 80298ea:	fab0 f080 	clz	r0, r0
 80298ee:	0940      	lsrs	r0, r0, #5
 80298f0:	b007      	add	sp, #28
 80298f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80298f6:	bf00      	nop
 80298f8:	20000134 	.word	0x20000134

080298fc <mp8859SetVol>:
    if ((voltage_mv < MP8859_MIN_VOLTAGE) || (voltage_mv > MP8859_MAX_VOLTAGE))
 80298fc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8029900:	f5a0 62fa 	sub.w	r2, r0, #2000	@ 0x7d0
 8029904:	429a      	cmp	r2, r3
{
 8029906:	b510      	push	{r4, lr}
    if ((voltage_mv < MP8859_MIN_VOLTAGE) || (voltage_mv > MP8859_MAX_VOLTAGE))
 8029908:	d814      	bhi.n	8029934 <mp8859SetVol+0x38>
    if (mp8859WriteReg(MP8859_REG_VOUT_L, (voltage_mv / 10) & 0x0007) == false)
 802990a:	230a      	movs	r3, #10
 802990c:	fbb0 f4f3 	udiv	r4, r0, r3
 8029910:	2000      	movs	r0, #0
 8029912:	f004 0107 	and.w	r1, r4, #7
 8029916:	f7ff ffd9 	bl	80298cc <mp8859WriteReg>
 802991a:	b158      	cbz	r0, 8029934 <mp8859SetVol+0x38>
    if (mp8859WriteReg(MP8859_REG_VOUT_H, (voltage_mv / 10) >> 3) == false)
 802991c:	2001      	movs	r0, #1
 802991e:	f3c4 01c7 	ubfx	r1, r4, #3, #8
 8029922:	f7ff ffd3 	bl	80298cc <mp8859WriteReg>
 8029926:	b128      	cbz	r0, 8029934 <mp8859SetVol+0x38>
}
 8029928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (mp8859WriteReg(MP8859_REG_VOUT_GO, 0x01) == false)
 802992c:	2101      	movs	r1, #1
 802992e:	2002      	movs	r0, #2
 8029930:	f7ff bfcc 	b.w	80298cc <mp8859WriteReg>
}
 8029934:	2000      	movs	r0, #0
 8029936:	bd10      	pop	{r4, pc}

08029938 <mp8859SetCur>:
    if (current_ma > MP8859_MAX_CURRENT)
 8029938:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 802993c:	d806      	bhi.n	802994c <mp8859SetCur+0x14>
    if (mp8859WriteReg(MP8859_REG_IOUT_LIM, current_ma / 50) == false)
 802993e:	2332      	movs	r3, #50	@ 0x32
 8029940:	fbb0 f0f3 	udiv	r0, r0, r3
 8029944:	b2c1      	uxtb	r1, r0
 8029946:	2003      	movs	r0, #3
 8029948:	f7ff bfc0 	b.w	80298cc <mp8859WriteReg>
}
 802994c:	2000      	movs	r0, #0
 802994e:	4770      	bx	lr

08029950 <mp8859Init>:
{
 8029950:	b510      	push	{r4, lr}
  	mp8859Enable(false);
 8029952:	2000      	movs	r0, #0
 8029954:	f7ff ffac 	bl	80298b0 <mp8859Enable>
    mp8859Enable(true);
 8029958:	2001      	movs	r0, #1
 802995a:	f7ff ffa9 	bl	80298b0 <mp8859Enable>
    if (HAL_I2C_IsDeviceReady(&MP8859_I2C, MP8859_I2C_ADDRESS, 1, 10) != HAL_OK)
 802995e:	230a      	movs	r3, #10
 8029960:	2201      	movs	r2, #1
 8029962:	21c0      	movs	r1, #192	@ 0xc0
 8029964:	480c      	ldr	r0, [pc, #48]	@ (8029998 <mp8859Init+0x48>)
 8029966:	f7fa fb5d 	bl	8024024 <HAL_I2C_IsDeviceReady>
 802996a:	b110      	cbz	r0, 8029972 <mp8859Init+0x22>
  bool answer = false;
 802996c:	2400      	movs	r4, #0
}
 802996e:	4620      	mov	r0, r4
 8029970:	bd10      	pop	{r4, pc}
    if (mp8859SetVol(ginfo_storage_.config.voltage_mv) == false)
 8029972:	4c0a      	ldr	r4, [pc, #40]	@ (802999c <mp8859Init+0x4c>)
 8029974:	f8b4 0208 	ldrh.w	r0, [r4, #520]	@ 0x208
 8029978:	f7ff ffc0 	bl	80298fc <mp8859SetVol>
 802997c:	2800      	cmp	r0, #0
 802997e:	d0f5      	beq.n	802996c <mp8859Init+0x1c>
    if (mp8859SetCur(ginfo_storage_.config.current_ma) == false)
 8029980:	f8b4 020a 	ldrh.w	r0, [r4, #522]	@ 0x20a
 8029984:	f7ff ffd8 	bl	8029938 <mp8859SetCur>
 8029988:	4604      	mov	r4, r0
 802998a:	2800      	cmp	r0, #0
 802998c:	d0ee      	beq.n	802996c <mp8859Init+0x1c>
    mp8859Enable(true);
 802998e:	2001      	movs	r0, #1
 8029990:	f7ff ff8e 	bl	80298b0 <mp8859Enable>
    answer = true;
 8029994:	e7eb      	b.n	802996e <mp8859Init+0x1e>
 8029996:	bf00      	nop
 8029998:	20000134 	.word	0x20000134
 802999c:	200424dc 	.word	0x200424dc

080299a0 <mp8859ReadReg>:
/**
 * ************************************************************************************************
 *
 */
bool mp8859ReadReg(Mp8859Reg reg, uint8_t *data)
{
 80299a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80299a2:	4602      	mov	r2, r0
  bool answer = false;
  do
  {
    if (data == NULL)
 80299a4:	4608      	mov	r0, r1
 80299a6:	b159      	cbz	r1, 80299c0 <mp8859ReadReg+0x20>
    {
      break;
    }
    if (HAL_I2C_Mem_Read(&MP8859_I2C, MP8859_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 10) != HAL_OK)
 80299a8:	2301      	movs	r3, #1
 80299aa:	210a      	movs	r1, #10
 80299ac:	9000      	str	r0, [sp, #0]
 80299ae:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80299b2:	4805      	ldr	r0, [pc, #20]	@ (80299c8 <mp8859ReadReg+0x28>)
 80299b4:	21c0      	movs	r1, #192	@ 0xc0
 80299b6:	f7fa fa57 	bl	8023e68 <HAL_I2C_Mem_Read>
 80299ba:	fab0 f080 	clz	r0, r0
 80299be:	0940      	lsrs	r0, r0, #5
    answer = true;

  } while (0);

  return answer;
}
 80299c0:	b005      	add	sp, #20
 80299c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80299c6:	bf00      	nop
 80299c8:	20000134 	.word	0x20000134

080299cc <mp8859Loop>:
{
 80299cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (HAL_GetTick() - last_time >= MP8859_CHECK_TIME_MS)
 80299ce:	f7f8 fa77 	bl	8021ec0 <HAL_GetTick>
 80299d2:	2809      	cmp	r0, #9
 80299d4:	d910      	bls.n	80299f8 <mp8859Loop+0x2c>
    uint8_t data = 0;
 80299d6:	2500      	movs	r5, #0
    if (mp8859ReadReg(MP8859_REG_STATUS, &data) == true)
 80299d8:	2009      	movs	r0, #9
 80299da:	f10d 0107 	add.w	r1, sp, #7
    uint8_t data = 0;
 80299de:	f88d 5007 	strb.w	r5, [sp, #7]
    if (mp8859ReadReg(MP8859_REG_STATUS, &data) == true)
 80299e2:	f7ff ffdd 	bl	80299a0 <mp8859ReadReg>
 80299e6:	b138      	cbz	r0, 80299f8 <mp8859Loop+0x2c>
      if (((data & (1 << MP8859_STATUS_PG)) == 0) && (mp8859_power_good_ == 1))
 80299e8:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 80299ec:	4c0a      	ldr	r4, [pc, #40]	@ (8029a18 <mp8859Loop+0x4c>)
 80299ee:	42aa      	cmp	r2, r5
 80299f0:	7823      	ldrb	r3, [r4, #0]
 80299f2:	da03      	bge.n	80299fc <mp8859Loop+0x30>
      if (((data & (1 << MP8859_STATUS_PG)) != 0) && (mp8859_power_good_ == 0))
 80299f4:	7823      	ldrb	r3, [r4, #0]
 80299f6:	b15b      	cbz	r3, 8029a10 <mp8859Loop+0x44>
}
 80299f8:	b003      	add	sp, #12
 80299fa:	bd30      	pop	{r4, r5, pc}
      if (((data & (1 << MP8859_STATUS_PG)) == 0) && (mp8859_power_good_ == 1))
 80299fc:	2b01      	cmp	r3, #1
 80299fe:	d1fb      	bne.n	80299f8 <mp8859Loop+0x2c>
        mp8859_power_good_ = 0;
 8029a00:	7025      	strb	r5, [r4, #0]
        mp8859CallbackOverCurrent();
 8029a02:	f7ff ff4b 	bl	802989c <mp8859CallbackOverCurrent>
      if (((data & (1 << MP8859_STATUS_PG)) != 0) && (mp8859_power_good_ == 0))
 8029a06:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8029a0a:	2b00      	cmp	r3, #0
 8029a0c:	daf4      	bge.n	80299f8 <mp8859Loop+0x2c>
 8029a0e:	e7f1      	b.n	80299f4 <mp8859Loop+0x28>
        mp8859_power_good_ = 1;
 8029a10:	2301      	movs	r3, #1
 8029a12:	7023      	strb	r3, [r4, #0]
}
 8029a14:	e7f0      	b.n	80299f8 <mp8859Loop+0x2c>
 8029a16:	bf00      	nop
 8029a18:	20000028 	.word	0x20000028

08029a1c <mp8859GetVol>:
{
 8029a1c:	b513      	push	{r0, r1, r4, lr}
    if (voltage_mv == NULL)
 8029a1e:	4604      	mov	r4, r0
 8029a20:	b910      	cbnz	r0, 8029a28 <mp8859GetVol+0xc>
  bool answer = false;
 8029a22:	2000      	movs	r0, #0
}
 8029a24:	b002      	add	sp, #8
 8029a26:	bd10      	pop	{r4, pc}
    if (mp8859ReadReg(MP8859_REG_VOUT_L, &data[0]) == false)
 8029a28:	2000      	movs	r0, #0
 8029a2a:	a901      	add	r1, sp, #4
 8029a2c:	f7ff ffb8 	bl	80299a0 <mp8859ReadReg>
 8029a30:	2800      	cmp	r0, #0
 8029a32:	d0f6      	beq.n	8029a22 <mp8859GetVol+0x6>
    if (mp8859ReadReg(MP8859_REG_VOUT_H, &data[1]) == false)
 8029a34:	2001      	movs	r0, #1
 8029a36:	f10d 0105 	add.w	r1, sp, #5
 8029a3a:	f7ff ffb1 	bl	80299a0 <mp8859ReadReg>
 8029a3e:	2800      	cmp	r0, #0
 8029a40:	d0ef      	beq.n	8029a22 <mp8859GetVol+0x6>
    *voltage_mv = ((uint16_t)data[1] << 3) | ((uint16_t)(data[0] & 0x07));
 8029a42:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8029a46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8029a4a:	f003 0307 	and.w	r3, r3, #7
 8029a4e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    *voltage_mv *= 10;
 8029a52:	220a      	movs	r2, #10
 8029a54:	4353      	muls	r3, r2
 8029a56:	6023      	str	r3, [r4, #0]
    answer = true;
 8029a58:	e7e4      	b.n	8029a24 <mp8859GetVol+0x8>

08029a5a <mp8859GetCur>:
  uint8_t data = 0;
 8029a5a:	2300      	movs	r3, #0
{
 8029a5c:	b513      	push	{r0, r1, r4, lr}
    if (current_ma == NULL)
 8029a5e:	4604      	mov	r4, r0
  uint8_t data = 0;
 8029a60:	f88d 3007 	strb.w	r3, [sp, #7]
    if (current_ma == NULL)
 8029a64:	b910      	cbnz	r0, 8029a6c <mp8859GetCur+0x12>
  bool answer = false;
 8029a66:	2000      	movs	r0, #0
}
 8029a68:	b002      	add	sp, #8
 8029a6a:	bd10      	pop	{r4, pc}
    if (mp8859ReadReg(MP8859_REG_IOUT_LIM, &data) == false)
 8029a6c:	2003      	movs	r0, #3
 8029a6e:	f10d 0107 	add.w	r1, sp, #7
 8029a72:	f7ff ff95 	bl	80299a0 <mp8859ReadReg>
 8029a76:	2800      	cmp	r0, #0
 8029a78:	d0f5      	beq.n	8029a66 <mp8859GetCur+0xc>
    *current_ma = data * 50;
 8029a7a:	2232      	movs	r2, #50	@ 0x32
 8029a7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8029a80:	fb13 f302 	smulbb	r3, r3, r2
 8029a84:	6023      	str	r3, [r4, #0]
    answer = true;
 8029a86:	e7ef      	b.n	8029a68 <mp8859GetCur+0xe>

08029a88 <gBuzInit>:
 * @note   This function configures the necessary hardware and settings for the buzzer to operate.
 *         It initializes the buzzer handle, configures the timer for PWM output, and starts
 *         the PWM signal. If the timer fails to start, the core system is halted.
 */
void gBuzInit(void)
{
 8029a88:	b508      	push	{r3, lr}
  memset(&gbuz_, 0, sizeof(GBuzHandle));
 8029a8a:	2300      	movs	r3, #0
  __HAL_TIM_SET_PRESCALER(&GBUZ_TIMER, GBUZ_TIMER_FREQ_MHZ - 1);
 8029a8c:	21f9      	movs	r1, #249	@ 0xf9
  memset(&gbuz_, 0, sizeof(GBuzHandle));
 8029a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8029ab8 <gBuzInit+0x30>)
  __HAL_TIM_SET_PRESCALER(&GBUZ_TIMER, GBUZ_TIMER_FREQ_MHZ - 1);
 8029a90:	480a      	ldr	r0, [pc, #40]	@ (8029abc <gBuzInit+0x34>)
  memset(&gbuz_, 0, sizeof(GBuzHandle));
 8029a92:	e9c2 3300 	strd	r3, r3, [r2]
 8029a96:	6093      	str	r3, [r2, #8]
  __HAL_TIM_SET_PRESCALER(&GBUZ_TIMER, GBUZ_TIMER_FREQ_MHZ - 1);
 8029a98:	6802      	ldr	r2, [r0, #0]
 8029a9a:	6291      	str	r1, [r2, #40]	@ 0x28
  __HAL_TIM_SET_COMPARE(&GBUZ_TIMER, GBUZ_CHANNEL, 0);
  __HAL_TIM_SET_AUTORELOAD(&GBUZ_TIMER, 10);
 8029a9c:	210a      	movs	r1, #10
  __HAL_TIM_SET_COMPARE(&GBUZ_TIMER, GBUZ_CHANNEL, 0);
 8029a9e:	6413      	str	r3, [r2, #64]	@ 0x40
  __HAL_TIM_SET_AUTORELOAD(&GBUZ_TIMER, 10);
 8029aa0:	60c1      	str	r1, [r0, #12]
 8029aa2:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_TIM_SET_COUNTER(&GBUZ_TIMER, 0);
  if (HAL_TIM_PWM_Start(&GBUZ_TIMER, GBUZ_CHANNEL) != HAL_OK)
 8029aa4:	210c      	movs	r1, #12
  __HAL_TIM_SET_COUNTER(&GBUZ_TIMER, 0);
 8029aa6:	6253      	str	r3, [r2, #36]	@ 0x24
  if (HAL_TIM_PWM_Start(&GBUZ_TIMER, GBUZ_CHANNEL) != HAL_OK)
 8029aa8:	f7fe fb3c 	bl	8028124 <HAL_TIM_PWM_Start>
 8029aac:	b118      	cbz	r0, 8029ab6 <gBuzInit+0x2e>
  {
    gCoreHalt();
  }
}
 8029aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    gCoreHalt();
 8029ab2:	f000 bf81 	b.w	802a9b8 <gCoreHalt>
}
 8029ab6:	bd08      	pop	{r3, pc}
 8029ab8:	20040478 	.word	0x20040478
 8029abc:	200001a0 	.word	0x200001a0

08029ac0 <gBuzPlayNote>:
 * @note   This function generates the sound corresponding to the specified note on the buzzer.
 *         It can be called to play individual notes, and the behavior may depend on the
 *         buzzer's current state or settings.
 */
void gBuzPlayNote(uint32_t note)
{
 8029ac0:	b510      	push	{r4, lr}
 8029ac2:	4604      	mov	r4, r0
  uint32_t tmp = 0;
  gbuz_.time = HAL_GetTick();
 8029ac4:	f7f8 f9fc 	bl	8021ec0 <HAL_GetTick>
 8029ac8:	4b09      	ldr	r3, [pc, #36]	@ (8029af0 <gBuzPlayNote+0x30>)
 8029aca:	4a0a      	ldr	r2, [pc, #40]	@ (8029af4 <gBuzPlayNote+0x34>)
 8029acc:	6058      	str	r0, [r3, #4]
  if (note > 0)
 8029ace:	b14c      	cbz	r4, 8029ae4 <gBuzPlayNote+0x24>
  {
    tmp = (1000000UL / note) - 1;
 8029ad0:	4b09      	ldr	r3, [pc, #36]	@ (8029af8 <gBuzPlayNote+0x38>)
    __HAL_TIM_SET_AUTORELOAD(&GBUZ_TIMER, tmp);
 8029ad2:	6811      	ldr	r1, [r2, #0]
    tmp = (1000000UL / note) - 1;
 8029ad4:	fbb3 f3f4 	udiv	r3, r3, r4
 8029ad8:	3b01      	subs	r3, #1
    __HAL_TIM_SET_AUTORELOAD(&GBUZ_TIMER, tmp);
 8029ada:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8029adc:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&GBUZ_TIMER, GBUZ_CHANNEL, tmp / 16);
 8029ade:	091b      	lsrs	r3, r3, #4
 8029ae0:	640b      	str	r3, [r1, #64]	@ 0x40
  else
  {
    __HAL_TIM_SET_AUTORELOAD(&GBUZ_TIMER, 100);
    __HAL_TIM_SET_COMPARE(&GBUZ_TIMER, GBUZ_CHANNEL, 0);
  }
}
 8029ae2:	bd10      	pop	{r4, pc}
    __HAL_TIM_SET_AUTORELOAD(&GBUZ_TIMER, 100);
 8029ae4:	2164      	movs	r1, #100	@ 0x64
 8029ae6:	6813      	ldr	r3, [r2, #0]
 8029ae8:	60d1      	str	r1, [r2, #12]
 8029aea:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_TIM_SET_COMPARE(&GBUZ_TIMER, GBUZ_CHANNEL, 0);
 8029aec:	641c      	str	r4, [r3, #64]	@ 0x40
}
 8029aee:	e7f8      	b.n	8029ae2 <gBuzPlayNote+0x22>
 8029af0:	20040478 	.word	0x20040478
 8029af4:	200001a0 	.word	0x200001a0
 8029af8:	000f4240 	.word	0x000f4240

08029afc <gBuzPlay>:
{
 8029afc:	b538      	push	{r3, r4, r5, lr}
    if (sequence == NULL)
 8029afe:	4605      	mov	r5, r0
 8029b00:	b908      	cbnz	r0, 8029b06 <gBuzPlay+0xa>
      gCoreHalt();
 8029b02:	f000 ff59 	bl	802a9b8 <gCoreHalt>
    if (gbuz_.playing == true)
 8029b06:	4b06      	ldr	r3, [pc, #24]	@ (8029b20 <gBuzPlay+0x24>)
 8029b08:	781a      	ldrb	r2, [r3, #0]
 8029b0a:	b93a      	cbnz	r2, 8029b1c <gBuzPlay+0x20>
    gbuz_.playing = true;
 8029b0c:	2401      	movs	r4, #1
    gBuzPlayNote(gbuz_.sequence->note);
 8029b0e:	8828      	ldrh	r0, [r5, #0]
    gbuz_.sequence = (GBuzNoteSequence*)sequence;
 8029b10:	609d      	str	r5, [r3, #8]
    gbuz_.playing = true;
 8029b12:	701c      	strb	r4, [r3, #0]
    gBuzPlayNote(gbuz_.sequence->note);
 8029b14:	f7ff ffd4 	bl	8029ac0 <gBuzPlayNote>
    answer = true;
 8029b18:	4620      	mov	r0, r4
}
 8029b1a:	bd38      	pop	{r3, r4, r5, pc}
  bool answer = false;
 8029b1c:	2000      	movs	r0, #0
 8029b1e:	e7fc      	b.n	8029b1a <gBuzPlay+0x1e>
 8029b20:	20040478 	.word	0x20040478

08029b24 <gBuzStop>:
{
 8029b24:	b508      	push	{r3, lr}
  gBuzPlayNote(GBUZ_NOTE_NONE);
 8029b26:	2000      	movs	r0, #0
 8029b28:	f7ff ffca 	bl	8029ac0 <gBuzPlayNote>
  gbuz_.playing = false;
 8029b2c:	2200      	movs	r2, #0
 8029b2e:	4b02      	ldr	r3, [pc, #8]	@ (8029b38 <gBuzStop+0x14>)
 8029b30:	701a      	strb	r2, [r3, #0]
  gbuz_.sequence = NULL;
 8029b32:	609a      	str	r2, [r3, #8]
}
 8029b34:	bd08      	pop	{r3, pc}
 8029b36:	bf00      	nop
 8029b38:	20040478 	.word	0x20040478

08029b3c <gBuzLoop>:
{
 8029b3c:	b510      	push	{r4, lr}
  if (gbuz_.playing == true)
 8029b3e:	4c0e      	ldr	r4, [pc, #56]	@ (8029b78 <gBuzLoop+0x3c>)
 8029b40:	7823      	ldrb	r3, [r4, #0]
 8029b42:	b1c3      	cbz	r3, 8029b76 <gBuzLoop+0x3a>
    if (gbuz_.sequence != NULL)
 8029b44:	68a3      	ldr	r3, [r4, #8]
 8029b46:	b193      	cbz	r3, 8029b6e <gBuzLoop+0x32>
      if (HAL_GetTick() - gbuz_.time >= gbuz_.sequence->duration)
 8029b48:	f7f8 f9ba 	bl	8021ec0 <HAL_GetTick>
 8029b4c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8029b50:	1a80      	subs	r0, r0, r2
 8029b52:	685a      	ldr	r2, [r3, #4]
 8029b54:	4290      	cmp	r0, r2
 8029b56:	d30e      	bcc.n	8029b76 <gBuzLoop+0x3a>
        gbuz_.sequence++;
 8029b58:	f103 0208 	add.w	r2, r3, #8
        gBuzPlayNote(gbuz_.sequence->note);
 8029b5c:	8918      	ldrh	r0, [r3, #8]
        gbuz_.sequence++;
 8029b5e:	60a2      	str	r2, [r4, #8]
        gBuzPlayNote(gbuz_.sequence->note);
 8029b60:	f7ff ffae 	bl	8029ac0 <gBuzPlayNote>
        if ((gbuz_.sequence->duration == 0) && (gbuz_.sequence->note == GBUZ_NOTE_NONE))
 8029b64:	68a3      	ldr	r3, [r4, #8]
 8029b66:	685a      	ldr	r2, [r3, #4]
 8029b68:	b92a      	cbnz	r2, 8029b76 <gBuzLoop+0x3a>
 8029b6a:	881b      	ldrh	r3, [r3, #0]
 8029b6c:	b91b      	cbnz	r3, 8029b76 <gBuzLoop+0x3a>
}
 8029b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          gBuzStop();
 8029b72:	f7ff bfd7 	b.w	8029b24 <gBuzStop>
}
 8029b76:	bd10      	pop	{r4, pc}
 8029b78:	20040478 	.word	0x20040478

08029b7c <gComRxEventCallback>:
 *         the incoming data based on the specified size and may trigger further
 *         actions or state transitions within the communication system.
 */
void gComRxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
  gcom_.instance.rx_len = size;
 8029b7c:	4b01      	ldr	r3, [pc, #4]	@ (8029b84 <gComRxEventCallback+0x8>)
 8029b7e:	60d9      	str	r1, [r3, #12]
}
 8029b80:	4770      	bx	lr
 8029b82:	bf00      	nop
 8029b84:	20042484 	.word	0x20042484

08029b88 <gComTxDoneCallback>:
 *         This function should be registered with the UART peripheral to handle transmission
 *         complete events correctly.
 */
void gComTxDoneCallback(UART_HandleTypeDef *huart)
{
  gcom_.instance.tx_done = 1;
 8029b88:	2201      	movs	r2, #1
 8029b8a:	4b01      	ldr	r3, [pc, #4]	@ (8029b90 <gComTxDoneCallback+0x8>)
 8029b8c:	615a      	str	r2, [r3, #20]
}
 8029b8e:	4770      	bx	lr
 8029b90:	20042484 	.word	0x20042484

08029b94 <gComDeInit>:
{
 8029b94:	b510      	push	{r4, lr}
  HAL_UART_Abort(&GCOM_USART);
 8029b96:	4c0b      	ldr	r4, [pc, #44]	@ (8029bc4 <gComDeInit+0x30>)
 8029b98:	4620      	mov	r0, r4
 8029b9a:	f7fe fe49 	bl	8028830 <HAL_UART_Abort>
  HAL_UART_UnRegisterRxEventCallback(&GCOM_USART);
 8029b9e:	4620      	mov	r0, r4
 8029ba0:	f7fe fdd8 	bl	8028754 <HAL_UART_UnRegisterRxEventCallback>
  HAL_UART_UnRegisterCallback(&GCOM_USART, HAL_UART_TX_COMPLETE_CB_ID);
 8029ba4:	2101      	movs	r1, #1
 8029ba6:	4620      	mov	r0, r4
 8029ba8:	f7fe fd54 	bl	8028654 <HAL_UART_UnRegisterCallback>
  HAL_UART_UnRegisterCallback(&GCOM_USART, HAL_UART_ERROR_CB_ID);
 8029bac:	2104      	movs	r1, #4
 8029bae:	4620      	mov	r0, r4
 8029bb0:	f7fe fd50 	bl	8028654 <HAL_UART_UnRegisterCallback>
}
 8029bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memset(&gcom_, 0, sizeof(GComHandle));
 8029bb8:	f242 024c 	movw	r2, #8268	@ 0x204c
 8029bbc:	2100      	movs	r1, #0
 8029bbe:	4802      	ldr	r0, [pc, #8]	@ (8029bc8 <gComDeInit+0x34>)
 8029bc0:	f001 bd3a 	b.w	802b638 <memset>
 8029bc4:	2000035c 	.word	0x2000035c
 8029bc8:	20040484 	.word	0x20040484

08029bcc <gComRespMake>:
    gcom_.instance.tx_done = 0;
 8029bcc:	2300      	movs	r3, #0
{
 8029bce:	b5f0      	push	{r4, r5, r6, r7, lr}
    gcom_.instance.tx_done = 0;
 8029bd0:	4f39      	ldr	r7, [pc, #228]	@ (8029cb8 <gComRespMake+0xec>)
{
 8029bd2:	4614      	mov	r4, r2
    gcom_.instance.tx_len = 0;
 8029bd4:	e9c7 3304 	strd	r3, r3, [r7, #16]
{
 8029bd8:	b087      	sub	sp, #28
    if (data == NULL)
 8029bda:	b131      	cbz	r1, 8029bea <gComRespMake+0x1e>
    if (length >= GCOM_BUFFER_SIZE - GCOM_RES_MIN_LENGTH)
 8029bdc:	f240 73f6 	movw	r3, #2038	@ 0x7f6
 8029be0:	429a      	cmp	r2, r3
 8029be2:	d903      	bls.n	8029bec <gComRespMake+0x20>
  bool answer = false;
 8029be4:	2000      	movs	r0, #0
}
 8029be6:	b007      	add	sp, #28
 8029be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      length = 0;
 8029bea:	460c      	mov	r4, r1
    gcom_.instance.tx[0] = gcom_.id;
 8029bec:	4d33      	ldr	r5, [pc, #204]	@ (8029cbc <gComRespMake+0xf0>)
 8029bee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    gcom_.instance.tx[1] = (length + 6) >> 8;
 8029bf2:	1da6      	adds	r6, r4, #6
    gcom_.instance.tx[0] = gcom_.id;
 8029bf4:	f885 3800 	strb.w	r3, [r5, #2048]	@ 0x800
    gcom_.instance.tx[1] = (length + 6) >> 8;
 8029bf8:	1233      	asrs	r3, r6, #8
 8029bfa:	f885 3801 	strb.w	r3, [r5, #2049]	@ 0x801
    gcom_.instance.tx[3] = GCOM_CMD_RESP;
 8029bfe:	2301      	movs	r3, #1
    gcom_.instance.tx[4] = error >> 8;
 8029c00:	ba40      	rev16	r0, r0
    gcom_.instance.tx[2] = (length + 6) & 0x00FF;
 8029c02:	f885 6802 	strb.w	r6, [r5, #2050]	@ 0x802
    gcom_.instance.tx[3] = GCOM_CMD_RESP;
 8029c06:	f885 3803 	strb.w	r3, [r5, #2051]	@ 0x803
    gcom_.instance.tx[4] = error >> 8;
 8029c0a:	f8a5 0804 	strh.w	r0, [r5, #2052]	@ 0x804
    if (length != 0)
 8029c0e:	bb1c      	cbnz	r4, 8029c58 <gComRespMake+0x8c>
    __HAL_CRC_DR_RESET(&hcrc);
 8029c10:	4f2b      	ldr	r7, [pc, #172]	@ (8029cc0 <gComRespMake+0xf4>)
    if (HAL_CRCEx_Polynomial_Set(&hcrc, 0x1021, CRC_POLYLENGTH_16B) != HAL_OK)
 8029c12:	f241 0121 	movw	r1, #4129	@ 0x1021
    __HAL_CRC_DR_RESET(&hcrc);
 8029c16:	683a      	ldr	r2, [r7, #0]
    if (HAL_CRCEx_Polynomial_Set(&hcrc, 0x1021, CRC_POLYLENGTH_16B) != HAL_OK)
 8029c18:	4638      	mov	r0, r7
    __HAL_CRC_DR_RESET(&hcrc);
 8029c1a:	6893      	ldr	r3, [r2, #8]
 8029c1c:	f043 0301 	orr.w	r3, r3, #1
 8029c20:	6093      	str	r3, [r2, #8]
    if (HAL_CRCEx_Polynomial_Set(&hcrc, 0x1021, CRC_POLYLENGTH_16B) != HAL_OK)
 8029c22:	2208      	movs	r2, #8
 8029c24:	f7f8 fff0 	bl	8022c08 <HAL_CRCEx_Polynomial_Set>
 8029c28:	2800      	cmp	r0, #0
 8029c2a:	d1db      	bne.n	8029be4 <gComRespMake+0x18>
    crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &gcom_.instance.tx[1], 5 + length);
 8029c2c:	1d62      	adds	r2, r4, #5
 8029c2e:	4638      	mov	r0, r7
 8029c30:	4924      	ldr	r1, [pc, #144]	@ (8029cc4 <gComRespMake+0xf8>)
 8029c32:	f7f8 ffc5 	bl	8022bc0 <HAL_CRC_Calculate>
    gcom_.instance.tx[8 + length] = GCOM_EOF;
 8029c36:	22f1      	movs	r2, #241	@ 0xf1
    gcom_.instance.tx[6 + length] = crc >> 8;
 8029c38:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8029c3c:	442e      	add	r6, r5
 8029c3e:	f886 3800 	strb.w	r3, [r6, #2048]	@ 0x800
    gcom_.instance.tx[7 + length] = crc & 0x00FF;
 8029c42:	192b      	adds	r3, r5, r4
    gcom_.instance.tx_len = GCOM_RES_MIN_LENGTH + length;
 8029c44:	f505 5500 	add.w	r5, r5, #8192	@ 0x2000
 8029c48:	3409      	adds	r4, #9
    gcom_.instance.tx[7 + length] = crc & 0x00FF;
 8029c4a:	f883 0807 	strb.w	r0, [r3, #2055]	@ 0x807
    gcom_.instance.tx[8 + length] = GCOM_EOF;
 8029c4e:	f883 2808 	strb.w	r2, [r3, #2056]	@ 0x808
    answer = true;
 8029c52:	2001      	movs	r0, #1
    gcom_.instance.tx_len = GCOM_RES_MIN_LENGTH + length;
 8029c54:	612c      	str	r4, [r5, #16]
    answer = true;
 8029c56:	e7c6      	b.n	8029be6 <gComRespMake+0x1a>
      for (uint16_t i = 0; i < length; i++)
 8029c58:	2300      	movs	r3, #0
 8029c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8029cc8 <gComRespMake+0xfc>)
 8029c5c:	3901      	subs	r1, #1
 8029c5e:	3301      	adds	r3, #1
        gcom_.instance.tx_encrypted[i + 6] = data[i];
 8029c60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
      for (uint16_t i = 0; i < length; i++)
 8029c64:	b29b      	uxth	r3, r3
 8029c66:	429c      	cmp	r4, r3
        gcom_.instance.tx_encrypted[i + 6] = data[i];
 8029c68:	f802 0f01 	strb.w	r0, [r2, #1]!
      for (uint16_t i = 0; i < length; i++)
 8029c6c:	d1f7      	bne.n	8029c5e <gComRespMake+0x92>
      cmox_initialize(NULL);
 8029c6e:	2000      	movs	r0, #0
 8029c70:	f7f6 fc50 	bl	8020514 <cmox_initialize>
			if (HAL_CRCEx_Polynomial_Set(&hcrc, 0x4c11db7, CRC_POLYLENGTH_32B) != HAL_OK)
 8029c74:	2200      	movs	r2, #0
 8029c76:	4915      	ldr	r1, [pc, #84]	@ (8029ccc <gComRespMake+0x100>)
 8029c78:	4811      	ldr	r0, [pc, #68]	@ (8029cc0 <gComRespMake+0xf4>)
 8029c7a:	f7f8 ffc5 	bl	8022c08 <HAL_CRCEx_Polynomial_Set>
 8029c7e:	2800      	cmp	r0, #0
 8029c80:	d1b0      	bne.n	8029be4 <gComRespMake+0x18>
			cipher_result = cmox_cipher_encrypt(CMOX_AES_CTR_ENC_ALGO,
 8029c82:	4b13      	ldr	r3, [pc, #76]	@ (8029cd0 <gComRespMake+0x104>)
 8029c84:	4913      	ldr	r1, [pc, #76]	@ (8029cd4 <gComRespMake+0x108>)
 8029c86:	9303      	str	r3, [sp, #12]
 8029c88:	2310      	movs	r3, #16
 8029c8a:	9302      	str	r3, [sp, #8]
 8029c8c:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8029c90:	9301      	str	r3, [sp, #4]
 8029c92:	2320      	movs	r3, #32
 8029c94:	4810      	ldr	r0, [pc, #64]	@ (8029cd8 <gComRespMake+0x10c>)
 8029c96:	9104      	str	r1, [sp, #16]
 8029c98:	9300      	str	r3, [sp, #0]
 8029c9a:	4622      	mov	r2, r4
 8029c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8029cdc <gComRespMake+0x110>)
 8029c9e:	6800      	ldr	r0, [r0, #0]
 8029ca0:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 8029ca4:	f7f6 fb8c 	bl	80203c0 <cmox_cipher_encrypt>
			if (cipher_result != CMOX_CIPHER_SUCCESS)
 8029ca8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8029cac:	d19a      	bne.n	8029be4 <gComRespMake+0x18>
			if (gcom_.instance.tx_len_encrypted != (length))
 8029cae:	687b      	ldr	r3, [r7, #4]
 8029cb0:	429c      	cmp	r4, r3
 8029cb2:	d197      	bne.n	8029be4 <gComRespMake+0x18>
 8029cb4:	e7ac      	b.n	8029c10 <gComRespMake+0x44>
 8029cb6:	bf00      	nop
 8029cb8:	20042484 	.word	0x20042484
 8029cbc:	20040484 	.word	0x20040484
 8029cc0:	20000110 	.word	0x20000110
 8029cc4:	20040c85 	.word	0x20040c85
 8029cc8:	20041c89 	.word	0x20041c89
 8029ccc:	04c11db7 	.word	0x04c11db7
 8029cd0:	20040c8a 	.word	0x20040c8a
 8029cd4:	20042488 	.word	0x20042488
 8029cd8:	0802c3dc 	.word	0x0802c3dc
 8029cdc:	0802c4e1 	.word	0x0802c4e1

08029ce0 <gComSetStatusCode>:
  if (gcom_.status_code == GCOM_STATUS_CODE_NO_ERROR)
 8029ce0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8029ce4:	4b02      	ldr	r3, [pc, #8]	@ (8029cf0 <gComSetStatusCode+0x10>)
 8029ce6:	8d59      	ldrh	r1, [r3, #42]	@ 0x2a
 8029ce8:	4291      	cmp	r1, r2
    gcom_.status_code = status_code;
 8029cea:	bf08      	it	eq
 8029cec:	8558      	strheq	r0, [r3, #42]	@ 0x2a
}
 8029cee:	4770      	bx	lr
 8029cf0:	20042484 	.word	0x20042484

08029cf4 <gComGetStatusCode>:
}
 8029cf4:	4b01      	ldr	r3, [pc, #4]	@ (8029cfc <gComGetStatusCode+0x8>)
 8029cf6:	8d58      	ldrh	r0, [r3, #42]	@ 0x2a
 8029cf8:	4770      	bx	lr
 8029cfa:	bf00      	nop
 8029cfc:	20042484 	.word	0x20042484

08029d00 <gComRxEnable>:
 *         If an error occurs during the setup, the communication state is set to an error state.
 *         The function returns true if the reception is successfully enabled, and false if
 *         an error occurs during the process.
 */
bool gComRxEnable(void)
{
 8029d00:	b570      	push	{r4, r5, r6, lr}
  {
    gcom_.error = GCOM_ERR_NONE;
    gcom_.instance.rx_len = 0;
    gcom_.instance.tx_done = 0;
    gcom_.instance.tx_len = 0;
    __HAL_UART_CLEAR_FLAG(&GCOM_USART, 0xFFFFFFFF);
 8029d02:	f04f 32ff 	mov.w	r2, #4294967295
    gcom_.error = GCOM_ERR_NONE;
 8029d06:	2400      	movs	r4, #0
    __HAL_UART_CLEAR_FLAG(&GCOM_USART, 0xFFFFFFFF);
 8029d08:	4e0f      	ldr	r6, [pc, #60]	@ (8029d48 <gComRxEnable+0x48>)
    gcom_.error = GCOM_ERR_NONE;
 8029d0a:	4d10      	ldr	r5, [pc, #64]	@ (8029d4c <gComRxEnable+0x4c>)
    __HAL_UART_CLEAR_FLAG(&GCOM_USART, 0xFFFFFFFF);
 8029d0c:	6833      	ldr	r3, [r6, #0]
    gcom_.instance.tx_len = 0;
 8029d0e:	e9c5 4404 	strd	r4, r4, [r5, #16]
    gcom_.error = GCOM_ERR_NONE;
 8029d12:	846c      	strh	r4, [r5, #34]	@ 0x22
    gcom_.instance.rx_len = 0;
 8029d14:	60ec      	str	r4, [r5, #12]
    if (HAL_UARTEx_ReceiveToIdle_DMA(&GCOM_USART, gcom_.instance.rx, GCOM_BUFFER_SIZE) != HAL_OK)
 8029d16:	4630      	mov	r0, r6
    __HAL_UART_CLEAR_FLAG(&GCOM_USART, 0xFFFFFFFF);
 8029d18:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(&GCOM_USART, gcom_.instance.rx, GCOM_BUFFER_SIZE) != HAL_OK)
 8029d1a:	f5a5 5100 	sub.w	r1, r5, #8192	@ 0x2000
 8029d1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8029d22:	f7ff faeb 	bl	80292fc <HAL_UARTEx_ReceiveToIdle_DMA>
 8029d26:	4603      	mov	r3, r0
 8029d28:	b950      	cbnz	r0, 8029d40 <gComRxEnable+0x40>
    {
      gcom_.state = GCOM_STATE_ERROR;
      break;
    }
    __HAL_DMA_DISABLE_IT(GCOM_USART.hdmarx, DMA_IT_HT);
 8029d2a:	2001      	movs	r0, #1
 8029d2c:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 8029d30:	6811      	ldr	r1, [r2, #0]
 8029d32:	694a      	ldr	r2, [r1, #20]
 8029d34:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8029d38:	614a      	str	r2, [r1, #20]
      gcom_.state = GCOM_STATE_ERROR;
 8029d3a:	f885 3020 	strb.w	r3, [r5, #32]
    answer = true;

  } while (0);

  return answer;
}
 8029d3e:	bd70      	pop	{r4, r5, r6, pc}
 8029d40:	2304      	movs	r3, #4
  bool answer = false;
 8029d42:	4620      	mov	r0, r4
 8029d44:	e7f9      	b.n	8029d3a <gComRxEnable+0x3a>
 8029d46:	bf00      	nop
 8029d48:	2000035c 	.word	0x2000035c
 8029d4c:	20042484 	.word	0x20042484

08029d50 <gComInit>:
{
 8029d50:	b510      	push	{r4, lr}
  memset(&gcom_, 0, sizeof(GComHandle));
 8029d52:	f242 024c 	movw	r2, #8268	@ 0x204c
 8029d56:	2100      	movs	r1, #0
 8029d58:	4822      	ldr	r0, [pc, #136]	@ (8029de4 <gComInit+0x94>)
 8029d5a:	f001 fc6d 	bl	802b638 <memset>
  MX_CRC_Init();
 8029d5e:	f7f7 fb7f 	bl	8021460 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8029d62:	f7f7 ff01 	bl	8021b68 <MX_USART1_UART_Init>
  gcom_.id = id;
 8029d66:	23f0      	movs	r3, #240	@ 0xf0
 8029d68:	4c1f      	ldr	r4, [pc, #124]	@ (8029de8 <gComInit+0x98>)
 8029d6a:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
  gcom_.status_code = GCOM_STATUS_CODE_NO_ERROR;
 8029d6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8029d72:	8563      	strh	r3, [r4, #42]	@ 0x2a
  gcom_.instance.sync_time = HAL_GetTick();
 8029d74:	f7f8 f8a4 	bl	8021ec0 <HAL_GetTick>
 8029d78:	61e0      	str	r0, [r4, #28]
  if (!gInfoReadIv(gcom_.iv))
 8029d7a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8029d7e:	f000 ff3b 	bl	802abf8 <gInfoReadIv>
 8029d82:	b908      	cbnz	r0, 8029d88 <gComInit+0x38>
  	gCoreHalt();
 8029d84:	f000 fe18 	bl	802a9b8 <gCoreHalt>
  if (!gInfoReadIv(gcom_.iv_tmp))
 8029d88:	4818      	ldr	r0, [pc, #96]	@ (8029dec <gComInit+0x9c>)
 8029d8a:	f000 ff35 	bl	802abf8 <gInfoReadIv>
 8029d8e:	b908      	cbnz	r0, 8029d94 <gComInit+0x44>
		gCoreHalt();
 8029d90:	f000 fe12 	bl	802a9b8 <gCoreHalt>
  if (HAL_CRCEx_Polynomial_Set(&hcrc, 0x1021, CRC_POLYLENGTH_16B) != HAL_OK)
 8029d94:	2208      	movs	r2, #8
 8029d96:	f241 0121 	movw	r1, #4129	@ 0x1021
 8029d9a:	4815      	ldr	r0, [pc, #84]	@ (8029df0 <gComInit+0xa0>)
 8029d9c:	f7f8 ff34 	bl	8022c08 <HAL_CRCEx_Polynomial_Set>
 8029da0:	b108      	cbz	r0, 8029da6 <gComInit+0x56>
    gCoreHalt();
 8029da2:	f000 fe09 	bl	802a9b8 <gCoreHalt>
  if (HAL_UART_RegisterRxEventCallback(&GCOM_USART, gComRxEventCallback) != HAL_OK)
 8029da6:	4913      	ldr	r1, [pc, #76]	@ (8029df4 <gComInit+0xa4>)
 8029da8:	4813      	ldr	r0, [pc, #76]	@ (8029df8 <gComInit+0xa8>)
 8029daa:	f7fe fcc1 	bl	8028730 <HAL_UART_RegisterRxEventCallback>
 8029dae:	b108      	cbz	r0, 8029db4 <gComInit+0x64>
    gCoreHalt();
 8029db0:	f000 fe02 	bl	802a9b8 <gCoreHalt>
  if (HAL_UART_RegisterCallback(&GCOM_USART, HAL_UART_TX_COMPLETE_CB_ID, gComTxDoneCallback)
 8029db4:	2101      	movs	r1, #1
 8029db6:	4a11      	ldr	r2, [pc, #68]	@ (8029dfc <gComInit+0xac>)
 8029db8:	480f      	ldr	r0, [pc, #60]	@ (8029df8 <gComInit+0xa8>)
 8029dba:	f7fe fc03 	bl	80285c4 <HAL_UART_RegisterCallback>
 8029dbe:	b108      	cbz	r0, 8029dc4 <gComInit+0x74>
    gCoreHalt();
 8029dc0:	f000 fdfa 	bl	802a9b8 <gCoreHalt>
  if (HAL_UART_RegisterCallback(&GCOM_USART, HAL_UART_ERROR_CB_ID, gComErrorCallback) != HAL_OK)
 8029dc4:	2104      	movs	r1, #4
 8029dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8029e00 <gComInit+0xb0>)
 8029dc8:	480b      	ldr	r0, [pc, #44]	@ (8029df8 <gComInit+0xa8>)
 8029dca:	f7fe fbfb 	bl	80285c4 <HAL_UART_RegisterCallback>
 8029dce:	b108      	cbz	r0, 8029dd4 <gComInit+0x84>
    gCoreHalt();
 8029dd0:	f000 fdf2 	bl	802a9b8 <gCoreHalt>
  if (gComRxEnable() == false)
 8029dd4:	f7ff ff94 	bl	8029d00 <gComRxEnable>
 8029dd8:	b918      	cbnz	r0, 8029de2 <gComInit+0x92>
}
 8029dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gCoreHalt();
 8029dde:	f000 bdeb 	b.w	802a9b8 <gCoreHalt>
}
 8029de2:	bd10      	pop	{r4, pc}
 8029de4:	20040484 	.word	0x20040484
 8029de8:	20042484 	.word	0x20042484
 8029dec:	200424c0 	.word	0x200424c0
 8029df0:	20000110 	.word	0x20000110
 8029df4:	08029b7d 	.word	0x08029b7d
 8029df8:	2000035c 	.word	0x2000035c
 8029dfc:	08029b89 	.word	0x08029b89
 8029e00:	08029e05 	.word	0x08029e05

08029e04 <gComErrorCallback>:
  gComRxEnable();
 8029e04:	f7ff bf7c 	b.w	8029d00 <gComRxEnable>

08029e08 <gComRespSend>:
 *         broadcast, no data is sent; the function sets the communication state to IDLE
 *         and enables UART reception mode.
 *         The function returns true if the response is initiated successfully.
 */
bool gComRespSend(void)
{
 8029e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool answer = false;
  do
  {
    if (gcom_.is_broadcast == 0)
 8029e0a:	4d1a      	ldr	r5, [pc, #104]	@ (8029e74 <gComRespSend+0x6c>)
 8029e0c:	f895 4025 	ldrb.w	r4, [r5, #37]	@ 0x25
 8029e10:	bb54      	cbnz	r4, 8029e68 <gComRespSend+0x60>
    {
#if ((defined DEBUG) && (GCOM_DEBUG == 1))
			dprintf("gCom TX [ ");
 8029e12:	4819      	ldr	r0, [pc, #100]	@ (8029e78 <gComRespSend+0x70>)
 8029e14:	f001 fa7e 	bl	802b314 <iprintf>
			for (int i = 0; i < gcom_.instance.tx_len; i++)
 8029e18:	4e18      	ldr	r6, [pc, #96]	@ (8029e7c <gComRespSend+0x74>)
			{
				dprintf("%02X ", gcom_.instance.tx[i]);
 8029e1a:	4f19      	ldr	r7, [pc, #100]	@ (8029e80 <gComRespSend+0x78>)
			for (int i = 0; i < gcom_.instance.tx_len; i++)
 8029e1c:	692b      	ldr	r3, [r5, #16]
 8029e1e:	42a3      	cmp	r3, r4
 8029e20:	d81b      	bhi.n	8029e5a <gComRespSend+0x52>
			}
			dprintf("]\r\n\r\n");
 8029e22:	4818      	ldr	r0, [pc, #96]	@ (8029e84 <gComRespSend+0x7c>)
 8029e24:	f001 fade 	bl	802b3e4 <puts>
#endif
      gcom_.instance.tx_time = HAL_GetTick();
 8029e28:	f7f8 f84a 	bl	8021ec0 <HAL_GetTick>
      __HAL_UART_CLEAR_FLAG(&GCOM_USART, 0xFFFFFFFF);
 8029e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8029e30:	4c15      	ldr	r4, [pc, #84]	@ (8029e88 <gComRespSend+0x80>)
      gcom_.instance.tx_time = HAL_GetTick();
 8029e32:	61a8      	str	r0, [r5, #24]
      __HAL_UART_CLEAR_FLAG(&GCOM_USART, 0xFFFFFFFF);
 8029e34:	6823      	ldr	r3, [r4, #0]
      if (HAL_UART_Transmit_DMA(&GCOM_USART, gcom_.instance.tx, gcom_.instance.tx_len) != HAL_OK)
 8029e36:	4620      	mov	r0, r4
      __HAL_UART_CLEAR_FLAG(&GCOM_USART, 0xFFFFFFFF);
 8029e38:	621a      	str	r2, [r3, #32]
      if (HAL_UART_Transmit_DMA(&GCOM_USART, gcom_.instance.tx, gcom_.instance.tx_len) != HAL_OK)
 8029e3a:	4914      	ldr	r1, [pc, #80]	@ (8029e8c <gComRespSend+0x84>)
 8029e3c:	8a2a      	ldrh	r2, [r5, #16]
 8029e3e:	f7fe fc9d 	bl	802877c <HAL_UART_Transmit_DMA>
 8029e42:	b9a0      	cbnz	r0, 8029e6e <gComRespSend+0x66>
      {
        break;
      }
      __HAL_DMA_DISABLE_IT(GCOM_USART.hdmatx, DMA_IT_HT);
 8029e44:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8029e46:	681a      	ldr	r2, [r3, #0]
 8029e48:	6953      	ldr	r3, [r2, #20]
 8029e4a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8029e4e:	6153      	str	r3, [r2, #20]
      gcom_.state = GCOM_STATE_SENDING;
 8029e50:	2303      	movs	r3, #3
 8029e52:	f885 3020 	strb.w	r3, [r5, #32]
    }
    else
    {
      gComRxEnable();
    }
    answer = true;
 8029e56:	2001      	movs	r0, #1

  } while (0);

  return answer;
}
 8029e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				dprintf("%02X ", gcom_.instance.tx[i]);
 8029e5a:	4638      	mov	r0, r7
 8029e5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8029e60:	f001 fa58 	bl	802b314 <iprintf>
			for (int i = 0; i < gcom_.instance.tx_len; i++)
 8029e64:	3401      	adds	r4, #1
 8029e66:	e7d9      	b.n	8029e1c <gComRespSend+0x14>
      gComRxEnable();
 8029e68:	f7ff ff4a 	bl	8029d00 <gComRxEnable>
 8029e6c:	e7f3      	b.n	8029e56 <gComRespSend+0x4e>
  bool answer = false;
 8029e6e:	2000      	movs	r0, #0
 8029e70:	e7f2      	b.n	8029e58 <gComRespSend+0x50>
 8029e72:	bf00      	nop
 8029e74:	20042484 	.word	0x20042484
 8029e78:	0802c4ac 	.word	0x0802c4ac
 8029e7c:	20040c83 	.word	0x20040c83
 8029e80:	0802c4b7 	.word	0x0802c4b7
 8029e84:	0802c4bd 	.word	0x0802c4bd
 8029e88:	2000035c 	.word	0x2000035c
 8029e8c:	20040c84 	.word	0x20040c84

08029e90 <gComStateIdle>:
 *         `NVIC_SystemReset()`. Additionally, if the synchronization timeout is exceeded,
 *         it resets the synchronization time and calls the synchronization timeout callback
 *         function. This allows for proper handling of timeouts in the communication state.
 */
void gComStateIdle(void)
{
 8029e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (gcom_.instance.rx_len > 0)
 8029e92:	4c20      	ldr	r4, [pc, #128]	@ (8029f14 <gComStateIdle+0x84>)
 8029e94:	68e3      	ldr	r3, [r4, #12]
 8029e96:	b17b      	cbz	r3, 8029eb8 <gComStateIdle+0x28>
  {
#if ((defined DEBUG) && (GCOM_DEBUG == 1))
  	dprintf("gCom RX [ ");
 8029e98:	481f      	ldr	r0, [pc, #124]	@ (8029f18 <gComStateIdle+0x88>)
 8029e9a:	f001 fa3b 	bl	802b314 <iprintf>
  	for (int i = 0; i < gcom_.instance.rx_len; i++)
 8029e9e:	2500      	movs	r5, #0
  	{
  		dprintf("%02X ", gcom_.instance.rx[i]);
 8029ea0:	4f1e      	ldr	r7, [pc, #120]	@ (8029f1c <gComStateIdle+0x8c>)
 8029ea2:	f5a4 5600 	sub.w	r6, r4, #8192	@ 0x2000
  	for (int i = 0; i < gcom_.instance.rx_len; i++)
 8029ea6:	68e3      	ldr	r3, [r4, #12]
 8029ea8:	42ab      	cmp	r3, r5
 8029eaa:	d816      	bhi.n	8029eda <gComStateIdle+0x4a>
  	}
		dprintf("]\r\n");
 8029eac:	481c      	ldr	r0, [pc, #112]	@ (8029f20 <gComStateIdle+0x90>)
 8029eae:	f001 fa99 	bl	802b3e4 <puts>
#endif
    gcom_.state = GCOM_STATE_GOT_DATA;
 8029eb2:	2301      	movs	r3, #1
 8029eb4:	f884 3020 	strb.w	r3, [r4, #32]
  }
  if (gcom_.restart_req == 1)
 8029eb8:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8029ebc:	2b01      	cmp	r3, #1
 8029ebe:	d113      	bne.n	8029ee8 <gComStateIdle+0x58>
  __ASM volatile ("dsb 0xF":::"memory");
 8029ec0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8029ec4:	4917      	ldr	r1, [pc, #92]	@ (8029f24 <gComStateIdle+0x94>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8029ec6:	4b18      	ldr	r3, [pc, #96]	@ (8029f28 <gComStateIdle+0x98>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8029ec8:	68ca      	ldr	r2, [r1, #12]
 8029eca:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8029ece:	4313      	orrs	r3, r2
 8029ed0:	60cb      	str	r3, [r1, #12]
 8029ed2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8029ed6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8029ed8:	e7fd      	b.n	8029ed6 <gComStateIdle+0x46>
  		dprintf("%02X ", gcom_.instance.rx[i]);
 8029eda:	4638      	mov	r0, r7
 8029edc:	f816 1b01 	ldrb.w	r1, [r6], #1
 8029ee0:	f001 fa18 	bl	802b314 <iprintf>
  	for (int i = 0; i < gcom_.instance.rx_len; i++)
 8029ee4:	3501      	adds	r5, #1
 8029ee6:	e7de      	b.n	8029ea6 <gComStateIdle+0x16>
  {
    NVIC_SystemReset();
  }
  if (gcom_.sync_timeout_called == 0)
 8029ee8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8029eec:	b983      	cbnz	r3, 8029f10 <gComStateIdle+0x80>
  {
    if (HAL_GetTick() - gcom_.instance.sync_time >= GCOM_SYNC_TIMEOUT)
 8029eee:	f7f7 ffe7 	bl	8021ec0 <HAL_GetTick>
 8029ef2:	69e3      	ldr	r3, [r4, #28]
 8029ef4:	1ac0      	subs	r0, r0, r3
 8029ef6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8029efa:	d309      	bcc.n	8029f10 <gComStateIdle+0x80>
    {
      gcom_.instance.sync_time = HAL_GetTick();
 8029efc:	f7f7 ffe0 	bl	8021ec0 <HAL_GetTick>
      gcom_.sync_timeout_called = 1;
 8029f00:	2301      	movs	r3, #1
 8029f02:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
      gcom_.instance.sync_time = HAL_GetTick();
 8029f06:	61e0      	str	r0, [r4, #28]
      gComCallbackSyncTimeout();
    }
  }
}
 8029f08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      gComCallbackSyncTimeout();
 8029f0c:	f000 b9e7 	b.w	802a2de <gComCallbackSyncTimeout>
}
 8029f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029f12:	bf00      	nop
 8029f14:	20042484 	.word	0x20042484
 8029f18:	0802c4c2 	.word	0x0802c4c2
 8029f1c:	0802c4b7 	.word	0x0802c4b7
 8029f20:	0802c4cd 	.word	0x0802c4cd
 8029f24:	e000ed00 	.word	0xe000ed00
 8029f28:	05fa0004 	.word	0x05fa0004

08029f2c <gComStateGotData>:
 *         `GCOM_STATE_SENDING` to respond with an error. If the data is valid, it sets the
 *         communication state to `GCOM_STATE_SEMANTIC_CHECK`. It also determines whether the
 *         received message is a broadcast or not and enables RX mode if transitioning to idle.
 */
void gComStateGotData(void)
{
 8029f2c:	b570      	push	{r4, r5, r6, lr}
  GComState next_state = GCOM_STATE_IDLE;
  do
  {
    uint16_t crc = 0;
    if (gcom_.instance.rx_len < GCOM_REQ_MIN_LENGTH)
 8029f2e:	4d29      	ldr	r5, [pc, #164]	@ (8029fd4 <gComStateGotData+0xa8>)
 8029f30:	f505 5400 	add.w	r4, r5, #8192	@ 0x2000
 8029f34:	68e3      	ldr	r3, [r4, #12]
 8029f36:	2b06      	cmp	r3, #6
 8029f38:	d93b      	bls.n	8029fb2 <gComStateGotData+0x86>
    {
      break;
    }
    if (!((gcom_.instance.rx[0] == gcom_.id) || (gcom_.instance.rx[0] == GCOM_SOF_BROADCAST)))
 8029f3a:	782a      	ldrb	r2, [r5, #0]
 8029f3c:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
 8029f40:	4291      	cmp	r1, r2
 8029f42:	d001      	beq.n	8029f48 <gComStateGotData+0x1c>
 8029f44:	2aef      	cmp	r2, #239	@ 0xef
 8029f46:	d134      	bne.n	8029fb2 <gComStateGotData+0x86>
    {
      break;
    }
    if (gcom_.instance.rx[gcom_.instance.rx_len - 1] != GCOM_EOF)
 8029f48:	18ea      	adds	r2, r5, r3
 8029f4a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8029f4e:	2af1      	cmp	r2, #241	@ 0xf1
 8029f50:	d133      	bne.n	8029fba <gComStateGotData+0x8e>
    {
      gcom_.error = GCOM_ERR_EOF;
      next_state = GCOM_STATE_SENDING;
      break;
    }
    if ((((uint16_t)gcom_.instance.rx[1] * 256) + (uint16_t)gcom_.instance.rx[2]) != gcom_.instance.rx_len - 3)
 8029f52:	7869      	ldrb	r1, [r5, #1]
 8029f54:	78aa      	ldrb	r2, [r5, #2]
 8029f56:	3b03      	subs	r3, #3
 8029f58:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8029f5c:	429a      	cmp	r2, r3
 8029f5e:	d12c      	bne.n	8029fba <gComStateGotData+0x8e>
    {
      gcom_.error = GCOM_ERR_EOF;                                   // it does not exist correct error in list
      next_state = GCOM_STATE_SENDING;
      break;
    }
    __HAL_CRC_DR_RESET(&hcrc);
 8029f60:	4e1d      	ldr	r6, [pc, #116]	@ (8029fd8 <gComStateGotData+0xac>)
    if (HAL_CRCEx_Polynomial_Set(&hcrc, 0x1021, CRC_POLYLENGTH_16B) != HAL_OK)
 8029f62:	f241 0121 	movw	r1, #4129	@ 0x1021
    __HAL_CRC_DR_RESET(&hcrc);
 8029f66:	6832      	ldr	r2, [r6, #0]
    if (HAL_CRCEx_Polynomial_Set(&hcrc, 0x1021, CRC_POLYLENGTH_16B) != HAL_OK)
 8029f68:	4630      	mov	r0, r6
    __HAL_CRC_DR_RESET(&hcrc);
 8029f6a:	6893      	ldr	r3, [r2, #8]
 8029f6c:	f043 0301 	orr.w	r3, r3, #1
 8029f70:	6093      	str	r3, [r2, #8]
    if (HAL_CRCEx_Polynomial_Set(&hcrc, 0x1021, CRC_POLYLENGTH_16B) != HAL_OK)
 8029f72:	2208      	movs	r2, #8
 8029f74:	f7f8 fe48 	bl	8022c08 <HAL_CRCEx_Polynomial_Set>
 8029f78:	b9d8      	cbnz	r0, 8029fb2 <gComStateGotData+0x86>
    {
      break;
    }
    crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)&gcom_.instance.rx[1], gcom_.instance.rx_len - 4);
 8029f7a:	68e2      	ldr	r2, [r4, #12]
 8029f7c:	4630      	mov	r0, r6
 8029f7e:	3a04      	subs	r2, #4
 8029f80:	4916      	ldr	r1, [pc, #88]	@ (8029fdc <gComStateGotData+0xb0>)
 8029f82:	f7f8 fe1d 	bl	8022bc0 <HAL_CRC_Calculate>
    if (crc != (gcom_.instance.rx[gcom_.instance.rx_len - 3] << 8 | gcom_.instance.rx[gcom_.instance.rx_len - 2]))
 8029f86:	68e3      	ldr	r3, [r4, #12]
 8029f88:	b280      	uxth	r0, r0
 8029f8a:	442b      	add	r3, r5
 8029f8c:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8029f90:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8029f94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8029f98:	4298      	cmp	r0, r3
 8029f9a:	d118      	bne.n	8029fce <gComStateGotData+0xa2>
    {
      gcom_.error = GCOM_ERR_CRC;
      next_state = GCOM_STATE_SENDING;
      break;
    }
    if (gcom_.instance.rx[0] == GCOM_SOF_BROADCAST)
 8029f9c:	782b      	ldrb	r3, [r5, #0]
 8029f9e:	f1a3 02ef 	sub.w	r2, r3, #239	@ 0xef
 8029fa2:	4253      	negs	r3, r2
 8029fa4:	4153      	adcs	r3, r2
 8029fa6:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
    gComRespMake(gcom_.error, NULL, 0);
    gComRespSend();
  }
  else if (next_state == GCOM_STATE_SEMANTIC_CHECK)
  {
    gcom_.state = GCOM_STATE_SEMANTIC_CHECK;
 8029faa:	2302      	movs	r3, #2
 8029fac:	f884 3020 	strb.w	r3, [r4, #32]
  }
}
 8029fb0:	bd70      	pop	{r4, r5, r6, pc}
 8029fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    gComRxEnable();
 8029fb6:	f7ff bea3 	b.w	8029d00 <gComRxEnable>
 8029fba:	2004      	movs	r0, #4
    gComRespMake(gcom_.error, NULL, 0);
 8029fbc:	2200      	movs	r2, #0
 8029fbe:	4611      	mov	r1, r2
      gcom_.error = GCOM_ERR_EOF;
 8029fc0:	8460      	strh	r0, [r4, #34]	@ 0x22
    gComRespMake(gcom_.error, NULL, 0);
 8029fc2:	f7ff fe03 	bl	8029bcc <gComRespMake>
}
 8029fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    gComRespSend();
 8029fca:	f7ff bf1d 	b.w	8029e08 <gComRespSend>
 8029fce:	2003      	movs	r0, #3
 8029fd0:	e7f4      	b.n	8029fbc <gComStateGotData+0x90>
 8029fd2:	bf00      	nop
 8029fd4:	20040484 	.word	0x20040484
 8029fd8:	20000110 	.word	0x20000110
 8029fdc:	20040485 	.word	0x20040485

08029fe0 <gComStateSemanticCheck>:
 *         - If no valid response is generated during the command execution, it prepares a
 *           semantic error response.
 *         - The sync time is updated if a valid response is generated.
 */
void gComStateSemanticCheck()
{
 8029fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
  do
  {
#if GCOM_ENC_DEC == 1
    bool skip_check_counter = false;
    cmox_cipher_retval_t cipher_result;
    if ((gcom_.instance.rx[GCOM_REQ_CMD_OFFSET] == GCOM_CMD_SET_IV) ||
 8029fe2:	4e38      	ldr	r6, [pc, #224]	@ (802a0c4 <gComStateSemanticCheck+0xe4>)
{
 8029fe4:	b087      	sub	sp, #28
    		(gcom_.instance.rx[GCOM_REQ_CMD_OFFSET] == GCOM_CMD_OPEN_PORT) ||
 8029fe6:	78f3      	ldrb	r3, [r6, #3]
 8029fe8:	f506 5400 	add.w	r4, r6, #8192	@ 0x2000
    if ((gcom_.instance.rx[GCOM_REQ_CMD_OFFSET] == GCOM_CMD_SET_IV) ||
 8029fec:	3b2d      	subs	r3, #45	@ 0x2d
 8029fee:	2b02      	cmp	r3, #2
 8029ff0:	d842      	bhi.n	802a078 <gComStateSemanticCheck+0x98>
				(gcom_.instance.rx[GCOM_REQ_CMD_OFFSET] == GCOM_CMD_CLOSE_PORT))
    {
      skip_check_counter = true;
      gcom_.instance.crypto_counter = 1;
 8029ff2:	2301      	movs	r3, #1
 8029ff4:	60a3      	str	r3, [r4, #8]
      for (int i = 0; i < 16; i++)
      {
        gcom_.iv[i] = gcom_iv_[i];
 8029ff6:	4b34      	ldr	r3, [pc, #208]	@ (802a0c8 <gComStateSemanticCheck+0xe8>)
 8029ff8:	f104 052c 	add.w	r5, r4, #44	@ 0x2c
 8029ffc:	f103 0710 	add.w	r7, r3, #16
 802a000:	462a      	mov	r2, r5
 802a002:	6818      	ldr	r0, [r3, #0]
 802a004:	6859      	ldr	r1, [r3, #4]
 802a006:	3308      	adds	r3, #8
 802a008:	c203      	stmia	r2!, {r0, r1}
 802a00a:	42bb      	cmp	r3, r7
 802a00c:	4615      	mov	r5, r2
 802a00e:	d1f7      	bne.n	802a000 <gComStateSemanticCheck+0x20>
      skip_check_counter = true;
 802a010:	2501      	movs	r5, #1
    	for (int i = 0; i < 16; i++)
			{
				gcom_.iv[i] = gcom_.iv_tmp[i];
			}
    }
    cmox_initialize(NULL);
 802a012:	2000      	movs	r0, #0
 802a014:	f7f6 fa7e 	bl	8020514 <cmox_initialize>
    if (HAL_CRCEx_Polynomial_Set(&hcrc, 0x4c11db7, CRC_POLYLENGTH_32B) != HAL_OK)
 802a018:	2200      	movs	r2, #0
 802a01a:	492c      	ldr	r1, [pc, #176]	@ (802a0cc <gComStateSemanticCheck+0xec>)
 802a01c:	482c      	ldr	r0, [pc, #176]	@ (802a0d0 <gComStateSemanticCheck+0xf0>)
 802a01e:	f7f8 fdf3 	bl	8022c08 <HAL_CRCEx_Polynomial_Set>
 802a022:	2800      	cmp	r0, #0
 802a024:	d138      	bne.n	802a098 <gComStateSemanticCheck+0xb8>
    {
      break;
    }
    cipher_result = cmox_cipher_decrypt(CMOX_AES_CTR_DEC_ALGO,
 802a026:	2310      	movs	r3, #16
            &gcom_.instance.rx[GCOM_REQ_DATA_OFFSET],
            gcom_.instance.rx_len - GCOM_REQ_MIN_LENGTH,
 802a028:	68e2      	ldr	r2, [r4, #12]
    cipher_result = cmox_cipher_decrypt(CMOX_AES_CTR_DEC_ALGO,
 802a02a:	9302      	str	r3, [sp, #8]
 802a02c:	4b29      	ldr	r3, [pc, #164]	@ (802a0d4 <gComStateSemanticCheck+0xf4>)
 802a02e:	4f2a      	ldr	r7, [pc, #168]	@ (802a0d8 <gComStateSemanticCheck+0xf8>)
 802a030:	9301      	str	r3, [sp, #4]
 802a032:	2320      	movs	r3, #32
 802a034:	4829      	ldr	r0, [pc, #164]	@ (802a0dc <gComStateSemanticCheck+0xfc>)
 802a036:	9300      	str	r3, [sp, #0]
 802a038:	6800      	ldr	r0, [r0, #0]
 802a03a:	4b29      	ldr	r3, [pc, #164]	@ (802a0e0 <gComStateSemanticCheck+0x100>)
 802a03c:	9404      	str	r4, [sp, #16]
 802a03e:	9703      	str	r7, [sp, #12]
 802a040:	3a07      	subs	r2, #7
 802a042:	f6a7 71fc 	subw	r1, r7, #4092	@ 0xffc
 802a046:	f7f6 f9e7 	bl	8020418 <cmox_cipher_decrypt>
            gcom_key_, sizeof(gcom_key_),
            gcom_.iv, sizeof(gcom_.iv),
            gcom_.instance.rx_decrypted,
            (size_t*)&gcom_.instance.rx_len_decrypted);

    if (cipher_result != CMOX_CIPHER_SUCCESS)
 802a04a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802a04e:	d123      	bne.n	802a098 <gComStateSemanticCheck+0xb8>
    {
      break;
    }
    if (!skip_check_counter)
 802a050:	b955      	cbnz	r5, 802a068 <gComStateSemanticCheck+0x88>
    {
      if ((((uint16_t)((gcom_.instance.rx_decrypted[0] << 8) | gcom_.instance.rx_decrypted[1]) - (uint16_t)gcom_.instance.crypto_counter) == 1) ||
 802a052:	8839      	ldrh	r1, [r7, #0]
 802a054:	8922      	ldrh	r2, [r4, #8]
 802a056:	ba4b      	rev16	r3, r1
 802a058:	b29b      	uxth	r3, r3
 802a05a:	1a9a      	subs	r2, r3, r2
 802a05c:	2a01      	cmp	r2, #1
 802a05e:	d002      	beq.n	802a066 <gComStateSemanticCheck+0x86>
 802a060:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 802a064:	d110      	bne.n	802a088 <gComStateSemanticCheck+0xa8>
    		 ((uint16_t)((gcom_.instance.rx_decrypted[0] << 8) | gcom_.instance.rx_decrypted[1]) == 1))
      {
        gcom_.instance.crypto_counter = (gcom_.instance.rx_decrypted[0] << 8) | gcom_.instance.rx_decrypted[1];
 802a066:	60a3      	str	r3, [r4, #8]
        }
        break;
      }
    }
#endif
    gComCallbackCmd(gcom_.instance.rx[GCOM_REQ_CMD_OFFSET], GCOM_DATA_PTR, GCOM_DATA_LEN);
 802a068:	6822      	ldr	r2, [r4, #0]
 802a06a:	491e      	ldr	r1, [pc, #120]	@ (802a0e4 <gComStateSemanticCheck+0x104>)
 802a06c:	3a02      	subs	r2, #2
 802a06e:	78f0      	ldrb	r0, [r6, #3]
 802a070:	b292      	uxth	r2, r2
 802a072:	f000 fb6f 	bl	802a754 <gComCallbackCmd>
 802a076:	e00f      	b.n	802a098 <gComStateSemanticCheck+0xb8>
				gcom_.iv[i] = gcom_.iv_tmp[i];
 802a078:	4d16      	ldr	r5, [pc, #88]	@ (802a0d4 <gComStateSemanticCheck+0xf4>)
 802a07a:	f105 0310 	add.w	r3, r5, #16
 802a07e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a080:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    bool skip_check_counter = false;
 802a084:	2500      	movs	r5, #0
 802a086:	e7c4      	b.n	802a012 <gComStateSemanticCheck+0x32>
        if (gComRespMake(GCOM_ERR_FRAME_MISSED, NULL, 0) == false)
 802a088:	462a      	mov	r2, r5
 802a08a:	4629      	mov	r1, r5
 802a08c:	200b      	movs	r0, #11
 802a08e:	f7ff fd9d 	bl	8029bcc <gComRespMake>
 802a092:	b908      	cbnz	r0, 802a098 <gComStateSemanticCheck+0xb8>
          gComRxEnable();
 802a094:	f7ff fe34 	bl	8029d00 <gComRxEnable>

  } while (0);

  if (gcom_.instance.tx_len == 0)
 802a098:	6922      	ldr	r2, [r4, #16]
 802a09a:	b95a      	cbnz	r2, 802a0b4 <gComStateSemanticCheck+0xd4>
  {
    if (gComRespMake(GCOM_ERR_SEMANTIC, NULL, 0) == false)
 802a09c:	4611      	mov	r1, r2
 802a09e:	2005      	movs	r0, #5
 802a0a0:	f7ff fd94 	bl	8029bcc <gComRespMake>
 802a0a4:	b908      	cbnz	r0, 802a0aa <gComStateSemanticCheck+0xca>
    {
      gComRxEnable();
 802a0a6:	f7ff fe2b 	bl	8029d00 <gComRxEnable>
  {
    gcom_.instance.sync_time = HAL_GetTick();
    gcom_.sync_timeout_called = 0;
  }
  gComRespSend();
}
 802a0aa:	b007      	add	sp, #28
 802a0ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  gComRespSend();
 802a0b0:	f7ff beaa 	b.w	8029e08 <gComRespSend>
    gcom_.instance.sync_time = HAL_GetTick();
 802a0b4:	f7f7 ff04 	bl	8021ec0 <HAL_GetTick>
    gcom_.sync_timeout_called = 0;
 802a0b8:	2300      	movs	r3, #0
    gcom_.instance.sync_time = HAL_GetTick();
 802a0ba:	61e0      	str	r0, [r4, #28]
    gcom_.sync_timeout_called = 0;
 802a0bc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 802a0c0:	e7f3      	b.n	802a0aa <gComStateSemanticCheck+0xca>
 802a0c2:	bf00      	nop
 802a0c4:	20040484 	.word	0x20040484
 802a0c8:	0802c4d0 	.word	0x0802c4d0
 802a0cc:	04c11db7 	.word	0x04c11db7
 802a0d0:	20000110 	.word	0x20000110
 802a0d4:	200424b0 	.word	0x200424b0
 802a0d8:	20041484 	.word	0x20041484
 802a0dc:	0802c3e0 	.word	0x0802c3e0
 802a0e0:	0802c4e1 	.word	0x0802c4e1
 802a0e4:	20041486 	.word	0x20041486

0802a0e8 <gComStateSending>:
 *         occurred during the transmission. If the transmission is complete, it re-enables
 *         the reception of new data. If the transmission exceeds the predefined timeout,
 *         it aborts the transmission and also re-enables the reception of new data.
 */
void gComStateSending(void)
{
 802a0e8:	b510      	push	{r4, lr}
  if (gcom_.instance.tx_done)
 802a0ea:	4c09      	ldr	r4, [pc, #36]	@ (802a110 <gComStateSending+0x28>)
 802a0ec:	6963      	ldr	r3, [r4, #20]
 802a0ee:	b11b      	cbz	r3, 802a0f8 <gComStateSending+0x10>
  else if (HAL_GetTick() - gcom_.instance.tx_time >= GCOM_TX_TIMEOUT)
  {
    HAL_UART_AbortTransmit(&GCOM_USART);
    gComRxEnable();
  }
}
 802a0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gComRxEnable();
 802a0f4:	f7ff be04 	b.w	8029d00 <gComRxEnable>
  else if (HAL_GetTick() - gcom_.instance.tx_time >= GCOM_TX_TIMEOUT)
 802a0f8:	f7f7 fee2 	bl	8021ec0 <HAL_GetTick>
 802a0fc:	69a3      	ldr	r3, [r4, #24]
 802a0fe:	1ac0      	subs	r0, r0, r3
 802a100:	2831      	cmp	r0, #49	@ 0x31
 802a102:	d903      	bls.n	802a10c <gComStateSending+0x24>
    HAL_UART_AbortTransmit(&GCOM_USART);
 802a104:	4803      	ldr	r0, [pc, #12]	@ (802a114 <gComStateSending+0x2c>)
 802a106:	f7fe fbfb 	bl	8028900 <HAL_UART_AbortTransmit>
 802a10a:	e7f1      	b.n	802a0f0 <gComStateSending+0x8>
}
 802a10c:	bd10      	pop	{r4, pc}
 802a10e:	bf00      	nop
 802a110:	20042484 	.word	0x20042484
 802a114:	2000035c 	.word	0x2000035c

0802a118 <gComStateError>:
 *         de-initializes the current communication setup, re-initializes it to restore
 *         normal operation, and re-enables reception of new data. This allows the system
 *         to recover from errors and continue functioning.
 */
void gComStateError(void)
{
 802a118:	b508      	push	{r3, lr}
  gComDeInit();
 802a11a:	f7ff fd3b 	bl	8029b94 <gComDeInit>
  gComInit();
 802a11e:	f7ff fe17 	bl	8029d50 <gComInit>
  gComRxEnable();
}
 802a122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  gComRxEnable();
 802a126:	f7ff bdeb 	b.w	8029d00 <gComRxEnable>
	...

0802a12c <gComLoop>:
  switch (gcom_.state)
 802a12c:	4b0a      	ldr	r3, [pc, #40]	@ (802a158 <gComLoop+0x2c>)
 802a12e:	f893 3020 	ldrb.w	r3, [r3, #32]
 802a132:	2b04      	cmp	r3, #4
 802a134:	d80e      	bhi.n	802a154 <gComLoop+0x28>
 802a136:	e8df f003 	tbb	[pc, r3]
 802a13a:	0503      	.short	0x0503
 802a13c:	0907      	.short	0x0907
 802a13e:	0b          	.byte	0x0b
 802a13f:	00          	.byte	0x00
    gComStateIdle();
 802a140:	f7ff bea6 	b.w	8029e90 <gComStateIdle>
    gComStateGotData();
 802a144:	f7ff bef2 	b.w	8029f2c <gComStateGotData>
    gComStateSemanticCheck();
 802a148:	f7ff bf4a 	b.w	8029fe0 <gComStateSemanticCheck>
    gComStateSending();
 802a14c:	f7ff bfcc 	b.w	802a0e8 <gComStateSending>
    gComStateError();
 802a150:	f7ff bfe2 	b.w	802a118 <gComStateError>
}
 802a154:	4770      	bx	lr
 802a156:	bf00      	nop
 802a158:	20042484 	.word	0x20042484

0802a15c <cmox_ll_init>:
  (void)pArg;
  __HAL_RCC_CRC_RELEASE_RESET();
  __HAL_RCC_CRC_CLK_ENABLE();
  __HAL_CRC_DR_RESET(&hcrc);
  return CMOX_INIT_SUCCESS;
}
 802a15c:	2000      	movs	r0, #0
  __HAL_RCC_CRC_RELEASE_RESET();
 802a15e:	4b0d      	ldr	r3, [pc, #52]	@ (802a194 <cmox_ll_init+0x38>)
{
 802a160:	b082      	sub	sp, #8
  __HAL_RCC_CRC_RELEASE_RESET();
 802a162:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 802a164:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 802a168:	661a      	str	r2, [r3, #96]	@ 0x60
  __HAL_RCC_CRC_CLK_ENABLE();
 802a16a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 802a16e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 802a172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802a176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802a17a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 802a17e:	9301      	str	r3, [sp, #4]
 802a180:	9b01      	ldr	r3, [sp, #4]
  __HAL_CRC_DR_RESET(&hcrc);
 802a182:	4b05      	ldr	r3, [pc, #20]	@ (802a198 <cmox_ll_init+0x3c>)
 802a184:	681a      	ldr	r2, [r3, #0]
 802a186:	6893      	ldr	r3, [r2, #8]
 802a188:	f043 0301 	orr.w	r3, r3, #1
 802a18c:	6093      	str	r3, [r2, #8]
}
 802a18e:	b002      	add	sp, #8
 802a190:	4770      	bx	lr
 802a192:	bf00      	nop
 802a194:	44020c00 	.word	0x44020c00
 802a198:	20000110 	.word	0x20000110

0802a19c <gComCallbackGetFw.part.0>:
    {
      gComRespMake(GCOM_ERR_NONE, (uint8_t*) str, strlen(str));
    }
    else
    {
      gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a19c:	2200      	movs	r2, #0
 802a19e:	200a      	movs	r0, #10
 802a1a0:	4611      	mov	r1, r2
 802a1a2:	f7ff bd13 	b.w	8029bcc <gComRespMake>

0802a1a6 <gComCallbackGetTempThreshold.part.0>:
 * @brief
 * @param
 * @return
 * @note
 */
void gComCallbackGetTempThreshold(const uint8_t *data, uint16_t length)
 802a1a6:	b507      	push	{r0, r1, r2, lr}
{
  if (length == 0)
  {
    uint8_t tmp[2];
    tmp[0] = gTempGetAlarmDesiCelsius() >> 8;
 802a1a8:	f000 fe7c 	bl	802aea4 <gTempGetAlarmDesiCelsius>
 802a1ac:	1200      	asrs	r0, r0, #8
 802a1ae:	f88d 0004 	strb.w	r0, [sp, #4]
    tmp[1] = gTempGetAlarmDesiCelsius() & 0x00FF;
 802a1b2:	f000 fe77 	bl	802aea4 <gTempGetAlarmDesiCelsius>
    gComRespMake(GCOM_ERR_NONE, tmp, 2);
 802a1b6:	2202      	movs	r2, #2
    tmp[1] = gTempGetAlarmDesiCelsius() & 0x00FF;
 802a1b8:	f88d 0005 	strb.w	r0, [sp, #5]
    gComRespMake(GCOM_ERR_NONE, tmp, 2);
 802a1bc:	a901      	add	r1, sp, #4
 802a1be:	2000      	movs	r0, #0
 802a1c0:	f7ff fd04 	bl	8029bcc <gComRespMake>
  }
}
 802a1c4:	b003      	add	sp, #12
 802a1c6:	f85d fb04 	ldr.w	pc, [sp], #4

0802a1ca <gComCallbackSetIv.part.0>:
{
  if (length == 16)
  {
    if (gInfoWriteIv(data))
    {
      gComRespMake(GCOM_ERR_NONE, NULL, 0);
 802a1ca:	2200      	movs	r2, #0
 802a1cc:	4611      	mov	r1, r2
 802a1ce:	4610      	mov	r0, r2
 802a1d0:	f7ff bcfc 	b.w	8029bcc <gComRespMake>

0802a1d4 <gComCallbackVibGetTrigCfg.part.0>:

/**
 * ************************************************************************************************
 *
 */
void gComCallbackVibGetTrigCfg(const uint8_t *data, uint16_t length)
 802a1d4:	b507      	push	{r0, r1, r2, lr}
{
	if (length == 0)
	{
		uint16_t trig_len;
		uint8_t answer[3];
		gVibGetConstantTrig(&answer[0], &trig_len);
 802a1d6:	f10d 0102 	add.w	r1, sp, #2
 802a1da:	a801      	add	r0, sp, #4
 802a1dc:	f7ff f93e 	bl	802945c <gVibGetConstantTrig>
		answer[1] = trig_len >> 8;
 802a1e0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		answer[2] = trig_len & 0x00FF;
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a1e4:	a901      	add	r1, sp, #4
		answer[1] = trig_len >> 8;
 802a1e6:	0a1a      	lsrs	r2, r3, #8
 802a1e8:	f88d 2005 	strb.w	r2, [sp, #5]
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a1ec:	2000      	movs	r0, #0
 802a1ee:	2203      	movs	r2, #3
		answer[2] = trig_len & 0x00FF;
 802a1f0:	f88d 3006 	strb.w	r3, [sp, #6]
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a1f4:	f7ff fcea 	bl	8029bcc <gComRespMake>
	}
}
 802a1f8:	b003      	add	sp, #12
 802a1fa:	f85d fb04 	ldr.w	pc, [sp], #4

0802a1fe <gComCallbackVibGetMaxChCfg.part.0>:

/**
 * ************************************************************************************************
 *
 */
void gComCallbackVibGetMaxChCfg(const uint8_t *data, uint16_t length)
 802a1fe:	b507      	push	{r0, r1, r2, lr}
{
	if (length == 0)
	{
		uint8_t answer[1];
		answer[0] = gVibGetMaxCh();
 802a200:	f7ff f940 	bl	8029484 <gVibGetMaxCh>
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a204:	2201      	movs	r2, #1
		answer[0] = gVibGetMaxCh();
 802a206:	f88d 0004 	strb.w	r0, [sp, #4]
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a20a:	a901      	add	r1, sp, #4
 802a20c:	2000      	movs	r0, #0
 802a20e:	f7ff fcdd 	bl	8029bcc <gComRespMake>
	}
}
 802a212:	b003      	add	sp, #12
 802a214:	f85d fb04 	ldr.w	pc, [sp], #4

0802a218 <gComCallbackVibGetSeqLen.part.0>:

/**
 * ************************************************************************************************
 *
 */
void gComCallbackVibGetSeqLen(const uint8_t *data, uint16_t length)
 802a218:	b507      	push	{r0, r1, r2, lr}
{
	if (length == 0)
	{
		uint8_t answer[2];
		answer[0] = gVibGetSeqLen() >> 8;
 802a21a:	f7ff f945 	bl	80294a8 <gVibGetSeqLen>
 802a21e:	0a00      	lsrs	r0, r0, #8
 802a220:	f88d 0004 	strb.w	r0, [sp, #4]
		answer[1] = gVibGetSeqLen() & 0x00FF;
 802a224:	f7ff f940 	bl	80294a8 <gVibGetSeqLen>
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a228:	2202      	movs	r2, #2
		answer[1] = gVibGetSeqLen() & 0x00FF;
 802a22a:	f88d 0005 	strb.w	r0, [sp, #5]
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a22e:	a901      	add	r1, sp, #4
 802a230:	2000      	movs	r0, #0
 802a232:	f7ff fccb 	bl	8029bcc <gComRespMake>
	}
}
 802a236:	b003      	add	sp, #12
 802a238:	f85d fb04 	ldr.w	pc, [sp], #4

0802a23c <gComCallbackVibGetSettings.part.0>:

/**
 * ************************************************************************************************
 *
 */
void gComCallbackVibGetSettings(const uint8_t *data, uint16_t length)
 802a23c:	b510      	push	{r4, lr}
{
	if (length == 4)
	{
		uint16_t start_index = (data[0] >> 8) | data[1];
		uint16_t cnt = (data[2] >> 8) | data[3];
 802a23e:	78c4      	ldrb	r4, [r0, #3]
void gComCallbackVibGetSettings(const uint8_t *data, uint16_t length)
 802a240:	f5ad 6dff 	sub.w	sp, sp, #2040	@ 0x7f8
		GVibSettingsStruct settings[(GCOM_BUFFER_SIZE - 8) / sizeof(GVibSettingsStruct)];
		if (gVibGetSettings(start_index, cnt, settings) == true)
 802a244:	466a      	mov	r2, sp
 802a246:	4621      	mov	r1, r4
 802a248:	7840      	ldrb	r0, [r0, #1]
 802a24a:	f7ff f93b 	bl	80294c4 <gVibGetSettings>
 802a24e:	4602      	mov	r2, r0
 802a250:	b138      	cbz	r0, 802a262 <gComCallbackVibGetSettings.part.0+0x26>
		{
			gComRespMake(GCOM_ERR_NONE, (uint8_t*)settings, cnt * sizeof(GVibSettingsStruct));
 802a252:	4669      	mov	r1, sp
 802a254:	2000      	movs	r0, #0
 802a256:	00a2      	lsls	r2, r4, #2
		}
		else
		{
			gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a258:	f7ff fcb8 	bl	8029bcc <gComRespMake>
		}
	}
}
 802a25c:	f50d 6dff 	add.w	sp, sp, #2040	@ 0x7f8
 802a260:	bd10      	pop	{r4, pc}
			gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a262:	4601      	mov	r1, r0
 802a264:	f44f 5083 	mov.w	r0, #4192	@ 0x1060
 802a268:	e7f6      	b.n	802a258 <gComCallbackVibGetSettings.part.0+0x1c>

0802a26a <gComCallbackVibGetDc.part.0>:

/**
 * ************************************************************************************************
 *
 */
void gComCallbackVibGetDc(const uint8_t *data, uint16_t length)
 802a26a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		bool error = true;
		uint8_t answer[4];
		uint32_t voltage, current;
		do
		{
			if (mp8859GetVol(&voltage) == false)
 802a26c:	a802      	add	r0, sp, #8
 802a26e:	f7ff fbd5 	bl	8029a1c <mp8859GetVol>
 802a272:	b1b0      	cbz	r0, 802a2a2 <gComCallbackVibGetDc.part.0+0x38>
			{
				break;
			}
			if (mp8859GetCur(&current) == false)
 802a274:	a803      	add	r0, sp, #12
 802a276:	f7ff fbf0 	bl	8029a5a <mp8859GetCur>
 802a27a:	b190      	cbz	r0, 802a2a2 <gComCallbackVibGetDc.part.0+0x38>

		} while (0);

		if (!error)
		{
			gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a27c:	2204      	movs	r2, #4
 802a27e:	2000      	movs	r0, #0
			answer[0] = ((uint16_t)voltage >> 8);
 802a280:	f8bd 3008 	ldrh.w	r3, [sp, #8]
			gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a284:	eb0d 0102 	add.w	r1, sp, r2
			answer[0] = ((uint16_t)voltage >> 8);
 802a288:	ba5b      	rev16	r3, r3
 802a28a:	f8ad 3004 	strh.w	r3, [sp, #4]
			answer[2] = ((uint16_t)current >> 8);
 802a28e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802a292:	ba5b      	rev16	r3, r3
 802a294:	f8ad 3006 	strh.w	r3, [sp, #6]
		}
		else
		{
			gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a298:	f7ff fc98 	bl	8029bcc <gComRespMake>
		}
	}
}
 802a29c:	b005      	add	sp, #20
 802a29e:	f85d fb04 	ldr.w	pc, [sp], #4
			gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a2a2:	2200      	movs	r2, #0
 802a2a4:	f44f 5083 	mov.w	r0, #4192	@ 0x1060
 802a2a8:	4611      	mov	r1, r2
 802a2aa:	e7f5      	b.n	802a298 <gComCallbackVibGetDc.part.0+0x2e>

0802a2ac <gComCallbackVibGetLedDuration.part.0>:

/**
 * ************************************************************************************************
 *
 */
void gComCallbackVibGetLedDuration(const uint8_t *data, uint16_t length)
 802a2ac:	b507      	push	{r0, r1, r2, lr}
{
	if (length == 0)
	{
		uint16_t on_duration, off_duration;
		uint8_t answer[4];
		gVibGetLedDuration(&on_duration, &off_duration);
 802a2ae:	4668      	mov	r0, sp
 802a2b0:	f10d 0102 	add.w	r1, sp, #2
 802a2b4:	f7ff f97e 	bl	80295b4 <gVibGetLedDuration>
		answer[0] = on_duration >> 8;
		answer[1] = on_duration & 0x00FF;
		answer[2] = off_duration >> 8;
		answer[3] = off_duration & 0x00FF;
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a2b8:	2204      	movs	r2, #4
		answer[0] = on_duration >> 8;
 802a2ba:	f8bd 3000 	ldrh.w	r3, [sp]
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a2be:	eb0d 0102 	add.w	r1, sp, r2
		answer[0] = on_duration >> 8;
 802a2c2:	ba5b      	rev16	r3, r3
 802a2c4:	f8ad 3004 	strh.w	r3, [sp, #4]
		answer[2] = off_duration >> 8;
 802a2c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a2cc:	2000      	movs	r0, #0
		answer[2] = off_duration >> 8;
 802a2ce:	ba5b      	rev16	r3, r3
 802a2d0:	f8ad 3006 	strh.w	r3, [sp, #6]
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a2d4:	f7ff fc7a 	bl	8029bcc <gComRespMake>
	}
}
 802a2d8:	b003      	add	sp, #12
 802a2da:	f85d fb04 	ldr.w	pc, [sp], #4

0802a2de <gComCallbackSyncTimeout>:
{
 802a2de:	b508      	push	{r3, lr}
  gComSetStatusCode(GCOM_STATUS_CODE_NO_PING);
 802a2e0:	f241 0005 	movw	r0, #4101	@ 0x1005
 802a2e4:	f7ff fcfc 	bl	8029ce0 <gComSetStatusCode>
}
 802a2e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gVibSetState(GVIB_STATE_STOP);
 802a2ec:	2000      	movs	r0, #0
 802a2ee:	f7ff b9d5 	b.w	802969c <gVibSetState>
	...

0802a2f4 <gComCallbackSync>:
{
 802a2f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (length == 0)
 802a2f6:	460c      	mov	r4, r1
 802a2f8:	bba9      	cbnz	r1, 802a366 <gComCallbackSync+0x72>
		answer[0] = gComGetStatusCode() >> 8;
 802a2fa:	f7ff fcfb 	bl	8029cf4 <gComGetStatusCode>
 802a2fe:	0a00      	lsrs	r0, r0, #8
 802a300:	f88d 0004 	strb.w	r0, [sp, #4]
		answer[1] = gComGetStatusCode() & 0x00FF;
 802a304:	f7ff fcf6 	bl	8029cf4 <gComGetStatusCode>
 802a308:	f88d 0005 	strb.w	r0, [sp, #5]
		answer[2] = gVibGetState();
 802a30c:	f7ff f8a0 	bl	8029450 <gVibGetState>
 802a310:	f88d 0006 	strb.w	r0, [sp, #6]
		answer[3] = gTempGetDesiCelsius() >> 8;
 802a314:	f000 fdba 	bl	802ae8c <gTempGetDesiCelsius>
 802a318:	1200      	asrs	r0, r0, #8
 802a31a:	f88d 0007 	strb.w	r0, [sp, #7]
		answer[4] = gTempGetDesiCelsius() & 0x00FF;
 802a31e:	f000 fdb5 	bl	802ae8c <gTempGetDesiCelsius>
 802a322:	f88d 0008 	strb.w	r0, [sp, #8]
		answer[5] = gVibGetSeqIndex() >> 8;
 802a326:	f7ff f939 	bl	802959c <gVibGetSeqIndex>
 802a32a:	0a00      	lsrs	r0, r0, #8
 802a32c:	f88d 0009 	strb.w	r0, [sp, #9]
		answer[6] = gVibGetSeqIndex() & 0x00FF;
 802a330:	f7ff f934 	bl	802959c <gVibGetSeqIndex>
 802a334:	f88d 000a 	strb.w	r0, [sp, #10]
		answer[7] = gVibGetSettingsIndex() >> 8;
 802a338:	f7ff f936 	bl	80295a8 <gVibGetSettingsIndex>
 802a33c:	0a00      	lsrs	r0, r0, #8
 802a33e:	f88d 000b 	strb.w	r0, [sp, #11]
		answer[8] = gVibGetSettingsIndex() & 0x00FF;
 802a342:	f7ff f931 	bl	80295a8 <gVibGetSettingsIndex>
 802a346:	f88d 000c 	strb.w	r0, [sp, #12]
		answer[9] = gVibGetSettingsLen() >> 8;
 802a34a:	f7ff f945 	bl	80295d8 <gVibGetSettingsLen>
 802a34e:	0a00      	lsrs	r0, r0, #8
 802a350:	f88d 000d 	strb.w	r0, [sp, #13]
		answer[10] = gVibGetSettingsLen() & 0x00FF;
 802a354:	f7ff f940 	bl	80295d8 <gVibGetSettingsLen>
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a358:	220b      	movs	r2, #11
		answer[10] = gVibGetSettingsLen() & 0x00FF;
 802a35a:	f88d 000e 	strb.w	r0, [sp, #14]
		gComRespMake(GCOM_ERR_NONE, answer, sizeof(answer));
 802a35e:	a901      	add	r1, sp, #4
 802a360:	4620      	mov	r0, r4
 802a362:	f7ff fc33 	bl	8029bcc <gComRespMake>
  if (gComGetStatusCode() != GCOM_STATUS_CODE_NO_ERROR)
 802a366:	f7ff fcc5 	bl	8029cf4 <gComGetStatusCode>
 802a36a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802a36e:	4298      	cmp	r0, r3
    gcom_.status_code = GCOM_STATUS_CODE_NO_ERROR;
 802a370:	bf1c      	itt	ne
 802a372:	4a02      	ldrne	r2, [pc, #8]	@ (802a37c <gComCallbackSync+0x88>)
 802a374:	8553      	strhne	r3, [r2, #42]	@ 0x2a
}
 802a376:	b004      	add	sp, #16
 802a378:	bd10      	pop	{r4, pc}
 802a37a:	bf00      	nop
 802a37c:	20042484 	.word	0x20042484

0802a380 <gComCallbackGetHw>:
{
 802a380:	b510      	push	{r4, lr}
 802a382:	460c      	mov	r4, r1
 802a384:	b088      	sub	sp, #32
  memset(str, 0, 32);
 802a386:	2220      	movs	r2, #32
 802a388:	2100      	movs	r1, #0
 802a38a:	4668      	mov	r0, sp
 802a38c:	f001 f954 	bl	802b638 <memset>
  if (length == 0)
 802a390:	b95c      	cbnz	r4, 802a3aa <gComCallbackGetHw+0x2a>
    if (gInfoReadHw(str) == true)
 802a392:	4668      	mov	r0, sp
 802a394:	f000 fc0c 	bl	802abb0 <gInfoReadHw>
 802a398:	b148      	cbz	r0, 802a3ae <gComCallbackGetHw+0x2e>
      gComRespMake(GCOM_ERR_NONE, (uint8_t*) str, strlen(str));
 802a39a:	4668      	mov	r0, sp
 802a39c:	f7f6 fde7 	bl	8020f6e <strlen>
 802a3a0:	4669      	mov	r1, sp
 802a3a2:	b282      	uxth	r2, r0
 802a3a4:	4620      	mov	r0, r4
 802a3a6:	f7ff fc11 	bl	8029bcc <gComRespMake>
}
 802a3aa:	b008      	add	sp, #32
 802a3ac:	bd10      	pop	{r4, pc}
 802a3ae:	f7ff fef5 	bl	802a19c <gComCallbackGetFw.part.0>
 802a3b2:	e7fa      	b.n	802a3aa <gComCallbackGetHw+0x2a>

0802a3b4 <gComCallbackSetHw>:
{
 802a3b4:	b530      	push	{r4, r5, lr}
  if ((length < 32) && (length > 0))
 802a3b6:	1e4b      	subs	r3, r1, #1
 802a3b8:	2b1e      	cmp	r3, #30
{
 802a3ba:	4605      	mov	r5, r0
 802a3bc:	460c      	mov	r4, r1
 802a3be:	b089      	sub	sp, #36	@ 0x24
  if ((length < 32) && (length > 0))
 802a3c0:	d813      	bhi.n	802a3ea <gComCallbackSetHw+0x36>
    memset(tmp, 0, 32);
 802a3c2:	2220      	movs	r2, #32
 802a3c4:	2100      	movs	r1, #0
 802a3c6:	4668      	mov	r0, sp
 802a3c8:	f001 f936 	bl	802b638 <memset>
    memcpy(tmp, data, length);
 802a3cc:	4622      	mov	r2, r4
 802a3ce:	4629      	mov	r1, r5
 802a3d0:	4668      	mov	r0, sp
 802a3d2:	f001 f9db 	bl	802b78c <memcpy>
    if (gInfoWriteHw(tmp))
 802a3d6:	4668      	mov	r0, sp
 802a3d8:	f000 fce4 	bl	802ada4 <gInfoWriteHw>
 802a3dc:	4602      	mov	r2, r0
 802a3de:	b130      	cbz	r0, 802a3ee <gComCallbackSetHw+0x3a>
      gComRespMake(GCOM_ERR_NONE, NULL, 0);
 802a3e0:	2200      	movs	r2, #0
 802a3e2:	4611      	mov	r1, r2
 802a3e4:	4610      	mov	r0, r2
      gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a3e6:	f7ff fbf1 	bl	8029bcc <gComRespMake>
}
 802a3ea:	b009      	add	sp, #36	@ 0x24
 802a3ec:	bd30      	pop	{r4, r5, pc}
      gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a3ee:	4601      	mov	r1, r0
 802a3f0:	200a      	movs	r0, #10
 802a3f2:	e7f8      	b.n	802a3e6 <gComCallbackSetHw+0x32>

0802a3f4 <gComCallbackGetFw>:
{
 802a3f4:	b510      	push	{r4, lr}
 802a3f6:	460c      	mov	r4, r1
 802a3f8:	b088      	sub	sp, #32
  memset(str, 0, 32);
 802a3fa:	2220      	movs	r2, #32
 802a3fc:	2100      	movs	r1, #0
 802a3fe:	4668      	mov	r0, sp
 802a400:	f001 f91a 	bl	802b638 <memset>
  if (length == 0)
 802a404:	b95c      	cbnz	r4, 802a41e <gComCallbackGetFw+0x2a>
    if (gInfoReadFw(str) == true)
 802a406:	4668      	mov	r0, sp
 802a408:	f000 fb62 	bl	802aad0 <gInfoReadFw>
 802a40c:	b148      	cbz	r0, 802a422 <gComCallbackGetFw+0x2e>
      gComRespMake(GCOM_ERR_NONE, (uint8_t*) str, strlen(str));
 802a40e:	4668      	mov	r0, sp
 802a410:	f7f6 fdad 	bl	8020f6e <strlen>
 802a414:	4669      	mov	r1, sp
 802a416:	b282      	uxth	r2, r0
 802a418:	4620      	mov	r0, r4
 802a41a:	f7ff fbd7 	bl	8029bcc <gComRespMake>
}
 802a41e:	b008      	add	sp, #32
 802a420:	bd10      	pop	{r4, pc}
 802a422:	f7ff febb 	bl	802a19c <gComCallbackGetFw.part.0>
 802a426:	e7fa      	b.n	802a41e <gComCallbackGetFw+0x2a>

0802a428 <gComCallbackGetSn>:
{
 802a428:	b510      	push	{r4, lr}
 802a42a:	460c      	mov	r4, r1
 802a42c:	b088      	sub	sp, #32
  memset(str, 0, 32);
 802a42e:	2220      	movs	r2, #32
 802a430:	2100      	movs	r1, #0
 802a432:	4668      	mov	r0, sp
 802a434:	f001 f900 	bl	802b638 <memset>
  if (length == 0)
 802a438:	b95c      	cbnz	r4, 802a452 <gComCallbackGetSn+0x2a>
    if (gInfoReadSn(str) == true)
 802a43a:	4668      	mov	r0, sp
 802a43c:	f000 fbca 	bl	802abd4 <gInfoReadSn>
 802a440:	b148      	cbz	r0, 802a456 <gComCallbackGetSn+0x2e>
      gComRespMake(GCOM_ERR_NONE, (uint8_t*) str, strlen(str));
 802a442:	4668      	mov	r0, sp
 802a444:	f7f6 fd93 	bl	8020f6e <strlen>
 802a448:	4669      	mov	r1, sp
 802a44a:	b282      	uxth	r2, r0
 802a44c:	4620      	mov	r0, r4
 802a44e:	f7ff fbbd 	bl	8029bcc <gComRespMake>
}
 802a452:	b008      	add	sp, #32
 802a454:	bd10      	pop	{r4, pc}
 802a456:	f7ff fea1 	bl	802a19c <gComCallbackGetFw.part.0>
 802a45a:	e7fa      	b.n	802a452 <gComCallbackGetSn+0x2a>

0802a45c <gComCallbackSetSn>:
{
 802a45c:	b530      	push	{r4, r5, lr}
  if ((length < 32) && (length > 0))
 802a45e:	1e4b      	subs	r3, r1, #1
 802a460:	2b1e      	cmp	r3, #30
{
 802a462:	4605      	mov	r5, r0
 802a464:	460c      	mov	r4, r1
 802a466:	b089      	sub	sp, #36	@ 0x24
  if ((length < 32) && (length > 0))
 802a468:	d813      	bhi.n	802a492 <gComCallbackSetSn+0x36>
    memset(tmp, 0, 32);
 802a46a:	2220      	movs	r2, #32
 802a46c:	2100      	movs	r1, #0
 802a46e:	4668      	mov	r0, sp
 802a470:	f001 f8e2 	bl	802b638 <memset>
    memcpy(tmp, data, length);
 802a474:	4622      	mov	r2, r4
 802a476:	4629      	mov	r1, r5
 802a478:	4668      	mov	r0, sp
 802a47a:	f001 f987 	bl	802b78c <memcpy>
    if (gInfoWriteSn(tmp))
 802a47e:	4668      	mov	r0, sp
 802a480:	f000 fcb6 	bl	802adf0 <gInfoWriteSn>
 802a484:	4602      	mov	r2, r0
 802a486:	b130      	cbz	r0, 802a496 <gComCallbackSetSn+0x3a>
      gComRespMake(GCOM_ERR_NONE, NULL, 0);
 802a488:	2200      	movs	r2, #0
 802a48a:	4611      	mov	r1, r2
 802a48c:	4610      	mov	r0, r2
      gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a48e:	f7ff fb9d 	bl	8029bcc <gComRespMake>
}
 802a492:	b009      	add	sp, #36	@ 0x24
 802a494:	bd30      	pop	{r4, r5, pc}
      gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a496:	4601      	mov	r1, r0
 802a498:	200a      	movs	r0, #10
 802a49a:	e7f8      	b.n	802a48e <gComCallbackSetSn+0x32>

0802a49c <gComCallbackSetTempThreshold>:
  if (length == 2)
 802a49c:	2902      	cmp	r1, #2
{
 802a49e:	b510      	push	{r4, lr}
  if (length == 2)
 802a4a0:	d116      	bne.n	802a4d0 <gComCallbackSetTempThreshold+0x34>
    ginfo_storage_.temp_threshold = (data[0] << 8) | data[1];
 802a4a2:	8803      	ldrh	r3, [r0, #0]
 802a4a4:	4c0b      	ldr	r4, [pc, #44]	@ (802a4d4 <gComCallbackSetTempThreshold+0x38>)
 802a4a6:	ba5b      	rev16	r3, r3
 802a4a8:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
    if (gInfoSave())
 802a4ac:	f000 fc1a 	bl	802ace4 <gInfoSave>
 802a4b0:	4602      	mov	r2, r0
 802a4b2:	b150      	cbz	r0, 802a4ca <gComCallbackSetTempThreshold+0x2e>
      gTempSetAlarmDesiCelsius(ginfo_storage_.temp_threshold);
 802a4b4:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	@ 0x54
 802a4b8:	f000 fcee 	bl	802ae98 <gTempSetAlarmDesiCelsius>
      gComRespMake(GCOM_ERR_NONE, NULL, 0);
 802a4bc:	2200      	movs	r2, #0
 802a4be:	4611      	mov	r1, r2
 802a4c0:	4610      	mov	r0, r2
}
 802a4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a4c6:	f7ff bb81 	b.w	8029bcc <gComRespMake>
 802a4ca:	4601      	mov	r1, r0
 802a4cc:	200a      	movs	r0, #10
 802a4ce:	e7f8      	b.n	802a4c2 <gComCallbackSetTempThreshold+0x26>
}
 802a4d0:	bd10      	pop	{r4, pc}
 802a4d2:	bf00      	nop
 802a4d4:	200424dc 	.word	0x200424dc

0802a4d8 <gComCallbackSetIv>:
  if (length == 16)
 802a4d8:	2910      	cmp	r1, #16
{
 802a4da:	b508      	push	{r3, lr}
  if (length == 16)
 802a4dc:	d10d      	bne.n	802a4fa <gComCallbackSetIv+0x22>
    if (gInfoWriteIv(data))
 802a4de:	f000 fcad 	bl	802ae3c <gInfoWriteIv>
 802a4e2:	4602      	mov	r2, r0
 802a4e4:	b118      	cbz	r0, 802a4ee <gComCallbackSetIv+0x16>
}
 802a4e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802a4ea:	f7ff be6e 	b.w	802a1ca <gComCallbackSetIv.part.0>
      gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a4ee:	4601      	mov	r1, r0
}
 802a4f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a4f4:	200a      	movs	r0, #10
 802a4f6:	f7ff bb69 	b.w	8029bcc <gComRespMake>
}
 802a4fa:	bd08      	pop	{r3, pc}

0802a4fc <gComCallbackVibSetState>:
	if (length == 1)
 802a4fc:	2901      	cmp	r1, #1
{
 802a4fe:	b508      	push	{r3, lr}
	if (length == 1)
 802a500:	d10f      	bne.n	802a522 <gComCallbackVibSetState+0x26>
		if (gVibSetState(data[0]) == true)
 802a502:	7800      	ldrb	r0, [r0, #0]
 802a504:	f7ff f8ca 	bl	802969c <gVibSetState>
 802a508:	4602      	mov	r2, r0
 802a50a:	b118      	cbz	r0, 802a514 <gComCallbackVibSetState+0x18>
}
 802a50c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802a510:	f7ff be5b 	b.w	802a1ca <gComCallbackSetIv.part.0>
			gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a514:	4601      	mov	r1, r0
}
 802a516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a51a:	f44f 5083 	mov.w	r0, #4192	@ 0x1060
 802a51e:	f7ff bb55 	b.w	8029bcc <gComRespMake>
}
 802a522:	bd08      	pop	{r3, pc}

0802a524 <gComCallbackVibSetTrigCfg>:
	if (length == 3)
 802a524:	2903      	cmp	r1, #3
{
 802a526:	4602      	mov	r2, r0
 802a528:	b508      	push	{r3, lr}
	if (length == 3)
 802a52a:	d11c      	bne.n	802a566 <gComCallbackVibSetTrigCfg+0x42>
	  ginfo_storage_.config.is_constant_trig = (bool)data[0];
 802a52c:	7803      	ldrb	r3, [r0, #0]
 802a52e:	1e18      	subs	r0, r3, #0
 802a530:	bf18      	it	ne
 802a532:	2001      	movne	r0, #1
 802a534:	4b0c      	ldr	r3, [pc, #48]	@ (802a568 <gComCallbackVibSetTrigCfg+0x44>)
 802a536:	f883 0204 	strb.w	r0, [r3, #516]	@ 0x204
    ginfo_storage_.config.trig_length = (data[1] << 8) | data[2];
 802a53a:	f8b2 1001 	ldrh.w	r1, [r2, #1]
 802a53e:	ba49      	rev16	r1, r1
 802a540:	f8a3 1205 	strh.w	r1, [r3, #517]	@ 0x205
		gVibSetConstantTrig(ginfo_storage_.config.is_constant_trig, ginfo_storage_.config.trig_length);
 802a544:	b289      	uxth	r1, r1
 802a546:	f7fe ff95 	bl	8029474 <gVibSetConstantTrig>
		if (gInfoSave())
 802a54a:	f000 fbcb 	bl	802ace4 <gInfoSave>
 802a54e:	4602      	mov	r2, r0
 802a550:	b118      	cbz	r0, 802a55a <gComCallbackVibSetTrigCfg+0x36>
}
 802a552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802a556:	f7ff be38 	b.w	802a1ca <gComCallbackSetIv.part.0>
		  gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a55a:	4601      	mov	r1, r0
}
 802a55c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a560:	200a      	movs	r0, #10
 802a562:	f7ff bb33 	b.w	8029bcc <gComRespMake>
}
 802a566:	bd08      	pop	{r3, pc}
 802a568:	200424dc 	.word	0x200424dc

0802a56c <gComCallbackVibSetMaxChCfg>:
	if (length == 1)
 802a56c:	2901      	cmp	r1, #1
{
 802a56e:	b510      	push	{r4, lr}
 802a570:	4604      	mov	r4, r0
	if (length == 1)
 802a572:	d11a      	bne.n	802a5aa <gComCallbackVibSetMaxChCfg+0x3e>
	  ginfo_storage_.config.max_ch = data[0];
 802a574:	7802      	ldrb	r2, [r0, #0]
 802a576:	4b0d      	ldr	r3, [pc, #52]	@ (802a5ac <gComCallbackVibSetMaxChCfg+0x40>)
 802a578:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
	  if (gInfoSave())
 802a57c:	f000 fbb2 	bl	802ace4 <gInfoSave>
 802a580:	4602      	mov	r2, r0
 802a582:	b178      	cbz	r0, 802a5a4 <gComCallbackVibSetMaxChCfg+0x38>
	    if (gVibSetMaxCh(data[0]))
 802a584:	7820      	ldrb	r0, [r4, #0]
 802a586:	f7fe ff83 	bl	8029490 <gVibSetMaxCh>
 802a58a:	4602      	mov	r2, r0
 802a58c:	b118      	cbz	r0, 802a596 <gComCallbackVibSetMaxChCfg+0x2a>
}
 802a58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a592:	f7ff be1a 	b.w	802a1ca <gComCallbackSetIv.part.0>
        gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a596:	4601      	mov	r1, r0
 802a598:	f44f 5083 	mov.w	r0, #4192	@ 0x1060
}
 802a59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a5a0:	f7ff bb14 	b.w	8029bcc <gComRespMake>
 802a5a4:	4601      	mov	r1, r0
 802a5a6:	200a      	movs	r0, #10
 802a5a8:	e7f8      	b.n	802a59c <gComCallbackVibSetMaxChCfg+0x30>
}
 802a5aa:	bd10      	pop	{r4, pc}
 802a5ac:	200424dc 	.word	0x200424dc

0802a5b0 <gComCallbackVibSetSeqLen>:
	if (length == 2)
 802a5b0:	2902      	cmp	r1, #2
{
 802a5b2:	b508      	push	{r3, lr}
	if (length == 2)
 802a5b4:	d111      	bne.n	802a5da <gComCallbackVibSetSeqLen+0x2a>
		if (gVibSetSeqLen((data[0] << 8) | data[1]))
 802a5b6:	8800      	ldrh	r0, [r0, #0]
 802a5b8:	ba40      	rev16	r0, r0
 802a5ba:	b280      	uxth	r0, r0
 802a5bc:	f7fe ff7a 	bl	80294b4 <gVibSetSeqLen>
 802a5c0:	4602      	mov	r2, r0
 802a5c2:	b118      	cbz	r0, 802a5cc <gComCallbackVibSetSeqLen+0x1c>
}
 802a5c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802a5c8:	f7ff bdff 	b.w	802a1ca <gComCallbackSetIv.part.0>
			gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a5cc:	4601      	mov	r1, r0
}
 802a5ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a5d2:	f44f 5083 	mov.w	r0, #4192	@ 0x1060
 802a5d6:	f7ff baf9 	b.w	8029bcc <gComRespMake>
}
 802a5da:	bd08      	pop	{r3, pc}

0802a5dc <gComCallbackVibGetSettings>:
	if (length == 4)
 802a5dc:	2904      	cmp	r1, #4
 802a5de:	d101      	bne.n	802a5e4 <gComCallbackVibGetSettings+0x8>
 802a5e0:	f7ff be2c 	b.w	802a23c <gComCallbackVibGetSettings.part.0>
}
 802a5e4:	4770      	bx	lr

0802a5e6 <gComCallbackVibSetSettings>:
{
 802a5e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			for (uint16_t i = 0; i < length / 3; i++)
 802a5e8:	2503      	movs	r5, #3
 802a5ea:	fbb1 f5f5 	udiv	r5, r1, r5
 802a5ee:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 802a5f2:	1ac9      	subs	r1, r1, r3
	if (length % 3 == 0)
 802a5f4:	b28c      	uxth	r4, r1
{
 802a5f6:	4606      	mov	r6, r0
	if (length % 3 == 0)
 802a5f8:	bb7c      	cbnz	r4, 802a65a <gComCallbackVibSetSettings+0x74>
		GVibSettingsStruct *settings = malloc((GCOM_BUFFER_SIZE - 8));
 802a5fa:	f44f 60ff 	mov.w	r0, #2040	@ 0x7f8
 802a5fe:	f000 fd09 	bl	802b014 <malloc>
		if (settings != NULL)
 802a602:	4607      	mov	r7, r0
 802a604:	b348      	cbz	r0, 802a65a <gComCallbackVibSetSettings+0x74>
 802a606:	4632      	mov	r2, r6
			for (uint16_t i = 0; i < length / 3; i++)
 802a608:	4623      	mov	r3, r4
 802a60a:	b2a8      	uxth	r0, r5
				settings[i].length = (data[i * 3 + 1] << 8) | (data[i * 3 + 2] & 0x00FF);
 802a60c:	1cbc      	adds	r4, r7, #2
			for (uint16_t i = 0; i < length / 3; i++)
 802a60e:	b299      	uxth	r1, r3
 802a610:	4288      	cmp	r0, r1
 802a612:	f102 0203 	add.w	r2, r2, #3
 802a616:	d80e      	bhi.n	802a636 <gComCallbackVibSetSettings+0x50>
			if (gVibSetSettings(length / 3, settings) == true)
 802a618:	4639      	mov	r1, r7
 802a61a:	f7fe ff73 	bl	8029504 <gVibSetSettings>
 802a61e:	4602      	mov	r2, r0
 802a620:	b1b8      	cbz	r0, 802a652 <gComCallbackVibSetSettings+0x6c>
				gComRespMake(GCOM_ERR_NONE, NULL, 0);
 802a622:	2200      	movs	r2, #0
 802a624:	4611      	mov	r1, r2
 802a626:	4610      	mov	r0, r2
				gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a628:	f7ff fad0 	bl	8029bcc <gComRespMake>
			free(settings);
 802a62c:	4638      	mov	r0, r7
}
 802a62e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			free(settings);
 802a632:	f000 bcf7 	b.w	802b024 <free>
				settings[i].ch = data[i * 3 + 0];
 802a636:	f812 1c03 	ldrb.w	r1, [r2, #-3]
				settings[i].length = (data[i * 3 + 1] << 8) | (data[i * 3 + 2] & 0x00FF);
 802a63a:	f812 5c02 	ldrb.w	r5, [r2, #-2]
				settings[i].ch = data[i * 3 + 0];
 802a63e:	f807 1023 	strb.w	r1, [r7, r3, lsl #2]
				settings[i].length = (data[i * 3 + 1] << 8) | (data[i * 3 + 2] & 0x00FF);
 802a642:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 802a646:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 802a64a:	f824 1023 	strh.w	r1, [r4, r3, lsl #2]
			for (uint16_t i = 0; i < length / 3; i++)
 802a64e:	3301      	adds	r3, #1
 802a650:	e7dd      	b.n	802a60e <gComCallbackVibSetSettings+0x28>
				gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a652:	4601      	mov	r1, r0
 802a654:	f44f 5083 	mov.w	r0, #4192	@ 0x1060
 802a658:	e7e6      	b.n	802a628 <gComCallbackVibSetSettings+0x42>
}
 802a65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802a65c <gComCallbackVibSetDc>:
	if (length == 4)
 802a65c:	2904      	cmp	r1, #4
{
 802a65e:	b538      	push	{r3, r4, r5, lr}
	if (length == 4)
 802a660:	d126      	bne.n	802a6b0 <gComCallbackVibSetDc+0x54>
		uint32_t voltage = (data[0] << 8) | data[1];
 802a662:	8802      	ldrh	r2, [r0, #0]
 802a664:	8843      	ldrh	r3, [r0, #2]
		  ginfo_storage_.config.voltage_mv = voltage;
 802a666:	4913      	ldr	r1, [pc, #76]	@ (802a6b4 <gComCallbackVibSetDc+0x58>)
 802a668:	ba52      	rev16	r2, r2
 802a66a:	ba5b      	rev16	r3, r3
 802a66c:	b294      	uxth	r4, r2
 802a66e:	f8a1 2208 	strh.w	r2, [r1, #520]	@ 0x208
 802a672:	b29d      	uxth	r5, r3
		  ginfo_storage_.config.current_ma = current;
 802a674:	f8a1 320a 	strh.w	r3, [r1, #522]	@ 0x20a
		  if (gInfoSave())
 802a678:	f000 fb34 	bl	802ace4 <gInfoSave>
 802a67c:	4602      	mov	r2, r0
 802a67e:	b1a0      	cbz	r0, 802a6aa <gComCallbackVibSetDc+0x4e>
        if (mp8859SetVol(voltage) == false)
 802a680:	4620      	mov	r0, r4
 802a682:	f7ff f93b 	bl	80298fc <mp8859SetVol>
 802a686:	b938      	cbnz	r0, 802a698 <gComCallbackVibSetDc+0x3c>
          gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a688:	2200      	movs	r2, #0
 802a68a:	f44f 5083 	mov.w	r0, #4192	@ 0x1060
 802a68e:	4611      	mov	r1, r2
}
 802a690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		    gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a694:	f7ff ba9a 	b.w	8029bcc <gComRespMake>
        if (mp8859SetCur(current) == false)
 802a698:	4628      	mov	r0, r5
 802a69a:	f7ff f94d 	bl	8029938 <mp8859SetCur>
 802a69e:	2800      	cmp	r0, #0
 802a6a0:	d0f2      	beq.n	802a688 <gComCallbackVibSetDc+0x2c>
        gComRespMake(GCOM_ERR_NONE, NULL, 0);
 802a6a2:	2200      	movs	r2, #0
 802a6a4:	4611      	mov	r1, r2
 802a6a6:	4610      	mov	r0, r2
 802a6a8:	e7f2      	b.n	802a690 <gComCallbackVibSetDc+0x34>
		    gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a6aa:	4601      	mov	r1, r0
 802a6ac:	200a      	movs	r0, #10
 802a6ae:	e7ef      	b.n	802a690 <gComCallbackVibSetDc+0x34>
}
 802a6b0:	bd38      	pop	{r3, r4, r5, pc}
 802a6b2:	bf00      	nop
 802a6b4:	200424dc 	.word	0x200424dc

0802a6b8 <gComCallbackVibClearSettings>:
{
 802a6b8:	b508      	push	{r3, lr}
	if (length == 0)
 802a6ba:	b971      	cbnz	r1, 802a6da <gComCallbackVibClearSettings+0x22>
		if (gVibClearSettings())
 802a6bc:	f7fe ffa4 	bl	8029608 <gVibClearSettings>
 802a6c0:	4602      	mov	r2, r0
 802a6c2:	b118      	cbz	r0, 802a6cc <gComCallbackVibClearSettings+0x14>
}
 802a6c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802a6c8:	f7ff bd7f 	b.w	802a1ca <gComCallbackSetIv.part.0>
			gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a6cc:	4601      	mov	r1, r0
}
 802a6ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a6d2:	f44f 5083 	mov.w	r0, #4192	@ 0x1060
 802a6d6:	f7ff ba79 	b.w	8029bcc <gComRespMake>
}
 802a6da:	bd08      	pop	{r3, pc}

0802a6dc <gComCallbackVibSingleSettings>:
	if (length == 3)
 802a6dc:	2903      	cmp	r1, #3
{
 802a6de:	b508      	push	{r3, lr}
	if (length == 3)
 802a6e0:	d113      	bne.n	802a70a <gComCallbackVibSingleSettings+0x2e>
		if (gVibSingleSetting(data[0], duration))
 802a6e2:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 802a6e6:	7800      	ldrb	r0, [r0, #0]
 802a6e8:	ba49      	rev16	r1, r1
 802a6ea:	b289      	uxth	r1, r1
 802a6ec:	f7ff f8a0 	bl	8029830 <gVibSingleSetting>
 802a6f0:	4602      	mov	r2, r0
 802a6f2:	b118      	cbz	r0, 802a6fc <gComCallbackVibSingleSettings+0x20>
}
 802a6f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802a6f8:	f7ff bd67 	b.w	802a1ca <gComCallbackSetIv.part.0>
			gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a6fc:	4601      	mov	r1, r0
}
 802a6fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			gComRespMake(GCOM_ERR_VIB, NULL, 0);
 802a702:	f44f 5083 	mov.w	r0, #4192	@ 0x1060
 802a706:	f7ff ba61 	b.w	8029bcc <gComRespMake>
}
 802a70a:	bd08      	pop	{r3, pc}

0802a70c <gComCallbackVibSetLedDuration>:
 * ************************************************************************************************
 *
 */
void gComCallbackVibSetLedDuration(const uint8_t *data, uint16_t length)
{
	if (length == 4)
 802a70c:	2904      	cmp	r1, #4
{
 802a70e:	b538      	push	{r3, r4, r5, lr}
	if (length == 4)
 802a710:	d11c      	bne.n	802a74c <gComCallbackVibSetLedDuration+0x40>
	{
		uint16_t on_duration = (data[0] << 8) | data[1];
 802a712:	8803      	ldrh	r3, [r0, #0]
 802a714:	8842      	ldrh	r2, [r0, #2]
		uint16_t off_duration = (data[2] << 8) | data[3];
		ginfo_storage_.config.led_off_duration = off_duration;
 802a716:	480e      	ldr	r0, [pc, #56]	@ (802a750 <gComCallbackVibSetLedDuration+0x44>)
 802a718:	ba52      	rev16	r2, r2
 802a71a:	ba5b      	rev16	r3, r3
 802a71c:	b295      	uxth	r5, r2
 802a71e:	f8a0 220e 	strh.w	r2, [r0, #526]	@ 0x20e
 802a722:	b29c      	uxth	r4, r3
		ginfo_storage_.config.led_on_duration = on_duration;
 802a724:	f8a0 320c 	strh.w	r3, [r0, #524]	@ 0x20c
		if (gInfoSave())
 802a728:	f000 fadc 	bl	802ace4 <gInfoSave>
 802a72c:	4602      	mov	r2, r0
 802a72e:	b150      	cbz	r0, 802a746 <gComCallbackVibSetLedDuration+0x3a>
		{
		  gVibSetLedDuration(on_duration, off_duration);
 802a730:	4629      	mov	r1, r5
 802a732:	4620      	mov	r0, r4
 802a734:	f7fe ff4a 	bl	80295cc <gVibSetLedDuration>
		  gComRespMake(GCOM_ERR_NONE, NULL, 0);
 802a738:	2200      	movs	r2, #0
 802a73a:	4611      	mov	r1, r2
 802a73c:	4610      	mov	r0, r2
		else
		{
		  gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
		}
	}
}
 802a73e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  gComRespMake(GCOM_ERR_MEMORY, NULL, 0);
 802a742:	f7ff ba43 	b.w	8029bcc <gComRespMake>
 802a746:	4601      	mov	r1, r0
 802a748:	200a      	movs	r0, #10
 802a74a:	e7f8      	b.n	802a73e <gComCallbackVibSetLedDuration+0x32>
}
 802a74c:	bd38      	pop	{r3, r4, r5, pc}
 802a74e:	bf00      	nop
 802a750:	200424dc 	.word	0x200424dc

0802a754 <gComCallbackCmd>:
{
 802a754:	4603      	mov	r3, r0
  switch (cmd)
 802a756:	2b6e      	cmp	r3, #110	@ 0x6e
{
 802a758:	b507      	push	{r0, r1, r2, lr}
 802a75a:	4608      	mov	r0, r1
 802a75c:	4611      	mov	r1, r2
  switch (cmd)
 802a75e:	d807      	bhi.n	802a770 <gComCallbackCmd+0x1c>
 802a760:	2b5f      	cmp	r3, #95	@ 0x5f
 802a762:	d808      	bhi.n	802a776 <gComCallbackCmd+0x22>
 802a764:	2b14      	cmp	r3, #20
 802a766:	d93d      	bls.n	802a7e4 <gComCallbackCmd+0x90>
 802a768:	3b21      	subs	r3, #33	@ 0x21
 802a76a:	b2da      	uxtb	r2, r3
 802a76c:	2a0e      	cmp	r2, #14
 802a76e:	d916      	bls.n	802a79e <gComCallbackCmd+0x4a>
}
 802a770:	b003      	add	sp, #12
 802a772:	f85d fb04 	ldr.w	pc, [sp], #4
  switch (cmd)
 802a776:	3b61      	subs	r3, #97	@ 0x61
 802a778:	2b0d      	cmp	r3, #13
 802a77a:	f200 80b8 	bhi.w	802a8ee <gComCallbackCmd+0x19a>
 802a77e:	e8df f013 	tbh	[pc, r3, lsl #1]
 802a782:	00bb      	.short	0x00bb
 802a784:	00c800c3 	.word	0x00c800c3
 802a788:	00d500d0 	.word	0x00d500d0
 802a78c:	00e200dd 	.word	0x00e200dd
 802a790:	00ec00e7 	.word	0x00ec00e7
 802a794:	00f900f4 	.word	0x00f900f4
 802a798:	010300fe 	.word	0x010300fe
 802a79c:	010b      	.short	0x010b
 802a79e:	2b0e      	cmp	r3, #14
 802a7a0:	d8e6      	bhi.n	802a770 <gComCallbackCmd+0x1c>
 802a7a2:	a201      	add	r2, pc, #4	@ (adr r2, 802a7a8 <gComCallbackCmd+0x54>)
 802a7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a7a8:	0802a897 	.word	0x0802a897
 802a7ac:	0802a8a7 	.word	0x0802a8a7
 802a7b0:	0802a771 	.word	0x0802a771
 802a7b4:	0802a771 	.word	0x0802a771
 802a7b8:	0802a771 	.word	0x0802a771
 802a7bc:	0802a771 	.word	0x0802a771
 802a7c0:	0802a771 	.word	0x0802a771
 802a7c4:	0802a771 	.word	0x0802a771
 802a7c8:	0802a771 	.word	0x0802a771
 802a7cc:	0802a771 	.word	0x0802a771
 802a7d0:	0802a771 	.word	0x0802a771
 802a7d4:	0802a771 	.word	0x0802a771
 802a7d8:	0802a8b1 	.word	0x0802a8b1
 802a7dc:	0802a8bb 	.word	0x0802a8bb
 802a7e0:	0802a8d5 	.word	0x0802a8d5
 802a7e4:	2b14      	cmp	r3, #20
 802a7e6:	d8c3      	bhi.n	802a770 <gComCallbackCmd+0x1c>
 802a7e8:	a201      	add	r2, pc, #4	@ (adr r2, 802a7f0 <gComCallbackCmd+0x9c>)
 802a7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a7ee:	bf00      	nop
 802a7f0:	0802a845 	.word	0x0802a845
 802a7f4:	0802a771 	.word	0x0802a771
 802a7f8:	0802a84f 	.word	0x0802a84f
 802a7fc:	0802a771 	.word	0x0802a771
 802a800:	0802a771 	.word	0x0802a771
 802a804:	0802a771 	.word	0x0802a771
 802a808:	0802a771 	.word	0x0802a771
 802a80c:	0802a771 	.word	0x0802a771
 802a810:	0802a771 	.word	0x0802a771
 802a814:	0802a771 	.word	0x0802a771
 802a818:	0802a771 	.word	0x0802a771
 802a81c:	0802a771 	.word	0x0802a771
 802a820:	0802a771 	.word	0x0802a771
 802a824:	0802a771 	.word	0x0802a771
 802a828:	0802a771 	.word	0x0802a771
 802a82c:	0802a771 	.word	0x0802a771
 802a830:	0802a865 	.word	0x0802a865
 802a834:	0802a86f 	.word	0x0802a86f
 802a838:	0802a879 	.word	0x0802a879
 802a83c:	0802a883 	.word	0x0802a883
 802a840:	0802a88d 	.word	0x0802a88d
}
 802a844:	b003      	add	sp, #12
 802a846:	f85d eb04 	ldr.w	lr, [sp], #4
    gComCallbackSync(data, length);
 802a84a:	f7ff bd53 	b.w	802a2f4 <gComCallbackSync>
  if (length == 0)
 802a84e:	2900      	cmp	r1, #0
 802a850:	d18e      	bne.n	802a770 <gComCallbackCmd+0x1c>
    gComRespMake(GCOM_ERR_NONE, NULL, 0);
 802a852:	460a      	mov	r2, r1
 802a854:	4608      	mov	r0, r1
 802a856:	f7ff f9b9 	bl	8029bcc <gComRespMake>
    gcom_.restart_req = 1;
 802a85a:	2201      	movs	r2, #1
 802a85c:	4b51      	ldr	r3, [pc, #324]	@ (802a9a4 <gComCallbackCmd+0x250>)
 802a85e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 802a862:	e785      	b.n	802a770 <gComCallbackCmd+0x1c>
}
 802a864:	b003      	add	sp, #12
 802a866:	f85d eb04 	ldr.w	lr, [sp], #4
    gComCallbackGetHw(data, length);
 802a86a:	f7ff bd89 	b.w	802a380 <gComCallbackGetHw>
}
 802a86e:	b003      	add	sp, #12
 802a870:	f85d eb04 	ldr.w	lr, [sp], #4
    gComCallbackSetHw(data, length);
 802a874:	f7ff bd9e 	b.w	802a3b4 <gComCallbackSetHw>
}
 802a878:	b003      	add	sp, #12
 802a87a:	f85d eb04 	ldr.w	lr, [sp], #4
    gComCallbackGetFw(data, length);
 802a87e:	f7ff bdb9 	b.w	802a3f4 <gComCallbackGetFw>
}
 802a882:	b003      	add	sp, #12
 802a884:	f85d eb04 	ldr.w	lr, [sp], #4
    gComCallbackGetSn(data, length);
 802a888:	f7ff bdce 	b.w	802a428 <gComCallbackGetSn>
}
 802a88c:	b003      	add	sp, #12
 802a88e:	f85d eb04 	ldr.w	lr, [sp], #4
    gComCallbackSetSn(data, length);
 802a892:	f7ff bde3 	b.w	802a45c <gComCallbackSetSn>
  if (length == 0)
 802a896:	2900      	cmp	r1, #0
 802a898:	f47f af6a 	bne.w	802a770 <gComCallbackCmd+0x1c>
}
 802a89c:	b003      	add	sp, #12
 802a89e:	f85d eb04 	ldr.w	lr, [sp], #4
 802a8a2:	f7ff bc80 	b.w	802a1a6 <gComCallbackGetTempThreshold.part.0>
 802a8a6:	b003      	add	sp, #12
 802a8a8:	f85d eb04 	ldr.w	lr, [sp], #4
    gComCallbackSetTempThreshold(data, length);
 802a8ac:	f7ff bdf6 	b.w	802a49c <gComCallbackSetTempThreshold>
}
 802a8b0:	b003      	add	sp, #12
 802a8b2:	f85d eb04 	ldr.w	lr, [sp], #4
		gComCallbackSetIv(data, length);
 802a8b6:	f7ff be0f 	b.w	802a4d8 <gComCallbackSetIv>
  if (length == 16)
 802a8ba:	2910      	cmp	r1, #16
 802a8bc:	f47f af58 	bne.w	802a770 <gComCallbackCmd+0x1c>
    gComRespMake(GCOM_ERR_NONE, NULL, 0);
 802a8c0:	2200      	movs	r2, #0
 802a8c2:	4611      	mov	r1, r2
 802a8c4:	4610      	mov	r0, r2
 802a8c6:	f7ff f981 	bl	8029bcc <gComRespMake>
    gcom_.is_open = 1;
 802a8ca:	2201      	movs	r2, #1
 802a8cc:	4b35      	ldr	r3, [pc, #212]	@ (802a9a4 <gComCallbackCmd+0x250>)
 802a8ce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 802a8d2:	e74d      	b.n	802a770 <gComCallbackCmd+0x1c>
  if (length == 0)
 802a8d4:	2900      	cmp	r1, #0
 802a8d6:	f47f af4b 	bne.w	802a770 <gComCallbackCmd+0x1c>
    gComRespMake(GCOM_ERR_NONE, NULL, 0);
 802a8da:	460a      	mov	r2, r1
 802a8dc:	4608      	mov	r0, r1
 802a8de:	9101      	str	r1, [sp, #4]
 802a8e0:	f7ff f974 	bl	8029bcc <gComRespMake>
    gcom_.is_open = 0;
 802a8e4:	4b2f      	ldr	r3, [pc, #188]	@ (802a9a4 <gComCallbackCmd+0x250>)
 802a8e6:	9901      	ldr	r1, [sp, #4]
 802a8e8:	f883 1026 	strb.w	r1, [r3, #38]	@ 0x26
}
 802a8ec:	e740      	b.n	802a770 <gComCallbackCmd+0x1c>
}
 802a8ee:	b003      	add	sp, #12
 802a8f0:	f85d eb04 	ldr.w	lr, [sp], #4
		gComCallbackVibSetState(data, length);
 802a8f4:	f7ff be02 	b.w	802a4fc <gComCallbackVibSetState>
	if (length == 0)
 802a8f8:	2900      	cmp	r1, #0
 802a8fa:	f47f af39 	bne.w	802a770 <gComCallbackCmd+0x1c>
}
 802a8fe:	b003      	add	sp, #12
 802a900:	f85d eb04 	ldr.w	lr, [sp], #4
 802a904:	f7ff bc66 	b.w	802a1d4 <gComCallbackVibGetTrigCfg.part.0>
 802a908:	b003      	add	sp, #12
 802a90a:	f85d eb04 	ldr.w	lr, [sp], #4
		gComCallbackVibSetTrigCfg(data, length);
 802a90e:	f7ff be09 	b.w	802a524 <gComCallbackVibSetTrigCfg>
	if (length == 0)
 802a912:	2900      	cmp	r1, #0
 802a914:	f47f af2c 	bne.w	802a770 <gComCallbackCmd+0x1c>
}
 802a918:	b003      	add	sp, #12
 802a91a:	f85d eb04 	ldr.w	lr, [sp], #4
 802a91e:	f7ff bc6e 	b.w	802a1fe <gComCallbackVibGetMaxChCfg.part.0>
 802a922:	b003      	add	sp, #12
 802a924:	f85d eb04 	ldr.w	lr, [sp], #4
		gComCallbackVibSetMaxChCfg(data, length);
 802a928:	f7ff be20 	b.w	802a56c <gComCallbackVibSetMaxChCfg>
	if (length == 0)
 802a92c:	2900      	cmp	r1, #0
 802a92e:	f47f af1f 	bne.w	802a770 <gComCallbackCmd+0x1c>
}
 802a932:	b003      	add	sp, #12
 802a934:	f85d eb04 	ldr.w	lr, [sp], #4
 802a938:	f7ff bc6e 	b.w	802a218 <gComCallbackVibGetSeqLen.part.0>
 802a93c:	b003      	add	sp, #12
 802a93e:	f85d eb04 	ldr.w	lr, [sp], #4
		gComCallbackVibSetSeqLen(data, length);
 802a942:	f7ff be35 	b.w	802a5b0 <gComCallbackVibSetSeqLen>
}
 802a946:	b003      	add	sp, #12
 802a948:	f85d eb04 	ldr.w	lr, [sp], #4
		gComCallbackVibGetSettings(data, length);
 802a94c:	f7ff be46 	b.w	802a5dc <gComCallbackVibGetSettings>
}
 802a950:	b003      	add	sp, #12
 802a952:	f85d eb04 	ldr.w	lr, [sp], #4
		gComCallbackVibSetSettings(data, length);
 802a956:	f7ff be46 	b.w	802a5e6 <gComCallbackVibSetSettings>
	if (length == 0)
 802a95a:	2900      	cmp	r1, #0
 802a95c:	f47f af08 	bne.w	802a770 <gComCallbackCmd+0x1c>
}
 802a960:	b003      	add	sp, #12
 802a962:	f85d eb04 	ldr.w	lr, [sp], #4
 802a966:	f7ff bc80 	b.w	802a26a <gComCallbackVibGetDc.part.0>
 802a96a:	b003      	add	sp, #12
 802a96c:	f85d eb04 	ldr.w	lr, [sp], #4
		gComCallbackVibSetDc(data, length);
 802a970:	f7ff be74 	b.w	802a65c <gComCallbackVibSetDc>
}
 802a974:	b003      	add	sp, #12
 802a976:	f85d eb04 	ldr.w	lr, [sp], #4
		gComCallbackVibClearSettings(data, length);
 802a97a:	f7ff be9d 	b.w	802a6b8 <gComCallbackVibClearSettings>
}
 802a97e:	b003      	add	sp, #12
 802a980:	f85d eb04 	ldr.w	lr, [sp], #4
		gComCallbackVibSingleSettings(data, length);
 802a984:	f7ff beaa 	b.w	802a6dc <gComCallbackVibSingleSettings>
	if (length == 0)
 802a988:	2900      	cmp	r1, #0
 802a98a:	f47f aef1 	bne.w	802a770 <gComCallbackCmd+0x1c>
}
 802a98e:	b003      	add	sp, #12
 802a990:	f85d eb04 	ldr.w	lr, [sp], #4
 802a994:	f7ff bc8a 	b.w	802a2ac <gComCallbackVibGetLedDuration.part.0>
 802a998:	b003      	add	sp, #12
 802a99a:	f85d eb04 	ldr.w	lr, [sp], #4
		gComCallbackVibSetLedDuration(data, length);
 802a99e:	f7ff beb5 	b.w	802a70c <gComCallbackVibSetLedDuration>
 802a9a2:	bf00      	nop
 802a9a4:	20042484 	.word	0x20042484

0802a9a8 <gCorePreInit>:
 *         handling environment in embedded applications.
 */
void gCorePreInit(void)
{
  extern const uint32_t g_pfnVectors[];
  SCB->VTOR = (uint32_t)&g_pfnVectors[0];
 802a9a8:	4a01      	ldr	r2, [pc, #4]	@ (802a9b0 <gCorePreInit+0x8>)
 802a9aa:	4b02      	ldr	r3, [pc, #8]	@ (802a9b4 <gCorePreInit+0xc>)
 802a9ac:	609a      	str	r2, [r3, #8]
}
 802a9ae:	4770      	bx	lr
 802a9b0:	08020000 	.word	0x08020000
 802a9b4:	e000ed00 	.word	0xe000ed00

0802a9b8 <gCoreHalt>:
 *         for potential debugging or recovery actions.
 *         - The GPIO pin for an error LED can be controlled by uncommenting the
 *           HAL_GPIO_WritePin() line, allowing visual indication of an error state.
 */
void gCoreHalt(void)
{
 802a9b8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 802a9ba:	b672      	cpsid	i
  __disable_irq();

  /* USER CODE BEGIN halt */
	HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 802a9bc:	2200      	movs	r2, #0
 802a9be:	2110      	movs	r1, #16
 802a9c0:	4803      	ldr	r0, [pc, #12]	@ (802a9d0 <gCoreHalt+0x18>)
 802a9c2:	f7f8 ffe1 	bl	8023988 <HAL_GPIO_WritePin>
  /* USER CODE END halt */

  while (1)
  {
    HAL_IWDG_Refresh(&hiwdg);
 802a9c6:	4c03      	ldr	r4, [pc, #12]	@ (802a9d4 <gCoreHalt+0x1c>)
 802a9c8:	4620      	mov	r0, r4
 802a9ca:	f7f9 fc6d 	bl	80242a8 <HAL_IWDG_Refresh>
  while (1)
 802a9ce:	e7fb      	b.n	802a9c8 <gCoreHalt+0x10>
 802a9d0:	42020400 	.word	0x42020400
 802a9d4:	20000188 	.word	0x20000188

0802a9d8 <gCoreBlinker>:
 *         - The blinking interval is defined by the constant `GCORE_BLINKER_INTERVAL_MS`.
 *         - This function should be called regularly within the main loop to
 *           ensure timely execution of the blinking functionality.
 */
void gCoreBlinker(void)
{
 802a9d8:	b510      	push	{r4, lr}
  if (HAL_GetTick() - gcore_blinker_time_ >= GCORE_BLINKER_INTERVAL_MS)
 802a9da:	f7f7 fa71 	bl	8021ec0 <HAL_GetTick>
 802a9de:	4c09      	ldr	r4, [pc, #36]	@ (802aa04 <gCoreBlinker+0x2c>)
 802a9e0:	6823      	ldr	r3, [r4, #0]
 802a9e2:	1ac0      	subs	r0, r0, r3
 802a9e4:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 802a9e8:	d30b      	bcc.n	802aa02 <gCoreBlinker+0x2a>
  {
    gcore_blinker_time_ = HAL_GetTick();
 802a9ea:	f7f7 fa69 	bl	8021ec0 <HAL_GetTick>
 802a9ee:	6020      	str	r0, [r4, #0]
    HAL_IWDG_Refresh(&hiwdg);
 802a9f0:	4805      	ldr	r0, [pc, #20]	@ (802aa08 <gCoreBlinker+0x30>)
 802a9f2:	f7f9 fc59 	bl	80242a8 <HAL_IWDG_Refresh>

    /* USER CODE BEGIN blinker */
		HAL_GPIO_TogglePin(LED_SYS_GPIO_Port, LED_SYS_Pin);
    /* USER CODE END blinker */
  }
}
 802a9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_TogglePin(LED_SYS_GPIO_Port, LED_SYS_Pin);
 802a9fa:	2120      	movs	r1, #32
 802a9fc:	4803      	ldr	r0, [pc, #12]	@ (802aa0c <gCoreBlinker+0x34>)
 802a9fe:	f7f8 bfc8 	b.w	8023992 <HAL_GPIO_TogglePin>
}
 802aa02:	bd10      	pop	{r4, pc}
 802aa04:	200424d0 	.word	0x200424d0
 802aa08:	20000188 	.word	0x20000188
 802aa0c:	42020400 	.word	0x42020400

0802aa10 <gCoreLoop>:
{
 802aa10:	b508      	push	{r3, lr}
  gCoreBlinker();
 802aa12:	f7ff ffe1 	bl	802a9d8 <gCoreBlinker>
  gBuzLoop();
 802aa16:	f7ff f891 	bl	8029b3c <gBuzLoop>
  gTempLoop();
 802aa1a:	f000 fabb 	bl	802af94 <gTempLoop>
  gComLoop();
 802aa1e:	f7ff fb85 	bl	802a12c <gComLoop>
}
 802aa22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gAppLoop();
 802aa26:	f7fe bc99 	b.w	802935c <gAppLoop>
	...

0802aa2c <gCoreCheckResetSource>:
 *         RCC reset source register. This function should be called early in the system
 *         initialization process to ensure the correct status code is set before
 *         proceeding with other operations.
 */
void gCoreCheckResetSource(void)
{
 802aa2c:	b508      	push	{r3, lr}
  uint32_t rst_source = (RCC->RSR & RCC_RESET_FLAG_ALL);
 802aa2e:	4b13      	ldr	r3, [pc, #76]	@ (802aa7c <gCoreCheckResetSource+0x50>)
 802aa30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4

  /* USER CODE BEGIN start gCoreCheckResetSource() */

  /* USER CODE END start gCoreCheckResetSource */

  if (rst_source & RCC_RSR_BORRSTF)
 802aa34:	0119      	lsls	r1, r3, #4
 802aa36:	d50b      	bpl.n	802aa50 <gCoreCheckResetSource+0x24>
  {
    /* USER CODE BEGIN power on or BOR reset flag */
		gComSetStatusCode(GCOM_STATUS_CODE_POWER_ON);
 802aa38:	f241 000c 	movw	r0, #4108	@ 0x100c
    /* USER CODE END Low-Power reset flag */
  }
  else if (rst_source & RCC_RSR_PINRSTF)
  {
    /* USER CODE BEGIN normal power up or reset pin flag */
		gComSetStatusCode(GCOM_STATUS_CODE_EXT_RST);
 802aa3c:	f7ff f950 	bl	8029ce0 <gComSetStatusCode>
    /* USER CODE END normal power up or reset pin flag */
  }

  /* USER CODE BEGIN finish gCoreCheckResetSource */
	RCC->RSR |= RCC_RSR_RMVF; 															///< erase reset flags
 802aa40:	4a0e      	ldr	r2, [pc, #56]	@ (802aa7c <gCoreCheckResetSource+0x50>)
 802aa42:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 802aa46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802aa4a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  /* USER CODE END finish gCoreCheckResetSource */
}
 802aa4e:	bd08      	pop	{r3, pc}
  else if (rst_source & RCC_RSR_SFTRSTF)
 802aa50:	00da      	lsls	r2, r3, #3
 802aa52:	d502      	bpl.n	802aa5a <gCoreCheckResetSource+0x2e>
		gComSetStatusCode(GCOM_STATUS_CODE_FW);
 802aa54:	f241 000a 	movw	r0, #4106	@ 0x100a
 802aa58:	e7f0      	b.n	802aa3c <gCoreCheckResetSource+0x10>
  else if (rst_source & RCC_RSR_WWDGRSTF)
 802aa5a:	f013 4fc0 	tst.w	r3, #1610612736	@ 0x60000000
 802aa5e:	d002      	beq.n	802aa66 <gCoreCheckResetSource+0x3a>
		gComSetStatusCode(GCOM_STATUS_CODE_WDT);
 802aa60:	f241 0006 	movw	r0, #4102	@ 0x1006
 802aa64:	e7ea      	b.n	802aa3c <gCoreCheckResetSource+0x10>
  else if (rst_source & RCC_RSR_LPWRRSTF)
 802aa66:	2b00      	cmp	r3, #0
 802aa68:	da02      	bge.n	802aa70 <gCoreCheckResetSource+0x44>
		gComSetStatusCode(GCOM_STATUS_CODE_BROWN_OUT);
 802aa6a:	f241 000b 	movw	r0, #4107	@ 0x100b
 802aa6e:	e7e5      	b.n	802aa3c <gCoreCheckResetSource+0x10>
  else if (rst_source & RCC_RSR_PINRSTF)
 802aa70:	015b      	lsls	r3, r3, #5
 802aa72:	d5e5      	bpl.n	802aa40 <gCoreCheckResetSource+0x14>
		gComSetStatusCode(GCOM_STATUS_CODE_EXT_RST);
 802aa74:	f241 0009 	movw	r0, #4105	@ 0x1009
 802aa78:	e7e0      	b.n	802aa3c <gCoreCheckResetSource+0x10>
 802aa7a:	bf00      	nop
 802aa7c:	44020c00 	.word	0x44020c00

0802aa80 <gCoreInit>:
{
 802aa80:	b508      	push	{r3, lr}
	gAppPreInit();
 802aa82:	f7fe fc60 	bl	8029346 <gAppPreInit>
  gInfoInit();
 802aa86:	f000 f92f 	bl	802ace8 <gInfoInit>
  gBuzInit();
 802aa8a:	f7fe fffd 	bl	8029a88 <gBuzInit>
  gTempInit();
 802aa8e:	f000 fa3b 	bl	802af08 <gTempInit>
  gComInit();
 802aa92:	f7ff f95d 	bl	8029d50 <gComInit>
  gCoreCheckResetSource();
 802aa96:	f7ff ffc9 	bl	802aa2c <gCoreCheckResetSource>
}
 802aa9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gAppInit();
 802aa9e:	f7fe bc53 	b.w	8029348 <gAppInit>

0802aaa2 <__io_putchar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 802aaa2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 802aaa6:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	@ 0xe80
 802aaaa:	07d1      	lsls	r1, r2, #31
 802aaac:	d503      	bpl.n	802aab6 <__io_putchar+0x14>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 802aaae:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 802aab2:	07d2      	lsls	r2, r2, #31
 802aab4:	d402      	bmi.n	802aabc <__io_putchar+0x1a>
 */
int __io_putchar(int ch)
{
  ITM_SendChar(ch);
  return 1;
}
 802aab6:	2001      	movs	r0, #1
 802aab8:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 802aaba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 802aabc:	681a      	ldr	r2, [r3, #0]
 802aabe:	2a00      	cmp	r2, #0
 802aac0:	d0fb      	beq.n	802aaba <__io_putchar+0x18>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 802aac2:	b2c0      	uxtb	r0, r0
 802aac4:	7018      	strb	r0, [r3, #0]
 802aac6:	e7f6      	b.n	802aab6 <__io_putchar+0x14>

0802aac8 <HAL_RCC_CSSCallback>:
 *         the system is reset or reinitialized. This function should be defined as
 *         an interrupt handler for the CSS interrupt.
 *         The user can add additional error handling or recovery mechanisms within this function.
 */
void HAL_RCC_CSSCallback(void)
{
 802aac8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_RCC_CSSCallback() */
  gCoreHalt();
 802aaca:	f7ff ff75 	bl	802a9b8 <gCoreHalt>
	...

0802aad0 <gInfoReadFw>:
bool gInfoReadFw(char *str)
{
  bool answer = false;
  do
  {
    if (str == NULL)
 802aad0:	2300      	movs	r3, #0
{
 802aad2:	b507      	push	{r0, r1, r2, lr}
    if (str == NULL)
 802aad4:	b138      	cbz	r0, 802aae6 <gInfoReadFw+0x16>
    {
      break;
    }
    sprintf(str, "%d.%d.%d-%03d", ginfo_header_.fw_major, ginfo_header_.fw_minor,\
 802aad6:	2226      	movs	r2, #38	@ 0x26
 802aad8:	4904      	ldr	r1, [pc, #16]	@ (802aaec <gInfoReadFw+0x1c>)
 802aada:	e9cd 3200 	strd	r3, r2, [sp]
 802aade:	2201      	movs	r2, #1
 802aae0:	f000 fc88 	bl	802b3f4 <siprintf>
        ginfo_header_.fw_patch, ginfo_header_.fw_dev_build);
    answer = true;
 802aae4:	2001      	movs	r0, #1

  } while (0);

  return answer;
}
 802aae6:	b003      	add	sp, #12
 802aae8:	f85d fb04 	ldr.w	pc, [sp], #4
 802aaec:	0802c501 	.word	0x0802c501

0802aaf0 <gInfoMemFormat>:
 * @note   This function unlocks the flash memory, erases the specified sector, and then
 *         locks the flash memory again. It checks for errors during the erase operation
 *         and returns the appropriate status.
 */
bool gInfoMemFormat(void)
{
 802aaf0:	b510      	push	{r4, lr}
 802aaf2:	b086      	sub	sp, #24
  bool answer = false;
  uint32_t error;
  FLASH_EraseInitTypeDef flash_erase;
  do
  {
    if (HAL_FLASH_Unlock() != HAL_OK)
 802aaf4:	f7f8 fcfa 	bl	80234ec <HAL_FLASH_Unlock>
 802aaf8:	b138      	cbz	r0, 802ab0a <gInfoMemFormat+0x1a>
  bool answer = false;
 802aafa:	2400      	movs	r4, #0
    answer = true;

  }
  while (0);

  HAL_FLASH_Lock();
 802aafc:	f7f8 fd08 	bl	8023510 <HAL_FLASH_Lock>
#ifdef HAL_ICACHE_MODULE_ENABLED
    HAL_ICACHE_Enable();
 802ab00:	f7f9 fb62 	bl	80241c8 <HAL_ICACHE_Enable>
#endif
  return answer;
}
 802ab04:	4620      	mov	r0, r4
 802ab06:	b006      	add	sp, #24
 802ab08:	bd10      	pop	{r4, pc}
    if (HAL_ICACHE_Disable() != HAL_OK)
 802ab0a:	f7f9 fb67 	bl	80241dc <HAL_ICACHE_Disable>
 802ab0e:	2800      	cmp	r0, #0
 802ab10:	d1f3      	bne.n	802aafa <gInfoMemFormat+0xa>
    flash_erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 802ab12:	2304      	movs	r3, #4
    flash_erase.Sector = GINFO_MEM_SECTOR;
 802ab14:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
    flash_erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 802ab18:	9302      	str	r3, [sp, #8]
    flash_erase.Sector = GINFO_MEM_SECTOR;
 802ab1a:	4b0d      	ldr	r3, [pc, #52]	@ (802ab50 <gInfoMemFormat+0x60>)
    if (HAL_FLASHEx_Erase(&flash_erase, &error) != HAL_OK)
 802ab1c:	a802      	add	r0, sp, #8
    flash_erase.Sector = GINFO_MEM_SECTOR;
 802ab1e:	899b      	ldrh	r3, [r3, #12]
 802ab20:	1e5a      	subs	r2, r3, #1
 802ab22:	b292      	uxth	r2, r2
 802ab24:	428a      	cmp	r2, r1
 802ab26:	bf8e      	itee	hi
 802ab28:	237f      	movhi	r3, #127	@ 0x7f
 802ab2a:	091b      	lsrls	r3, r3, #4
 802ab2c:	f103 33ff 	addls.w	r3, r3, #4294967295
 802ab30:	9304      	str	r3, [sp, #16]
    flash_erase.NbSectors = 1;
 802ab32:	2301      	movs	r3, #1
 802ab34:	9305      	str	r3, [sp, #20]
    flash_erase.Banks = FLASH_BANK_2;
 802ab36:	2302      	movs	r3, #2
    if (HAL_FLASHEx_Erase(&flash_erase, &error) != HAL_OK)
 802ab38:	a901      	add	r1, sp, #4
    flash_erase.Banks = FLASH_BANK_2;
 802ab3a:	9303      	str	r3, [sp, #12]
    if (HAL_FLASHEx_Erase(&flash_erase, &error) != HAL_OK)
 802ab3c:	f7f8 fdb8 	bl	80236b0 <HAL_FLASHEx_Erase>
 802ab40:	2800      	cmp	r0, #0
 802ab42:	d1da      	bne.n	802aafa <gInfoMemFormat+0xa>
    if (error != 0xFFFFFFFF)
 802ab44:	9c01      	ldr	r4, [sp, #4]
 802ab46:	1c63      	adds	r3, r4, #1
 802ab48:	425c      	negs	r4, r3
 802ab4a:	415c      	adcs	r4, r3
 802ab4c:	e7d6      	b.n	802aafc <gInfoMemFormat+0xc>
 802ab4e:	bf00      	nop
 802ab50:	08fff800 	.word	0x08fff800

0802ab54 <gInfoMemRead>:
 * @note   This function reads data from the GInfo memory address into the buffer pointed to
 *         by `ginfo_mem_handle_.data_pointer`. It disables the instruction cache during the
 *         read operation (if enabled) to ensure the data is correctly read from memory.
 */
bool gInfoMemRead(void)
{
 802ab54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool answer = false;
  uint8_t *data = ginfo_mem_handle_.data_pointer;
 802ab56:	4d13      	ldr	r5, [pc, #76]	@ (802aba4 <gInfoMemRead+0x50>)
 802ab58:	682c      	ldr	r4, [r5, #0]
  do
  {
#ifdef HAL_ICACHE_MODULE_ENABLED
    if (HAL_ICACHE_Disable() != HAL_OK)
 802ab5a:	f7f9 fb3f 	bl	80241dc <HAL_ICACHE_Disable>
 802ab5e:	b910      	cbnz	r0, 802ab66 <gInfoMemRead+0x12>
    {
      break;
    }
#endif
    if ((data != NULL) && (ginfo_mem_handle_.size > 0))
 802ab60:	b1bc      	cbz	r4, 802ab92 <gInfoMemRead+0x3e>
 802ab62:	686b      	ldr	r3, [r5, #4]
 802ab64:	b9cb      	cbnz	r3, 802ab9a <gInfoMemRead+0x46>
  bool answer = false;
 802ab66:	2400      	movs	r4, #0
 802ab68:	e013      	b.n	802ab92 <gInfoMemRead+0x3e>
    {
      for (uint32_t i = 0; i < ginfo_mem_handle_.size; i++)
      {
        *data = (*(__IO uint8_t*) (GINFO_MEM_ADDRESS + i));
 802ab6a:	898b      	ldrh	r3, [r1, #12]
 802ab6c:	1e5a      	subs	r2, r3, #1
 802ab6e:	b292      	uxth	r2, r2
 802ab70:	42b2      	cmp	r2, r6
 802ab72:	bf8f      	iteee	hi
 802ab74:	463b      	movhi	r3, r7
 802ab76:	091b      	lsrls	r3, r3, #4
 802ab78:	039b      	lslls	r3, r3, #14
 802ab7a:	f103 63ff 	addls.w	r3, r3, #133693440	@ 0x7f80000
 802ab7e:	bf98      	it	ls
 802ab80:	f503 23fc 	addls.w	r3, r3, #516096	@ 0x7e000
 802ab84:	5cc3      	ldrb	r3, [r0, r3]
 802ab86:	5423      	strb	r3, [r4, r0]
      for (uint32_t i = 0; i < ginfo_mem_handle_.size; i++)
 802ab88:	3001      	adds	r0, #1
 802ab8a:	686b      	ldr	r3, [r5, #4]
 802ab8c:	4283      	cmp	r3, r0
 802ab8e:	d8ec      	bhi.n	802ab6a <gInfoMemRead+0x16>
        data++;
      }
      answer = true;
 802ab90:	2401      	movs	r4, #1

  }
  while (0);

#ifdef HAL_ICACHE_MODULE_ENABLED
  HAL_ICACHE_Enable();
 802ab92:	f7f9 fb19 	bl	80241c8 <HAL_ICACHE_Enable>
#endif
  return answer;
}
 802ab96:	4620      	mov	r0, r4
 802ab98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *data = (*(__IO uint8_t*) (GINFO_MEM_ADDRESS + i));
 802ab9a:	f64f 76fd 	movw	r6, #65533	@ 0xfffd
 802ab9e:	4902      	ldr	r1, [pc, #8]	@ (802aba8 <gInfoMemRead+0x54>)
 802aba0:	4f02      	ldr	r7, [pc, #8]	@ (802abac <gInfoMemRead+0x58>)
 802aba2:	e7f2      	b.n	802ab8a <gInfoMemRead+0x36>
 802aba4:	200424d4 	.word	0x200424d4
 802aba8:	08fff800 	.word	0x08fff800
 802abac:	081fe000 	.word	0x081fe000

0802abb0 <gInfoReadHw>:
{
 802abb0:	b538      	push	{r3, r4, r5, lr}
    if (str == NULL)
 802abb2:	4605      	mov	r5, r0
 802abb4:	b910      	cbnz	r0, 802abbc <gInfoReadHw+0xc>
  bool answer = false;
 802abb6:	2400      	movs	r4, #0
}
 802abb8:	4620      	mov	r0, r4
 802abba:	bd38      	pop	{r3, r4, r5, pc}
    if (gInfoMemRead() == false)
 802abbc:	f7ff ffca 	bl	802ab54 <gInfoMemRead>
 802abc0:	4604      	mov	r4, r0
 802abc2:	2800      	cmp	r0, #0
 802abc4:	d0f7      	beq.n	802abb6 <gInfoReadHw+0x6>
    strcpy(str, ginfo_storage_.hw);
 802abc6:	4628      	mov	r0, r5
 802abc8:	4901      	ldr	r1, [pc, #4]	@ (802abd0 <gInfoReadHw+0x20>)
 802abca:	f000 fdd4 	bl	802b776 <strcpy>
    answer = true;
 802abce:	e7f3      	b.n	802abb8 <gInfoReadHw+0x8>
 802abd0:	200424e0 	.word	0x200424e0

0802abd4 <gInfoReadSn>:
{
 802abd4:	b538      	push	{r3, r4, r5, lr}
    if (str == NULL)
 802abd6:	4605      	mov	r5, r0
 802abd8:	b910      	cbnz	r0, 802abe0 <gInfoReadSn+0xc>
  bool answer = false;
 802abda:	2400      	movs	r4, #0
}
 802abdc:	4620      	mov	r0, r4
 802abde:	bd38      	pop	{r3, r4, r5, pc}
    if (gInfoMemRead() == false)
 802abe0:	f7ff ffb8 	bl	802ab54 <gInfoMemRead>
 802abe4:	4604      	mov	r4, r0
 802abe6:	2800      	cmp	r0, #0
 802abe8:	d0f7      	beq.n	802abda <gInfoReadSn+0x6>
    strcpy(str, ginfo_storage_.sn);
 802abea:	4628      	mov	r0, r5
 802abec:	4901      	ldr	r1, [pc, #4]	@ (802abf4 <gInfoReadSn+0x20>)
 802abee:	f000 fdc2 	bl	802b776 <strcpy>
    answer = true;
 802abf2:	e7f3      	b.n	802abdc <gInfoReadSn+0x8>
 802abf4:	20042500 	.word	0x20042500

0802abf8 <gInfoReadIv>:
{
 802abf8:	b510      	push	{r4, lr}
    if (iv == NULL)
 802abfa:	4604      	mov	r4, r0
 802abfc:	b908      	cbnz	r0, 802ac02 <gInfoReadIv+0xa>
  bool answer = false;
 802abfe:	2000      	movs	r0, #0
}
 802ac00:	bd10      	pop	{r4, pc}
    if (gInfoMemRead() == false)
 802ac02:	f7ff ffa7 	bl	802ab54 <gInfoMemRead>
 802ac06:	2800      	cmp	r0, #0
 802ac08:	d0f9      	beq.n	802abfe <gInfoReadIv+0x6>
    memcpy(iv, ginfo_storage_.iv, sizeof(ginfo_storage_.iv));
 802ac0a:	4b05      	ldr	r3, [pc, #20]	@ (802ac20 <gInfoReadIv+0x28>)
 802ac0c:	f103 0210 	add.w	r2, r3, #16
 802ac10:	f853 1b04 	ldr.w	r1, [r3], #4
 802ac14:	4293      	cmp	r3, r2
 802ac16:	f844 1b04 	str.w	r1, [r4], #4
 802ac1a:	d1f9      	bne.n	802ac10 <gInfoReadIv+0x18>
 802ac1c:	e7f0      	b.n	802ac00 <gInfoReadIv+0x8>
 802ac1e:	bf00      	nop
 802ac20:	20042520 	.word	0x20042520

0802ac24 <gInfoMemWrite>:
 *         for writing. It writes data from the buffer pointed to by `ginfo_mem_handle_.data_pointer`
 *         in quadword (16 bytes) increments. After writing, it verifies that the written data
 *         matches the data in the buffer.
 */
bool gInfoMemWrite(void)
{
 802ac24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool answer = true;
  uint8_t *data = ginfo_mem_handle_.data_pointer;
 802ac28:	4e2b      	ldr	r6, [pc, #172]	@ (802acd8 <gInfoMemWrite+0xb4>)
 802ac2a:	6837      	ldr	r7, [r6, #0]
  do
  {
    if (data == NULL)
 802ac2c:	b93f      	cbnz	r7, 802ac3e <gInfoMemWrite+0x1a>
    {
      answer = false;
 802ac2e:	2500      	movs	r5, #0
      data++;
    }

  } while (0);

  HAL_FLASH_Lock();
 802ac30:	f7f8 fc6e 	bl	8023510 <HAL_FLASH_Lock>
#ifdef HAL_ICACHE_MODULE_ENABLED
  HAL_ICACHE_Enable();
 802ac34:	f7f9 fac8 	bl	80241c8 <HAL_ICACHE_Enable>
#endif
  return answer;
}
 802ac38:	4628      	mov	r0, r5
 802ac3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (gInfoMemFormat() == false)
 802ac3e:	f7ff ff57 	bl	802aaf0 <gInfoMemFormat>
 802ac42:	4605      	mov	r5, r0
 802ac44:	2800      	cmp	r0, #0
 802ac46:	d0f2      	beq.n	802ac2e <gInfoMemWrite+0xa>
    if (HAL_FLASH_Unlock() != HAL_OK)
 802ac48:	f7f8 fc50 	bl	80234ec <HAL_FLASH_Unlock>
 802ac4c:	2800      	cmp	r0, #0
 802ac4e:	d1ef      	bne.n	802ac30 <gInfoMemWrite+0xc>
    if (HAL_ICACHE_Disable() != HAL_OK)
 802ac50:	f7f9 fac4 	bl	80241dc <HAL_ICACHE_Disable>
 802ac54:	4604      	mov	r4, r0
 802ac56:	2800      	cmp	r0, #0
 802ac58:	d1ea      	bne.n	802ac30 <gInfoMemWrite+0xc>
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, GINFO_MEM_ADDRESS + i, (uint32_t)data) != HAL_OK)
 802ac5a:	f64f 79fd 	movw	r9, #65533	@ 0xfffd
 802ac5e:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 802acdc <gInfoMemWrite+0xb8>
 802ac62:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 802ace0 <gInfoMemWrite+0xbc>
    for (uint32_t i = 0; i < ginfo_mem_handle_.size; i += 16)
 802ac66:	6873      	ldr	r3, [r6, #4]
 802ac68:	42a3      	cmp	r3, r4
 802ac6a:	d81d      	bhi.n	802aca8 <gInfoMemWrite+0x84>
    for (uint32_t i = 0; i < ginfo_mem_handle_.size; i++)
 802ac6c:	2200      	movs	r2, #0
 802ac6e:	e9d6 4000 	ldrd	r4, r0, [r6]
      if (*data != (*(__IO uint8_t*) (GINFO_MEM_ADDRESS + i)))
 802ac72:	f64f 77fd 	movw	r7, #65533	@ 0xfffd
 802ac76:	4e19      	ldr	r6, [pc, #100]	@ (802acdc <gInfoMemWrite+0xb8>)
 802ac78:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802ace0 <gInfoMemWrite+0xbc>
    for (uint32_t i = 0; i < ginfo_mem_handle_.size; i++)
 802ac7c:	4290      	cmp	r0, r2
 802ac7e:	d0d7      	beq.n	802ac30 <gInfoMemWrite+0xc>
      if (*data != (*(__IO uint8_t*) (GINFO_MEM_ADDRESS + i)))
 802ac80:	89b3      	ldrh	r3, [r6, #12]
 802ac82:	f814 e002 	ldrb.w	lr, [r4, r2]
 802ac86:	1e59      	subs	r1, r3, #1
 802ac88:	b289      	uxth	r1, r1
 802ac8a:	42b9      	cmp	r1, r7
 802ac8c:	bf8f      	iteee	hi
 802ac8e:	4663      	movhi	r3, ip
 802ac90:	091b      	lsrls	r3, r3, #4
 802ac92:	039b      	lslls	r3, r3, #14
 802ac94:	f103 63ff 	addls.w	r3, r3, #133693440	@ 0x7f80000
 802ac98:	bf98      	it	ls
 802ac9a:	f503 23fc 	addls.w	r3, r3, #516096	@ 0x7e000
 802ac9e:	5cd3      	ldrb	r3, [r2, r3]
 802aca0:	459e      	cmp	lr, r3
 802aca2:	d1c4      	bne.n	802ac2e <gInfoMemWrite+0xa>
    for (uint32_t i = 0; i < ginfo_mem_handle_.size; i++)
 802aca4:	3201      	adds	r2, #1
 802aca6:	e7e9      	b.n	802ac7c <gInfoMemWrite+0x58>
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, GINFO_MEM_ADDRESS + i, (uint32_t)data) != HAL_OK)
 802aca8:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 802acac:	2002      	movs	r0, #2
 802acae:	1e4b      	subs	r3, r1, #1
 802acb0:	b29b      	uxth	r3, r3
 802acb2:	454b      	cmp	r3, r9
 802acb4:	bf8f      	iteee	hi
 802acb6:	4651      	movhi	r1, sl
 802acb8:	0909      	lsrls	r1, r1, #4
 802acba:	0389      	lslls	r1, r1, #14
 802acbc:	f101 61ff 	addls.w	r1, r1, #133693440	@ 0x7f80000
 802acc0:	bf98      	it	ls
 802acc2:	f501 21fc 	addls.w	r1, r1, #516096	@ 0x7e000
 802acc6:	193a      	adds	r2, r7, r4
 802acc8:	4421      	add	r1, r4
 802acca:	f7f8 fc59 	bl	8023580 <HAL_FLASH_Program>
 802acce:	b908      	cbnz	r0, 802acd4 <gInfoMemWrite+0xb0>
    for (uint32_t i = 0; i < ginfo_mem_handle_.size; i += 16)
 802acd0:	3410      	adds	r4, #16
 802acd2:	e7c8      	b.n	802ac66 <gInfoMemWrite+0x42>
        answer = false;
 802acd4:	2500      	movs	r5, #0
 802acd6:	e7c9      	b.n	802ac6c <gInfoMemWrite+0x48>
 802acd8:	200424d4 	.word	0x200424d4
 802acdc:	08fff800 	.word	0x08fff800
 802ace0:	081fe000 	.word	0x081fe000

0802ace4 <gInfoSave>:
    if (gInfoMemWrite() == false)
 802ace4:	f7ff bf9e 	b.w	802ac24 <gInfoMemWrite>

0802ace8 <gInfoInit>:
    ginfo_mem_handle_.size = size;
 802ace8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
{
 802acec:	b510      	push	{r4, lr}
    ginfo_mem_handle_.size = size;
 802acee:	4b24      	ldr	r3, [pc, #144]	@ (802ad80 <gInfoInit+0x98>)
    ginfo_mem_handle_.data_pointer = (uint8_t*)ptr;
 802acf0:	4c24      	ldr	r4, [pc, #144]	@ (802ad84 <gInfoInit+0x9c>)
    ginfo_mem_handle_.size = size;
 802acf2:	605a      	str	r2, [r3, #4]
    ginfo_mem_handle_.data_pointer = (uint8_t*)ptr;
 802acf4:	601c      	str	r4, [r3, #0]
  if (gInfoMemRead() == false)
 802acf6:	f7ff ff2d 	bl	802ab54 <gInfoMemRead>
 802acfa:	b908      	cbnz	r0, 802ad00 <gInfoInit+0x18>
    gCoreHalt();
 802acfc:	f7ff fe5c 	bl	802a9b8 <gCoreHalt>
  if (ginfo_storage_.check != GINFO_CHECK_WORD)
 802ad00:	6822      	ldr	r2, [r4, #0]
 802ad02:	4b21      	ldr	r3, [pc, #132]	@ (802ad88 <gInfoInit+0xa0>)
 802ad04:	429a      	cmp	r2, r3
 802ad06:	d028      	beq.n	802ad5a <gInfoInit+0x72>
    memset(&ginfo_storage_, 0, sizeof(GInfoStorageStruct));
 802ad08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 802ad0c:	2100      	movs	r1, #0
 802ad0e:	481d      	ldr	r0, [pc, #116]	@ (802ad84 <gInfoInit+0x9c>)
 802ad10:	f000 fc92 	bl	802b638 <memset>
    memcpy(&ginfo_storage_.config, &ginfo_config_initialize_, GINFO_CONFIG_SIZE);
 802ad14:	f44f 52f0 	mov.w	r2, #7680	@ 0x1e00
 802ad18:	491c      	ldr	r1, [pc, #112]	@ (802ad8c <gInfoInit+0xa4>)
 802ad1a:	481d      	ldr	r0, [pc, #116]	@ (802ad90 <gInfoInit+0xa8>)
 802ad1c:	f000 fd36 	bl	802b78c <memcpy>
    ginfo_storage_.check = GINFO_CHECK_WORD;
 802ad20:	f06f 032e 	mvn.w	r3, #46	@ 0x2e
 802ad24:	7023      	strb	r3, [r4, #0]
 802ad26:	231d      	movs	r3, #29
 802ad28:	7063      	strb	r3, [r4, #1]
 802ad2a:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 802ad2e:	70a3      	strb	r3, [r4, #2]
 802ad30:	2348      	movs	r3, #72	@ 0x48
    strcpy(ginfo_storage_.hw, GINFO_HW_DEFAULT);
 802ad32:	4918      	ldr	r1, [pc, #96]	@ (802ad94 <gInfoInit+0xac>)
 802ad34:	4818      	ldr	r0, [pc, #96]	@ (802ad98 <gInfoInit+0xb0>)
    ginfo_storage_.check = GINFO_CHECK_WORD;
 802ad36:	70e3      	strb	r3, [r4, #3]
    strcpy(ginfo_storage_.hw, GINFO_HW_DEFAULT);
 802ad38:	f000 fd1d 	bl	802b776 <strcpy>
    strcpy(ginfo_storage_.sn, GINFO_SN_DEFAULT);
 802ad3c:	4915      	ldr	r1, [pc, #84]	@ (802ad94 <gInfoInit+0xac>)
 802ad3e:	4817      	ldr	r0, [pc, #92]	@ (802ad9c <gInfoInit+0xb4>)
 802ad40:	f000 fd19 	bl	802b776 <strcpy>
    ginfo_storage_.temp_threshold = GTEMP_ALARM_DESI_DEFAULT;
 802ad44:	2358      	movs	r3, #88	@ 0x58
 802ad46:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 802ad4a:	2302      	movs	r3, #2
 802ad4c:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
    if (gInfoMemWrite() == false)
 802ad50:	f7ff ff68 	bl	802ac24 <gInfoMemWrite>
    if (gInfoSave() == false)
 802ad54:	b908      	cbnz	r0, 802ad5a <gInfoInit+0x72>
      gCoreHalt();
 802ad56:	f7ff fe2f 	bl	802a9b8 <gCoreHalt>
  if (ginfo_storage_.config.check_do_not_change_in_code != GINFO_CONFIG_CHECK_WORD)
 802ad5a:	f8d4 2200 	ldr.w	r2, [r4, #512]	@ 0x200
 802ad5e:	4b10      	ldr	r3, [pc, #64]	@ (802ada0 <gInfoInit+0xb8>)
 802ad60:	429a      	cmp	r2, r3
 802ad62:	d00c      	beq.n	802ad7e <gInfoInit+0x96>
    memcpy(&ginfo_storage_.config, &ginfo_config_initialize_, GINFO_CONFIG_SIZE);
 802ad64:	f44f 52f0 	mov.w	r2, #7680	@ 0x1e00
 802ad68:	4908      	ldr	r1, [pc, #32]	@ (802ad8c <gInfoInit+0xa4>)
 802ad6a:	4809      	ldr	r0, [pc, #36]	@ (802ad90 <gInfoInit+0xa8>)
 802ad6c:	f000 fd0e 	bl	802b78c <memcpy>
    if (gInfoMemWrite() == false)
 802ad70:	f7ff ff58 	bl	802ac24 <gInfoMemWrite>
    if (gInfoSave() == false)
 802ad74:	b918      	cbnz	r0, 802ad7e <gInfoInit+0x96>
}
 802ad76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      gCoreHalt();
 802ad7a:	f7ff be1d 	b.w	802a9b8 <gCoreHalt>
}
 802ad7e:	bd10      	pop	{r4, pc}
 802ad80:	200424d4 	.word	0x200424d4
 802ad84:	200424dc 	.word	0x200424dc
 802ad88:	48831dd1 	.word	0x48831dd1
 802ad8c:	0802c51f 	.word	0x0802c51f
 802ad90:	200426dc 	.word	0x200426dc
 802ad94:	0802c50f 	.word	0x0802c50f
 802ad98:	200424e0 	.word	0x200424e0
 802ad9c:	20042500 	.word	0x20042500
 802ada0:	0981cda5 	.word	0x0981cda5

0802ada4 <gInfoWriteHw>:
{
 802ada4:	b538      	push	{r3, r4, r5, lr}
    if (str == NULL)
 802ada6:	4605      	mov	r5, r0
 802ada8:	b910      	cbnz	r0, 802adb0 <gInfoWriteHw+0xc>
  bool answer = false;
 802adaa:	2400      	movs	r4, #0
}
 802adac:	4620      	mov	r0, r4
 802adae:	bd38      	pop	{r3, r4, r5, pc}
    if (strlen(str) > sizeof(ginfo_storage_.hw) - 1)
 802adb0:	f7f6 f8dd 	bl	8020f6e <strlen>
 802adb4:	281f      	cmp	r0, #31
 802adb6:	d8f8      	bhi.n	802adaa <gInfoWriteHw+0x6>
    if (gInfoMemRead() == false)
 802adb8:	f7ff fecc 	bl	802ab54 <gInfoMemRead>
 802adbc:	4604      	mov	r4, r0
 802adbe:	2800      	cmp	r0, #0
 802adc0:	d0f3      	beq.n	802adaa <gInfoWriteHw+0x6>
    if (memcmp(ginfo_storage_.hw, str, sizeof(ginfo_storage_.hw)) != 0)
 802adc2:	2220      	movs	r2, #32
 802adc4:	4629      	mov	r1, r5
 802adc6:	4809      	ldr	r0, [pc, #36]	@ (802adec <gInfoWriteHw+0x48>)
 802adc8:	f000 fc0c 	bl	802b5e4 <memcmp>
 802adcc:	2800      	cmp	r0, #0
 802adce:	d0ed      	beq.n	802adac <gInfoWriteHw+0x8>
    	memset(ginfo_storage_.hw, 0, sizeof(ginfo_storage_.hw));
 802add0:	2220      	movs	r2, #32
 802add2:	2100      	movs	r1, #0
 802add4:	4805      	ldr	r0, [pc, #20]	@ (802adec <gInfoWriteHw+0x48>)
 802add6:	f000 fc2f 	bl	802b638 <memset>
    	strncpy(ginfo_storage_.hw, str, sizeof(ginfo_storage_.hw) - 1);
 802adda:	4629      	mov	r1, r5
 802addc:	221f      	movs	r2, #31
 802adde:	4803      	ldr	r0, [pc, #12]	@ (802adec <gInfoWriteHw+0x48>)
 802ade0:	f000 fc32 	bl	802b648 <strncpy>
}
 802ade4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	if (gInfoMemWrite() == false)
 802ade8:	f7ff bf1c 	b.w	802ac24 <gInfoMemWrite>
 802adec:	200424e0 	.word	0x200424e0

0802adf0 <gInfoWriteSn>:
{
 802adf0:	b538      	push	{r3, r4, r5, lr}
    if (str == NULL)
 802adf2:	4605      	mov	r5, r0
 802adf4:	b910      	cbnz	r0, 802adfc <gInfoWriteSn+0xc>
  bool answer = false;
 802adf6:	2400      	movs	r4, #0
}
 802adf8:	4620      	mov	r0, r4
 802adfa:	bd38      	pop	{r3, r4, r5, pc}
    if (strlen(str) > sizeof(ginfo_storage_.sn) - 1)
 802adfc:	f7f6 f8b7 	bl	8020f6e <strlen>
 802ae00:	281f      	cmp	r0, #31
 802ae02:	d8f8      	bhi.n	802adf6 <gInfoWriteSn+0x6>
    if (gInfoMemRead() == false)
 802ae04:	f7ff fea6 	bl	802ab54 <gInfoMemRead>
 802ae08:	4604      	mov	r4, r0
 802ae0a:	2800      	cmp	r0, #0
 802ae0c:	d0f3      	beq.n	802adf6 <gInfoWriteSn+0x6>
    if (memcmp(ginfo_storage_.sn, str, sizeof(ginfo_storage_.sn)) != 0)
 802ae0e:	2220      	movs	r2, #32
 802ae10:	4629      	mov	r1, r5
 802ae12:	4809      	ldr	r0, [pc, #36]	@ (802ae38 <gInfoWriteSn+0x48>)
 802ae14:	f000 fbe6 	bl	802b5e4 <memcmp>
 802ae18:	2800      	cmp	r0, #0
 802ae1a:	d0ed      	beq.n	802adf8 <gInfoWriteSn+0x8>
    	memset(ginfo_storage_.sn, 0, sizeof(ginfo_storage_.sn));
 802ae1c:	2220      	movs	r2, #32
 802ae1e:	2100      	movs	r1, #0
 802ae20:	4805      	ldr	r0, [pc, #20]	@ (802ae38 <gInfoWriteSn+0x48>)
 802ae22:	f000 fc09 	bl	802b638 <memset>
    	strncpy(ginfo_storage_.sn, str, sizeof(ginfo_storage_.sn) - 1);
 802ae26:	4629      	mov	r1, r5
 802ae28:	221f      	movs	r2, #31
 802ae2a:	4803      	ldr	r0, [pc, #12]	@ (802ae38 <gInfoWriteSn+0x48>)
 802ae2c:	f000 fc0c 	bl	802b648 <strncpy>
}
 802ae30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	if (gInfoMemWrite() == false)
 802ae34:	f7ff bef6 	b.w	802ac24 <gInfoMemWrite>
 802ae38:	20042500 	.word	0x20042500

0802ae3c <gInfoWriteIv>:
{
 802ae3c:	b538      	push	{r3, r4, r5, lr}
    if (iv == NULL)
 802ae3e:	4604      	mov	r4, r0
 802ae40:	b910      	cbnz	r0, 802ae48 <gInfoWriteIv+0xc>
  bool answer = false;
 802ae42:	2500      	movs	r5, #0
}
 802ae44:	4628      	mov	r0, r5
 802ae46:	bd38      	pop	{r3, r4, r5, pc}
    if (gInfoMemRead() == false)
 802ae48:	f7ff fe84 	bl	802ab54 <gInfoMemRead>
 802ae4c:	4605      	mov	r5, r0
 802ae4e:	2800      	cmp	r0, #0
 802ae50:	d0f7      	beq.n	802ae42 <gInfoWriteIv+0x6>
    if (memcmp(ginfo_storage_.iv, iv, sizeof(ginfo_storage_.iv)) != 0)
 802ae52:	2210      	movs	r2, #16
 802ae54:	4621      	mov	r1, r4
 802ae56:	480c      	ldr	r0, [pc, #48]	@ (802ae88 <gInfoWriteIv+0x4c>)
 802ae58:	f000 fbc4 	bl	802b5e4 <memcmp>
 802ae5c:	2800      	cmp	r0, #0
 802ae5e:	d0f1      	beq.n	802ae44 <gInfoWriteIv+0x8>
      memset(ginfo_storage_.iv, 0, sizeof(ginfo_storage_.iv));
 802ae60:	2210      	movs	r2, #16
 802ae62:	2100      	movs	r1, #0
 802ae64:	4808      	ldr	r0, [pc, #32]	@ (802ae88 <gInfoWriteIv+0x4c>)
 802ae66:	f000 fbe7 	bl	802b638 <memset>
      memcpy(ginfo_storage_.iv, iv, sizeof(ginfo_storage_.iv));
 802ae6a:	4620      	mov	r0, r4
 802ae6c:	4b06      	ldr	r3, [pc, #24]	@ (802ae88 <gInfoWriteIv+0x4c>)
 802ae6e:	f104 0210 	add.w	r2, r4, #16
 802ae72:	f850 1b04 	ldr.w	r1, [r0], #4
 802ae76:	4290      	cmp	r0, r2
 802ae78:	f843 1b04 	str.w	r1, [r3], #4
 802ae7c:	d1f9      	bne.n	802ae72 <gInfoWriteIv+0x36>
}
 802ae7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      if (gInfoMemWrite() == false)
 802ae82:	f7ff becf 	b.w	802ac24 <gInfoMemWrite>
 802ae86:	bf00      	nop
 802ae88:	20042520 	.word	0x20042520

0802ae8c <gTempGetDesiCelsius>:
 *         The temperature value is multiplied by 10 for precision.
 */
int16_t gTempGetDesiCelsius(void)
{
  return gtemp_.temp;
}
 802ae8c:	4b01      	ldr	r3, [pc, #4]	@ (802ae94 <gTempGetDesiCelsius+0x8>)
 802ae8e:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 802ae92:	4770      	bx	lr
 802ae94:	200444dc 	.word	0x200444dc

0802ae98 <gTempSetAlarmDesiCelsius>:
 * @note   This function updates the alarm temperature threshold for the temperature monitoring.
 *         The temperature value is expected to be in deci-Celsius.
 */
void gTempSetAlarmDesiCelsius(int16_t temp)
{
  gtemp_.alarm_val = temp;
 802ae98:	4b01      	ldr	r3, [pc, #4]	@ (802aea0 <gTempSetAlarmDesiCelsius+0x8>)
 802ae9a:	8018      	strh	r0, [r3, #0]
}
 802ae9c:	4770      	bx	lr
 802ae9e:	bf00      	nop
 802aea0:	200444dc 	.word	0x200444dc

0802aea4 <gTempGetAlarmDesiCelsius>:
 *         monitoring system. The returned value is in deci-Celsius.
 */
int16_t gTempGetAlarmDesiCelsius(void)
{
  return gtemp_.alarm_val;
}
 802aea4:	4b01      	ldr	r3, [pc, #4]	@ (802aeac <gTempGetAlarmDesiCelsius+0x8>)
 802aea6:	f9b3 0000 	ldrsh.w	r0, [r3]
 802aeaa:	4770      	bx	lr
 802aeac:	200444dc 	.word	0x200444dc

0802aeb0 <gTempAlarmCallback>:
 * @note   This function Calls when current temperature reach to the alarm values.
 */
__weak void gTempAlarmCallback(void)
{

}
 802aeb0:	4770      	bx	lr
	...

0802aeb4 <gTempGet>:
 * @param  None
 * @return Current temperature in deci-Celsius
 * @note   This function returns the current temperature
 */
int16_t gTempGet(void)
{
 802aeb4:	b510      	push	{r4, lr}
  int16_t answer = GTEMP_ERROR_VAL;
  do
  {
    if (HAL_ADCEx_Calibration_Start(&GTEMP_ADC, ADC_SINGLE_ENDED) != HAL_OK)
 802aeb6:	217f      	movs	r1, #127	@ 0x7f
 802aeb8:	4811      	ldr	r0, [pc, #68]	@ (802af00 <gTempGet+0x4c>)
 802aeba:	f7f7 fcef 	bl	802289c <HAL_ADCEx_Calibration_Start>
 802aebe:	b128      	cbz	r0, 802aecc <gTempGet+0x18>
  int16_t answer = GTEMP_ERROR_VAL;
 802aec0:	4c10      	ldr	r4, [pc, #64]	@ (802af04 <gTempGet+0x50>)
    answer = (((int32_t) __HAL_ADC_CALC_DATA_TO_VOLTAGE(GTEMP_VREF_MV, HAL_ADC_GetValue(&GTEMP_ADC),
        ADC_RESOLUTION_12B) - GTEMP_V0) / (GTEMP_COEF / 10));
  }
  while (0);

  HAL_ADC_Stop(&GTEMP_ADC);
 802aec2:	480f      	ldr	r0, [pc, #60]	@ (802af00 <gTempGet+0x4c>)
 802aec4:	f7f7 fccb 	bl	802285e <HAL_ADC_Stop>
  return answer;
}
 802aec8:	4620      	mov	r0, r4
 802aeca:	bd10      	pop	{r4, pc}
    if (HAL_ADC_Start(&GTEMP_ADC) != HAL_OK)
 802aecc:	480c      	ldr	r0, [pc, #48]	@ (802af00 <gTempGet+0x4c>)
 802aece:	f7f7 fc21 	bl	8022714 <HAL_ADC_Start>
 802aed2:	2800      	cmp	r0, #0
 802aed4:	d1f4      	bne.n	802aec0 <gTempGet+0xc>
    if (HAL_ADC_PollForConversion(&GTEMP_ADC, 10) != HAL_OK)
 802aed6:	210a      	movs	r1, #10
 802aed8:	4809      	ldr	r0, [pc, #36]	@ (802af00 <gTempGet+0x4c>)
 802aeda:	f7f7 f8ff 	bl	80220dc <HAL_ADC_PollForConversion>
 802aede:	2800      	cmp	r0, #0
 802aee0:	d1ee      	bne.n	802aec0 <gTempGet+0xc>
    answer = (((int32_t) __HAL_ADC_CALC_DATA_TO_VOLTAGE(GTEMP_VREF_MV, HAL_ADC_GetValue(&GTEMP_ADC),
 802aee2:	4807      	ldr	r0, [pc, #28]	@ (802af00 <gTempGet+0x4c>)
 802aee4:	f7f7 f96c 	bl	80221c0 <HAL_ADC_GetValue>
 802aee8:	f640 43e4 	movw	r3, #3300	@ 0xce4
 802aeec:	fb03 f400 	mul.w	r4, r3, r0
 802aef0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 802aef4:	fbb4 f4f3 	udiv	r4, r4, r3
        ADC_RESOLUTION_12B) - GTEMP_V0) / (GTEMP_COEF / 10));
 802aef8:	f5a4 74fa 	sub.w	r4, r4, #500	@ 0x1f4
    answer = (((int32_t) __HAL_ADC_CALC_DATA_TO_VOLTAGE(GTEMP_VREF_MV, HAL_ADC_GetValue(&GTEMP_ADC),
 802aefc:	b224      	sxth	r4, r4
 802aefe:	e7e0      	b.n	802aec2 <gTempGet+0xe>
 802af00:	200000a8 	.word	0x200000a8
 802af04:	fffffc18 	.word	0xfffffc18

0802af08 <gTempInit>:
{
 802af08:	b538      	push	{r3, r4, r5, lr}
  if (HAL_ADCEx_Calibration_Start(&GTEMP_ADC, ADC_SINGLE_ENDED) != HAL_OK)
 802af0a:	217f      	movs	r1, #127	@ 0x7f
{
 802af0c:	ed2d 8b02 	vpush	{d8}
  if (HAL_ADCEx_Calibration_Start(&GTEMP_ADC, ADC_SINGLE_ENDED) != HAL_OK)
 802af10:	481b      	ldr	r0, [pc, #108]	@ (802af80 <gTempInit+0x78>)
 802af12:	f7f7 fcc3 	bl	802289c <HAL_ADCEx_Calibration_Start>
 802af16:	b108      	cbz	r0, 802af1c <gTempInit+0x14>
    gCoreHalt();
 802af18:	f7ff fd4e 	bl	802a9b8 <gCoreHalt>
  memset(&gtemp_, 0, sizeof(GTempHandle));
 802af1c:	2200      	movs	r2, #0
 802af1e:	4b19      	ldr	r3, [pc, #100]	@ (802af84 <gTempInit+0x7c>)
  gtemp_.alarm_val = ginfo_storage_.temp_threshold;
 802af20:	4919      	ldr	r1, [pc, #100]	@ (802af88 <gTempInit+0x80>)
  memset(&gtemp_, 0, sizeof(GTempHandle));
 802af22:	e9c3 2200 	strd	r2, r2, [r3]
  gtemp_.alarm_val = ginfo_storage_.temp_threshold;
 802af26:	f891 2054 	ldrb.w	r2, [r1, #84]	@ 0x54
 802af2a:	f891 1055 	ldrb.w	r1, [r1, #85]	@ 0x55
 802af2e:	1f1d      	subs	r5, r3, #4
 802af30:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 802af34:	f823 2c04 	strh.w	r2, [r3, #-4]
  gtemp_.temp = 250;
 802af38:	23fa      	movs	r3, #250	@ 0xfa
 802af3a:	2464      	movs	r4, #100	@ 0x64
      gtemp_.temp = (int16_t)((GTEMP_FILTER_COEF * temp) + ((1.0f - GTEMP_FILTER_COEF) * gtemp_.temp));
 802af3c:	ed9f 8a13 	vldr	s16, [pc, #76]	@ 802af8c <gTempInit+0x84>
 802af40:	eddf 8a13 	vldr	s17, [pc, #76]	@ 802af90 <gTempInit+0x88>
  gtemp_.temp = 250;
 802af44:	806b      	strh	r3, [r5, #2]
    int16_t temp = gTempGet();
 802af46:	f7ff ffb5 	bl	802aeb4 <gTempGet>
    if (temp != GTEMP_ERROR_VAL)
 802af4a:	f510 7f7a 	cmn.w	r0, #1000	@ 0x3e8
 802af4e:	d012      	beq.n	802af76 <gTempInit+0x6e>
      gtemp_.temp = (int16_t)((GTEMP_FILTER_COEF * temp) + ((1.0f - GTEMP_FILTER_COEF) * gtemp_.temp));
 802af50:	ee07 0a90 	vmov	s15, r0
 802af54:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 802af58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802af5c:	ee07 3a90 	vmov	s15, r3
 802af60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802af64:	ee67 7a88 	vmul.f32	s15, s15, s16
 802af68:	eee7 7a28 	vfma.f32	s15, s14, s17
 802af6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802af70:	ee17 3a90 	vmov	r3, s15
 802af74:	806b      	strh	r3, [r5, #2]
  for (int i = 0; i < 100; i++)
 802af76:	3c01      	subs	r4, #1
 802af78:	d1e5      	bne.n	802af46 <gTempInit+0x3e>
}
 802af7a:	ecbd 8b02 	vpop	{d8}
 802af7e:	bd38      	pop	{r3, r4, r5, pc}
 802af80:	200000a8 	.word	0x200000a8
 802af84:	200444e0 	.word	0x200444e0
 802af88:	200424dc 	.word	0x200424dc
 802af8c:	3f4ccccd 	.word	0x3f4ccccd
 802af90:	3e4ccccd 	.word	0x3e4ccccd

0802af94 <gTempLoop>:
{
 802af94:	b510      	push	{r4, lr}
  if (HAL_GetTick() - gtemp_.time >= GTEMP_CHECK_INTERVAL_MS)
 802af96:	f7f6 ff93 	bl	8021ec0 <HAL_GetTick>
 802af9a:	4c1b      	ldr	r4, [pc, #108]	@ (802b008 <gTempLoop+0x74>)
 802af9c:	6863      	ldr	r3, [r4, #4]
 802af9e:	1ac0      	subs	r0, r0, r3
 802afa0:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 802afa4:	d329      	bcc.n	802affa <gTempLoop+0x66>
    gtemp_.time = HAL_GetTick();
 802afa6:	f7f6 ff8b 	bl	8021ec0 <HAL_GetTick>
 802afaa:	6060      	str	r0, [r4, #4]
    temp = gTempGet();
 802afac:	f7ff ff82 	bl	802aeb4 <gTempGet>
    if (temp != GTEMP_ERROR_VAL)
 802afb0:	f510 7f7a 	cmn.w	r0, #1000	@ 0x3e8
 802afb4:	d021      	beq.n	802affa <gTempLoop+0x66>
    	gtemp_.temp = (int16_t)((GTEMP_FILTER_COEF * temp) + ((1.0f - GTEMP_FILTER_COEF) * gtemp_.temp));
 802afb6:	ee07 0a90 	vmov	s15, r0
 802afba:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 802afbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802afc2:	ee07 3a90 	vmov	s15, r3
 802afc6:	eddf 6a11 	vldr	s13, [pc, #68]	@ 802b00c <gTempLoop+0x78>
 802afca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802afce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802afd2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 802b010 <gTempLoop+0x7c>
 802afd6:	eee7 7a26 	vfma.f32	s15, s14, s13
 802afda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802afde:	ee17 3a90 	vmov	r3, s15
      if (gtemp_.state == GTEMP_STATE_NORMAL)
 802afe2:	7a21      	ldrb	r1, [r4, #8]
    	gtemp_.temp = (int16_t)((GTEMP_FILTER_COEF * temp) + ((1.0f - GTEMP_FILTER_COEF) * gtemp_.temp));
 802afe4:	b21b      	sxth	r3, r3
        if (gtemp_.temp > gtemp_.alarm_val)
 802afe6:	f9b4 2000 	ldrsh.w	r2, [r4]
    	gtemp_.temp = (int16_t)((GTEMP_FILTER_COEF * temp) + ((1.0f - GTEMP_FILTER_COEF) * gtemp_.temp));
 802afea:	8063      	strh	r3, [r4, #2]
      if (gtemp_.state == GTEMP_STATE_NORMAL)
 802afec:	b931      	cbnz	r1, 802affc <gTempLoop+0x68>
        if (gtemp_.temp > gtemp_.alarm_val)
 802afee:	4293      	cmp	r3, r2
 802aff0:	dd03      	ble.n	802affa <gTempLoop+0x66>
          gtemp_.state = GTEMP_STATE_ALARM;
 802aff2:	2301      	movs	r3, #1
 802aff4:	7223      	strb	r3, [r4, #8]
          gTempAlarmCallback();
 802aff6:	f7ff ff5b 	bl	802aeb0 <gTempAlarmCallback>
}
 802affa:	bd10      	pop	{r4, pc}
        if (gtemp_.temp < (gtemp_.alarm_val - (GTEMP_HYSTERESIS_C * 10)))
 802affc:	3a32      	subs	r2, #50	@ 0x32
 802affe:	4293      	cmp	r3, r2
          gtemp_.state = GTEMP_STATE_NORMAL;
 802b000:	bfbc      	itt	lt
 802b002:	2300      	movlt	r3, #0
 802b004:	7223      	strblt	r3, [r4, #8]
}
 802b006:	e7f8      	b.n	802affa <gTempLoop+0x66>
 802b008:	200444dc 	.word	0x200444dc
 802b00c:	3f4ccccd 	.word	0x3f4ccccd
 802b010:	3e4ccccd 	.word	0x3e4ccccd

0802b014 <malloc>:
 802b014:	4b02      	ldr	r3, [pc, #8]	@ (802b020 <malloc+0xc>)
 802b016:	4601      	mov	r1, r0
 802b018:	6818      	ldr	r0, [r3, #0]
 802b01a:	f000 b82d 	b.w	802b078 <_malloc_r>
 802b01e:	bf00      	nop
 802b020:	20000038 	.word	0x20000038

0802b024 <free>:
 802b024:	4b02      	ldr	r3, [pc, #8]	@ (802b030 <free+0xc>)
 802b026:	4601      	mov	r1, r0
 802b028:	6818      	ldr	r0, [r3, #0]
 802b02a:	f000 bbbd 	b.w	802b7a8 <_free_r>
 802b02e:	bf00      	nop
 802b030:	20000038 	.word	0x20000038

0802b034 <sbrk_aligned>:
 802b034:	b570      	push	{r4, r5, r6, lr}
 802b036:	4e0f      	ldr	r6, [pc, #60]	@ (802b074 <sbrk_aligned+0x40>)
 802b038:	460c      	mov	r4, r1
 802b03a:	4605      	mov	r5, r0
 802b03c:	6831      	ldr	r1, [r6, #0]
 802b03e:	b911      	cbnz	r1, 802b046 <sbrk_aligned+0x12>
 802b040:	f000 fb4a 	bl	802b6d8 <_sbrk_r>
 802b044:	6030      	str	r0, [r6, #0]
 802b046:	4621      	mov	r1, r4
 802b048:	4628      	mov	r0, r5
 802b04a:	f000 fb45 	bl	802b6d8 <_sbrk_r>
 802b04e:	1c43      	adds	r3, r0, #1
 802b050:	d103      	bne.n	802b05a <sbrk_aligned+0x26>
 802b052:	f04f 34ff 	mov.w	r4, #4294967295
 802b056:	4620      	mov	r0, r4
 802b058:	bd70      	pop	{r4, r5, r6, pc}
 802b05a:	1cc4      	adds	r4, r0, #3
 802b05c:	f024 0403 	bic.w	r4, r4, #3
 802b060:	42a0      	cmp	r0, r4
 802b062:	d0f8      	beq.n	802b056 <sbrk_aligned+0x22>
 802b064:	1a21      	subs	r1, r4, r0
 802b066:	4628      	mov	r0, r5
 802b068:	f000 fb36 	bl	802b6d8 <_sbrk_r>
 802b06c:	3001      	adds	r0, #1
 802b06e:	d1f2      	bne.n	802b056 <sbrk_aligned+0x22>
 802b070:	e7ef      	b.n	802b052 <sbrk_aligned+0x1e>
 802b072:	bf00      	nop
 802b074:	200444e8 	.word	0x200444e8

0802b078 <_malloc_r>:
 802b078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b07c:	1ccd      	adds	r5, r1, #3
 802b07e:	4606      	mov	r6, r0
 802b080:	f025 0503 	bic.w	r5, r5, #3
 802b084:	3508      	adds	r5, #8
 802b086:	2d0c      	cmp	r5, #12
 802b088:	bf38      	it	cc
 802b08a:	250c      	movcc	r5, #12
 802b08c:	2d00      	cmp	r5, #0
 802b08e:	db01      	blt.n	802b094 <_malloc_r+0x1c>
 802b090:	42a9      	cmp	r1, r5
 802b092:	d904      	bls.n	802b09e <_malloc_r+0x26>
 802b094:	230c      	movs	r3, #12
 802b096:	6033      	str	r3, [r6, #0]
 802b098:	2000      	movs	r0, #0
 802b09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b09e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802b174 <_malloc_r+0xfc>
 802b0a2:	f000 f869 	bl	802b178 <__malloc_lock>
 802b0a6:	f8d8 3000 	ldr.w	r3, [r8]
 802b0aa:	461c      	mov	r4, r3
 802b0ac:	bb44      	cbnz	r4, 802b100 <_malloc_r+0x88>
 802b0ae:	4629      	mov	r1, r5
 802b0b0:	4630      	mov	r0, r6
 802b0b2:	f7ff ffbf 	bl	802b034 <sbrk_aligned>
 802b0b6:	1c43      	adds	r3, r0, #1
 802b0b8:	4604      	mov	r4, r0
 802b0ba:	d158      	bne.n	802b16e <_malloc_r+0xf6>
 802b0bc:	f8d8 4000 	ldr.w	r4, [r8]
 802b0c0:	4627      	mov	r7, r4
 802b0c2:	2f00      	cmp	r7, #0
 802b0c4:	d143      	bne.n	802b14e <_malloc_r+0xd6>
 802b0c6:	2c00      	cmp	r4, #0
 802b0c8:	d04b      	beq.n	802b162 <_malloc_r+0xea>
 802b0ca:	6823      	ldr	r3, [r4, #0]
 802b0cc:	4639      	mov	r1, r7
 802b0ce:	4630      	mov	r0, r6
 802b0d0:	eb04 0903 	add.w	r9, r4, r3
 802b0d4:	f000 fb00 	bl	802b6d8 <_sbrk_r>
 802b0d8:	4581      	cmp	r9, r0
 802b0da:	d142      	bne.n	802b162 <_malloc_r+0xea>
 802b0dc:	6821      	ldr	r1, [r4, #0]
 802b0de:	4630      	mov	r0, r6
 802b0e0:	1a6d      	subs	r5, r5, r1
 802b0e2:	4629      	mov	r1, r5
 802b0e4:	f7ff ffa6 	bl	802b034 <sbrk_aligned>
 802b0e8:	3001      	adds	r0, #1
 802b0ea:	d03a      	beq.n	802b162 <_malloc_r+0xea>
 802b0ec:	6823      	ldr	r3, [r4, #0]
 802b0ee:	442b      	add	r3, r5
 802b0f0:	6023      	str	r3, [r4, #0]
 802b0f2:	f8d8 3000 	ldr.w	r3, [r8]
 802b0f6:	685a      	ldr	r2, [r3, #4]
 802b0f8:	bb62      	cbnz	r2, 802b154 <_malloc_r+0xdc>
 802b0fa:	f8c8 7000 	str.w	r7, [r8]
 802b0fe:	e00f      	b.n	802b120 <_malloc_r+0xa8>
 802b100:	6822      	ldr	r2, [r4, #0]
 802b102:	1b52      	subs	r2, r2, r5
 802b104:	d420      	bmi.n	802b148 <_malloc_r+0xd0>
 802b106:	2a0b      	cmp	r2, #11
 802b108:	d917      	bls.n	802b13a <_malloc_r+0xc2>
 802b10a:	1961      	adds	r1, r4, r5
 802b10c:	42a3      	cmp	r3, r4
 802b10e:	6025      	str	r5, [r4, #0]
 802b110:	bf18      	it	ne
 802b112:	6059      	strne	r1, [r3, #4]
 802b114:	6863      	ldr	r3, [r4, #4]
 802b116:	bf08      	it	eq
 802b118:	f8c8 1000 	streq.w	r1, [r8]
 802b11c:	5162      	str	r2, [r4, r5]
 802b11e:	604b      	str	r3, [r1, #4]
 802b120:	4630      	mov	r0, r6
 802b122:	f000 f82f 	bl	802b184 <__malloc_unlock>
 802b126:	f104 000b 	add.w	r0, r4, #11
 802b12a:	1d23      	adds	r3, r4, #4
 802b12c:	f020 0007 	bic.w	r0, r0, #7
 802b130:	1ac2      	subs	r2, r0, r3
 802b132:	bf1c      	itt	ne
 802b134:	1a1b      	subne	r3, r3, r0
 802b136:	50a3      	strne	r3, [r4, r2]
 802b138:	e7af      	b.n	802b09a <_malloc_r+0x22>
 802b13a:	6862      	ldr	r2, [r4, #4]
 802b13c:	42a3      	cmp	r3, r4
 802b13e:	bf0c      	ite	eq
 802b140:	f8c8 2000 	streq.w	r2, [r8]
 802b144:	605a      	strne	r2, [r3, #4]
 802b146:	e7eb      	b.n	802b120 <_malloc_r+0xa8>
 802b148:	4623      	mov	r3, r4
 802b14a:	6864      	ldr	r4, [r4, #4]
 802b14c:	e7ae      	b.n	802b0ac <_malloc_r+0x34>
 802b14e:	463c      	mov	r4, r7
 802b150:	687f      	ldr	r7, [r7, #4]
 802b152:	e7b6      	b.n	802b0c2 <_malloc_r+0x4a>
 802b154:	461a      	mov	r2, r3
 802b156:	685b      	ldr	r3, [r3, #4]
 802b158:	42a3      	cmp	r3, r4
 802b15a:	d1fb      	bne.n	802b154 <_malloc_r+0xdc>
 802b15c:	2300      	movs	r3, #0
 802b15e:	6053      	str	r3, [r2, #4]
 802b160:	e7de      	b.n	802b120 <_malloc_r+0xa8>
 802b162:	230c      	movs	r3, #12
 802b164:	4630      	mov	r0, r6
 802b166:	6033      	str	r3, [r6, #0]
 802b168:	f000 f80c 	bl	802b184 <__malloc_unlock>
 802b16c:	e794      	b.n	802b098 <_malloc_r+0x20>
 802b16e:	6005      	str	r5, [r0, #0]
 802b170:	e7d6      	b.n	802b120 <_malloc_r+0xa8>
 802b172:	bf00      	nop
 802b174:	200444ec 	.word	0x200444ec

0802b178 <__malloc_lock>:
 802b178:	4801      	ldr	r0, [pc, #4]	@ (802b180 <__malloc_lock+0x8>)
 802b17a:	f000 bafa 	b.w	802b772 <__retarget_lock_acquire_recursive>
 802b17e:	bf00      	nop
 802b180:	20044630 	.word	0x20044630

0802b184 <__malloc_unlock>:
 802b184:	4801      	ldr	r0, [pc, #4]	@ (802b18c <__malloc_unlock+0x8>)
 802b186:	f000 baf5 	b.w	802b774 <__retarget_lock_release_recursive>
 802b18a:	bf00      	nop
 802b18c:	20044630 	.word	0x20044630

0802b190 <std>:
 802b190:	2300      	movs	r3, #0
 802b192:	b510      	push	{r4, lr}
 802b194:	4604      	mov	r4, r0
 802b196:	6083      	str	r3, [r0, #8]
 802b198:	8181      	strh	r1, [r0, #12]
 802b19a:	4619      	mov	r1, r3
 802b19c:	6643      	str	r3, [r0, #100]	@ 0x64
 802b19e:	81c2      	strh	r2, [r0, #14]
 802b1a0:	2208      	movs	r2, #8
 802b1a2:	6183      	str	r3, [r0, #24]
 802b1a4:	e9c0 3300 	strd	r3, r3, [r0]
 802b1a8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b1ac:	305c      	adds	r0, #92	@ 0x5c
 802b1ae:	f000 fa43 	bl	802b638 <memset>
 802b1b2:	4b0d      	ldr	r3, [pc, #52]	@ (802b1e8 <std+0x58>)
 802b1b4:	6224      	str	r4, [r4, #32]
 802b1b6:	6263      	str	r3, [r4, #36]	@ 0x24
 802b1b8:	4b0c      	ldr	r3, [pc, #48]	@ (802b1ec <std+0x5c>)
 802b1ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 802b1bc:	4b0c      	ldr	r3, [pc, #48]	@ (802b1f0 <std+0x60>)
 802b1be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802b1c0:	4b0c      	ldr	r3, [pc, #48]	@ (802b1f4 <std+0x64>)
 802b1c2:	6323      	str	r3, [r4, #48]	@ 0x30
 802b1c4:	4b0c      	ldr	r3, [pc, #48]	@ (802b1f8 <std+0x68>)
 802b1c6:	429c      	cmp	r4, r3
 802b1c8:	d006      	beq.n	802b1d8 <std+0x48>
 802b1ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802b1ce:	4294      	cmp	r4, r2
 802b1d0:	d002      	beq.n	802b1d8 <std+0x48>
 802b1d2:	33d0      	adds	r3, #208	@ 0xd0
 802b1d4:	429c      	cmp	r4, r3
 802b1d6:	d105      	bne.n	802b1e4 <std+0x54>
 802b1d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802b1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b1e0:	f000 bac6 	b.w	802b770 <__retarget_lock_init_recursive>
 802b1e4:	bd10      	pop	{r4, pc}
 802b1e6:	bf00      	nop
 802b1e8:	0802b435 	.word	0x0802b435
 802b1ec:	0802b457 	.word	0x0802b457
 802b1f0:	0802b48f 	.word	0x0802b48f
 802b1f4:	0802b4b3 	.word	0x0802b4b3
 802b1f8:	200444f0 	.word	0x200444f0

0802b1fc <stdio_exit_handler>:
 802b1fc:	4a02      	ldr	r2, [pc, #8]	@ (802b208 <stdio_exit_handler+0xc>)
 802b1fe:	4903      	ldr	r1, [pc, #12]	@ (802b20c <stdio_exit_handler+0x10>)
 802b200:	4803      	ldr	r0, [pc, #12]	@ (802b210 <stdio_exit_handler+0x14>)
 802b202:	f000 b869 	b.w	802b2d8 <_fwalk_sglue>
 802b206:	bf00      	nop
 802b208:	2000002c 	.word	0x2000002c
 802b20c:	0802c19d 	.word	0x0802c19d
 802b210:	2000003c 	.word	0x2000003c

0802b214 <cleanup_stdio>:
 802b214:	6841      	ldr	r1, [r0, #4]
 802b216:	4b0c      	ldr	r3, [pc, #48]	@ (802b248 <cleanup_stdio+0x34>)
 802b218:	4299      	cmp	r1, r3
 802b21a:	b510      	push	{r4, lr}
 802b21c:	4604      	mov	r4, r0
 802b21e:	d001      	beq.n	802b224 <cleanup_stdio+0x10>
 802b220:	f000 ffbc 	bl	802c19c <_fflush_r>
 802b224:	68a1      	ldr	r1, [r4, #8]
 802b226:	4b09      	ldr	r3, [pc, #36]	@ (802b24c <cleanup_stdio+0x38>)
 802b228:	4299      	cmp	r1, r3
 802b22a:	d002      	beq.n	802b232 <cleanup_stdio+0x1e>
 802b22c:	4620      	mov	r0, r4
 802b22e:	f000 ffb5 	bl	802c19c <_fflush_r>
 802b232:	68e1      	ldr	r1, [r4, #12]
 802b234:	4b06      	ldr	r3, [pc, #24]	@ (802b250 <cleanup_stdio+0x3c>)
 802b236:	4299      	cmp	r1, r3
 802b238:	d004      	beq.n	802b244 <cleanup_stdio+0x30>
 802b23a:	4620      	mov	r0, r4
 802b23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b240:	f000 bfac 	b.w	802c19c <_fflush_r>
 802b244:	bd10      	pop	{r4, pc}
 802b246:	bf00      	nop
 802b248:	200444f0 	.word	0x200444f0
 802b24c:	20044558 	.word	0x20044558
 802b250:	200445c0 	.word	0x200445c0

0802b254 <global_stdio_init.part.0>:
 802b254:	b510      	push	{r4, lr}
 802b256:	4b0b      	ldr	r3, [pc, #44]	@ (802b284 <global_stdio_init.part.0+0x30>)
 802b258:	2104      	movs	r1, #4
 802b25a:	4c0b      	ldr	r4, [pc, #44]	@ (802b288 <global_stdio_init.part.0+0x34>)
 802b25c:	4a0b      	ldr	r2, [pc, #44]	@ (802b28c <global_stdio_init.part.0+0x38>)
 802b25e:	4620      	mov	r0, r4
 802b260:	601a      	str	r2, [r3, #0]
 802b262:	2200      	movs	r2, #0
 802b264:	f7ff ff94 	bl	802b190 <std>
 802b268:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802b26c:	2201      	movs	r2, #1
 802b26e:	2109      	movs	r1, #9
 802b270:	f7ff ff8e 	bl	802b190 <std>
 802b274:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802b278:	2202      	movs	r2, #2
 802b27a:	2112      	movs	r1, #18
 802b27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b280:	f7ff bf86 	b.w	802b190 <std>
 802b284:	20044628 	.word	0x20044628
 802b288:	200444f0 	.word	0x200444f0
 802b28c:	0802b1fd 	.word	0x0802b1fd

0802b290 <__sfp_lock_acquire>:
 802b290:	4801      	ldr	r0, [pc, #4]	@ (802b298 <__sfp_lock_acquire+0x8>)
 802b292:	f000 ba6e 	b.w	802b772 <__retarget_lock_acquire_recursive>
 802b296:	bf00      	nop
 802b298:	20044631 	.word	0x20044631

0802b29c <__sfp_lock_release>:
 802b29c:	4801      	ldr	r0, [pc, #4]	@ (802b2a4 <__sfp_lock_release+0x8>)
 802b29e:	f000 ba69 	b.w	802b774 <__retarget_lock_release_recursive>
 802b2a2:	bf00      	nop
 802b2a4:	20044631 	.word	0x20044631

0802b2a8 <__sinit>:
 802b2a8:	b510      	push	{r4, lr}
 802b2aa:	4604      	mov	r4, r0
 802b2ac:	f7ff fff0 	bl	802b290 <__sfp_lock_acquire>
 802b2b0:	6a23      	ldr	r3, [r4, #32]
 802b2b2:	b11b      	cbz	r3, 802b2bc <__sinit+0x14>
 802b2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b2b8:	f7ff bff0 	b.w	802b29c <__sfp_lock_release>
 802b2bc:	4b04      	ldr	r3, [pc, #16]	@ (802b2d0 <__sinit+0x28>)
 802b2be:	6223      	str	r3, [r4, #32]
 802b2c0:	4b04      	ldr	r3, [pc, #16]	@ (802b2d4 <__sinit+0x2c>)
 802b2c2:	681b      	ldr	r3, [r3, #0]
 802b2c4:	2b00      	cmp	r3, #0
 802b2c6:	d1f5      	bne.n	802b2b4 <__sinit+0xc>
 802b2c8:	f7ff ffc4 	bl	802b254 <global_stdio_init.part.0>
 802b2cc:	e7f2      	b.n	802b2b4 <__sinit+0xc>
 802b2ce:	bf00      	nop
 802b2d0:	0802b215 	.word	0x0802b215
 802b2d4:	20044628 	.word	0x20044628

0802b2d8 <_fwalk_sglue>:
 802b2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b2dc:	4607      	mov	r7, r0
 802b2de:	4688      	mov	r8, r1
 802b2e0:	4614      	mov	r4, r2
 802b2e2:	2600      	movs	r6, #0
 802b2e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b2e8:	f1b9 0901 	subs.w	r9, r9, #1
 802b2ec:	d505      	bpl.n	802b2fa <_fwalk_sglue+0x22>
 802b2ee:	6824      	ldr	r4, [r4, #0]
 802b2f0:	2c00      	cmp	r4, #0
 802b2f2:	d1f7      	bne.n	802b2e4 <_fwalk_sglue+0xc>
 802b2f4:	4630      	mov	r0, r6
 802b2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b2fa:	89ab      	ldrh	r3, [r5, #12]
 802b2fc:	2b01      	cmp	r3, #1
 802b2fe:	d907      	bls.n	802b310 <_fwalk_sglue+0x38>
 802b300:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b304:	3301      	adds	r3, #1
 802b306:	d003      	beq.n	802b310 <_fwalk_sglue+0x38>
 802b308:	4629      	mov	r1, r5
 802b30a:	4638      	mov	r0, r7
 802b30c:	47c0      	blx	r8
 802b30e:	4306      	orrs	r6, r0
 802b310:	3568      	adds	r5, #104	@ 0x68
 802b312:	e7e9      	b.n	802b2e8 <_fwalk_sglue+0x10>

0802b314 <iprintf>:
 802b314:	b40f      	push	{r0, r1, r2, r3}
 802b316:	b507      	push	{r0, r1, r2, lr}
 802b318:	4906      	ldr	r1, [pc, #24]	@ (802b334 <iprintf+0x20>)
 802b31a:	ab04      	add	r3, sp, #16
 802b31c:	6808      	ldr	r0, [r1, #0]
 802b31e:	f853 2b04 	ldr.w	r2, [r3], #4
 802b322:	6881      	ldr	r1, [r0, #8]
 802b324:	9301      	str	r3, [sp, #4]
 802b326:	f000 fc0b 	bl	802bb40 <_vfiprintf_r>
 802b32a:	b003      	add	sp, #12
 802b32c:	f85d eb04 	ldr.w	lr, [sp], #4
 802b330:	b004      	add	sp, #16
 802b332:	4770      	bx	lr
 802b334:	20000038 	.word	0x20000038

0802b338 <_puts_r>:
 802b338:	6a03      	ldr	r3, [r0, #32]
 802b33a:	b570      	push	{r4, r5, r6, lr}
 802b33c:	4605      	mov	r5, r0
 802b33e:	460e      	mov	r6, r1
 802b340:	6884      	ldr	r4, [r0, #8]
 802b342:	b90b      	cbnz	r3, 802b348 <_puts_r+0x10>
 802b344:	f7ff ffb0 	bl	802b2a8 <__sinit>
 802b348:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b34a:	07db      	lsls	r3, r3, #31
 802b34c:	d405      	bmi.n	802b35a <_puts_r+0x22>
 802b34e:	89a3      	ldrh	r3, [r4, #12]
 802b350:	0598      	lsls	r0, r3, #22
 802b352:	d402      	bmi.n	802b35a <_puts_r+0x22>
 802b354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b356:	f000 fa0c 	bl	802b772 <__retarget_lock_acquire_recursive>
 802b35a:	89a3      	ldrh	r3, [r4, #12]
 802b35c:	0719      	lsls	r1, r3, #28
 802b35e:	d502      	bpl.n	802b366 <_puts_r+0x2e>
 802b360:	6923      	ldr	r3, [r4, #16]
 802b362:	2b00      	cmp	r3, #0
 802b364:	d135      	bne.n	802b3d2 <_puts_r+0x9a>
 802b366:	4621      	mov	r1, r4
 802b368:	4628      	mov	r0, r5
 802b36a:	f000 f8e5 	bl	802b538 <__swsetup_r>
 802b36e:	b380      	cbz	r0, 802b3d2 <_puts_r+0x9a>
 802b370:	f04f 35ff 	mov.w	r5, #4294967295
 802b374:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b376:	07da      	lsls	r2, r3, #31
 802b378:	d405      	bmi.n	802b386 <_puts_r+0x4e>
 802b37a:	89a3      	ldrh	r3, [r4, #12]
 802b37c:	059b      	lsls	r3, r3, #22
 802b37e:	d402      	bmi.n	802b386 <_puts_r+0x4e>
 802b380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b382:	f000 f9f7 	bl	802b774 <__retarget_lock_release_recursive>
 802b386:	4628      	mov	r0, r5
 802b388:	bd70      	pop	{r4, r5, r6, pc}
 802b38a:	2b00      	cmp	r3, #0
 802b38c:	da04      	bge.n	802b398 <_puts_r+0x60>
 802b38e:	69a2      	ldr	r2, [r4, #24]
 802b390:	429a      	cmp	r2, r3
 802b392:	dc17      	bgt.n	802b3c4 <_puts_r+0x8c>
 802b394:	290a      	cmp	r1, #10
 802b396:	d015      	beq.n	802b3c4 <_puts_r+0x8c>
 802b398:	6823      	ldr	r3, [r4, #0]
 802b39a:	1c5a      	adds	r2, r3, #1
 802b39c:	6022      	str	r2, [r4, #0]
 802b39e:	7019      	strb	r1, [r3, #0]
 802b3a0:	68a3      	ldr	r3, [r4, #8]
 802b3a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802b3a6:	3b01      	subs	r3, #1
 802b3a8:	60a3      	str	r3, [r4, #8]
 802b3aa:	2900      	cmp	r1, #0
 802b3ac:	d1ed      	bne.n	802b38a <_puts_r+0x52>
 802b3ae:	2b00      	cmp	r3, #0
 802b3b0:	da11      	bge.n	802b3d6 <_puts_r+0x9e>
 802b3b2:	4622      	mov	r2, r4
 802b3b4:	210a      	movs	r1, #10
 802b3b6:	4628      	mov	r0, r5
 802b3b8:	f000 f87f 	bl	802b4ba <__swbuf_r>
 802b3bc:	3001      	adds	r0, #1
 802b3be:	d0d7      	beq.n	802b370 <_puts_r+0x38>
 802b3c0:	250a      	movs	r5, #10
 802b3c2:	e7d7      	b.n	802b374 <_puts_r+0x3c>
 802b3c4:	4622      	mov	r2, r4
 802b3c6:	4628      	mov	r0, r5
 802b3c8:	f000 f877 	bl	802b4ba <__swbuf_r>
 802b3cc:	3001      	adds	r0, #1
 802b3ce:	d1e7      	bne.n	802b3a0 <_puts_r+0x68>
 802b3d0:	e7ce      	b.n	802b370 <_puts_r+0x38>
 802b3d2:	3e01      	subs	r6, #1
 802b3d4:	e7e4      	b.n	802b3a0 <_puts_r+0x68>
 802b3d6:	6823      	ldr	r3, [r4, #0]
 802b3d8:	1c5a      	adds	r2, r3, #1
 802b3da:	6022      	str	r2, [r4, #0]
 802b3dc:	220a      	movs	r2, #10
 802b3de:	701a      	strb	r2, [r3, #0]
 802b3e0:	e7ee      	b.n	802b3c0 <_puts_r+0x88>
	...

0802b3e4 <puts>:
 802b3e4:	4b02      	ldr	r3, [pc, #8]	@ (802b3f0 <puts+0xc>)
 802b3e6:	4601      	mov	r1, r0
 802b3e8:	6818      	ldr	r0, [r3, #0]
 802b3ea:	f7ff bfa5 	b.w	802b338 <_puts_r>
 802b3ee:	bf00      	nop
 802b3f0:	20000038 	.word	0x20000038

0802b3f4 <siprintf>:
 802b3f4:	b40e      	push	{r1, r2, r3}
 802b3f6:	b500      	push	{lr}
 802b3f8:	b09c      	sub	sp, #112	@ 0x70
 802b3fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802b3fe:	ab1d      	add	r3, sp, #116	@ 0x74
 802b400:	9002      	str	r0, [sp, #8]
 802b402:	9006      	str	r0, [sp, #24]
 802b404:	9107      	str	r1, [sp, #28]
 802b406:	9104      	str	r1, [sp, #16]
 802b408:	4808      	ldr	r0, [pc, #32]	@ (802b42c <siprintf+0x38>)
 802b40a:	4909      	ldr	r1, [pc, #36]	@ (802b430 <siprintf+0x3c>)
 802b40c:	f853 2b04 	ldr.w	r2, [r3], #4
 802b410:	9105      	str	r1, [sp, #20]
 802b412:	a902      	add	r1, sp, #8
 802b414:	6800      	ldr	r0, [r0, #0]
 802b416:	9301      	str	r3, [sp, #4]
 802b418:	f000 fa6c 	bl	802b8f4 <_svfiprintf_r>
 802b41c:	9b02      	ldr	r3, [sp, #8]
 802b41e:	2200      	movs	r2, #0
 802b420:	701a      	strb	r2, [r3, #0]
 802b422:	b01c      	add	sp, #112	@ 0x70
 802b424:	f85d eb04 	ldr.w	lr, [sp], #4
 802b428:	b003      	add	sp, #12
 802b42a:	4770      	bx	lr
 802b42c:	20000038 	.word	0x20000038
 802b430:	ffff0208 	.word	0xffff0208

0802b434 <__sread>:
 802b434:	b510      	push	{r4, lr}
 802b436:	460c      	mov	r4, r1
 802b438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b43c:	f000 f93a 	bl	802b6b4 <_read_r>
 802b440:	2800      	cmp	r0, #0
 802b442:	bfab      	itete	ge
 802b444:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802b446:	89a3      	ldrhlt	r3, [r4, #12]
 802b448:	181b      	addge	r3, r3, r0
 802b44a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802b44e:	bfac      	ite	ge
 802b450:	6563      	strge	r3, [r4, #84]	@ 0x54
 802b452:	81a3      	strhlt	r3, [r4, #12]
 802b454:	bd10      	pop	{r4, pc}

0802b456 <__swrite>:
 802b456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b45a:	461f      	mov	r7, r3
 802b45c:	898b      	ldrh	r3, [r1, #12]
 802b45e:	4605      	mov	r5, r0
 802b460:	460c      	mov	r4, r1
 802b462:	05db      	lsls	r3, r3, #23
 802b464:	4616      	mov	r6, r2
 802b466:	d505      	bpl.n	802b474 <__swrite+0x1e>
 802b468:	2302      	movs	r3, #2
 802b46a:	2200      	movs	r2, #0
 802b46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b470:	f000 f90e 	bl	802b690 <_lseek_r>
 802b474:	89a3      	ldrh	r3, [r4, #12]
 802b476:	4632      	mov	r2, r6
 802b478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b47c:	4628      	mov	r0, r5
 802b47e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802b482:	81a3      	strh	r3, [r4, #12]
 802b484:	463b      	mov	r3, r7
 802b486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b48a:	f000 b935 	b.w	802b6f8 <_write_r>

0802b48e <__sseek>:
 802b48e:	b510      	push	{r4, lr}
 802b490:	460c      	mov	r4, r1
 802b492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b496:	f000 f8fb 	bl	802b690 <_lseek_r>
 802b49a:	1c43      	adds	r3, r0, #1
 802b49c:	89a3      	ldrh	r3, [r4, #12]
 802b49e:	bf15      	itete	ne
 802b4a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 802b4a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802b4a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802b4aa:	81a3      	strheq	r3, [r4, #12]
 802b4ac:	bf18      	it	ne
 802b4ae:	81a3      	strhne	r3, [r4, #12]
 802b4b0:	bd10      	pop	{r4, pc}

0802b4b2 <__sclose>:
 802b4b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b4b6:	f000 b8db 	b.w	802b670 <_close_r>

0802b4ba <__swbuf_r>:
 802b4ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b4bc:	460e      	mov	r6, r1
 802b4be:	4614      	mov	r4, r2
 802b4c0:	4605      	mov	r5, r0
 802b4c2:	b118      	cbz	r0, 802b4cc <__swbuf_r+0x12>
 802b4c4:	6a03      	ldr	r3, [r0, #32]
 802b4c6:	b90b      	cbnz	r3, 802b4cc <__swbuf_r+0x12>
 802b4c8:	f7ff feee 	bl	802b2a8 <__sinit>
 802b4cc:	69a3      	ldr	r3, [r4, #24]
 802b4ce:	60a3      	str	r3, [r4, #8]
 802b4d0:	89a3      	ldrh	r3, [r4, #12]
 802b4d2:	071a      	lsls	r2, r3, #28
 802b4d4:	d501      	bpl.n	802b4da <__swbuf_r+0x20>
 802b4d6:	6923      	ldr	r3, [r4, #16]
 802b4d8:	b943      	cbnz	r3, 802b4ec <__swbuf_r+0x32>
 802b4da:	4621      	mov	r1, r4
 802b4dc:	4628      	mov	r0, r5
 802b4de:	f000 f82b 	bl	802b538 <__swsetup_r>
 802b4e2:	b118      	cbz	r0, 802b4ec <__swbuf_r+0x32>
 802b4e4:	f04f 37ff 	mov.w	r7, #4294967295
 802b4e8:	4638      	mov	r0, r7
 802b4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b4ec:	6823      	ldr	r3, [r4, #0]
 802b4ee:	b2f6      	uxtb	r6, r6
 802b4f0:	6922      	ldr	r2, [r4, #16]
 802b4f2:	4637      	mov	r7, r6
 802b4f4:	1a98      	subs	r0, r3, r2
 802b4f6:	6963      	ldr	r3, [r4, #20]
 802b4f8:	4283      	cmp	r3, r0
 802b4fa:	dc05      	bgt.n	802b508 <__swbuf_r+0x4e>
 802b4fc:	4621      	mov	r1, r4
 802b4fe:	4628      	mov	r0, r5
 802b500:	f000 fe4c 	bl	802c19c <_fflush_r>
 802b504:	2800      	cmp	r0, #0
 802b506:	d1ed      	bne.n	802b4e4 <__swbuf_r+0x2a>
 802b508:	68a3      	ldr	r3, [r4, #8]
 802b50a:	3b01      	subs	r3, #1
 802b50c:	60a3      	str	r3, [r4, #8]
 802b50e:	6823      	ldr	r3, [r4, #0]
 802b510:	1c5a      	adds	r2, r3, #1
 802b512:	6022      	str	r2, [r4, #0]
 802b514:	701e      	strb	r6, [r3, #0]
 802b516:	1c43      	adds	r3, r0, #1
 802b518:	6962      	ldr	r2, [r4, #20]
 802b51a:	429a      	cmp	r2, r3
 802b51c:	d004      	beq.n	802b528 <__swbuf_r+0x6e>
 802b51e:	89a3      	ldrh	r3, [r4, #12]
 802b520:	07db      	lsls	r3, r3, #31
 802b522:	d5e1      	bpl.n	802b4e8 <__swbuf_r+0x2e>
 802b524:	2e0a      	cmp	r6, #10
 802b526:	d1df      	bne.n	802b4e8 <__swbuf_r+0x2e>
 802b528:	4621      	mov	r1, r4
 802b52a:	4628      	mov	r0, r5
 802b52c:	f000 fe36 	bl	802c19c <_fflush_r>
 802b530:	2800      	cmp	r0, #0
 802b532:	d0d9      	beq.n	802b4e8 <__swbuf_r+0x2e>
 802b534:	e7d6      	b.n	802b4e4 <__swbuf_r+0x2a>
	...

0802b538 <__swsetup_r>:
 802b538:	b538      	push	{r3, r4, r5, lr}
 802b53a:	4b29      	ldr	r3, [pc, #164]	@ (802b5e0 <__swsetup_r+0xa8>)
 802b53c:	4605      	mov	r5, r0
 802b53e:	460c      	mov	r4, r1
 802b540:	6818      	ldr	r0, [r3, #0]
 802b542:	b118      	cbz	r0, 802b54c <__swsetup_r+0x14>
 802b544:	6a03      	ldr	r3, [r0, #32]
 802b546:	b90b      	cbnz	r3, 802b54c <__swsetup_r+0x14>
 802b548:	f7ff feae 	bl	802b2a8 <__sinit>
 802b54c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b550:	0719      	lsls	r1, r3, #28
 802b552:	d422      	bmi.n	802b59a <__swsetup_r+0x62>
 802b554:	06da      	lsls	r2, r3, #27
 802b556:	d407      	bmi.n	802b568 <__swsetup_r+0x30>
 802b558:	2209      	movs	r2, #9
 802b55a:	602a      	str	r2, [r5, #0]
 802b55c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b560:	f04f 30ff 	mov.w	r0, #4294967295
 802b564:	81a3      	strh	r3, [r4, #12]
 802b566:	e033      	b.n	802b5d0 <__swsetup_r+0x98>
 802b568:	0758      	lsls	r0, r3, #29
 802b56a:	d512      	bpl.n	802b592 <__swsetup_r+0x5a>
 802b56c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b56e:	b141      	cbz	r1, 802b582 <__swsetup_r+0x4a>
 802b570:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b574:	4299      	cmp	r1, r3
 802b576:	d002      	beq.n	802b57e <__swsetup_r+0x46>
 802b578:	4628      	mov	r0, r5
 802b57a:	f000 f915 	bl	802b7a8 <_free_r>
 802b57e:	2300      	movs	r3, #0
 802b580:	6363      	str	r3, [r4, #52]	@ 0x34
 802b582:	89a3      	ldrh	r3, [r4, #12]
 802b584:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802b588:	81a3      	strh	r3, [r4, #12]
 802b58a:	2300      	movs	r3, #0
 802b58c:	6063      	str	r3, [r4, #4]
 802b58e:	6923      	ldr	r3, [r4, #16]
 802b590:	6023      	str	r3, [r4, #0]
 802b592:	89a3      	ldrh	r3, [r4, #12]
 802b594:	f043 0308 	orr.w	r3, r3, #8
 802b598:	81a3      	strh	r3, [r4, #12]
 802b59a:	6923      	ldr	r3, [r4, #16]
 802b59c:	b94b      	cbnz	r3, 802b5b2 <__swsetup_r+0x7a>
 802b59e:	89a3      	ldrh	r3, [r4, #12]
 802b5a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802b5a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802b5a8:	d003      	beq.n	802b5b2 <__swsetup_r+0x7a>
 802b5aa:	4621      	mov	r1, r4
 802b5ac:	4628      	mov	r0, r5
 802b5ae:	f000 fe42 	bl	802c236 <__smakebuf_r>
 802b5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b5b6:	f013 0201 	ands.w	r2, r3, #1
 802b5ba:	d00a      	beq.n	802b5d2 <__swsetup_r+0x9a>
 802b5bc:	2200      	movs	r2, #0
 802b5be:	60a2      	str	r2, [r4, #8]
 802b5c0:	6962      	ldr	r2, [r4, #20]
 802b5c2:	4252      	negs	r2, r2
 802b5c4:	61a2      	str	r2, [r4, #24]
 802b5c6:	6922      	ldr	r2, [r4, #16]
 802b5c8:	b942      	cbnz	r2, 802b5dc <__swsetup_r+0xa4>
 802b5ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802b5ce:	d1c5      	bne.n	802b55c <__swsetup_r+0x24>
 802b5d0:	bd38      	pop	{r3, r4, r5, pc}
 802b5d2:	0799      	lsls	r1, r3, #30
 802b5d4:	bf58      	it	pl
 802b5d6:	6962      	ldrpl	r2, [r4, #20]
 802b5d8:	60a2      	str	r2, [r4, #8]
 802b5da:	e7f4      	b.n	802b5c6 <__swsetup_r+0x8e>
 802b5dc:	2000      	movs	r0, #0
 802b5de:	e7f7      	b.n	802b5d0 <__swsetup_r+0x98>
 802b5e0:	20000038 	.word	0x20000038

0802b5e4 <memcmp>:
 802b5e4:	3901      	subs	r1, #1
 802b5e6:	4402      	add	r2, r0
 802b5e8:	b510      	push	{r4, lr}
 802b5ea:	4290      	cmp	r0, r2
 802b5ec:	d101      	bne.n	802b5f2 <memcmp+0xe>
 802b5ee:	2000      	movs	r0, #0
 802b5f0:	e005      	b.n	802b5fe <memcmp+0x1a>
 802b5f2:	7803      	ldrb	r3, [r0, #0]
 802b5f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802b5f8:	42a3      	cmp	r3, r4
 802b5fa:	d001      	beq.n	802b600 <memcmp+0x1c>
 802b5fc:	1b18      	subs	r0, r3, r4
 802b5fe:	bd10      	pop	{r4, pc}
 802b600:	3001      	adds	r0, #1
 802b602:	e7f2      	b.n	802b5ea <memcmp+0x6>

0802b604 <memmove>:
 802b604:	4288      	cmp	r0, r1
 802b606:	b510      	push	{r4, lr}
 802b608:	eb01 0402 	add.w	r4, r1, r2
 802b60c:	d902      	bls.n	802b614 <memmove+0x10>
 802b60e:	4284      	cmp	r4, r0
 802b610:	4623      	mov	r3, r4
 802b612:	d807      	bhi.n	802b624 <memmove+0x20>
 802b614:	1e43      	subs	r3, r0, #1
 802b616:	42a1      	cmp	r1, r4
 802b618:	d008      	beq.n	802b62c <memmove+0x28>
 802b61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802b61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 802b622:	e7f8      	b.n	802b616 <memmove+0x12>
 802b624:	4402      	add	r2, r0
 802b626:	4601      	mov	r1, r0
 802b628:	428a      	cmp	r2, r1
 802b62a:	d100      	bne.n	802b62e <memmove+0x2a>
 802b62c:	bd10      	pop	{r4, pc}
 802b62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802b632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802b636:	e7f7      	b.n	802b628 <memmove+0x24>

0802b638 <memset>:
 802b638:	4402      	add	r2, r0
 802b63a:	4603      	mov	r3, r0
 802b63c:	4293      	cmp	r3, r2
 802b63e:	d100      	bne.n	802b642 <memset+0xa>
 802b640:	4770      	bx	lr
 802b642:	f803 1b01 	strb.w	r1, [r3], #1
 802b646:	e7f9      	b.n	802b63c <memset+0x4>

0802b648 <strncpy>:
 802b648:	3901      	subs	r1, #1
 802b64a:	4603      	mov	r3, r0
 802b64c:	b510      	push	{r4, lr}
 802b64e:	b132      	cbz	r2, 802b65e <strncpy+0x16>
 802b650:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802b654:	3a01      	subs	r2, #1
 802b656:	f803 4b01 	strb.w	r4, [r3], #1
 802b65a:	2c00      	cmp	r4, #0
 802b65c:	d1f7      	bne.n	802b64e <strncpy+0x6>
 802b65e:	441a      	add	r2, r3
 802b660:	2100      	movs	r1, #0
 802b662:	4293      	cmp	r3, r2
 802b664:	d100      	bne.n	802b668 <strncpy+0x20>
 802b666:	bd10      	pop	{r4, pc}
 802b668:	f803 1b01 	strb.w	r1, [r3], #1
 802b66c:	e7f9      	b.n	802b662 <strncpy+0x1a>
	...

0802b670 <_close_r>:
 802b670:	b538      	push	{r3, r4, r5, lr}
 802b672:	2300      	movs	r3, #0
 802b674:	4d05      	ldr	r5, [pc, #20]	@ (802b68c <_close_r+0x1c>)
 802b676:	4604      	mov	r4, r0
 802b678:	4608      	mov	r0, r1
 802b67a:	602b      	str	r3, [r5, #0]
 802b67c:	f7f6 f96c 	bl	8021958 <_close>
 802b680:	1c43      	adds	r3, r0, #1
 802b682:	d102      	bne.n	802b68a <_close_r+0x1a>
 802b684:	682b      	ldr	r3, [r5, #0]
 802b686:	b103      	cbz	r3, 802b68a <_close_r+0x1a>
 802b688:	6023      	str	r3, [r4, #0]
 802b68a:	bd38      	pop	{r3, r4, r5, pc}
 802b68c:	2004462c 	.word	0x2004462c

0802b690 <_lseek_r>:
 802b690:	b538      	push	{r3, r4, r5, lr}
 802b692:	4604      	mov	r4, r0
 802b694:	4d06      	ldr	r5, [pc, #24]	@ (802b6b0 <_lseek_r+0x20>)
 802b696:	4608      	mov	r0, r1
 802b698:	4611      	mov	r1, r2
 802b69a:	2200      	movs	r2, #0
 802b69c:	602a      	str	r2, [r5, #0]
 802b69e:	461a      	mov	r2, r3
 802b6a0:	f7f6 f964 	bl	802196c <_lseek>
 802b6a4:	1c43      	adds	r3, r0, #1
 802b6a6:	d102      	bne.n	802b6ae <_lseek_r+0x1e>
 802b6a8:	682b      	ldr	r3, [r5, #0]
 802b6aa:	b103      	cbz	r3, 802b6ae <_lseek_r+0x1e>
 802b6ac:	6023      	str	r3, [r4, #0]
 802b6ae:	bd38      	pop	{r3, r4, r5, pc}
 802b6b0:	2004462c 	.word	0x2004462c

0802b6b4 <_read_r>:
 802b6b4:	b538      	push	{r3, r4, r5, lr}
 802b6b6:	4604      	mov	r4, r0
 802b6b8:	4d06      	ldr	r5, [pc, #24]	@ (802b6d4 <_read_r+0x20>)
 802b6ba:	4608      	mov	r0, r1
 802b6bc:	4611      	mov	r1, r2
 802b6be:	2200      	movs	r2, #0
 802b6c0:	602a      	str	r2, [r5, #0]
 802b6c2:	461a      	mov	r2, r3
 802b6c4:	f7f6 f92c 	bl	8021920 <_read>
 802b6c8:	1c43      	adds	r3, r0, #1
 802b6ca:	d102      	bne.n	802b6d2 <_read_r+0x1e>
 802b6cc:	682b      	ldr	r3, [r5, #0]
 802b6ce:	b103      	cbz	r3, 802b6d2 <_read_r+0x1e>
 802b6d0:	6023      	str	r3, [r4, #0]
 802b6d2:	bd38      	pop	{r3, r4, r5, pc}
 802b6d4:	2004462c 	.word	0x2004462c

0802b6d8 <_sbrk_r>:
 802b6d8:	b538      	push	{r3, r4, r5, lr}
 802b6da:	2300      	movs	r3, #0
 802b6dc:	4d05      	ldr	r5, [pc, #20]	@ (802b6f4 <_sbrk_r+0x1c>)
 802b6de:	4604      	mov	r4, r0
 802b6e0:	4608      	mov	r0, r1
 802b6e2:	602b      	str	r3, [r5, #0]
 802b6e4:	f7f6 f944 	bl	8021970 <_sbrk>
 802b6e8:	1c43      	adds	r3, r0, #1
 802b6ea:	d102      	bne.n	802b6f2 <_sbrk_r+0x1a>
 802b6ec:	682b      	ldr	r3, [r5, #0]
 802b6ee:	b103      	cbz	r3, 802b6f2 <_sbrk_r+0x1a>
 802b6f0:	6023      	str	r3, [r4, #0]
 802b6f2:	bd38      	pop	{r3, r4, r5, pc}
 802b6f4:	2004462c 	.word	0x2004462c

0802b6f8 <_write_r>:
 802b6f8:	b538      	push	{r3, r4, r5, lr}
 802b6fa:	4604      	mov	r4, r0
 802b6fc:	4d06      	ldr	r5, [pc, #24]	@ (802b718 <_write_r+0x20>)
 802b6fe:	4608      	mov	r0, r1
 802b700:	4611      	mov	r1, r2
 802b702:	2200      	movs	r2, #0
 802b704:	602a      	str	r2, [r5, #0]
 802b706:	461a      	mov	r2, r3
 802b708:	f7f6 f918 	bl	802193c <_write>
 802b70c:	1c43      	adds	r3, r0, #1
 802b70e:	d102      	bne.n	802b716 <_write_r+0x1e>
 802b710:	682b      	ldr	r3, [r5, #0]
 802b712:	b103      	cbz	r3, 802b716 <_write_r+0x1e>
 802b714:	6023      	str	r3, [r4, #0]
 802b716:	bd38      	pop	{r3, r4, r5, pc}
 802b718:	2004462c 	.word	0x2004462c

0802b71c <__errno>:
 802b71c:	4b01      	ldr	r3, [pc, #4]	@ (802b724 <__errno+0x8>)
 802b71e:	6818      	ldr	r0, [r3, #0]
 802b720:	4770      	bx	lr
 802b722:	bf00      	nop
 802b724:	20000038 	.word	0x20000038

0802b728 <__libc_init_array>:
 802b728:	b570      	push	{r4, r5, r6, lr}
 802b72a:	4d0d      	ldr	r5, [pc, #52]	@ (802b760 <__libc_init_array+0x38>)
 802b72c:	2600      	movs	r6, #0
 802b72e:	4c0d      	ldr	r4, [pc, #52]	@ (802b764 <__libc_init_array+0x3c>)
 802b730:	1b64      	subs	r4, r4, r5
 802b732:	10a4      	asrs	r4, r4, #2
 802b734:	42a6      	cmp	r6, r4
 802b736:	d109      	bne.n	802b74c <__libc_init_array+0x24>
 802b738:	4d0b      	ldr	r5, [pc, #44]	@ (802b768 <__libc_init_array+0x40>)
 802b73a:	2600      	movs	r6, #0
 802b73c:	4c0b      	ldr	r4, [pc, #44]	@ (802b76c <__libc_init_array+0x44>)
 802b73e:	f000 fe1d 	bl	802c37c <_init>
 802b742:	1b64      	subs	r4, r4, r5
 802b744:	10a4      	asrs	r4, r4, #2
 802b746:	42a6      	cmp	r6, r4
 802b748:	d105      	bne.n	802b756 <__libc_init_array+0x2e>
 802b74a:	bd70      	pop	{r4, r5, r6, pc}
 802b74c:	f855 3b04 	ldr.w	r3, [r5], #4
 802b750:	3601      	adds	r6, #1
 802b752:	4798      	blx	r3
 802b754:	e7ee      	b.n	802b734 <__libc_init_array+0xc>
 802b756:	f855 3b04 	ldr.w	r3, [r5], #4
 802b75a:	3601      	adds	r6, #1
 802b75c:	4798      	blx	r3
 802b75e:	e7f2      	b.n	802b746 <__libc_init_array+0x1e>
 802b760:	0802e85c 	.word	0x0802e85c
 802b764:	0802e85c 	.word	0x0802e85c
 802b768:	0802e85c 	.word	0x0802e85c
 802b76c:	0802e860 	.word	0x0802e860

0802b770 <__retarget_lock_init_recursive>:
 802b770:	4770      	bx	lr

0802b772 <__retarget_lock_acquire_recursive>:
 802b772:	4770      	bx	lr

0802b774 <__retarget_lock_release_recursive>:
 802b774:	4770      	bx	lr

0802b776 <strcpy>:
 802b776:	4603      	mov	r3, r0
 802b778:	f811 2b01 	ldrb.w	r2, [r1], #1
 802b77c:	f803 2b01 	strb.w	r2, [r3], #1
 802b780:	2a00      	cmp	r2, #0
 802b782:	d1f9      	bne.n	802b778 <strcpy+0x2>
 802b784:	4770      	bx	lr

0802b786 <__aeabi_memclr>:
 802b786:	2200      	movs	r2, #0
 802b788:	f7f5 bbf9 	b.w	8020f7e <__aeabi_memset>

0802b78c <memcpy>:
 802b78c:	440a      	add	r2, r1
 802b78e:	1e43      	subs	r3, r0, #1
 802b790:	4291      	cmp	r1, r2
 802b792:	d100      	bne.n	802b796 <memcpy+0xa>
 802b794:	4770      	bx	lr
 802b796:	b510      	push	{r4, lr}
 802b798:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b79c:	4291      	cmp	r1, r2
 802b79e:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b7a2:	d1f9      	bne.n	802b798 <memcpy+0xc>
 802b7a4:	bd10      	pop	{r4, pc}
	...

0802b7a8 <_free_r>:
 802b7a8:	b538      	push	{r3, r4, r5, lr}
 802b7aa:	4605      	mov	r5, r0
 802b7ac:	2900      	cmp	r1, #0
 802b7ae:	d041      	beq.n	802b834 <_free_r+0x8c>
 802b7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b7b4:	1f0c      	subs	r4, r1, #4
 802b7b6:	2b00      	cmp	r3, #0
 802b7b8:	bfb8      	it	lt
 802b7ba:	18e4      	addlt	r4, r4, r3
 802b7bc:	f7ff fcdc 	bl	802b178 <__malloc_lock>
 802b7c0:	4a1d      	ldr	r2, [pc, #116]	@ (802b838 <_free_r+0x90>)
 802b7c2:	6813      	ldr	r3, [r2, #0]
 802b7c4:	b933      	cbnz	r3, 802b7d4 <_free_r+0x2c>
 802b7c6:	6063      	str	r3, [r4, #4]
 802b7c8:	6014      	str	r4, [r2, #0]
 802b7ca:	4628      	mov	r0, r5
 802b7cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b7d0:	f7ff bcd8 	b.w	802b184 <__malloc_unlock>
 802b7d4:	42a3      	cmp	r3, r4
 802b7d6:	d908      	bls.n	802b7ea <_free_r+0x42>
 802b7d8:	6820      	ldr	r0, [r4, #0]
 802b7da:	1821      	adds	r1, r4, r0
 802b7dc:	428b      	cmp	r3, r1
 802b7de:	bf01      	itttt	eq
 802b7e0:	6819      	ldreq	r1, [r3, #0]
 802b7e2:	685b      	ldreq	r3, [r3, #4]
 802b7e4:	1809      	addeq	r1, r1, r0
 802b7e6:	6021      	streq	r1, [r4, #0]
 802b7e8:	e7ed      	b.n	802b7c6 <_free_r+0x1e>
 802b7ea:	461a      	mov	r2, r3
 802b7ec:	685b      	ldr	r3, [r3, #4]
 802b7ee:	b10b      	cbz	r3, 802b7f4 <_free_r+0x4c>
 802b7f0:	42a3      	cmp	r3, r4
 802b7f2:	d9fa      	bls.n	802b7ea <_free_r+0x42>
 802b7f4:	6811      	ldr	r1, [r2, #0]
 802b7f6:	1850      	adds	r0, r2, r1
 802b7f8:	42a0      	cmp	r0, r4
 802b7fa:	d10b      	bne.n	802b814 <_free_r+0x6c>
 802b7fc:	6820      	ldr	r0, [r4, #0]
 802b7fe:	4401      	add	r1, r0
 802b800:	1850      	adds	r0, r2, r1
 802b802:	6011      	str	r1, [r2, #0]
 802b804:	4283      	cmp	r3, r0
 802b806:	d1e0      	bne.n	802b7ca <_free_r+0x22>
 802b808:	6818      	ldr	r0, [r3, #0]
 802b80a:	685b      	ldr	r3, [r3, #4]
 802b80c:	4408      	add	r0, r1
 802b80e:	6053      	str	r3, [r2, #4]
 802b810:	6010      	str	r0, [r2, #0]
 802b812:	e7da      	b.n	802b7ca <_free_r+0x22>
 802b814:	d902      	bls.n	802b81c <_free_r+0x74>
 802b816:	230c      	movs	r3, #12
 802b818:	602b      	str	r3, [r5, #0]
 802b81a:	e7d6      	b.n	802b7ca <_free_r+0x22>
 802b81c:	6820      	ldr	r0, [r4, #0]
 802b81e:	1821      	adds	r1, r4, r0
 802b820:	428b      	cmp	r3, r1
 802b822:	bf02      	ittt	eq
 802b824:	6819      	ldreq	r1, [r3, #0]
 802b826:	685b      	ldreq	r3, [r3, #4]
 802b828:	1809      	addeq	r1, r1, r0
 802b82a:	6063      	str	r3, [r4, #4]
 802b82c:	bf08      	it	eq
 802b82e:	6021      	streq	r1, [r4, #0]
 802b830:	6054      	str	r4, [r2, #4]
 802b832:	e7ca      	b.n	802b7ca <_free_r+0x22>
 802b834:	bd38      	pop	{r3, r4, r5, pc}
 802b836:	bf00      	nop
 802b838:	200444ec 	.word	0x200444ec

0802b83c <__ssputs_r>:
 802b83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b840:	461f      	mov	r7, r3
 802b842:	688e      	ldr	r6, [r1, #8]
 802b844:	4682      	mov	sl, r0
 802b846:	460c      	mov	r4, r1
 802b848:	42be      	cmp	r6, r7
 802b84a:	4690      	mov	r8, r2
 802b84c:	680b      	ldr	r3, [r1, #0]
 802b84e:	d82d      	bhi.n	802b8ac <__ssputs_r+0x70>
 802b850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802b854:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802b858:	d026      	beq.n	802b8a8 <__ssputs_r+0x6c>
 802b85a:	6965      	ldr	r5, [r4, #20]
 802b85c:	6909      	ldr	r1, [r1, #16]
 802b85e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802b862:	eba3 0901 	sub.w	r9, r3, r1
 802b866:	1c7b      	adds	r3, r7, #1
 802b868:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802b86c:	444b      	add	r3, r9
 802b86e:	106d      	asrs	r5, r5, #1
 802b870:	429d      	cmp	r5, r3
 802b872:	bf38      	it	cc
 802b874:	461d      	movcc	r5, r3
 802b876:	0553      	lsls	r3, r2, #21
 802b878:	d527      	bpl.n	802b8ca <__ssputs_r+0x8e>
 802b87a:	4629      	mov	r1, r5
 802b87c:	f7ff fbfc 	bl	802b078 <_malloc_r>
 802b880:	4606      	mov	r6, r0
 802b882:	b360      	cbz	r0, 802b8de <__ssputs_r+0xa2>
 802b884:	464a      	mov	r2, r9
 802b886:	6921      	ldr	r1, [r4, #16]
 802b888:	f7ff ff80 	bl	802b78c <memcpy>
 802b88c:	89a3      	ldrh	r3, [r4, #12]
 802b88e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802b892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b896:	81a3      	strh	r3, [r4, #12]
 802b898:	6126      	str	r6, [r4, #16]
 802b89a:	444e      	add	r6, r9
 802b89c:	6165      	str	r5, [r4, #20]
 802b89e:	eba5 0509 	sub.w	r5, r5, r9
 802b8a2:	6026      	str	r6, [r4, #0]
 802b8a4:	463e      	mov	r6, r7
 802b8a6:	60a5      	str	r5, [r4, #8]
 802b8a8:	42be      	cmp	r6, r7
 802b8aa:	d900      	bls.n	802b8ae <__ssputs_r+0x72>
 802b8ac:	463e      	mov	r6, r7
 802b8ae:	4632      	mov	r2, r6
 802b8b0:	4641      	mov	r1, r8
 802b8b2:	6820      	ldr	r0, [r4, #0]
 802b8b4:	f7ff fea6 	bl	802b604 <memmove>
 802b8b8:	68a3      	ldr	r3, [r4, #8]
 802b8ba:	2000      	movs	r0, #0
 802b8bc:	1b9b      	subs	r3, r3, r6
 802b8be:	60a3      	str	r3, [r4, #8]
 802b8c0:	6823      	ldr	r3, [r4, #0]
 802b8c2:	4433      	add	r3, r6
 802b8c4:	6023      	str	r3, [r4, #0]
 802b8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b8ca:	462a      	mov	r2, r5
 802b8cc:	f000 fd20 	bl	802c310 <_realloc_r>
 802b8d0:	4606      	mov	r6, r0
 802b8d2:	2800      	cmp	r0, #0
 802b8d4:	d1e0      	bne.n	802b898 <__ssputs_r+0x5c>
 802b8d6:	6921      	ldr	r1, [r4, #16]
 802b8d8:	4650      	mov	r0, sl
 802b8da:	f7ff ff65 	bl	802b7a8 <_free_r>
 802b8de:	230c      	movs	r3, #12
 802b8e0:	f04f 30ff 	mov.w	r0, #4294967295
 802b8e4:	f8ca 3000 	str.w	r3, [sl]
 802b8e8:	89a3      	ldrh	r3, [r4, #12]
 802b8ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b8ee:	81a3      	strh	r3, [r4, #12]
 802b8f0:	e7e9      	b.n	802b8c6 <__ssputs_r+0x8a>
	...

0802b8f4 <_svfiprintf_r>:
 802b8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b8f8:	4698      	mov	r8, r3
 802b8fa:	898b      	ldrh	r3, [r1, #12]
 802b8fc:	b09d      	sub	sp, #116	@ 0x74
 802b8fe:	4607      	mov	r7, r0
 802b900:	061b      	lsls	r3, r3, #24
 802b902:	460d      	mov	r5, r1
 802b904:	4614      	mov	r4, r2
 802b906:	d510      	bpl.n	802b92a <_svfiprintf_r+0x36>
 802b908:	690b      	ldr	r3, [r1, #16]
 802b90a:	b973      	cbnz	r3, 802b92a <_svfiprintf_r+0x36>
 802b90c:	2140      	movs	r1, #64	@ 0x40
 802b90e:	f7ff fbb3 	bl	802b078 <_malloc_r>
 802b912:	6028      	str	r0, [r5, #0]
 802b914:	6128      	str	r0, [r5, #16]
 802b916:	b930      	cbnz	r0, 802b926 <_svfiprintf_r+0x32>
 802b918:	230c      	movs	r3, #12
 802b91a:	603b      	str	r3, [r7, #0]
 802b91c:	f04f 30ff 	mov.w	r0, #4294967295
 802b920:	b01d      	add	sp, #116	@ 0x74
 802b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b926:	2340      	movs	r3, #64	@ 0x40
 802b928:	616b      	str	r3, [r5, #20]
 802b92a:	2300      	movs	r3, #0
 802b92c:	f8cd 800c 	str.w	r8, [sp, #12]
 802b930:	f04f 0901 	mov.w	r9, #1
 802b934:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 802bad8 <_svfiprintf_r+0x1e4>
 802b938:	9309      	str	r3, [sp, #36]	@ 0x24
 802b93a:	2320      	movs	r3, #32
 802b93c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802b940:	2330      	movs	r3, #48	@ 0x30
 802b942:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802b946:	4623      	mov	r3, r4
 802b948:	469a      	mov	sl, r3
 802b94a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b94e:	b10a      	cbz	r2, 802b954 <_svfiprintf_r+0x60>
 802b950:	2a25      	cmp	r2, #37	@ 0x25
 802b952:	d1f9      	bne.n	802b948 <_svfiprintf_r+0x54>
 802b954:	ebba 0b04 	subs.w	fp, sl, r4
 802b958:	d00b      	beq.n	802b972 <_svfiprintf_r+0x7e>
 802b95a:	465b      	mov	r3, fp
 802b95c:	4622      	mov	r2, r4
 802b95e:	4629      	mov	r1, r5
 802b960:	4638      	mov	r0, r7
 802b962:	f7ff ff6b 	bl	802b83c <__ssputs_r>
 802b966:	3001      	adds	r0, #1
 802b968:	f000 80a7 	beq.w	802baba <_svfiprintf_r+0x1c6>
 802b96c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b96e:	445a      	add	r2, fp
 802b970:	9209      	str	r2, [sp, #36]	@ 0x24
 802b972:	f89a 3000 	ldrb.w	r3, [sl]
 802b976:	2b00      	cmp	r3, #0
 802b978:	f000 809f 	beq.w	802baba <_svfiprintf_r+0x1c6>
 802b97c:	2300      	movs	r3, #0
 802b97e:	f04f 32ff 	mov.w	r2, #4294967295
 802b982:	f10a 0a01 	add.w	sl, sl, #1
 802b986:	9304      	str	r3, [sp, #16]
 802b988:	9307      	str	r3, [sp, #28]
 802b98a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802b98e:	931a      	str	r3, [sp, #104]	@ 0x68
 802b990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b994:	4654      	mov	r4, sl
 802b996:	2205      	movs	r2, #5
 802b998:	484f      	ldr	r0, [pc, #316]	@ (802bad8 <_svfiprintf_r+0x1e4>)
 802b99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b99e:	f000 fca9 	bl	802c2f4 <memchr>
 802b9a2:	9a04      	ldr	r2, [sp, #16]
 802b9a4:	b9d8      	cbnz	r0, 802b9de <_svfiprintf_r+0xea>
 802b9a6:	06d0      	lsls	r0, r2, #27
 802b9a8:	bf44      	itt	mi
 802b9aa:	2320      	movmi	r3, #32
 802b9ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b9b0:	0711      	lsls	r1, r2, #28
 802b9b2:	bf44      	itt	mi
 802b9b4:	232b      	movmi	r3, #43	@ 0x2b
 802b9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b9ba:	f89a 3000 	ldrb.w	r3, [sl]
 802b9be:	2b2a      	cmp	r3, #42	@ 0x2a
 802b9c0:	d015      	beq.n	802b9ee <_svfiprintf_r+0xfa>
 802b9c2:	9a07      	ldr	r2, [sp, #28]
 802b9c4:	4654      	mov	r4, sl
 802b9c6:	2000      	movs	r0, #0
 802b9c8:	f04f 0c0a 	mov.w	ip, #10
 802b9cc:	4621      	mov	r1, r4
 802b9ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b9d2:	3b30      	subs	r3, #48	@ 0x30
 802b9d4:	2b09      	cmp	r3, #9
 802b9d6:	d94b      	bls.n	802ba70 <_svfiprintf_r+0x17c>
 802b9d8:	b1b0      	cbz	r0, 802ba08 <_svfiprintf_r+0x114>
 802b9da:	9207      	str	r2, [sp, #28]
 802b9dc:	e014      	b.n	802ba08 <_svfiprintf_r+0x114>
 802b9de:	eba0 0308 	sub.w	r3, r0, r8
 802b9e2:	46a2      	mov	sl, r4
 802b9e4:	fa09 f303 	lsl.w	r3, r9, r3
 802b9e8:	4313      	orrs	r3, r2
 802b9ea:	9304      	str	r3, [sp, #16]
 802b9ec:	e7d2      	b.n	802b994 <_svfiprintf_r+0xa0>
 802b9ee:	9b03      	ldr	r3, [sp, #12]
 802b9f0:	1d19      	adds	r1, r3, #4
 802b9f2:	681b      	ldr	r3, [r3, #0]
 802b9f4:	2b00      	cmp	r3, #0
 802b9f6:	9103      	str	r1, [sp, #12]
 802b9f8:	bfbb      	ittet	lt
 802b9fa:	425b      	neglt	r3, r3
 802b9fc:	f042 0202 	orrlt.w	r2, r2, #2
 802ba00:	9307      	strge	r3, [sp, #28]
 802ba02:	9307      	strlt	r3, [sp, #28]
 802ba04:	bfb8      	it	lt
 802ba06:	9204      	strlt	r2, [sp, #16]
 802ba08:	7823      	ldrb	r3, [r4, #0]
 802ba0a:	2b2e      	cmp	r3, #46	@ 0x2e
 802ba0c:	d10a      	bne.n	802ba24 <_svfiprintf_r+0x130>
 802ba0e:	7863      	ldrb	r3, [r4, #1]
 802ba10:	2b2a      	cmp	r3, #42	@ 0x2a
 802ba12:	d132      	bne.n	802ba7a <_svfiprintf_r+0x186>
 802ba14:	9b03      	ldr	r3, [sp, #12]
 802ba16:	3402      	adds	r4, #2
 802ba18:	1d1a      	adds	r2, r3, #4
 802ba1a:	681b      	ldr	r3, [r3, #0]
 802ba1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802ba20:	9203      	str	r2, [sp, #12]
 802ba22:	9305      	str	r3, [sp, #20]
 802ba24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802bae8 <_svfiprintf_r+0x1f4>
 802ba28:	2203      	movs	r2, #3
 802ba2a:	7821      	ldrb	r1, [r4, #0]
 802ba2c:	4650      	mov	r0, sl
 802ba2e:	f000 fc61 	bl	802c2f4 <memchr>
 802ba32:	b138      	cbz	r0, 802ba44 <_svfiprintf_r+0x150>
 802ba34:	eba0 000a 	sub.w	r0, r0, sl
 802ba38:	2240      	movs	r2, #64	@ 0x40
 802ba3a:	9b04      	ldr	r3, [sp, #16]
 802ba3c:	3401      	adds	r4, #1
 802ba3e:	4082      	lsls	r2, r0
 802ba40:	4313      	orrs	r3, r2
 802ba42:	9304      	str	r3, [sp, #16]
 802ba44:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ba48:	2206      	movs	r2, #6
 802ba4a:	4824      	ldr	r0, [pc, #144]	@ (802badc <_svfiprintf_r+0x1e8>)
 802ba4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802ba50:	f000 fc50 	bl	802c2f4 <memchr>
 802ba54:	2800      	cmp	r0, #0
 802ba56:	d036      	beq.n	802bac6 <_svfiprintf_r+0x1d2>
 802ba58:	4b21      	ldr	r3, [pc, #132]	@ (802bae0 <_svfiprintf_r+0x1ec>)
 802ba5a:	bb1b      	cbnz	r3, 802baa4 <_svfiprintf_r+0x1b0>
 802ba5c:	9b03      	ldr	r3, [sp, #12]
 802ba5e:	3307      	adds	r3, #7
 802ba60:	f023 0307 	bic.w	r3, r3, #7
 802ba64:	3308      	adds	r3, #8
 802ba66:	9303      	str	r3, [sp, #12]
 802ba68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ba6a:	4433      	add	r3, r6
 802ba6c:	9309      	str	r3, [sp, #36]	@ 0x24
 802ba6e:	e76a      	b.n	802b946 <_svfiprintf_r+0x52>
 802ba70:	fb0c 3202 	mla	r2, ip, r2, r3
 802ba74:	460c      	mov	r4, r1
 802ba76:	2001      	movs	r0, #1
 802ba78:	e7a8      	b.n	802b9cc <_svfiprintf_r+0xd8>
 802ba7a:	2300      	movs	r3, #0
 802ba7c:	3401      	adds	r4, #1
 802ba7e:	f04f 0c0a 	mov.w	ip, #10
 802ba82:	4619      	mov	r1, r3
 802ba84:	9305      	str	r3, [sp, #20]
 802ba86:	4620      	mov	r0, r4
 802ba88:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ba8c:	3a30      	subs	r2, #48	@ 0x30
 802ba8e:	2a09      	cmp	r2, #9
 802ba90:	d903      	bls.n	802ba9a <_svfiprintf_r+0x1a6>
 802ba92:	2b00      	cmp	r3, #0
 802ba94:	d0c6      	beq.n	802ba24 <_svfiprintf_r+0x130>
 802ba96:	9105      	str	r1, [sp, #20]
 802ba98:	e7c4      	b.n	802ba24 <_svfiprintf_r+0x130>
 802ba9a:	fb0c 2101 	mla	r1, ip, r1, r2
 802ba9e:	4604      	mov	r4, r0
 802baa0:	2301      	movs	r3, #1
 802baa2:	e7f0      	b.n	802ba86 <_svfiprintf_r+0x192>
 802baa4:	ab03      	add	r3, sp, #12
 802baa6:	462a      	mov	r2, r5
 802baa8:	a904      	add	r1, sp, #16
 802baaa:	4638      	mov	r0, r7
 802baac:	9300      	str	r3, [sp, #0]
 802baae:	4b0d      	ldr	r3, [pc, #52]	@ (802bae4 <_svfiprintf_r+0x1f0>)
 802bab0:	f3af 8000 	nop.w
 802bab4:	1c42      	adds	r2, r0, #1
 802bab6:	4606      	mov	r6, r0
 802bab8:	d1d6      	bne.n	802ba68 <_svfiprintf_r+0x174>
 802baba:	89ab      	ldrh	r3, [r5, #12]
 802babc:	065b      	lsls	r3, r3, #25
 802babe:	f53f af2d 	bmi.w	802b91c <_svfiprintf_r+0x28>
 802bac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802bac4:	e72c      	b.n	802b920 <_svfiprintf_r+0x2c>
 802bac6:	ab03      	add	r3, sp, #12
 802bac8:	462a      	mov	r2, r5
 802baca:	a904      	add	r1, sp, #16
 802bacc:	4638      	mov	r0, r7
 802bace:	9300      	str	r3, [sp, #0]
 802bad0:	4b04      	ldr	r3, [pc, #16]	@ (802bae4 <_svfiprintf_r+0x1f0>)
 802bad2:	f000 f9bf 	bl	802be54 <_printf_i>
 802bad6:	e7ed      	b.n	802bab4 <_svfiprintf_r+0x1c0>
 802bad8:	0802e31f 	.word	0x0802e31f
 802badc:	0802e329 	.word	0x0802e329
 802bae0:	00000000 	.word	0x00000000
 802bae4:	0802b83d 	.word	0x0802b83d
 802bae8:	0802e325 	.word	0x0802e325

0802baec <__sfputc_r>:
 802baec:	6893      	ldr	r3, [r2, #8]
 802baee:	3b01      	subs	r3, #1
 802baf0:	2b00      	cmp	r3, #0
 802baf2:	6093      	str	r3, [r2, #8]
 802baf4:	b410      	push	{r4}
 802baf6:	da08      	bge.n	802bb0a <__sfputc_r+0x1e>
 802baf8:	6994      	ldr	r4, [r2, #24]
 802bafa:	42a3      	cmp	r3, r4
 802bafc:	db01      	blt.n	802bb02 <__sfputc_r+0x16>
 802bafe:	290a      	cmp	r1, #10
 802bb00:	d103      	bne.n	802bb0a <__sfputc_r+0x1e>
 802bb02:	f85d 4b04 	ldr.w	r4, [sp], #4
 802bb06:	f7ff bcd8 	b.w	802b4ba <__swbuf_r>
 802bb0a:	6813      	ldr	r3, [r2, #0]
 802bb0c:	1c58      	adds	r0, r3, #1
 802bb0e:	6010      	str	r0, [r2, #0]
 802bb10:	4608      	mov	r0, r1
 802bb12:	7019      	strb	r1, [r3, #0]
 802bb14:	f85d 4b04 	ldr.w	r4, [sp], #4
 802bb18:	4770      	bx	lr

0802bb1a <__sfputs_r>:
 802bb1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bb1c:	4606      	mov	r6, r0
 802bb1e:	460f      	mov	r7, r1
 802bb20:	4614      	mov	r4, r2
 802bb22:	18d5      	adds	r5, r2, r3
 802bb24:	42ac      	cmp	r4, r5
 802bb26:	d101      	bne.n	802bb2c <__sfputs_r+0x12>
 802bb28:	2000      	movs	r0, #0
 802bb2a:	e007      	b.n	802bb3c <__sfputs_r+0x22>
 802bb2c:	463a      	mov	r2, r7
 802bb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bb32:	4630      	mov	r0, r6
 802bb34:	f7ff ffda 	bl	802baec <__sfputc_r>
 802bb38:	1c43      	adds	r3, r0, #1
 802bb3a:	d1f3      	bne.n	802bb24 <__sfputs_r+0xa>
 802bb3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802bb40 <_vfiprintf_r>:
 802bb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bb44:	460d      	mov	r5, r1
 802bb46:	b09d      	sub	sp, #116	@ 0x74
 802bb48:	4614      	mov	r4, r2
 802bb4a:	4698      	mov	r8, r3
 802bb4c:	4606      	mov	r6, r0
 802bb4e:	b118      	cbz	r0, 802bb58 <_vfiprintf_r+0x18>
 802bb50:	6a03      	ldr	r3, [r0, #32]
 802bb52:	b90b      	cbnz	r3, 802bb58 <_vfiprintf_r+0x18>
 802bb54:	f7ff fba8 	bl	802b2a8 <__sinit>
 802bb58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802bb5a:	07d9      	lsls	r1, r3, #31
 802bb5c:	d405      	bmi.n	802bb6a <_vfiprintf_r+0x2a>
 802bb5e:	89ab      	ldrh	r3, [r5, #12]
 802bb60:	059a      	lsls	r2, r3, #22
 802bb62:	d402      	bmi.n	802bb6a <_vfiprintf_r+0x2a>
 802bb64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802bb66:	f7ff fe04 	bl	802b772 <__retarget_lock_acquire_recursive>
 802bb6a:	89ab      	ldrh	r3, [r5, #12]
 802bb6c:	071b      	lsls	r3, r3, #28
 802bb6e:	d501      	bpl.n	802bb74 <_vfiprintf_r+0x34>
 802bb70:	692b      	ldr	r3, [r5, #16]
 802bb72:	b99b      	cbnz	r3, 802bb9c <_vfiprintf_r+0x5c>
 802bb74:	4629      	mov	r1, r5
 802bb76:	4630      	mov	r0, r6
 802bb78:	f7ff fcde 	bl	802b538 <__swsetup_r>
 802bb7c:	b170      	cbz	r0, 802bb9c <_vfiprintf_r+0x5c>
 802bb7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802bb80:	07dc      	lsls	r4, r3, #31
 802bb82:	d504      	bpl.n	802bb8e <_vfiprintf_r+0x4e>
 802bb84:	f04f 30ff 	mov.w	r0, #4294967295
 802bb88:	b01d      	add	sp, #116	@ 0x74
 802bb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb8e:	89ab      	ldrh	r3, [r5, #12]
 802bb90:	0598      	lsls	r0, r3, #22
 802bb92:	d4f7      	bmi.n	802bb84 <_vfiprintf_r+0x44>
 802bb94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802bb96:	f7ff fded 	bl	802b774 <__retarget_lock_release_recursive>
 802bb9a:	e7f3      	b.n	802bb84 <_vfiprintf_r+0x44>
 802bb9c:	2300      	movs	r3, #0
 802bb9e:	f8cd 800c 	str.w	r8, [sp, #12]
 802bba2:	f04f 0901 	mov.w	r9, #1
 802bba6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802bd5c <_vfiprintf_r+0x21c>
 802bbaa:	9309      	str	r3, [sp, #36]	@ 0x24
 802bbac:	2320      	movs	r3, #32
 802bbae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802bbb2:	2330      	movs	r3, #48	@ 0x30
 802bbb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802bbb8:	4623      	mov	r3, r4
 802bbba:	469a      	mov	sl, r3
 802bbbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bbc0:	b10a      	cbz	r2, 802bbc6 <_vfiprintf_r+0x86>
 802bbc2:	2a25      	cmp	r2, #37	@ 0x25
 802bbc4:	d1f9      	bne.n	802bbba <_vfiprintf_r+0x7a>
 802bbc6:	ebba 0b04 	subs.w	fp, sl, r4
 802bbca:	d00b      	beq.n	802bbe4 <_vfiprintf_r+0xa4>
 802bbcc:	465b      	mov	r3, fp
 802bbce:	4622      	mov	r2, r4
 802bbd0:	4629      	mov	r1, r5
 802bbd2:	4630      	mov	r0, r6
 802bbd4:	f7ff ffa1 	bl	802bb1a <__sfputs_r>
 802bbd8:	3001      	adds	r0, #1
 802bbda:	f000 80a7 	beq.w	802bd2c <_vfiprintf_r+0x1ec>
 802bbde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802bbe0:	445a      	add	r2, fp
 802bbe2:	9209      	str	r2, [sp, #36]	@ 0x24
 802bbe4:	f89a 3000 	ldrb.w	r3, [sl]
 802bbe8:	2b00      	cmp	r3, #0
 802bbea:	f000 809f 	beq.w	802bd2c <_vfiprintf_r+0x1ec>
 802bbee:	2300      	movs	r3, #0
 802bbf0:	f04f 32ff 	mov.w	r2, #4294967295
 802bbf4:	f10a 0a01 	add.w	sl, sl, #1
 802bbf8:	9304      	str	r3, [sp, #16]
 802bbfa:	9307      	str	r3, [sp, #28]
 802bbfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802bc00:	931a      	str	r3, [sp, #104]	@ 0x68
 802bc02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bc06:	4654      	mov	r4, sl
 802bc08:	2205      	movs	r2, #5
 802bc0a:	4854      	ldr	r0, [pc, #336]	@ (802bd5c <_vfiprintf_r+0x21c>)
 802bc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bc10:	f000 fb70 	bl	802c2f4 <memchr>
 802bc14:	9a04      	ldr	r2, [sp, #16]
 802bc16:	b9d8      	cbnz	r0, 802bc50 <_vfiprintf_r+0x110>
 802bc18:	06d1      	lsls	r1, r2, #27
 802bc1a:	bf44      	itt	mi
 802bc1c:	2320      	movmi	r3, #32
 802bc1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802bc22:	0713      	lsls	r3, r2, #28
 802bc24:	bf44      	itt	mi
 802bc26:	232b      	movmi	r3, #43	@ 0x2b
 802bc28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802bc2c:	f89a 3000 	ldrb.w	r3, [sl]
 802bc30:	2b2a      	cmp	r3, #42	@ 0x2a
 802bc32:	d015      	beq.n	802bc60 <_vfiprintf_r+0x120>
 802bc34:	9a07      	ldr	r2, [sp, #28]
 802bc36:	4654      	mov	r4, sl
 802bc38:	2000      	movs	r0, #0
 802bc3a:	f04f 0c0a 	mov.w	ip, #10
 802bc3e:	4621      	mov	r1, r4
 802bc40:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bc44:	3b30      	subs	r3, #48	@ 0x30
 802bc46:	2b09      	cmp	r3, #9
 802bc48:	d94b      	bls.n	802bce2 <_vfiprintf_r+0x1a2>
 802bc4a:	b1b0      	cbz	r0, 802bc7a <_vfiprintf_r+0x13a>
 802bc4c:	9207      	str	r2, [sp, #28]
 802bc4e:	e014      	b.n	802bc7a <_vfiprintf_r+0x13a>
 802bc50:	eba0 0308 	sub.w	r3, r0, r8
 802bc54:	46a2      	mov	sl, r4
 802bc56:	fa09 f303 	lsl.w	r3, r9, r3
 802bc5a:	4313      	orrs	r3, r2
 802bc5c:	9304      	str	r3, [sp, #16]
 802bc5e:	e7d2      	b.n	802bc06 <_vfiprintf_r+0xc6>
 802bc60:	9b03      	ldr	r3, [sp, #12]
 802bc62:	1d19      	adds	r1, r3, #4
 802bc64:	681b      	ldr	r3, [r3, #0]
 802bc66:	2b00      	cmp	r3, #0
 802bc68:	9103      	str	r1, [sp, #12]
 802bc6a:	bfbb      	ittet	lt
 802bc6c:	425b      	neglt	r3, r3
 802bc6e:	f042 0202 	orrlt.w	r2, r2, #2
 802bc72:	9307      	strge	r3, [sp, #28]
 802bc74:	9307      	strlt	r3, [sp, #28]
 802bc76:	bfb8      	it	lt
 802bc78:	9204      	strlt	r2, [sp, #16]
 802bc7a:	7823      	ldrb	r3, [r4, #0]
 802bc7c:	2b2e      	cmp	r3, #46	@ 0x2e
 802bc7e:	d10a      	bne.n	802bc96 <_vfiprintf_r+0x156>
 802bc80:	7863      	ldrb	r3, [r4, #1]
 802bc82:	2b2a      	cmp	r3, #42	@ 0x2a
 802bc84:	d132      	bne.n	802bcec <_vfiprintf_r+0x1ac>
 802bc86:	9b03      	ldr	r3, [sp, #12]
 802bc88:	3402      	adds	r4, #2
 802bc8a:	1d1a      	adds	r2, r3, #4
 802bc8c:	681b      	ldr	r3, [r3, #0]
 802bc8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802bc92:	9203      	str	r2, [sp, #12]
 802bc94:	9305      	str	r3, [sp, #20]
 802bc96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802bd6c <_vfiprintf_r+0x22c>
 802bc9a:	2203      	movs	r2, #3
 802bc9c:	7821      	ldrb	r1, [r4, #0]
 802bc9e:	4650      	mov	r0, sl
 802bca0:	f000 fb28 	bl	802c2f4 <memchr>
 802bca4:	b138      	cbz	r0, 802bcb6 <_vfiprintf_r+0x176>
 802bca6:	eba0 000a 	sub.w	r0, r0, sl
 802bcaa:	2240      	movs	r2, #64	@ 0x40
 802bcac:	9b04      	ldr	r3, [sp, #16]
 802bcae:	3401      	adds	r4, #1
 802bcb0:	4082      	lsls	r2, r0
 802bcb2:	4313      	orrs	r3, r2
 802bcb4:	9304      	str	r3, [sp, #16]
 802bcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bcba:	2206      	movs	r2, #6
 802bcbc:	4828      	ldr	r0, [pc, #160]	@ (802bd60 <_vfiprintf_r+0x220>)
 802bcbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802bcc2:	f000 fb17 	bl	802c2f4 <memchr>
 802bcc6:	2800      	cmp	r0, #0
 802bcc8:	d03f      	beq.n	802bd4a <_vfiprintf_r+0x20a>
 802bcca:	4b26      	ldr	r3, [pc, #152]	@ (802bd64 <_vfiprintf_r+0x224>)
 802bccc:	bb1b      	cbnz	r3, 802bd16 <_vfiprintf_r+0x1d6>
 802bcce:	9b03      	ldr	r3, [sp, #12]
 802bcd0:	3307      	adds	r3, #7
 802bcd2:	f023 0307 	bic.w	r3, r3, #7
 802bcd6:	3308      	adds	r3, #8
 802bcd8:	9303      	str	r3, [sp, #12]
 802bcda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bcdc:	443b      	add	r3, r7
 802bcde:	9309      	str	r3, [sp, #36]	@ 0x24
 802bce0:	e76a      	b.n	802bbb8 <_vfiprintf_r+0x78>
 802bce2:	fb0c 3202 	mla	r2, ip, r2, r3
 802bce6:	460c      	mov	r4, r1
 802bce8:	2001      	movs	r0, #1
 802bcea:	e7a8      	b.n	802bc3e <_vfiprintf_r+0xfe>
 802bcec:	2300      	movs	r3, #0
 802bcee:	3401      	adds	r4, #1
 802bcf0:	f04f 0c0a 	mov.w	ip, #10
 802bcf4:	4619      	mov	r1, r3
 802bcf6:	9305      	str	r3, [sp, #20]
 802bcf8:	4620      	mov	r0, r4
 802bcfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bcfe:	3a30      	subs	r2, #48	@ 0x30
 802bd00:	2a09      	cmp	r2, #9
 802bd02:	d903      	bls.n	802bd0c <_vfiprintf_r+0x1cc>
 802bd04:	2b00      	cmp	r3, #0
 802bd06:	d0c6      	beq.n	802bc96 <_vfiprintf_r+0x156>
 802bd08:	9105      	str	r1, [sp, #20]
 802bd0a:	e7c4      	b.n	802bc96 <_vfiprintf_r+0x156>
 802bd0c:	fb0c 2101 	mla	r1, ip, r1, r2
 802bd10:	4604      	mov	r4, r0
 802bd12:	2301      	movs	r3, #1
 802bd14:	e7f0      	b.n	802bcf8 <_vfiprintf_r+0x1b8>
 802bd16:	ab03      	add	r3, sp, #12
 802bd18:	462a      	mov	r2, r5
 802bd1a:	a904      	add	r1, sp, #16
 802bd1c:	4630      	mov	r0, r6
 802bd1e:	9300      	str	r3, [sp, #0]
 802bd20:	4b11      	ldr	r3, [pc, #68]	@ (802bd68 <_vfiprintf_r+0x228>)
 802bd22:	f3af 8000 	nop.w
 802bd26:	4607      	mov	r7, r0
 802bd28:	1c78      	adds	r0, r7, #1
 802bd2a:	d1d6      	bne.n	802bcda <_vfiprintf_r+0x19a>
 802bd2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802bd2e:	07d9      	lsls	r1, r3, #31
 802bd30:	d405      	bmi.n	802bd3e <_vfiprintf_r+0x1fe>
 802bd32:	89ab      	ldrh	r3, [r5, #12]
 802bd34:	059a      	lsls	r2, r3, #22
 802bd36:	d402      	bmi.n	802bd3e <_vfiprintf_r+0x1fe>
 802bd38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802bd3a:	f7ff fd1b 	bl	802b774 <__retarget_lock_release_recursive>
 802bd3e:	89ab      	ldrh	r3, [r5, #12]
 802bd40:	065b      	lsls	r3, r3, #25
 802bd42:	f53f af1f 	bmi.w	802bb84 <_vfiprintf_r+0x44>
 802bd46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802bd48:	e71e      	b.n	802bb88 <_vfiprintf_r+0x48>
 802bd4a:	ab03      	add	r3, sp, #12
 802bd4c:	462a      	mov	r2, r5
 802bd4e:	a904      	add	r1, sp, #16
 802bd50:	4630      	mov	r0, r6
 802bd52:	9300      	str	r3, [sp, #0]
 802bd54:	4b04      	ldr	r3, [pc, #16]	@ (802bd68 <_vfiprintf_r+0x228>)
 802bd56:	f000 f87d 	bl	802be54 <_printf_i>
 802bd5a:	e7e4      	b.n	802bd26 <_vfiprintf_r+0x1e6>
 802bd5c:	0802e31f 	.word	0x0802e31f
 802bd60:	0802e329 	.word	0x0802e329
 802bd64:	00000000 	.word	0x00000000
 802bd68:	0802bb1b 	.word	0x0802bb1b
 802bd6c:	0802e325 	.word	0x0802e325

0802bd70 <_printf_common>:
 802bd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bd74:	4616      	mov	r6, r2
 802bd76:	4698      	mov	r8, r3
 802bd78:	688a      	ldr	r2, [r1, #8]
 802bd7a:	4607      	mov	r7, r0
 802bd7c:	690b      	ldr	r3, [r1, #16]
 802bd7e:	460c      	mov	r4, r1
 802bd80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802bd84:	4293      	cmp	r3, r2
 802bd86:	bfb8      	it	lt
 802bd88:	4613      	movlt	r3, r2
 802bd8a:	6033      	str	r3, [r6, #0]
 802bd8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802bd90:	b10a      	cbz	r2, 802bd96 <_printf_common+0x26>
 802bd92:	3301      	adds	r3, #1
 802bd94:	6033      	str	r3, [r6, #0]
 802bd96:	6823      	ldr	r3, [r4, #0]
 802bd98:	0699      	lsls	r1, r3, #26
 802bd9a:	bf42      	ittt	mi
 802bd9c:	6833      	ldrmi	r3, [r6, #0]
 802bd9e:	3302      	addmi	r3, #2
 802bda0:	6033      	strmi	r3, [r6, #0]
 802bda2:	6825      	ldr	r5, [r4, #0]
 802bda4:	f015 0506 	ands.w	r5, r5, #6
 802bda8:	d106      	bne.n	802bdb8 <_printf_common+0x48>
 802bdaa:	f104 0a19 	add.w	sl, r4, #25
 802bdae:	68e3      	ldr	r3, [r4, #12]
 802bdb0:	6832      	ldr	r2, [r6, #0]
 802bdb2:	1a9b      	subs	r3, r3, r2
 802bdb4:	42ab      	cmp	r3, r5
 802bdb6:	dc2b      	bgt.n	802be10 <_printf_common+0xa0>
 802bdb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802bdbc:	6822      	ldr	r2, [r4, #0]
 802bdbe:	3b00      	subs	r3, #0
 802bdc0:	bf18      	it	ne
 802bdc2:	2301      	movne	r3, #1
 802bdc4:	0692      	lsls	r2, r2, #26
 802bdc6:	d430      	bmi.n	802be2a <_printf_common+0xba>
 802bdc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802bdcc:	4641      	mov	r1, r8
 802bdce:	4638      	mov	r0, r7
 802bdd0:	47c8      	blx	r9
 802bdd2:	3001      	adds	r0, #1
 802bdd4:	d023      	beq.n	802be1e <_printf_common+0xae>
 802bdd6:	6823      	ldr	r3, [r4, #0]
 802bdd8:	341a      	adds	r4, #26
 802bdda:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802bdde:	f003 0306 	and.w	r3, r3, #6
 802bde2:	2b04      	cmp	r3, #4
 802bde4:	bf0a      	itet	eq
 802bde6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802bdea:	2500      	movne	r5, #0
 802bdec:	6833      	ldreq	r3, [r6, #0]
 802bdee:	f04f 0600 	mov.w	r6, #0
 802bdf2:	bf08      	it	eq
 802bdf4:	1aed      	subeq	r5, r5, r3
 802bdf6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802bdfa:	bf08      	it	eq
 802bdfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802be00:	4293      	cmp	r3, r2
 802be02:	bfc4      	itt	gt
 802be04:	1a9b      	subgt	r3, r3, r2
 802be06:	18ed      	addgt	r5, r5, r3
 802be08:	42b5      	cmp	r5, r6
 802be0a:	d11a      	bne.n	802be42 <_printf_common+0xd2>
 802be0c:	2000      	movs	r0, #0
 802be0e:	e008      	b.n	802be22 <_printf_common+0xb2>
 802be10:	2301      	movs	r3, #1
 802be12:	4652      	mov	r2, sl
 802be14:	4641      	mov	r1, r8
 802be16:	4638      	mov	r0, r7
 802be18:	47c8      	blx	r9
 802be1a:	3001      	adds	r0, #1
 802be1c:	d103      	bne.n	802be26 <_printf_common+0xb6>
 802be1e:	f04f 30ff 	mov.w	r0, #4294967295
 802be22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802be26:	3501      	adds	r5, #1
 802be28:	e7c1      	b.n	802bdae <_printf_common+0x3e>
 802be2a:	18e1      	adds	r1, r4, r3
 802be2c:	1c5a      	adds	r2, r3, #1
 802be2e:	2030      	movs	r0, #48	@ 0x30
 802be30:	3302      	adds	r3, #2
 802be32:	4422      	add	r2, r4
 802be34:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802be38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802be3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802be40:	e7c2      	b.n	802bdc8 <_printf_common+0x58>
 802be42:	2301      	movs	r3, #1
 802be44:	4622      	mov	r2, r4
 802be46:	4641      	mov	r1, r8
 802be48:	4638      	mov	r0, r7
 802be4a:	47c8      	blx	r9
 802be4c:	3001      	adds	r0, #1
 802be4e:	d0e6      	beq.n	802be1e <_printf_common+0xae>
 802be50:	3601      	adds	r6, #1
 802be52:	e7d9      	b.n	802be08 <_printf_common+0x98>

0802be54 <_printf_i>:
 802be54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802be58:	7e0f      	ldrb	r7, [r1, #24]
 802be5a:	4691      	mov	r9, r2
 802be5c:	4680      	mov	r8, r0
 802be5e:	460c      	mov	r4, r1
 802be60:	2f78      	cmp	r7, #120	@ 0x78
 802be62:	469a      	mov	sl, r3
 802be64:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802be66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802be6a:	d807      	bhi.n	802be7c <_printf_i+0x28>
 802be6c:	2f62      	cmp	r7, #98	@ 0x62
 802be6e:	d80a      	bhi.n	802be86 <_printf_i+0x32>
 802be70:	2f00      	cmp	r7, #0
 802be72:	f000 80d2 	beq.w	802c01a <_printf_i+0x1c6>
 802be76:	2f58      	cmp	r7, #88	@ 0x58
 802be78:	f000 80b9 	beq.w	802bfee <_printf_i+0x19a>
 802be7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802be80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802be84:	e03a      	b.n	802befc <_printf_i+0xa8>
 802be86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802be8a:	2b15      	cmp	r3, #21
 802be8c:	d8f6      	bhi.n	802be7c <_printf_i+0x28>
 802be8e:	a101      	add	r1, pc, #4	@ (adr r1, 802be94 <_printf_i+0x40>)
 802be90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802be94:	0802beed 	.word	0x0802beed
 802be98:	0802bf01 	.word	0x0802bf01
 802be9c:	0802be7d 	.word	0x0802be7d
 802bea0:	0802be7d 	.word	0x0802be7d
 802bea4:	0802be7d 	.word	0x0802be7d
 802bea8:	0802be7d 	.word	0x0802be7d
 802beac:	0802bf01 	.word	0x0802bf01
 802beb0:	0802be7d 	.word	0x0802be7d
 802beb4:	0802be7d 	.word	0x0802be7d
 802beb8:	0802be7d 	.word	0x0802be7d
 802bebc:	0802be7d 	.word	0x0802be7d
 802bec0:	0802c001 	.word	0x0802c001
 802bec4:	0802bf2b 	.word	0x0802bf2b
 802bec8:	0802bfbb 	.word	0x0802bfbb
 802becc:	0802be7d 	.word	0x0802be7d
 802bed0:	0802be7d 	.word	0x0802be7d
 802bed4:	0802c023 	.word	0x0802c023
 802bed8:	0802be7d 	.word	0x0802be7d
 802bedc:	0802bf2b 	.word	0x0802bf2b
 802bee0:	0802be7d 	.word	0x0802be7d
 802bee4:	0802be7d 	.word	0x0802be7d
 802bee8:	0802bfc3 	.word	0x0802bfc3
 802beec:	6833      	ldr	r3, [r6, #0]
 802beee:	1d1a      	adds	r2, r3, #4
 802bef0:	681b      	ldr	r3, [r3, #0]
 802bef2:	6032      	str	r2, [r6, #0]
 802bef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802bef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802befc:	2301      	movs	r3, #1
 802befe:	e09d      	b.n	802c03c <_printf_i+0x1e8>
 802bf00:	6833      	ldr	r3, [r6, #0]
 802bf02:	6820      	ldr	r0, [r4, #0]
 802bf04:	1d19      	adds	r1, r3, #4
 802bf06:	6031      	str	r1, [r6, #0]
 802bf08:	0606      	lsls	r6, r0, #24
 802bf0a:	d501      	bpl.n	802bf10 <_printf_i+0xbc>
 802bf0c:	681d      	ldr	r5, [r3, #0]
 802bf0e:	e003      	b.n	802bf18 <_printf_i+0xc4>
 802bf10:	0645      	lsls	r5, r0, #25
 802bf12:	d5fb      	bpl.n	802bf0c <_printf_i+0xb8>
 802bf14:	f9b3 5000 	ldrsh.w	r5, [r3]
 802bf18:	2d00      	cmp	r5, #0
 802bf1a:	da03      	bge.n	802bf24 <_printf_i+0xd0>
 802bf1c:	232d      	movs	r3, #45	@ 0x2d
 802bf1e:	426d      	negs	r5, r5
 802bf20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802bf24:	4859      	ldr	r0, [pc, #356]	@ (802c08c <_printf_i+0x238>)
 802bf26:	230a      	movs	r3, #10
 802bf28:	e011      	b.n	802bf4e <_printf_i+0xfa>
 802bf2a:	6821      	ldr	r1, [r4, #0]
 802bf2c:	6833      	ldr	r3, [r6, #0]
 802bf2e:	0608      	lsls	r0, r1, #24
 802bf30:	f853 5b04 	ldr.w	r5, [r3], #4
 802bf34:	d402      	bmi.n	802bf3c <_printf_i+0xe8>
 802bf36:	0649      	lsls	r1, r1, #25
 802bf38:	bf48      	it	mi
 802bf3a:	b2ad      	uxthmi	r5, r5
 802bf3c:	2f6f      	cmp	r7, #111	@ 0x6f
 802bf3e:	6033      	str	r3, [r6, #0]
 802bf40:	4852      	ldr	r0, [pc, #328]	@ (802c08c <_printf_i+0x238>)
 802bf42:	bf14      	ite	ne
 802bf44:	230a      	movne	r3, #10
 802bf46:	2308      	moveq	r3, #8
 802bf48:	2100      	movs	r1, #0
 802bf4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802bf4e:	6866      	ldr	r6, [r4, #4]
 802bf50:	2e00      	cmp	r6, #0
 802bf52:	60a6      	str	r6, [r4, #8]
 802bf54:	bfa2      	ittt	ge
 802bf56:	6821      	ldrge	r1, [r4, #0]
 802bf58:	f021 0104 	bicge.w	r1, r1, #4
 802bf5c:	6021      	strge	r1, [r4, #0]
 802bf5e:	b90d      	cbnz	r5, 802bf64 <_printf_i+0x110>
 802bf60:	2e00      	cmp	r6, #0
 802bf62:	d04b      	beq.n	802bffc <_printf_i+0x1a8>
 802bf64:	4616      	mov	r6, r2
 802bf66:	fbb5 f1f3 	udiv	r1, r5, r3
 802bf6a:	fb03 5711 	mls	r7, r3, r1, r5
 802bf6e:	5dc7      	ldrb	r7, [r0, r7]
 802bf70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802bf74:	462f      	mov	r7, r5
 802bf76:	460d      	mov	r5, r1
 802bf78:	42bb      	cmp	r3, r7
 802bf7a:	d9f4      	bls.n	802bf66 <_printf_i+0x112>
 802bf7c:	2b08      	cmp	r3, #8
 802bf7e:	d10b      	bne.n	802bf98 <_printf_i+0x144>
 802bf80:	6823      	ldr	r3, [r4, #0]
 802bf82:	07df      	lsls	r7, r3, #31
 802bf84:	d508      	bpl.n	802bf98 <_printf_i+0x144>
 802bf86:	6923      	ldr	r3, [r4, #16]
 802bf88:	6861      	ldr	r1, [r4, #4]
 802bf8a:	4299      	cmp	r1, r3
 802bf8c:	bfde      	ittt	le
 802bf8e:	2330      	movle	r3, #48	@ 0x30
 802bf90:	f806 3c01 	strble.w	r3, [r6, #-1]
 802bf94:	f106 36ff 	addle.w	r6, r6, #4294967295
 802bf98:	1b92      	subs	r2, r2, r6
 802bf9a:	6122      	str	r2, [r4, #16]
 802bf9c:	464b      	mov	r3, r9
 802bf9e:	aa03      	add	r2, sp, #12
 802bfa0:	4621      	mov	r1, r4
 802bfa2:	4640      	mov	r0, r8
 802bfa4:	f8cd a000 	str.w	sl, [sp]
 802bfa8:	f7ff fee2 	bl	802bd70 <_printf_common>
 802bfac:	3001      	adds	r0, #1
 802bfae:	d14a      	bne.n	802c046 <_printf_i+0x1f2>
 802bfb0:	f04f 30ff 	mov.w	r0, #4294967295
 802bfb4:	b004      	add	sp, #16
 802bfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bfba:	6823      	ldr	r3, [r4, #0]
 802bfbc:	f043 0320 	orr.w	r3, r3, #32
 802bfc0:	6023      	str	r3, [r4, #0]
 802bfc2:	2778      	movs	r7, #120	@ 0x78
 802bfc4:	4832      	ldr	r0, [pc, #200]	@ (802c090 <_printf_i+0x23c>)
 802bfc6:	6823      	ldr	r3, [r4, #0]
 802bfc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802bfcc:	061f      	lsls	r7, r3, #24
 802bfce:	6831      	ldr	r1, [r6, #0]
 802bfd0:	f851 5b04 	ldr.w	r5, [r1], #4
 802bfd4:	d402      	bmi.n	802bfdc <_printf_i+0x188>
 802bfd6:	065f      	lsls	r7, r3, #25
 802bfd8:	bf48      	it	mi
 802bfda:	b2ad      	uxthmi	r5, r5
 802bfdc:	6031      	str	r1, [r6, #0]
 802bfde:	07d9      	lsls	r1, r3, #31
 802bfe0:	bf44      	itt	mi
 802bfe2:	f043 0320 	orrmi.w	r3, r3, #32
 802bfe6:	6023      	strmi	r3, [r4, #0]
 802bfe8:	b11d      	cbz	r5, 802bff2 <_printf_i+0x19e>
 802bfea:	2310      	movs	r3, #16
 802bfec:	e7ac      	b.n	802bf48 <_printf_i+0xf4>
 802bfee:	4827      	ldr	r0, [pc, #156]	@ (802c08c <_printf_i+0x238>)
 802bff0:	e7e9      	b.n	802bfc6 <_printf_i+0x172>
 802bff2:	6823      	ldr	r3, [r4, #0]
 802bff4:	f023 0320 	bic.w	r3, r3, #32
 802bff8:	6023      	str	r3, [r4, #0]
 802bffa:	e7f6      	b.n	802bfea <_printf_i+0x196>
 802bffc:	4616      	mov	r6, r2
 802bffe:	e7bd      	b.n	802bf7c <_printf_i+0x128>
 802c000:	6833      	ldr	r3, [r6, #0]
 802c002:	6825      	ldr	r5, [r4, #0]
 802c004:	1d18      	adds	r0, r3, #4
 802c006:	6961      	ldr	r1, [r4, #20]
 802c008:	6030      	str	r0, [r6, #0]
 802c00a:	062e      	lsls	r6, r5, #24
 802c00c:	681b      	ldr	r3, [r3, #0]
 802c00e:	d501      	bpl.n	802c014 <_printf_i+0x1c0>
 802c010:	6019      	str	r1, [r3, #0]
 802c012:	e002      	b.n	802c01a <_printf_i+0x1c6>
 802c014:	0668      	lsls	r0, r5, #25
 802c016:	d5fb      	bpl.n	802c010 <_printf_i+0x1bc>
 802c018:	8019      	strh	r1, [r3, #0]
 802c01a:	2300      	movs	r3, #0
 802c01c:	4616      	mov	r6, r2
 802c01e:	6123      	str	r3, [r4, #16]
 802c020:	e7bc      	b.n	802bf9c <_printf_i+0x148>
 802c022:	6833      	ldr	r3, [r6, #0]
 802c024:	2100      	movs	r1, #0
 802c026:	1d1a      	adds	r2, r3, #4
 802c028:	6032      	str	r2, [r6, #0]
 802c02a:	681e      	ldr	r6, [r3, #0]
 802c02c:	6862      	ldr	r2, [r4, #4]
 802c02e:	4630      	mov	r0, r6
 802c030:	f000 f960 	bl	802c2f4 <memchr>
 802c034:	b108      	cbz	r0, 802c03a <_printf_i+0x1e6>
 802c036:	1b80      	subs	r0, r0, r6
 802c038:	6060      	str	r0, [r4, #4]
 802c03a:	6863      	ldr	r3, [r4, #4]
 802c03c:	6123      	str	r3, [r4, #16]
 802c03e:	2300      	movs	r3, #0
 802c040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802c044:	e7aa      	b.n	802bf9c <_printf_i+0x148>
 802c046:	6923      	ldr	r3, [r4, #16]
 802c048:	4632      	mov	r2, r6
 802c04a:	4649      	mov	r1, r9
 802c04c:	4640      	mov	r0, r8
 802c04e:	47d0      	blx	sl
 802c050:	3001      	adds	r0, #1
 802c052:	d0ad      	beq.n	802bfb0 <_printf_i+0x15c>
 802c054:	6823      	ldr	r3, [r4, #0]
 802c056:	079b      	lsls	r3, r3, #30
 802c058:	d413      	bmi.n	802c082 <_printf_i+0x22e>
 802c05a:	68e0      	ldr	r0, [r4, #12]
 802c05c:	9b03      	ldr	r3, [sp, #12]
 802c05e:	4298      	cmp	r0, r3
 802c060:	bfb8      	it	lt
 802c062:	4618      	movlt	r0, r3
 802c064:	e7a6      	b.n	802bfb4 <_printf_i+0x160>
 802c066:	2301      	movs	r3, #1
 802c068:	4632      	mov	r2, r6
 802c06a:	4649      	mov	r1, r9
 802c06c:	4640      	mov	r0, r8
 802c06e:	47d0      	blx	sl
 802c070:	3001      	adds	r0, #1
 802c072:	d09d      	beq.n	802bfb0 <_printf_i+0x15c>
 802c074:	3501      	adds	r5, #1
 802c076:	68e3      	ldr	r3, [r4, #12]
 802c078:	9903      	ldr	r1, [sp, #12]
 802c07a:	1a5b      	subs	r3, r3, r1
 802c07c:	42ab      	cmp	r3, r5
 802c07e:	dcf2      	bgt.n	802c066 <_printf_i+0x212>
 802c080:	e7eb      	b.n	802c05a <_printf_i+0x206>
 802c082:	2500      	movs	r5, #0
 802c084:	f104 0619 	add.w	r6, r4, #25
 802c088:	e7f5      	b.n	802c076 <_printf_i+0x222>
 802c08a:	bf00      	nop
 802c08c:	0802e330 	.word	0x0802e330
 802c090:	0802e341 	.word	0x0802e341

0802c094 <__sflush_r>:
 802c094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802c098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c09c:	0716      	lsls	r6, r2, #28
 802c09e:	4605      	mov	r5, r0
 802c0a0:	460c      	mov	r4, r1
 802c0a2:	d454      	bmi.n	802c14e <__sflush_r+0xba>
 802c0a4:	684b      	ldr	r3, [r1, #4]
 802c0a6:	2b00      	cmp	r3, #0
 802c0a8:	dc02      	bgt.n	802c0b0 <__sflush_r+0x1c>
 802c0aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802c0ac:	2b00      	cmp	r3, #0
 802c0ae:	dd48      	ble.n	802c142 <__sflush_r+0xae>
 802c0b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c0b2:	2e00      	cmp	r6, #0
 802c0b4:	d045      	beq.n	802c142 <__sflush_r+0xae>
 802c0b6:	2300      	movs	r3, #0
 802c0b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802c0bc:	682f      	ldr	r7, [r5, #0]
 802c0be:	6a21      	ldr	r1, [r4, #32]
 802c0c0:	602b      	str	r3, [r5, #0]
 802c0c2:	d030      	beq.n	802c126 <__sflush_r+0x92>
 802c0c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802c0c6:	89a3      	ldrh	r3, [r4, #12]
 802c0c8:	0759      	lsls	r1, r3, #29
 802c0ca:	d505      	bpl.n	802c0d8 <__sflush_r+0x44>
 802c0cc:	6863      	ldr	r3, [r4, #4]
 802c0ce:	1ad2      	subs	r2, r2, r3
 802c0d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802c0d2:	b10b      	cbz	r3, 802c0d8 <__sflush_r+0x44>
 802c0d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802c0d6:	1ad2      	subs	r2, r2, r3
 802c0d8:	2300      	movs	r3, #0
 802c0da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c0dc:	6a21      	ldr	r1, [r4, #32]
 802c0de:	4628      	mov	r0, r5
 802c0e0:	47b0      	blx	r6
 802c0e2:	1c43      	adds	r3, r0, #1
 802c0e4:	89a3      	ldrh	r3, [r4, #12]
 802c0e6:	d106      	bne.n	802c0f6 <__sflush_r+0x62>
 802c0e8:	6829      	ldr	r1, [r5, #0]
 802c0ea:	291d      	cmp	r1, #29
 802c0ec:	d82b      	bhi.n	802c146 <__sflush_r+0xb2>
 802c0ee:	4a2a      	ldr	r2, [pc, #168]	@ (802c198 <__sflush_r+0x104>)
 802c0f0:	410a      	asrs	r2, r1
 802c0f2:	07d6      	lsls	r6, r2, #31
 802c0f4:	d427      	bmi.n	802c146 <__sflush_r+0xb2>
 802c0f6:	2200      	movs	r2, #0
 802c0f8:	04d9      	lsls	r1, r3, #19
 802c0fa:	6062      	str	r2, [r4, #4]
 802c0fc:	6922      	ldr	r2, [r4, #16]
 802c0fe:	6022      	str	r2, [r4, #0]
 802c100:	d504      	bpl.n	802c10c <__sflush_r+0x78>
 802c102:	1c42      	adds	r2, r0, #1
 802c104:	d101      	bne.n	802c10a <__sflush_r+0x76>
 802c106:	682b      	ldr	r3, [r5, #0]
 802c108:	b903      	cbnz	r3, 802c10c <__sflush_r+0x78>
 802c10a:	6560      	str	r0, [r4, #84]	@ 0x54
 802c10c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802c10e:	602f      	str	r7, [r5, #0]
 802c110:	b1b9      	cbz	r1, 802c142 <__sflush_r+0xae>
 802c112:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802c116:	4299      	cmp	r1, r3
 802c118:	d002      	beq.n	802c120 <__sflush_r+0x8c>
 802c11a:	4628      	mov	r0, r5
 802c11c:	f7ff fb44 	bl	802b7a8 <_free_r>
 802c120:	2300      	movs	r3, #0
 802c122:	6363      	str	r3, [r4, #52]	@ 0x34
 802c124:	e00d      	b.n	802c142 <__sflush_r+0xae>
 802c126:	2301      	movs	r3, #1
 802c128:	4628      	mov	r0, r5
 802c12a:	47b0      	blx	r6
 802c12c:	4602      	mov	r2, r0
 802c12e:	1c50      	adds	r0, r2, #1
 802c130:	d1c9      	bne.n	802c0c6 <__sflush_r+0x32>
 802c132:	682b      	ldr	r3, [r5, #0]
 802c134:	2b00      	cmp	r3, #0
 802c136:	d0c6      	beq.n	802c0c6 <__sflush_r+0x32>
 802c138:	2b1d      	cmp	r3, #29
 802c13a:	d001      	beq.n	802c140 <__sflush_r+0xac>
 802c13c:	2b16      	cmp	r3, #22
 802c13e:	d11d      	bne.n	802c17c <__sflush_r+0xe8>
 802c140:	602f      	str	r7, [r5, #0]
 802c142:	2000      	movs	r0, #0
 802c144:	e021      	b.n	802c18a <__sflush_r+0xf6>
 802c146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c14a:	b21b      	sxth	r3, r3
 802c14c:	e01a      	b.n	802c184 <__sflush_r+0xf0>
 802c14e:	690f      	ldr	r7, [r1, #16]
 802c150:	2f00      	cmp	r7, #0
 802c152:	d0f6      	beq.n	802c142 <__sflush_r+0xae>
 802c154:	0793      	lsls	r3, r2, #30
 802c156:	680e      	ldr	r6, [r1, #0]
 802c158:	600f      	str	r7, [r1, #0]
 802c15a:	bf0c      	ite	eq
 802c15c:	694b      	ldreq	r3, [r1, #20]
 802c15e:	2300      	movne	r3, #0
 802c160:	eba6 0807 	sub.w	r8, r6, r7
 802c164:	608b      	str	r3, [r1, #8]
 802c166:	f1b8 0f00 	cmp.w	r8, #0
 802c16a:	ddea      	ble.n	802c142 <__sflush_r+0xae>
 802c16c:	4643      	mov	r3, r8
 802c16e:	463a      	mov	r2, r7
 802c170:	6a21      	ldr	r1, [r4, #32]
 802c172:	4628      	mov	r0, r5
 802c174:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c176:	47b0      	blx	r6
 802c178:	2800      	cmp	r0, #0
 802c17a:	dc08      	bgt.n	802c18e <__sflush_r+0xfa>
 802c17c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c184:	f04f 30ff 	mov.w	r0, #4294967295
 802c188:	81a3      	strh	r3, [r4, #12]
 802c18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c18e:	4407      	add	r7, r0
 802c190:	eba8 0800 	sub.w	r8, r8, r0
 802c194:	e7e7      	b.n	802c166 <__sflush_r+0xd2>
 802c196:	bf00      	nop
 802c198:	dfbffffe 	.word	0xdfbffffe

0802c19c <_fflush_r>:
 802c19c:	b538      	push	{r3, r4, r5, lr}
 802c19e:	690b      	ldr	r3, [r1, #16]
 802c1a0:	4605      	mov	r5, r0
 802c1a2:	460c      	mov	r4, r1
 802c1a4:	b913      	cbnz	r3, 802c1ac <_fflush_r+0x10>
 802c1a6:	2500      	movs	r5, #0
 802c1a8:	4628      	mov	r0, r5
 802c1aa:	bd38      	pop	{r3, r4, r5, pc}
 802c1ac:	b118      	cbz	r0, 802c1b6 <_fflush_r+0x1a>
 802c1ae:	6a03      	ldr	r3, [r0, #32]
 802c1b0:	b90b      	cbnz	r3, 802c1b6 <_fflush_r+0x1a>
 802c1b2:	f7ff f879 	bl	802b2a8 <__sinit>
 802c1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c1ba:	2b00      	cmp	r3, #0
 802c1bc:	d0f3      	beq.n	802c1a6 <_fflush_r+0xa>
 802c1be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802c1c0:	07d0      	lsls	r0, r2, #31
 802c1c2:	d404      	bmi.n	802c1ce <_fflush_r+0x32>
 802c1c4:	0599      	lsls	r1, r3, #22
 802c1c6:	d402      	bmi.n	802c1ce <_fflush_r+0x32>
 802c1c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c1ca:	f7ff fad2 	bl	802b772 <__retarget_lock_acquire_recursive>
 802c1ce:	4628      	mov	r0, r5
 802c1d0:	4621      	mov	r1, r4
 802c1d2:	f7ff ff5f 	bl	802c094 <__sflush_r>
 802c1d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c1d8:	4605      	mov	r5, r0
 802c1da:	07da      	lsls	r2, r3, #31
 802c1dc:	d4e4      	bmi.n	802c1a8 <_fflush_r+0xc>
 802c1de:	89a3      	ldrh	r3, [r4, #12]
 802c1e0:	059b      	lsls	r3, r3, #22
 802c1e2:	d4e1      	bmi.n	802c1a8 <_fflush_r+0xc>
 802c1e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c1e6:	f7ff fac5 	bl	802b774 <__retarget_lock_release_recursive>
 802c1ea:	e7dd      	b.n	802c1a8 <_fflush_r+0xc>

0802c1ec <__swhatbuf_r>:
 802c1ec:	b570      	push	{r4, r5, r6, lr}
 802c1ee:	460c      	mov	r4, r1
 802c1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c1f4:	b096      	sub	sp, #88	@ 0x58
 802c1f6:	4615      	mov	r5, r2
 802c1f8:	2900      	cmp	r1, #0
 802c1fa:	461e      	mov	r6, r3
 802c1fc:	da0c      	bge.n	802c218 <__swhatbuf_r+0x2c>
 802c1fe:	89a3      	ldrh	r3, [r4, #12]
 802c200:	2100      	movs	r1, #0
 802c202:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802c206:	bf14      	ite	ne
 802c208:	2340      	movne	r3, #64	@ 0x40
 802c20a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802c20e:	2000      	movs	r0, #0
 802c210:	6031      	str	r1, [r6, #0]
 802c212:	602b      	str	r3, [r5, #0]
 802c214:	b016      	add	sp, #88	@ 0x58
 802c216:	bd70      	pop	{r4, r5, r6, pc}
 802c218:	466a      	mov	r2, sp
 802c21a:	f000 f849 	bl	802c2b0 <_fstat_r>
 802c21e:	2800      	cmp	r0, #0
 802c220:	dbed      	blt.n	802c1fe <__swhatbuf_r+0x12>
 802c222:	9901      	ldr	r1, [sp, #4]
 802c224:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802c228:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802c22c:	4259      	negs	r1, r3
 802c22e:	4159      	adcs	r1, r3
 802c230:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c234:	e7eb      	b.n	802c20e <__swhatbuf_r+0x22>

0802c236 <__smakebuf_r>:
 802c236:	898b      	ldrh	r3, [r1, #12]
 802c238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802c23a:	079d      	lsls	r5, r3, #30
 802c23c:	4606      	mov	r6, r0
 802c23e:	460c      	mov	r4, r1
 802c240:	d507      	bpl.n	802c252 <__smakebuf_r+0x1c>
 802c242:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802c246:	6023      	str	r3, [r4, #0]
 802c248:	6123      	str	r3, [r4, #16]
 802c24a:	2301      	movs	r3, #1
 802c24c:	6163      	str	r3, [r4, #20]
 802c24e:	b003      	add	sp, #12
 802c250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c252:	ab01      	add	r3, sp, #4
 802c254:	466a      	mov	r2, sp
 802c256:	f7ff ffc9 	bl	802c1ec <__swhatbuf_r>
 802c25a:	9f00      	ldr	r7, [sp, #0]
 802c25c:	4605      	mov	r5, r0
 802c25e:	4630      	mov	r0, r6
 802c260:	4639      	mov	r1, r7
 802c262:	f7fe ff09 	bl	802b078 <_malloc_r>
 802c266:	b948      	cbnz	r0, 802c27c <__smakebuf_r+0x46>
 802c268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c26c:	059a      	lsls	r2, r3, #22
 802c26e:	d4ee      	bmi.n	802c24e <__smakebuf_r+0x18>
 802c270:	f023 0303 	bic.w	r3, r3, #3
 802c274:	f043 0302 	orr.w	r3, r3, #2
 802c278:	81a3      	strh	r3, [r4, #12]
 802c27a:	e7e2      	b.n	802c242 <__smakebuf_r+0xc>
 802c27c:	89a3      	ldrh	r3, [r4, #12]
 802c27e:	6020      	str	r0, [r4, #0]
 802c280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802c284:	81a3      	strh	r3, [r4, #12]
 802c286:	9b01      	ldr	r3, [sp, #4]
 802c288:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802c28c:	b15b      	cbz	r3, 802c2a6 <__smakebuf_r+0x70>
 802c28e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c292:	4630      	mov	r0, r6
 802c294:	f000 f81e 	bl	802c2d4 <_isatty_r>
 802c298:	b128      	cbz	r0, 802c2a6 <__smakebuf_r+0x70>
 802c29a:	89a3      	ldrh	r3, [r4, #12]
 802c29c:	f023 0303 	bic.w	r3, r3, #3
 802c2a0:	f043 0301 	orr.w	r3, r3, #1
 802c2a4:	81a3      	strh	r3, [r4, #12]
 802c2a6:	89a3      	ldrh	r3, [r4, #12]
 802c2a8:	431d      	orrs	r5, r3
 802c2aa:	81a5      	strh	r5, [r4, #12]
 802c2ac:	e7cf      	b.n	802c24e <__smakebuf_r+0x18>
	...

0802c2b0 <_fstat_r>:
 802c2b0:	b538      	push	{r3, r4, r5, lr}
 802c2b2:	2300      	movs	r3, #0
 802c2b4:	4d06      	ldr	r5, [pc, #24]	@ (802c2d0 <_fstat_r+0x20>)
 802c2b6:	4604      	mov	r4, r0
 802c2b8:	4608      	mov	r0, r1
 802c2ba:	4611      	mov	r1, r2
 802c2bc:	602b      	str	r3, [r5, #0]
 802c2be:	f7f5 fb4e 	bl	802195e <_fstat>
 802c2c2:	1c43      	adds	r3, r0, #1
 802c2c4:	d102      	bne.n	802c2cc <_fstat_r+0x1c>
 802c2c6:	682b      	ldr	r3, [r5, #0]
 802c2c8:	b103      	cbz	r3, 802c2cc <_fstat_r+0x1c>
 802c2ca:	6023      	str	r3, [r4, #0]
 802c2cc:	bd38      	pop	{r3, r4, r5, pc}
 802c2ce:	bf00      	nop
 802c2d0:	2004462c 	.word	0x2004462c

0802c2d4 <_isatty_r>:
 802c2d4:	b538      	push	{r3, r4, r5, lr}
 802c2d6:	2300      	movs	r3, #0
 802c2d8:	4d05      	ldr	r5, [pc, #20]	@ (802c2f0 <_isatty_r+0x1c>)
 802c2da:	4604      	mov	r4, r0
 802c2dc:	4608      	mov	r0, r1
 802c2de:	602b      	str	r3, [r5, #0]
 802c2e0:	f7f5 fb42 	bl	8021968 <_isatty>
 802c2e4:	1c43      	adds	r3, r0, #1
 802c2e6:	d102      	bne.n	802c2ee <_isatty_r+0x1a>
 802c2e8:	682b      	ldr	r3, [r5, #0]
 802c2ea:	b103      	cbz	r3, 802c2ee <_isatty_r+0x1a>
 802c2ec:	6023      	str	r3, [r4, #0]
 802c2ee:	bd38      	pop	{r3, r4, r5, pc}
 802c2f0:	2004462c 	.word	0x2004462c

0802c2f4 <memchr>:
 802c2f4:	b2c9      	uxtb	r1, r1
 802c2f6:	4603      	mov	r3, r0
 802c2f8:	4402      	add	r2, r0
 802c2fa:	b510      	push	{r4, lr}
 802c2fc:	4293      	cmp	r3, r2
 802c2fe:	4618      	mov	r0, r3
 802c300:	d101      	bne.n	802c306 <memchr+0x12>
 802c302:	2000      	movs	r0, #0
 802c304:	e003      	b.n	802c30e <memchr+0x1a>
 802c306:	7804      	ldrb	r4, [r0, #0]
 802c308:	3301      	adds	r3, #1
 802c30a:	428c      	cmp	r4, r1
 802c30c:	d1f6      	bne.n	802c2fc <memchr+0x8>
 802c30e:	bd10      	pop	{r4, pc}

0802c310 <_realloc_r>:
 802c310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c314:	4680      	mov	r8, r0
 802c316:	4615      	mov	r5, r2
 802c318:	460c      	mov	r4, r1
 802c31a:	b921      	cbnz	r1, 802c326 <_realloc_r+0x16>
 802c31c:	4611      	mov	r1, r2
 802c31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c322:	f7fe bea9 	b.w	802b078 <_malloc_r>
 802c326:	b92a      	cbnz	r2, 802c334 <_realloc_r+0x24>
 802c328:	f7ff fa3e 	bl	802b7a8 <_free_r>
 802c32c:	2400      	movs	r4, #0
 802c32e:	4620      	mov	r0, r4
 802c330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c334:	f000 f81a 	bl	802c36c <_malloc_usable_size_r>
 802c338:	4285      	cmp	r5, r0
 802c33a:	4606      	mov	r6, r0
 802c33c:	d802      	bhi.n	802c344 <_realloc_r+0x34>
 802c33e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802c342:	d8f4      	bhi.n	802c32e <_realloc_r+0x1e>
 802c344:	4629      	mov	r1, r5
 802c346:	4640      	mov	r0, r8
 802c348:	f7fe fe96 	bl	802b078 <_malloc_r>
 802c34c:	4607      	mov	r7, r0
 802c34e:	2800      	cmp	r0, #0
 802c350:	d0ec      	beq.n	802c32c <_realloc_r+0x1c>
 802c352:	42b5      	cmp	r5, r6
 802c354:	462a      	mov	r2, r5
 802c356:	4621      	mov	r1, r4
 802c358:	bf28      	it	cs
 802c35a:	4632      	movcs	r2, r6
 802c35c:	f7ff fa16 	bl	802b78c <memcpy>
 802c360:	4621      	mov	r1, r4
 802c362:	4640      	mov	r0, r8
 802c364:	463c      	mov	r4, r7
 802c366:	f7ff fa1f 	bl	802b7a8 <_free_r>
 802c36a:	e7e0      	b.n	802c32e <_realloc_r+0x1e>

0802c36c <_malloc_usable_size_r>:
 802c36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c370:	1f18      	subs	r0, r3, #4
 802c372:	2b00      	cmp	r3, #0
 802c374:	bfbc      	itt	lt
 802c376:	580b      	ldrlt	r3, [r1, r0]
 802c378:	18c0      	addlt	r0, r0, r3
 802c37a:	4770      	bx	lr

0802c37c <_init>:
 802c37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c37e:	bf00      	nop
 802c380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c382:	bc08      	pop	{r3}
 802c384:	469e      	mov	lr, r3
 802c386:	4770      	bx	lr

0802c388 <_fini>:
 802c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c38a:	bf00      	nop
 802c38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c38e:	bc08      	pop	{r3}
 802c390:	469e      	mov	lr, r3
 802c392:	4770      	bx	lr
