
L3.1_ErrorHandling_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004c88  08004c88  00005c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d18  08004d18  00006074  2**0
                  CONTENTS
  4 .ARM          00000008  08004d18  08004d18  00005d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d20  08004d20  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d20  08004d20  00005d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d24  08004d24  00005d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08004d28  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000074  08004d9c  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08004d9c  00006410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccd0  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202b  00000000  00000000  00012d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00014da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000869  00000000  00000000  000158a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fef4  00000000  00000000  00016111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0b6  00000000  00000000  00036005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf66f  00000000  00000000  000430bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010272a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003114  00000000  00000000  00102770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00105884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c70 	.word	0x08004c70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004c70 	.word	0x08004c70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <LogError>:


//------------------------------Error Logging------------------------------
// Error Log
void LogError(uint8_t errorCode)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b090      	sub	sp, #64	@ 0x40
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	char message[50];

    // Implement your logging mechanism, e.g., send to UART, store in buffer

	// Example: send error code to a debug UART
    sprintf(message, "UART Error: 0x%08X\n", errorCode);
 800057a:	79fa      	ldrb	r2, [r7, #7]
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	490a      	ldr	r1, [pc, #40]	@ (80005ac <LogError+0x3c>)
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fed4 	bl	8004330 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fe1f 	bl	80001d0 <strlen>
 8000592:	4603      	mov	r3, r0
 8000594:	b29a      	uxth	r2, r3
 8000596:	f107 010c 	add.w	r1, r7, #12
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <LogError+0x40>)
 80005a0:	f002 fd48 	bl	8003034 <HAL_UART_Transmit>
}
 80005a4:	bf00      	nop
 80005a6:	3740      	adds	r7, #64	@ 0x40
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	08004c88 	.word	0x08004c88
 80005b0:	20000118 	.word	0x20000118

080005b4 <resetUART>:


//------------------------------UART Resets------------------------------
// UART Reset
void resetUART(UART_HandleTypeDef *huart)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	if (huart == NULL || huart->Instance != USART1 || huart->Instance != USART2)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d058      	beq.n	8000674 <resetUART+0xc0>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a2d      	ldr	r2, [pc, #180]	@ (800067c <resetUART+0xc8>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d153      	bne.n	8000674 <resetUART+0xc0>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a2b      	ldr	r2, [pc, #172]	@ (8000680 <resetUART+0xcc>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d14e      	bne.n	8000674 <resetUART+0xc0>
	{
		return; // Error: Invalid handle
	}

	if (huart->Instance == USART1)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a28      	ldr	r2, [pc, #160]	@ (800067c <resetUART+0xc8>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d121      	bne.n	8000624 <resetUART+0x70>
		{
			// Disable the UART1 peripheral
			__HAL_UART_DISABLE(huart);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f022 0201 	bic.w	r2, r2, #1
 80005ee:	601a      	str	r2, [r3, #0]

			// Clear the RX buffer
			while (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80005f0:	e002      	b.n	80005f8 <resetUART+0x44>
			{
				(void)huart->Instance->RDR; // Read the data register to clear RXNE
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
			while (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	2b20      	cmp	r3, #32
 8000604:	d0f5      	beq.n	80005f2 <resetUART+0x3e>
			}

			// Reset the UART1 peripheral
			__HAL_RCC_USART1_FORCE_RESET();
 8000606:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <resetUART+0xd0>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060a:	4a1e      	ldr	r2, [pc, #120]	@ (8000684 <resetUART+0xd0>)
 800060c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000610:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_RCC_USART1_RELEASE_RESET();
 8000612:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <resetUART+0xd0>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000616:	4a1b      	ldr	r2, [pc, #108]	@ (8000684 <resetUART+0xd0>)
 8000618:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800061c:	6413      	str	r3, [r2, #64]	@ 0x40


			// Reinitialize the UART1 peripheral
			if (HAL_UART_Init(huart) == HAL_OK)		// Init UART1
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f002 fcba 	bl	8002f98 <HAL_UART_Init>
			{
				// Reinitialize not successful
			}
		}

	if (huart->Instance == USART2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a15      	ldr	r2, [pc, #84]	@ (8000680 <resetUART+0xcc>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d123      	bne.n	8000676 <resetUART+0xc2>
	{
		// Disable the UART2 peripheral
		__HAL_UART_DISABLE(huart);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f022 0201 	bic.w	r2, r2, #1
 800063c:	601a      	str	r2, [r3, #0]

		// Clear the RX buffer
		while (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800063e:	e002      	b.n	8000646 <resetUART+0x92>
		{
			(void)huart->Instance->RDR; // Read the data register to clear RXNE
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
		while (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	f003 0320 	and.w	r3, r3, #32
 8000650:	2b20      	cmp	r3, #32
 8000652:	d0f5      	beq.n	8000640 <resetUART+0x8c>
		}

		// Reset the UART2 peripheral
		__HAL_RCC_USART2_FORCE_RESET();
 8000654:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <resetUART+0xd0>)
 8000656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000658:	4a0a      	ldr	r2, [pc, #40]	@ (8000684 <resetUART+0xd0>)
 800065a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800065e:	6393      	str	r3, [r2, #56]	@ 0x38
		__HAL_RCC_USART2_RELEASE_RESET();
 8000660:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <resetUART+0xd0>)
 8000662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000664:	4a07      	ldr	r2, [pc, #28]	@ (8000684 <resetUART+0xd0>)
 8000666:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800066a:	6393      	str	r3, [r2, #56]	@ 0x38


		// Reinitialize the UART2 peripheral
		if (HAL_UART_Init(huart) == HAL_OK)		// Init UART2
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f002 fc93 	bl	8002f98 <HAL_UART_Init>
 8000672:	e000      	b.n	8000676 <resetUART+0xc2>
		return; // Error: Invalid handle
 8000674:	bf00      	nop
		}else
		{
			// Reinitialize not successful
		}
	}
}
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40013800 	.word	0x40013800
 8000680:	40004400 	.word	0x40004400
 8000684:	40021000 	.word	0x40021000

08000688 <HandleNoErrorUART>:
 * 0xB6....UART1 Error Unknown
 */

// Handle No Error
void HandleNoErrorUART(UART_HandleTypeDef *huart)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a09      	ldr	r2, [pc, #36]	@ (80006bc <HandleNoErrorUART+0x34>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d103      	bne.n	80006a2 <HandleNoErrorUART+0x1a>
	{
		LogError(0xA0);	// Log Error
 800069a:	20a0      	movs	r0, #160	@ 0xa0
 800069c:	f7ff ff68 	bl	8000570 <LogError>
	}
	else if (huart->Instance == USART2)
	{
		LogError(0xB0);	// Log Error
	}
}
 80006a0:	e007      	b.n	80006b2 <HandleNoErrorUART+0x2a>
	else if (huart->Instance == USART2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a06      	ldr	r2, [pc, #24]	@ (80006c0 <HandleNoErrorUART+0x38>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d102      	bne.n	80006b2 <HandleNoErrorUART+0x2a>
		LogError(0xB0);	// Log Error
 80006ac:	20b0      	movs	r0, #176	@ 0xb0
 80006ae:	f7ff ff5f 	bl	8000570 <LogError>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40013800 	.word	0x40013800
 80006c0:	40004400 	.word	0x40004400

080006c4 <HandleParityErrorUART>:

// Handle Parity Error
void HandleParityErrorUART(UART_HandleTypeDef *huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000700 <HandleParityErrorUART+0x3c>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d103      	bne.n	80006de <HandleParityErrorUART+0x1a>
	{
		LogError(0xA1);			// Log Error
 80006d6:	20a1      	movs	r0, #161	@ 0xa1
 80006d8:	f7ff ff4a 	bl	8000570 <LogError>
 80006dc:	e007      	b.n	80006ee <HandleParityErrorUART+0x2a>
	}
	else if (huart->Instance == USART2)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <HandleParityErrorUART+0x40>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d102      	bne.n	80006ee <HandleParityErrorUART+0x2a>
	{
		LogError(0xB1);			// Log Error
 80006e8:	20b1      	movs	r0, #177	@ 0xb1
 80006ea:	f7ff ff41 	bl	8000570 <LogError>
	}

	__HAL_UART_CLEAR_PEFLAG(huart);	// Clear Error Flag
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2201      	movs	r2, #1
 80006f4:	621a      	str	r2, [r3, #32]
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40013800 	.word	0x40013800
 8000704:	40004400 	.word	0x40004400

08000708 <HandleNoiseErrorUART>:

// Handle Noise Error
void HandleNoiseErrorUART(UART_HandleTypeDef *huart)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)		// log the error
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <HandleNoiseErrorUART+0x3c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d103      	bne.n	8000722 <HandleNoiseErrorUART+0x1a>
	{
		LogError(0xA2);
 800071a:	20a2      	movs	r0, #162	@ 0xa2
 800071c:	f7ff ff28 	bl	8000570 <LogError>
 8000720:	e007      	b.n	8000732 <HandleNoiseErrorUART+0x2a>
	}
	else if (huart->Instance == USART2)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a08      	ldr	r2, [pc, #32]	@ (8000748 <HandleNoiseErrorUART+0x40>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d102      	bne.n	8000732 <HandleNoiseErrorUART+0x2a>
	{
		LogError(0xB2);				// log the error
 800072c:	20b2      	movs	r0, #178	@ 0xb2
 800072e:	f7ff ff1f 	bl	8000570 <LogError>
	}

	__HAL_UART_CLEAR_NEFLAG(huart);		// clear error flag
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2204      	movs	r2, #4
 8000738:	621a      	str	r2, [r3, #32]
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40013800 	.word	0x40013800
 8000748:	40004400 	.word	0x40004400

0800074c <HandleFramErrorUART>:

// Handle Framing Error
void HandleFramErrorUART(UART_HandleTypeDef *huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)		// Log Error
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0b      	ldr	r2, [pc, #44]	@ (8000788 <HandleFramErrorUART+0x3c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d103      	bne.n	8000766 <HandleFramErrorUART+0x1a>
	{
		LogError(0xA3);
 800075e:	20a3      	movs	r0, #163	@ 0xa3
 8000760:	f7ff ff06 	bl	8000570 <LogError>
 8000764:	e007      	b.n	8000776 <HandleFramErrorUART+0x2a>
	}
	else if (huart->Instance == USART2)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <HandleFramErrorUART+0x40>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d102      	bne.n	8000776 <HandleFramErrorUART+0x2a>
	{
		LogError(0xB3);				// Log Error
 8000770:	20b3      	movs	r0, #179	@ 0xb3
 8000772:	f7ff fefd 	bl	8000570 <LogError>
	}

	__HAL_UART_CLEAR_FEFLAG(huart);		// Clear Error Flag
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2202      	movs	r2, #2
 800077c:	621a      	str	r2, [r3, #32]
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40013800 	.word	0x40013800
 800078c:	40004400 	.word	0x40004400

08000790 <HandleOverrunErrorUART>:

// Handle Overrun Error
void HandleOverrunErrorUART(UART_HandleTypeDef *huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0c      	ldr	r2, [pc, #48]	@ (80007d0 <HandleOverrunErrorUART+0x40>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d103      	bne.n	80007aa <HandleOverrunErrorUART+0x1a>
	{
		LogError(0xA4);				// Log the Error
 80007a2:	20a4      	movs	r0, #164	@ 0xa4
 80007a4:	f7ff fee4 	bl	8000570 <LogError>
 80007a8:	e007      	b.n	80007ba <HandleOverrunErrorUART+0x2a>
	}
	else if (huart->Instance == USART2)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a09      	ldr	r2, [pc, #36]	@ (80007d4 <HandleOverrunErrorUART+0x44>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d102      	bne.n	80007ba <HandleOverrunErrorUART+0x2a>
	{
		LogError(0xB4);				// Log the Error
 80007b4:	20b4      	movs	r0, #180	@ 0xb4
 80007b6:	f7ff fedb 	bl	8000570 <LogError>
	}

	__HAL_UART_CLEAR_OREFLAG(huart);	// Clear Error Flag
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2208      	movs	r2, #8
 80007c0:	621a      	str	r2, [r3, #32]

	resetUART(huart);					// Reset UART
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff fef6 	bl	80005b4 <resetUART>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40013800 	.word	0x40013800
 80007d4:	40004400 	.word	0x40004400

080007d8 <HandleReceiverTimeoutErrorUART>:

// Receiver Timeout Error
void HandleReceiverTimeoutErrorUART(UART_HandleTypeDef *huart)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)						// Log Error
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a09      	ldr	r2, [pc, #36]	@ (800080c <HandleReceiverTimeoutErrorUART+0x34>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d103      	bne.n	80007f2 <HandleReceiverTimeoutErrorUART+0x1a>
	{
		LogError(0xA5);
 80007ea:	20a5      	movs	r0, #165	@ 0xa5
 80007ec:	f7ff fec0 	bl	8000570 <LogError>
	}else if (huart->Instance == USART2)
	{
		LogError(0xB5);								// Log Error
	}
}
 80007f0:	e007      	b.n	8000802 <HandleReceiverTimeoutErrorUART+0x2a>
	}else if (huart->Instance == USART2)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a06      	ldr	r2, [pc, #24]	@ (8000810 <HandleReceiverTimeoutErrorUART+0x38>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d102      	bne.n	8000802 <HandleReceiverTimeoutErrorUART+0x2a>
		LogError(0xB5);								// Log Error
 80007fc:	20b5      	movs	r0, #181	@ 0xb5
 80007fe:	f7ff feb7 	bl	8000570 <LogError>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40013800 	.word	0x40013800
 8000810:	40004400 	.word	0x40004400

08000814 <HandleUnknownErrorUART>:

// Handle Unknown Errors
void HandleUnknownErrorUART(UART_HandleTypeDef *huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)		// Log Error
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <HandleUnknownErrorUART+0x38>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d103      	bne.n	800082e <HandleUnknownErrorUART+0x1a>
	{
		LogError(0xA6);
 8000826:	20a6      	movs	r0, #166	@ 0xa6
 8000828:	f7ff fea2 	bl	8000570 <LogError>
 800082c:	e007      	b.n	800083e <HandleUnknownErrorUART+0x2a>
	}else if (huart->Instance == USART2)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a07      	ldr	r2, [pc, #28]	@ (8000850 <HandleUnknownErrorUART+0x3c>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d102      	bne.n	800083e <HandleUnknownErrorUART+0x2a>
	{
		LogError(0xB6);				// Log Error
 8000838:	20b6      	movs	r0, #182	@ 0xb6
 800083a:	f7ff fe99 	bl	8000570 <LogError>
	}

	resetUART(huart);					// Reset UART
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff feb8 	bl	80005b4 <resetUART>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40013800 	.word	0x40013800
 8000850:	40004400 	.word	0x40004400

08000854 <HAL_UART_ErrorCallback>:


//------------------------------UART Error Callback------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if (huart == NULL || huart->Instance != USART1 || huart->Instance != USART2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d070      	beq.n	8000944 <HAL_UART_ErrorCallback+0xf0>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a39      	ldr	r2, [pc, #228]	@ (800094c <HAL_UART_ErrorCallback+0xf8>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d16b      	bne.n	8000944 <HAL_UART_ErrorCallback+0xf0>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a37      	ldr	r2, [pc, #220]	@ (8000950 <HAL_UART_ErrorCallback+0xfc>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d166      	bne.n	8000944 <HAL_UART_ErrorCallback+0xf0>
	{
		return; // Error: Invalid handle
	}

    //Error Handling UART
	switch (huart->ErrorCode)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800087c:	2b20      	cmp	r3, #32
 800087e:	d85d      	bhi.n	800093c <HAL_UART_ErrorCallback+0xe8>
 8000880:	a201      	add	r2, pc, #4	@ (adr r2, 8000888 <HAL_UART_ErrorCallback+0x34>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	0800090d 	.word	0x0800090d
 800088c:	08000915 	.word	0x08000915
 8000890:	0800091d 	.word	0x0800091d
 8000894:	0800093d 	.word	0x0800093d
 8000898:	08000925 	.word	0x08000925
 800089c:	0800093d 	.word	0x0800093d
 80008a0:	0800093d 	.word	0x0800093d
 80008a4:	0800093d 	.word	0x0800093d
 80008a8:	0800092d 	.word	0x0800092d
 80008ac:	0800093d 	.word	0x0800093d
 80008b0:	0800093d 	.word	0x0800093d
 80008b4:	0800093d 	.word	0x0800093d
 80008b8:	0800093d 	.word	0x0800093d
 80008bc:	0800093d 	.word	0x0800093d
 80008c0:	0800093d 	.word	0x0800093d
 80008c4:	0800093d 	.word	0x0800093d
 80008c8:	0800093d 	.word	0x0800093d
 80008cc:	0800093d 	.word	0x0800093d
 80008d0:	0800093d 	.word	0x0800093d
 80008d4:	0800093d 	.word	0x0800093d
 80008d8:	0800093d 	.word	0x0800093d
 80008dc:	0800093d 	.word	0x0800093d
 80008e0:	0800093d 	.word	0x0800093d
 80008e4:	0800093d 	.word	0x0800093d
 80008e8:	0800093d 	.word	0x0800093d
 80008ec:	0800093d 	.word	0x0800093d
 80008f0:	0800093d 	.word	0x0800093d
 80008f4:	0800093d 	.word	0x0800093d
 80008f8:	0800093d 	.word	0x0800093d
 80008fc:	0800093d 	.word	0x0800093d
 8000900:	0800093d 	.word	0x0800093d
 8000904:	0800093d 	.word	0x0800093d
 8000908:	08000935 	.word	0x08000935
	{
		case HAL_UART_ERROR_NONE:
			// Handle No Error
			HandleNoErrorUART(huart);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff febb 	bl	8000688 <HandleNoErrorUART>
			break;
 8000912:	e018      	b.n	8000946 <HAL_UART_ErrorCallback+0xf2>
		case HAL_UART_ERROR_PE:
			// Handle Parity Error
			HandleParityErrorUART(huart);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fed5 	bl	80006c4 <HandleParityErrorUART>
			break;
 800091a:	e014      	b.n	8000946 <HAL_UART_ErrorCallback+0xf2>
		case HAL_UART_ERROR_NE:
			// Handle Noise Error
			HandleNoiseErrorUART(huart);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff fef3 	bl	8000708 <HandleNoiseErrorUART>
			break;
 8000922:	e010      	b.n	8000946 <HAL_UART_ErrorCallback+0xf2>
		case HAL_UART_ERROR_FE:
			// Handle Frame Error
			HandleFramErrorUART(huart);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff11 	bl	800074c <HandleFramErrorUART>
			break;
 800092a:	e00c      	b.n	8000946 <HAL_UART_ErrorCallback+0xf2>
		case HAL_UART_ERROR_ORE:
			// Handle Overrun error
			HandleOverrunErrorUART(huart);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff2f 	bl	8000790 <HandleOverrunErrorUART>
			break;
 8000932:	e008      	b.n	8000946 <HAL_UART_ErrorCallback+0xf2>
		case HAL_UART_ERROR_RTO:
			// Handle Receiver Timeout Error
			HandleReceiverTimeoutErrorUART(huart);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff4f 	bl	80007d8 <HandleReceiverTimeoutErrorUART>
			break;
 800093a:	e004      	b.n	8000946 <HAL_UART_ErrorCallback+0xf2>
		default:
			// Handle Unknown Errors
			HandleUnknownErrorUART(huart);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff69 	bl	8000814 <HandleUnknownErrorUART>
			break;
 8000942:	e000      	b.n	8000946 <HAL_UART_ErrorCallback+0xf2>
		return; // Error: Invalid handle
 8000944:	bf00      	nop
	}
}
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40013800 	.word	0x40013800
 8000950:	40004400 	.word	0x40004400

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fbd7 	bl	800110a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f81c 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f000 f912 	bl	8000b88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000964:	f000 f8da 	bl	8000b1c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000968:	f000 f8a8 	bl	8000abc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800096c:	f000 f876 	bl	8000a5c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000970:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000974:	f000 fc3e 	bl	80011f4 <HAL_Delay>

	  if (HAL_UART_Transmit_DMA(&huart2, dataBufferTx, sizeof(dataBufferTx)))
 8000978:	2218      	movs	r2, #24
 800097a:	4905      	ldr	r1, [pc, #20]	@ (8000990 <main+0x3c>)
 800097c:	4805      	ldr	r0, [pc, #20]	@ (8000994 <main+0x40>)
 800097e:	f002 fbe3 	bl	8003148 <HAL_UART_Transmit_DMA>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0f3      	beq.n	8000970 <main+0x1c>
	  {
		  // Transmission error handling
		  Error_Handler();
 8000988:	f000 f948 	bl	8000c1c <Error_Handler>
	  HAL_Delay(1000);
 800098c:	e7f0      	b.n	8000970 <main+0x1c>
 800098e:	bf00      	nop
 8000990:	20000000 	.word	0x20000000
 8000994:	20000118 	.word	0x20000118

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b096      	sub	sp, #88	@ 0x58
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2244      	movs	r2, #68	@ 0x44
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 fce2 	bl	8004370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	463b      	mov	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009be:	f001 f965 	bl	8001c8c <HAL_PWREx_ControlVoltageScaling>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009c8:	f000 f928 	bl	8000c1c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009cc:	f001 f940 	bl	8001c50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009d0:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <SystemClock_Config+0xc0>)
 80009d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009d6:	4a20      	ldr	r2, [pc, #128]	@ (8000a58 <SystemClock_Config+0xc0>)
 80009d8:	f023 0318 	bic.w	r3, r3, #24
 80009dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009e0:	2314      	movs	r3, #20
 80009e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009f0:	2360      	movs	r3, #96	@ 0x60
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f4:	2302      	movs	r3, #2
 80009f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009f8:	2301      	movs	r3, #1
 80009fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a00:	2310      	movs	r3, #16
 8000a02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a04:	2307      	movs	r3, #7
 8000a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 f98f 	bl	8001d38 <HAL_RCC_OscConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f8fc 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	230f      	movs	r3, #15
 8000a26:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fd8f 	bl	8002560 <HAL_RCC_ClockConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a48:	f000 f8e8 	bl	8000c1c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a4c:	f002 f9a2 	bl	8002d94 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a50:	bf00      	nop
 8000a52:	3758      	adds	r7, #88	@ 0x58
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000

08000a5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a62:	4a15      	ldr	r2, [pc, #84]	@ (8000ab8 <MX_USART1_UART_Init+0x5c>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a66:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a68:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000aa0:	f002 fa7a 	bl	8002f98 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000aaa:	f000 f8b7 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000090 	.word	0x20000090
 8000ab8:	40013800 	.word	0x40013800

08000abc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ac2:	4a15      	ldr	r2, [pc, #84]	@ (8000b18 <MX_USART2_UART_Init+0x5c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ac8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_USART2_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <MX_USART2_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <MX_USART2_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <MX_USART2_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <MX_USART2_UART_Init+0x58>)
 8000b00:	f002 fa4a 	bl	8002f98 <HAL_UART_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b0a:	f000 f887 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000118 	.word	0x20000118
 8000b18:	40004400 	.word	0x40004400

08000b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b22:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <MX_DMA_Init+0x68>)
 8000b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b26:	4a17      	ldr	r2, [pc, #92]	@ (8000b84 <MX_DMA_Init+0x68>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <MX_DMA_Init+0x68>)
 8000b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	200e      	movs	r0, #14
 8000b40:	f000 fc57 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b44:	200e      	movs	r0, #14
 8000b46:	f000 fc70 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f000 fc4f 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b54:	200f      	movs	r0, #15
 8000b56:	f000 fc68 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2010      	movs	r0, #16
 8000b60:	f000 fc47 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b64:	2010      	movs	r0, #16
 8000b66:	f000 fc60 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2011      	movs	r0, #17
 8000b70:	f000 fc3f 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000b74:	2011      	movs	r0, #17
 8000b76:	f000 fc58 	bl	800142a <HAL_NVIC_EnableIRQ>

}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <MX_GPIO_Init+0x8c>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c14 <MX_GPIO_Init+0x8c>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000baa:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <MX_GPIO_Init+0x8c>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <MX_GPIO_Init+0x8c>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	4a16      	ldr	r2, [pc, #88]	@ (8000c14 <MX_GPIO_Init+0x8c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc2:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <MX_GPIO_Init+0x8c>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_GPIO_Init+0x8c>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	4a10      	ldr	r2, [pc, #64]	@ (8000c14 <MX_GPIO_Init+0x8c>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_GPIO_Init+0x8c>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2108      	movs	r1, #8
 8000bea:	480b      	ldr	r0, [pc, #44]	@ (8000c18 <MX_GPIO_Init+0x90>)
 8000bec:	f001 f818 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <MX_GPIO_Init+0x90>)
 8000c08:	f000 fea0 	bl	800194c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000400 	.word	0x48000400

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <Error_Handler+0x8>

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c32:	4a0e      	ldr	r2, [pc, #56]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4a:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0a0      	sub	sp, #128	@ 0x80
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c88:	f107 0318 	add.w	r3, r7, #24
 8000c8c:	2254      	movs	r2, #84	@ 0x54
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 fb6d 	bl	8004370 <memset>
  if(huart->Instance==USART1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4aa2      	ldr	r2, [pc, #648]	@ (8000f24 <HAL_UART_MspInit+0x2b4>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	f040 8093 	bne.w	8000dc8 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fe7a 	bl	80029a8 <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cba:	f7ff ffaf 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cbe:	4b9a      	ldr	r3, [pc, #616]	@ (8000f28 <HAL_UART_MspInit+0x2b8>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc2:	4a99      	ldr	r2, [pc, #612]	@ (8000f28 <HAL_UART_MspInit+0x2b8>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cca:	4b97      	ldr	r3, [pc, #604]	@ (8000f28 <HAL_UART_MspInit+0x2b8>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b94      	ldr	r3, [pc, #592]	@ (8000f28 <HAL_UART_MspInit+0x2b8>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a93      	ldr	r2, [pc, #588]	@ (8000f28 <HAL_UART_MspInit+0x2b8>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b91      	ldr	r3, [pc, #580]	@ (8000f28 <HAL_UART_MspInit+0x2b8>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d00:	2307      	movs	r3, #7
 8000d02:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0e:	f000 fe1d 	bl	800194c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000d12:	4b86      	ldr	r3, [pc, #536]	@ (8000f2c <HAL_UART_MspInit+0x2bc>)
 8000d14:	4a86      	ldr	r2, [pc, #536]	@ (8000f30 <HAL_UART_MspInit+0x2c0>)
 8000d16:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000d18:	4b84      	ldr	r3, [pc, #528]	@ (8000f2c <HAL_UART_MspInit+0x2bc>)
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d1e:	4b83      	ldr	r3, [pc, #524]	@ (8000f2c <HAL_UART_MspInit+0x2bc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d24:	4b81      	ldr	r3, [pc, #516]	@ (8000f2c <HAL_UART_MspInit+0x2bc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d2a:	4b80      	ldr	r3, [pc, #512]	@ (8000f2c <HAL_UART_MspInit+0x2bc>)
 8000d2c:	2280      	movs	r2, #128	@ 0x80
 8000d2e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d30:	4b7e      	ldr	r3, [pc, #504]	@ (8000f2c <HAL_UART_MspInit+0x2bc>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d36:	4b7d      	ldr	r3, [pc, #500]	@ (8000f2c <HAL_UART_MspInit+0x2bc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d3c:	4b7b      	ldr	r3, [pc, #492]	@ (8000f2c <HAL_UART_MspInit+0x2bc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d42:	4b7a      	ldr	r3, [pc, #488]	@ (8000f2c <HAL_UART_MspInit+0x2bc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d48:	4878      	ldr	r0, [pc, #480]	@ (8000f2c <HAL_UART_MspInit+0x2bc>)
 8000d4a:	f000 fb89 	bl	8001460 <HAL_DMA_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8000d54:	f7ff ff62 	bl	8000c1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a74      	ldr	r2, [pc, #464]	@ (8000f2c <HAL_UART_MspInit+0x2bc>)
 8000d5c:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d5e:	4a73      	ldr	r2, [pc, #460]	@ (8000f2c <HAL_UART_MspInit+0x2bc>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000d64:	4b73      	ldr	r3, [pc, #460]	@ (8000f34 <HAL_UART_MspInit+0x2c4>)
 8000d66:	4a74      	ldr	r2, [pc, #464]	@ (8000f38 <HAL_UART_MspInit+0x2c8>)
 8000d68:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000d6a:	4b72      	ldr	r3, [pc, #456]	@ (8000f34 <HAL_UART_MspInit+0x2c4>)
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d70:	4b70      	ldr	r3, [pc, #448]	@ (8000f34 <HAL_UART_MspInit+0x2c4>)
 8000d72:	2210      	movs	r2, #16
 8000d74:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d76:	4b6f      	ldr	r3, [pc, #444]	@ (8000f34 <HAL_UART_MspInit+0x2c4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7c:	4b6d      	ldr	r3, [pc, #436]	@ (8000f34 <HAL_UART_MspInit+0x2c4>)
 8000d7e:	2280      	movs	r2, #128	@ 0x80
 8000d80:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d82:	4b6c      	ldr	r3, [pc, #432]	@ (8000f34 <HAL_UART_MspInit+0x2c4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d88:	4b6a      	ldr	r3, [pc, #424]	@ (8000f34 <HAL_UART_MspInit+0x2c4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d8e:	4b69      	ldr	r3, [pc, #420]	@ (8000f34 <HAL_UART_MspInit+0x2c4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d94:	4b67      	ldr	r3, [pc, #412]	@ (8000f34 <HAL_UART_MspInit+0x2c4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d9a:	4866      	ldr	r0, [pc, #408]	@ (8000f34 <HAL_UART_MspInit+0x2c4>)
 8000d9c:	f000 fb60 	bl	8001460 <HAL_DMA_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000da6:	f7ff ff39 	bl	8000c1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a61      	ldr	r2, [pc, #388]	@ (8000f34 <HAL_UART_MspInit+0x2c4>)
 8000dae:	671a      	str	r2, [r3, #112]	@ 0x70
 8000db0:	4a60      	ldr	r2, [pc, #384]	@ (8000f34 <HAL_UART_MspInit+0x2c4>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2025      	movs	r0, #37	@ 0x25
 8000dbc:	f000 fb19 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dc0:	2025      	movs	r0, #37	@ 0x25
 8000dc2:	f000 fb32 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc6:	e0a8      	b.n	8000f1a <HAL_UART_MspInit+0x2aa>
  else if(huart->Instance==USART2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a5b      	ldr	r2, [pc, #364]	@ (8000f3c <HAL_UART_MspInit+0x2cc>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	f040 80a3 	bne.w	8000f1a <HAL_UART_MspInit+0x2aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ddc:	f107 0318 	add.w	r3, r7, #24
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fde1 	bl	80029a8 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8000dec:	f7ff ff16 	bl	8000c1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df0:	4b4d      	ldr	r3, [pc, #308]	@ (8000f28 <HAL_UART_MspInit+0x2b8>)
 8000df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df4:	4a4c      	ldr	r2, [pc, #304]	@ (8000f28 <HAL_UART_MspInit+0x2b8>)
 8000df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8000f28 <HAL_UART_MspInit+0x2b8>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b47      	ldr	r3, [pc, #284]	@ (8000f28 <HAL_UART_MspInit+0x2b8>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0c:	4a46      	ldr	r2, [pc, #280]	@ (8000f28 <HAL_UART_MspInit+0x2b8>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e14:	4b44      	ldr	r3, [pc, #272]	@ (8000f28 <HAL_UART_MspInit+0x2b8>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e20:	2304      	movs	r3, #4
 8000e22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e30:	2307      	movs	r3, #7
 8000e32:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3e:	f000 fd85 	bl	800194c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e54:	2303      	movs	r3, #3
 8000e56:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e62:	f000 fd73 	bl	800194c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e66:	4b36      	ldr	r3, [pc, #216]	@ (8000f40 <HAL_UART_MspInit+0x2d0>)
 8000e68:	4a36      	ldr	r2, [pc, #216]	@ (8000f44 <HAL_UART_MspInit+0x2d4>)
 8000e6a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000e6c:	4b34      	ldr	r3, [pc, #208]	@ (8000f40 <HAL_UART_MspInit+0x2d0>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e72:	4b33      	ldr	r3, [pc, #204]	@ (8000f40 <HAL_UART_MspInit+0x2d0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e78:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <HAL_UART_MspInit+0x2d0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7e:	4b30      	ldr	r3, [pc, #192]	@ (8000f40 <HAL_UART_MspInit+0x2d0>)
 8000e80:	2280      	movs	r2, #128	@ 0x80
 8000e82:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e84:	4b2e      	ldr	r3, [pc, #184]	@ (8000f40 <HAL_UART_MspInit+0x2d0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <HAL_UART_MspInit+0x2d0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e90:	4b2b      	ldr	r3, [pc, #172]	@ (8000f40 <HAL_UART_MspInit+0x2d0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e96:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <HAL_UART_MspInit+0x2d0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e9c:	4828      	ldr	r0, [pc, #160]	@ (8000f40 <HAL_UART_MspInit+0x2d0>)
 8000e9e:	f000 fadf 	bl	8001460 <HAL_DMA_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_UART_MspInit+0x23c>
      Error_Handler();
 8000ea8:	f7ff feb8 	bl	8000c1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a24      	ldr	r2, [pc, #144]	@ (8000f40 <HAL_UART_MspInit+0x2d0>)
 8000eb0:	675a      	str	r2, [r3, #116]	@ 0x74
 8000eb2:	4a23      	ldr	r2, [pc, #140]	@ (8000f40 <HAL_UART_MspInit+0x2d0>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000eb8:	4b23      	ldr	r3, [pc, #140]	@ (8000f48 <HAL_UART_MspInit+0x2d8>)
 8000eba:	4a24      	ldr	r2, [pc, #144]	@ (8000f4c <HAL_UART_MspInit+0x2dc>)
 8000ebc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <HAL_UART_MspInit+0x2d8>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ec4:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <HAL_UART_MspInit+0x2d8>)
 8000ec6:	2210      	movs	r2, #16
 8000ec8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <HAL_UART_MspInit+0x2d8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <HAL_UART_MspInit+0x2d8>)
 8000ed2:	2280      	movs	r2, #128	@ 0x80
 8000ed4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <HAL_UART_MspInit+0x2d8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <HAL_UART_MspInit+0x2d8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <HAL_UART_MspInit+0x2d8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_UART_MspInit+0x2d8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000eee:	4816      	ldr	r0, [pc, #88]	@ (8000f48 <HAL_UART_MspInit+0x2d8>)
 8000ef0:	f000 fab6 	bl	8001460 <HAL_DMA_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8000efa:	f7ff fe8f 	bl	8000c1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a11      	ldr	r2, [pc, #68]	@ (8000f48 <HAL_UART_MspInit+0x2d8>)
 8000f02:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f04:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <HAL_UART_MspInit+0x2d8>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2026      	movs	r0, #38	@ 0x26
 8000f10:	f000 fa6f 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f14:	2026      	movs	r0, #38	@ 0x26
 8000f16:	f000 fa88 	bl	800142a <HAL_NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3780      	adds	r7, #128	@ 0x80
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40013800 	.word	0x40013800
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	200001a0 	.word	0x200001a0
 8000f30:	40020058 	.word	0x40020058
 8000f34:	200001e8 	.word	0x200001e8
 8000f38:	40020044 	.word	0x40020044
 8000f3c:	40004400 	.word	0x40004400
 8000f40:	20000230 	.word	0x20000230
 8000f44:	4002006c 	.word	0x4002006c
 8000f48:	20000278 	.word	0x20000278
 8000f4c:	40020080 	.word	0x40020080

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <NMI_Handler+0x4>

08000f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <MemManage_Handler+0x4>

08000f68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa6:	f000 f905 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <DMA1_Channel4_IRQHandler+0x10>)
 8000fb6:	f000 fbea 	bl	800178e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200001e8 	.word	0x200001e8

08000fc4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <DMA1_Channel5_IRQHandler+0x10>)
 8000fca:	f000 fbe0 	bl	800178e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001a0 	.word	0x200001a0

08000fd8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <DMA1_Channel6_IRQHandler+0x10>)
 8000fde:	f000 fbd6 	bl	800178e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000230 	.word	0x20000230

08000fec <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <DMA1_Channel7_IRQHandler+0x10>)
 8000ff2:	f000 fbcc 	bl	800178e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000278 	.word	0x20000278

08001000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <USART1_IRQHandler+0x10>)
 8001006:	f002 f91b 	bl	8003240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000090 	.word	0x20000090

08001014 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <USART2_IRQHandler+0x10>)
 800101a:	f002 f911 	bl	8003240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000118 	.word	0x20000118

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f003 f992 	bl	8004380 <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	@ (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000c000 	.word	0x2000c000
 8001088:	00000400 	.word	0x00000400
 800108c:	200002c0 	.word	0x200002c0
 8001090:	20000410 	.word	0x20000410

08001094 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <SystemInit+0x20>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800109e:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <SystemInit+0x20>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010bc:	f7ff ffea 	bl	8001094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010c2:	490d      	ldr	r1, [pc, #52]	@ (80010f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c4:	4a0d      	ldr	r2, [pc, #52]	@ (80010fc <LoopForever+0xe>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001104 <LoopForever+0x16>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e6:	f003 f951 	bl	800438c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ea:	f7ff fc33 	bl	8000954 <main>

080010ee <LoopForever>:

LoopForever:
    b LoopForever
 80010ee:	e7fe      	b.n	80010ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010f0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010fc:	08004d28 	.word	0x08004d28
  ldr r2, =_sbss
 8001100:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001104:	20000410 	.word	0x20000410

08001108 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_IRQHandler>

0800110a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 f961 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f80e 	bl	800113c <HAL_InitTick>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	e001      	b.n	8001130 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800112c:	f7ff fd7c 	bl	8000c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001130:	79fb      	ldrb	r3, [r7, #7]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <HAL_InitTick+0x6c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d023      	beq.n	8001198 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <HAL_InitTick+0x70>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <HAL_InitTick+0x6c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f96d 	bl	8001446 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10f      	bne.n	8001192 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d809      	bhi.n	800118c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f000 f937 	bl	80013f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001184:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <HAL_InitTick+0x74>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e007      	b.n	800119c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e004      	b.n	800119c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e001      	b.n	800119c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000020 	.word	0x20000020
 80011ac:	20000018 	.word	0x20000018
 80011b0:	2000001c 	.word	0x2000001c

080011b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_IncTick+0x20>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_IncTick+0x24>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <HAL_IncTick+0x24>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000020 	.word	0x20000020
 80011d8:	200002c4 	.word	0x200002c4

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	200002c4 	.word	0x200002c4

080011f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff ffee 	bl	80011dc <HAL_GetTick>
 8001200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120c:	d005      	beq.n	800121a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_Delay+0x44>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800121a:	bf00      	nop
 800121c:	f7ff ffde 	bl	80011dc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8f7      	bhi.n	800121c <HAL_Delay+0x28>
  {
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000020 	.word	0x20000020

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	@ (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	@ (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	@ (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	@ (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	@ 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff8e 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff29 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff3e 	bl	8001284 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff8e 	bl	8001330 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5d 	bl	80012dc <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff31 	bl	80012a0 <__NVIC_EnableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffa2 	bl	8001398 <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e098      	b.n	80015a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4b4d      	ldr	r3, [pc, #308]	@ (80015b0 <HAL_DMA_Init+0x150>)
 800147a:	429a      	cmp	r2, r3
 800147c:	d80f      	bhi.n	800149e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b4b      	ldr	r3, [pc, #300]	@ (80015b4 <HAL_DMA_Init+0x154>)
 8001486:	4413      	add	r3, r2
 8001488:	4a4b      	ldr	r2, [pc, #300]	@ (80015b8 <HAL_DMA_Init+0x158>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	009a      	lsls	r2, r3, #2
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a48      	ldr	r2, [pc, #288]	@ (80015bc <HAL_DMA_Init+0x15c>)
 800149a:	641a      	str	r2, [r3, #64]	@ 0x40
 800149c:	e00e      	b.n	80014bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b46      	ldr	r3, [pc, #280]	@ (80015c0 <HAL_DMA_Init+0x160>)
 80014a6:	4413      	add	r3, r2
 80014a8:	4a43      	ldr	r2, [pc, #268]	@ (80015b8 <HAL_DMA_Init+0x158>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	009a      	lsls	r2, r3, #2
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a42      	ldr	r2, [pc, #264]	@ (80015c4 <HAL_DMA_Init+0x164>)
 80014ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2202      	movs	r2, #2
 80014c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80014d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001516:	d039      	beq.n	800158c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	4a27      	ldr	r2, [pc, #156]	@ (80015bc <HAL_DMA_Init+0x15c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d11a      	bne.n	8001558 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001522:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <HAL_DMA_Init+0x168>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f003 031c 	and.w	r3, r3, #28
 800152e:	210f      	movs	r1, #15
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	4924      	ldr	r1, [pc, #144]	@ (80015c8 <HAL_DMA_Init+0x168>)
 8001538:	4013      	ands	r3, r2
 800153a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800153c:	4b22      	ldr	r3, [pc, #136]	@ (80015c8 <HAL_DMA_Init+0x168>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001548:	f003 031c 	and.w	r3, r3, #28
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	491d      	ldr	r1, [pc, #116]	@ (80015c8 <HAL_DMA_Init+0x168>)
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]
 8001556:	e019      	b.n	800158c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001558:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <HAL_DMA_Init+0x16c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001560:	f003 031c 	and.w	r3, r3, #28
 8001564:	210f      	movs	r1, #15
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	4917      	ldr	r1, [pc, #92]	@ (80015cc <HAL_DMA_Init+0x16c>)
 800156e:	4013      	ands	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <HAL_DMA_Init+0x16c>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6859      	ldr	r1, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	f003 031c 	and.w	r3, r3, #28
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	4911      	ldr	r1, [pc, #68]	@ (80015cc <HAL_DMA_Init+0x16c>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40020407 	.word	0x40020407
 80015b4:	bffdfff8 	.word	0xbffdfff8
 80015b8:	cccccccd 	.word	0xcccccccd
 80015bc:	40020000 	.word	0x40020000
 80015c0:	bffdfbf8 	.word	0xbffdfbf8
 80015c4:	40020400 	.word	0x40020400
 80015c8:	400200a8 	.word	0x400200a8
 80015cc:	400204a8 	.word	0x400204a8

080015d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_DMA_Start_IT+0x20>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e04b      	b.n	8001688 <HAL_DMA_Start_IT+0xb8>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d13a      	bne.n	800167a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2202      	movs	r2, #2
 8001608:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0201 	bic.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 f95f 	bl	80018ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	2b00      	cmp	r3, #0
 8001634:	d008      	beq.n	8001648 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 020e 	orr.w	r2, r2, #14
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e00f      	b.n	8001668 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0204 	bic.w	r2, r2, #4
 8001656:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 020a 	orr.w	r2, r2, #10
 8001666:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0201 	orr.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e005      	b.n	8001686 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001682:	2302      	movs	r3, #2
 8001684:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001686:	7dfb      	ldrb	r3, [r7, #23]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d008      	beq.n	80016ba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2204      	movs	r2, #4
 80016ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e022      	b.n	8001700 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020e 	bic.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	f003 021c 	and.w	r2, r3, #28
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	2101      	movs	r1, #1
 80016e8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d005      	beq.n	8001730 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2204      	movs	r2, #4
 8001728:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	e029      	b.n	8001784 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 020e 	bic.w	r2, r2, #14
 800173e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001754:	f003 021c 	and.w	r2, r3, #28
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	2101      	movs	r1, #1
 800175e:	fa01 f202 	lsl.w	r2, r1, r2
 8001762:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	4798      	blx	r3
    }
  }
  return status;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f003 031c 	and.w	r3, r3, #28
 80017ae:	2204      	movs	r2, #4
 80017b0:	409a      	lsls	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d026      	beq.n	8001808 <HAL_DMA_IRQHandler+0x7a>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d021      	beq.n	8001808 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d107      	bne.n	80017e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0204 	bic.w	r2, r2, #4
 80017e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	f003 021c 	and.w	r2, r3, #28
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	2104      	movs	r1, #4
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d071      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001806:	e06c      	b.n	80018e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180c:	f003 031c 	and.w	r3, r3, #28
 8001810:	2202      	movs	r2, #2
 8001812:	409a      	lsls	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d02e      	beq.n	800187a <HAL_DMA_IRQHandler+0xec>
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d029      	beq.n	800187a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0320 	and.w	r3, r3, #32
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10b      	bne.n	800184c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 020a 	bic.w	r2, r2, #10
 8001842:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001850:	f003 021c 	and.w	r2, r3, #28
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	2102      	movs	r1, #2
 800185a:	fa01 f202 	lsl.w	r2, r1, r2
 800185e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d038      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001878:	e033      	b.n	80018e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	f003 031c 	and.w	r3, r3, #28
 8001882:	2208      	movs	r2, #8
 8001884:	409a      	lsls	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d02a      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x156>
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d025      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 020e 	bic.w	r2, r2, #14
 80018a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ac:	f003 021c 	and.w	r2, r3, #28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	2101      	movs	r1, #1
 80018b6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
}
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	f003 021c 	and.w	r2, r3, #28
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	2101      	movs	r1, #1
 8001908:	fa01 f202 	lsl.w	r2, r1, r2
 800190c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d108      	bne.n	8001930 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800192e:	e007      	b.n	8001940 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	60da      	str	r2, [r3, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195a:	e148      	b.n	8001bee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 813a 	beq.w	8001be8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d005      	beq.n	800198c <HAL_GPIO_Init+0x40>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d130      	bne.n	80019ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2203      	movs	r2, #3
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019c2:	2201      	movs	r2, #1
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	f003 0201 	and.w	r2, r3, #1
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d017      	beq.n	8001a2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d123      	bne.n	8001a7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	08da      	lsrs	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3208      	adds	r2, #8
 8001a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	08da      	lsrs	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3208      	adds	r2, #8
 8001a78:	6939      	ldr	r1, [r7, #16]
 8001a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0203 	and.w	r2, r3, #3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8094 	beq.w	8001be8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac0:	4b52      	ldr	r3, [pc, #328]	@ (8001c0c <HAL_GPIO_Init+0x2c0>)
 8001ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac4:	4a51      	ldr	r2, [pc, #324]	@ (8001c0c <HAL_GPIO_Init+0x2c0>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6613      	str	r3, [r2, #96]	@ 0x60
 8001acc:	4b4f      	ldr	r3, [pc, #316]	@ (8001c0c <HAL_GPIO_Init+0x2c0>)
 8001ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad8:	4a4d      	ldr	r2, [pc, #308]	@ (8001c10 <HAL_GPIO_Init+0x2c4>)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3302      	adds	r3, #2
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b02:	d00d      	beq.n	8001b20 <HAL_GPIO_Init+0x1d4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a43      	ldr	r2, [pc, #268]	@ (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d007      	beq.n	8001b1c <HAL_GPIO_Init+0x1d0>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a42      	ldr	r2, [pc, #264]	@ (8001c18 <HAL_GPIO_Init+0x2cc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_GPIO_Init+0x1cc>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e004      	b.n	8001b22 <HAL_GPIO_Init+0x1d6>
 8001b18:	2307      	movs	r3, #7
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_Init+0x1d6>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_GPIO_Init+0x1d6>
 8001b20:	2300      	movs	r3, #0
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	f002 0203 	and.w	r2, r2, #3
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b32:	4937      	ldr	r1, [pc, #220]	@ (8001c10 <HAL_GPIO_Init+0x2c4>)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b40:	4b36      	ldr	r3, [pc, #216]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b64:	4a2d      	ldr	r2, [pc, #180]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b8e:	4a23      	ldr	r2, [pc, #140]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b94:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bb8:	4a18      	ldr	r2, [pc, #96]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001be2:	4a0e      	ldr	r2, [pc, #56]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3301      	adds	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f47f aeaf 	bne.w	800195c <HAL_GPIO_Init+0x10>
  }
}
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000
 8001c14:	48000400 	.word	0x48000400
 8001c18:	48000800 	.word	0x48000800
 8001c1c:	40010400 	.word	0x40010400

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40007000 	.word	0x40007000

08001c70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40007000 	.word	0x40007000

08001c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c9a:	d130      	bne.n	8001cfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c9c:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ca8:	d038      	beq.n	8001d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001caa:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cba:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2232      	movs	r2, #50	@ 0x32
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0c9b      	lsrs	r3, r3, #18
 8001ccc:	3301      	adds	r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd0:	e002      	b.n	8001cd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd8:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ce4:	d102      	bne.n	8001cec <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f2      	bne.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cf8:	d110      	bne.n	8001d1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e00f      	b.n	8001d1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d0a:	d007      	beq.n	8001d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d14:	4a05      	ldr	r2, [pc, #20]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	20000018 	.word	0x20000018
 8001d34:	431bde83 	.word	0x431bde83

08001d38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f000 bc02 	b.w	8002550 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4c:	4b96      	ldr	r3, [pc, #600]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d56:	4b94      	ldr	r3, [pc, #592]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80e4 	beq.w	8001f36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_RCC_OscConfig+0x4c>
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	f040 808b 	bne.w	8001e92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	f040 8087 	bne.w	8001e92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d84:	4b88      	ldr	r3, [pc, #544]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_OscConfig+0x64>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e3d9      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1a      	ldr	r2, [r3, #32]
 8001da0:	4b81      	ldr	r3, [pc, #516]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <HAL_RCC_OscConfig+0x7e>
 8001dac:	4b7e      	ldr	r3, [pc, #504]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001db4:	e005      	b.n	8001dc2 <HAL_RCC_OscConfig+0x8a>
 8001db6:	4b7c      	ldr	r3, [pc, #496]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d223      	bcs.n	8001e0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fd8c 	bl	80028e8 <RCC_SetFlashLatencyFromMSIRange>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e3ba      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dda:	4b73      	ldr	r3, [pc, #460]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a72      	ldr	r2, [pc, #456]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b70      	ldr	r3, [pc, #448]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	496d      	ldr	r1, [pc, #436]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df8:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	4968      	ldr	r1, [pc, #416]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
 8001e0c:	e025      	b.n	8001e5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e0e:	4b66      	ldr	r3, [pc, #408]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a65      	ldr	r2, [pc, #404]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e14:	f043 0308 	orr.w	r3, r3, #8
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b63      	ldr	r3, [pc, #396]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4960      	ldr	r1, [pc, #384]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	495b      	ldr	r1, [pc, #364]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fd4c 	bl	80028e8 <RCC_SetFlashLatencyFromMSIRange>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e37a      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e5a:	f000 fc81 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	4b51      	ldr	r3, [pc, #324]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	4950      	ldr	r1, [pc, #320]	@ (8001fac <HAL_RCC_OscConfig+0x274>)
 8001e6c:	5ccb      	ldrb	r3, [r1, r3]
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	fa22 f303 	lsr.w	r3, r2, r3
 8001e76:	4a4e      	ldr	r2, [pc, #312]	@ (8001fb0 <HAL_RCC_OscConfig+0x278>)
 8001e78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f95c 	bl	800113c <HAL_InitTick>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d052      	beq.n	8001f34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	e35e      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d032      	beq.n	8001f00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e9a:	4b43      	ldr	r3, [pc, #268]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a42      	ldr	r2, [pc, #264]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff f999 	bl	80011dc <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eae:	f7ff f995 	bl	80011dc <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e347      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec0:	4b39      	ldr	r3, [pc, #228]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ecc:	4b36      	ldr	r3, [pc, #216]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a35      	ldr	r2, [pc, #212]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	f043 0308 	orr.w	r3, r3, #8
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b33      	ldr	r3, [pc, #204]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4930      	ldr	r1, [pc, #192]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eea:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	492b      	ldr	r1, [pc, #172]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
 8001efe:	e01a      	b.n	8001f36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f00:	4b29      	ldr	r3, [pc, #164]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a28      	ldr	r2, [pc, #160]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f966 	bl	80011dc <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f14:	f7ff f962 	bl	80011dc <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e314      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f26:	4b20      	ldr	r3, [pc, #128]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x1dc>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d073      	beq.n	800202a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_OscConfig+0x21c>
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d10e      	bne.n	8001f6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d10b      	bne.n	8001f6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d063      	beq.n	8002028 <HAL_RCC_OscConfig+0x2f0>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d15f      	bne.n	8002028 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e2f1      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f74:	d106      	bne.n	8001f84 <HAL_RCC_OscConfig+0x24c>
 8001f76:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e025      	b.n	8001fd0 <HAL_RCC_OscConfig+0x298>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f8c:	d114      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x280>
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a02      	ldr	r2, [pc, #8]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e013      	b.n	8001fd0 <HAL_RCC_OscConfig+0x298>
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08004c9c 	.word	0x08004c9c
 8001fb0:	20000018 	.word	0x20000018
 8001fb4:	2000001c 	.word	0x2000001c
 8001fb8:	4ba0      	ldr	r3, [pc, #640]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a9f      	ldr	r2, [pc, #636]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b9d      	ldr	r3, [pc, #628]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a9c      	ldr	r2, [pc, #624]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8001fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f900 	bl	80011dc <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff f8fc 	bl	80011dc <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	@ 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e2ae      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff2:	4b92      	ldr	r3, [pc, #584]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x2a8>
 8001ffe:	e014      	b.n	800202a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff f8ec 	bl	80011dc <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff f8e8 	bl	80011dc <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	@ 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e29a      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201a:	4b88      	ldr	r3, [pc, #544]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x2d0>
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d060      	beq.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b04      	cmp	r3, #4
 800203a:	d005      	beq.n	8002048 <HAL_RCC_OscConfig+0x310>
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d119      	bne.n	8002076 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d116      	bne.n	8002076 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002048:	4b7c      	ldr	r3, [pc, #496]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_OscConfig+0x328>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e277      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	4b76      	ldr	r3, [pc, #472]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	4973      	ldr	r1, [pc, #460]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002074:	e040      	b.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d023      	beq.n	80020c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800207e:	4b6f      	ldr	r3, [pc, #444]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6e      	ldr	r2, [pc, #440]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7ff f8a7 	bl	80011dc <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002092:	f7ff f8a3 	bl	80011dc <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e255      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a4:	4b65      	ldr	r3, [pc, #404]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4b62      	ldr	r3, [pc, #392]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	495f      	ldr	r1, [pc, #380]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
 80020c4:	e018      	b.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c6:	4b5d      	ldr	r3, [pc, #372]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a5c      	ldr	r2, [pc, #368]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80020cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7ff f883 	bl	80011dc <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020da:	f7ff f87f 	bl	80011dc <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e231      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ec:	4b53      	ldr	r3, [pc, #332]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d03c      	beq.n	800217e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01c      	beq.n	8002146 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210c:	4b4b      	ldr	r3, [pc, #300]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800210e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002112:	4a4a      	ldr	r2, [pc, #296]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7ff f85e 	bl	80011dc <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002124:	f7ff f85a 	bl	80011dc <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e20c      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002136:	4b41      	ldr	r3, [pc, #260]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002138:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ef      	beq.n	8002124 <HAL_RCC_OscConfig+0x3ec>
 8002144:	e01b      	b.n	800217e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002146:	4b3d      	ldr	r3, [pc, #244]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800214c:	4a3b      	ldr	r2, [pc, #236]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7ff f841 	bl	80011dc <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215e:	f7ff f83d 	bl	80011dc <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e1ef      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002170:	4b32      	ldr	r3, [pc, #200]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ef      	bne.n	800215e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80a6 	beq.w	80022d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002190:	4b2a      	ldr	r3, [pc, #168]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10d      	bne.n	80021b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	4b27      	ldr	r3, [pc, #156]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a0:	4a26      	ldr	r2, [pc, #152]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80021a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a8:	4b24      	ldr	r3, [pc, #144]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b8:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <HAL_RCC_OscConfig+0x508>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d118      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <HAL_RCC_OscConfig+0x508>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002240 <HAL_RCC_OscConfig+0x508>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d0:	f7ff f804 	bl	80011dc <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d8:	f7ff f800 	bl	80011dc <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e1b2      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <HAL_RCC_OscConfig+0x508>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d108      	bne.n	8002210 <HAL_RCC_OscConfig+0x4d8>
 80021fe:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002204:	4a0d      	ldr	r2, [pc, #52]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800220e:	e029      	b.n	8002264 <HAL_RCC_OscConfig+0x52c>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b05      	cmp	r3, #5
 8002216:	d115      	bne.n	8002244 <HAL_RCC_OscConfig+0x50c>
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221e:	4a07      	ldr	r2, [pc, #28]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002228:	4b04      	ldr	r3, [pc, #16]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222e:	4a03      	ldr	r2, [pc, #12]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002238:	e014      	b.n	8002264 <HAL_RCC_OscConfig+0x52c>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	40007000 	.word	0x40007000
 8002244:	4b9a      	ldr	r3, [pc, #616]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224a:	4a99      	ldr	r2, [pc, #612]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002254:	4b96      	ldr	r3, [pc, #600]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225a:	4a95      	ldr	r2, [pc, #596]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d016      	beq.n	800229a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7fe ffb6 	bl	80011dc <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002272:	e00a      	b.n	800228a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002274:	f7fe ffb2 	bl	80011dc <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e162      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228a:	4b89      	ldr	r3, [pc, #548]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ed      	beq.n	8002274 <HAL_RCC_OscConfig+0x53c>
 8002298:	e015      	b.n	80022c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229a:	f7fe ff9f 	bl	80011dc <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe ff9b 	bl	80011dc <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e14b      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b8:	4b7d      	ldr	r3, [pc, #500]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1ed      	bne.n	80022a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c6:	7ffb      	ldrb	r3, [r7, #31]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d105      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022cc:	4b78      	ldr	r3, [pc, #480]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	4a77      	ldr	r2, [pc, #476]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 80022d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d03c      	beq.n	800235e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01c      	beq.n	8002326 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022ec:	4b70      	ldr	r3, [pc, #448]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 80022ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022f2:	4a6f      	ldr	r2, [pc, #444]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7fe ff6e 	bl	80011dc <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002304:	f7fe ff6a 	bl	80011dc <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e11c      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002316:	4b66      	ldr	r3, [pc, #408]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 8002318:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0ef      	beq.n	8002304 <HAL_RCC_OscConfig+0x5cc>
 8002324:	e01b      	b.n	800235e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002326:	4b62      	ldr	r3, [pc, #392]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 8002328:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800232c:	4a60      	ldr	r2, [pc, #384]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 800232e:	f023 0301 	bic.w	r3, r3, #1
 8002332:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002336:	f7fe ff51 	bl	80011dc <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800233e:	f7fe ff4d 	bl	80011dc <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e0ff      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002350:	4b57      	ldr	r3, [pc, #348]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 8002352:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1ef      	bne.n	800233e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80f3 	beq.w	800254e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236c:	2b02      	cmp	r3, #2
 800236e:	f040 80c9 	bne.w	8002504 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002372:	4b4f      	ldr	r3, [pc, #316]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f003 0203 	and.w	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002382:	429a      	cmp	r2, r3
 8002384:	d12c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002390:	3b01      	subs	r3, #1
 8002392:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d123      	bne.n	80023e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d11b      	bne.n	80023e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d113      	bne.n	80023e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	3b01      	subs	r3, #1
 80023c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d109      	bne.n	80023e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	085b      	lsrs	r3, r3, #1
 80023d8:	3b01      	subs	r3, #1
 80023da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d06b      	beq.n	80024b8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b0c      	cmp	r3, #12
 80023e4:	d062      	beq.n	80024ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023e6:	4b32      	ldr	r3, [pc, #200]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0ac      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023f6:	4b2e      	ldr	r3, [pc, #184]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2d      	ldr	r2, [pc, #180]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 80023fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002400:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002402:	f7fe feeb 	bl	80011dc <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240a:	f7fe fee7 	bl	80011dc <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e099      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241c:	4b24      	ldr	r3, [pc, #144]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f0      	bne.n	800240a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002428:	4b21      	ldr	r3, [pc, #132]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <HAL_RCC_OscConfig+0x77c>)
 800242e:	4013      	ands	r3, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002438:	3a01      	subs	r2, #1
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	4311      	orrs	r1, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002442:	0212      	lsls	r2, r2, #8
 8002444:	4311      	orrs	r1, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800244a:	0852      	lsrs	r2, r2, #1
 800244c:	3a01      	subs	r2, #1
 800244e:	0552      	lsls	r2, r2, #21
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002456:	0852      	lsrs	r2, r2, #1
 8002458:	3a01      	subs	r2, #1
 800245a:	0652      	lsls	r2, r2, #25
 800245c:	4311      	orrs	r1, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002462:	06d2      	lsls	r2, r2, #27
 8002464:	430a      	orrs	r2, r1
 8002466:	4912      	ldr	r1, [pc, #72]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 8002468:	4313      	orrs	r3, r2
 800246a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800246c:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0f      	ldr	r2, [pc, #60]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 8002472:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002476:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002478:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4a0c      	ldr	r2, [pc, #48]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 800247e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002482:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002484:	f7fe feaa 	bl	80011dc <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe fea6 	bl	80011dc <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e058      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249e:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <HAL_RCC_OscConfig+0x778>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024aa:	e050      	b.n	800254e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e04f      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
 80024b0:	40021000 	.word	0x40021000
 80024b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b8:	4b27      	ldr	r3, [pc, #156]	@ (8002558 <HAL_RCC_OscConfig+0x820>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d144      	bne.n	800254e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024c4:	4b24      	ldr	r3, [pc, #144]	@ (8002558 <HAL_RCC_OscConfig+0x820>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a23      	ldr	r2, [pc, #140]	@ (8002558 <HAL_RCC_OscConfig+0x820>)
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024d0:	4b21      	ldr	r3, [pc, #132]	@ (8002558 <HAL_RCC_OscConfig+0x820>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4a20      	ldr	r2, [pc, #128]	@ (8002558 <HAL_RCC_OscConfig+0x820>)
 80024d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024dc:	f7fe fe7e 	bl	80011dc <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fe7a 	bl	80011dc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e02c      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f6:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <HAL_RCC_OscConfig+0x820>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x7ac>
 8002502:	e024      	b.n	800254e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d01f      	beq.n	800254a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250a:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <HAL_RCC_OscConfig+0x820>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a12      	ldr	r2, [pc, #72]	@ (8002558 <HAL_RCC_OscConfig+0x820>)
 8002510:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7fe fe61 	bl	80011dc <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7fe fe5d 	bl	80011dc <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e00f      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002530:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <HAL_RCC_OscConfig+0x820>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <HAL_RCC_OscConfig+0x820>)
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	4905      	ldr	r1, [pc, #20]	@ (8002558 <HAL_RCC_OscConfig+0x820>)
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_RCC_OscConfig+0x824>)
 8002544:	4013      	ands	r3, r2
 8002546:	60cb      	str	r3, [r1, #12]
 8002548:	e001      	b.n	800254e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	feeefffc 	.word	0xfeeefffc

08002560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0e7      	b.n	8002744 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b75      	ldr	r3, [pc, #468]	@ (800274c <HAL_RCC_ClockConfig+0x1ec>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d910      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b72      	ldr	r3, [pc, #456]	@ (800274c <HAL_RCC_ClockConfig+0x1ec>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	4970      	ldr	r1, [pc, #448]	@ (800274c <HAL_RCC_ClockConfig+0x1ec>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b6e      	ldr	r3, [pc, #440]	@ (800274c <HAL_RCC_ClockConfig+0x1ec>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0cf      	b.n	8002744 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d010      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4b66      	ldr	r3, [pc, #408]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025bc:	429a      	cmp	r2, r3
 80025be:	d908      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c0:	4b63      	ldr	r3, [pc, #396]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4960      	ldr	r1, [pc, #384]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d04c      	beq.n	8002678 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d121      	bne.n	8002636 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e0a6      	b.n	8002744 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fe:	4b54      	ldr	r3, [pc, #336]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d115      	bne.n	8002636 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e09a      	b.n	8002744 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002616:	4b4e      	ldr	r3, [pc, #312]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e08e      	b.n	8002744 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002626:	4b4a      	ldr	r3, [pc, #296]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e086      	b.n	8002744 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002636:	4b46      	ldr	r3, [pc, #280]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f023 0203 	bic.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4943      	ldr	r1, [pc, #268]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 8002644:	4313      	orrs	r3, r2
 8002646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002648:	f7fe fdc8 	bl	80011dc <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	e00a      	b.n	8002666 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f7fe fdc4 	bl	80011dc <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e06e      	b.n	8002744 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	4b3a      	ldr	r3, [pc, #232]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 020c 	and.w	r2, r3, #12
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	429a      	cmp	r2, r3
 8002676:	d1eb      	bne.n	8002650 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d010      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	4b31      	ldr	r3, [pc, #196]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002690:	429a      	cmp	r2, r3
 8002692:	d208      	bcs.n	80026a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b2e      	ldr	r3, [pc, #184]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	492b      	ldr	r1, [pc, #172]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a6:	4b29      	ldr	r3, [pc, #164]	@ (800274c <HAL_RCC_ClockConfig+0x1ec>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d210      	bcs.n	80026d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b4:	4b25      	ldr	r3, [pc, #148]	@ (800274c <HAL_RCC_ClockConfig+0x1ec>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 0207 	bic.w	r2, r3, #7
 80026bc:	4923      	ldr	r1, [pc, #140]	@ (800274c <HAL_RCC_ClockConfig+0x1ec>)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c4:	4b21      	ldr	r3, [pc, #132]	@ (800274c <HAL_RCC_ClockConfig+0x1ec>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e036      	b.n	8002744 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4918      	ldr	r1, [pc, #96]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d009      	beq.n	8002714 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002700:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4910      	ldr	r1, [pc, #64]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 8002710:	4313      	orrs	r3, r2
 8002712:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002714:	f000 f824 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <HAL_RCC_ClockConfig+0x1f0>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	490b      	ldr	r1, [pc, #44]	@ (8002754 <HAL_RCC_ClockConfig+0x1f4>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	4a09      	ldr	r2, [pc, #36]	@ (8002758 <HAL_RCC_ClockConfig+0x1f8>)
 8002732:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002734:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_RCC_ClockConfig+0x1fc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fcff 	bl	800113c <HAL_InitTick>
 800273e:	4603      	mov	r3, r0
 8002740:	72fb      	strb	r3, [r7, #11]

  return status;
 8002742:	7afb      	ldrb	r3, [r7, #11]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40022000 	.word	0x40022000
 8002750:	40021000 	.word	0x40021000
 8002754:	08004c9c 	.word	0x08004c9c
 8002758:	20000018 	.word	0x20000018
 800275c:	2000001c 	.word	0x2000001c

08002760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	@ 0x24
 8002764:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800276e:	4b3e      	ldr	r3, [pc, #248]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x108>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002778:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x108>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0x34>
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b0c      	cmp	r3, #12
 800278c:	d121      	bne.n	80027d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d11e      	bne.n	80027d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002794:	4b34      	ldr	r3, [pc, #208]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x108>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027a0:	4b31      	ldr	r3, [pc, #196]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	e005      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027bc:	4a2b      	ldr	r2, [pc, #172]	@ (800286c <HAL_RCC_GetSysClockFreq+0x10c>)
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10d      	bne.n	80027e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d102      	bne.n	80027de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027d8:	4b25      	ldr	r3, [pc, #148]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x110>)
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	e004      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027e4:	4b23      	ldr	r3, [pc, #140]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x114>)
 80027e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d134      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_GetSysClockFreq+0xa6>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d003      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0xac>
 8002804:	e005      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002806:	4b1a      	ldr	r3, [pc, #104]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x110>)
 8002808:	617b      	str	r3, [r7, #20]
      break;
 800280a:	e005      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800280c:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x114>)
 800280e:	617b      	str	r3, [r7, #20]
      break;
 8002810:	e002      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	617b      	str	r3, [r7, #20]
      break;
 8002816:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002818:	4b13      	ldr	r3, [pc, #76]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x108>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	3301      	adds	r3, #1
 8002824:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002826:	4b10      	ldr	r3, [pc, #64]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x108>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	fb03 f202 	mul.w	r2, r3, r2
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800283e:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x108>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	0e5b      	lsrs	r3, r3, #25
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	3301      	adds	r3, #1
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002858:	69bb      	ldr	r3, [r7, #24]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	@ 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	08004cb4 	.word	0x08004cb4
 8002870:	00f42400 	.word	0x00f42400
 8002874:	007a1200 	.word	0x007a1200

08002878 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800287c:	4b03      	ldr	r3, [pc, #12]	@ (800288c <HAL_RCC_GetHCLKFreq+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000018 	.word	0x20000018

08002890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002894:	f7ff fff0 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4904      	ldr	r1, [pc, #16]	@ (80028b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	08004cac 	.word	0x08004cac

080028bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028c0:	f7ff ffda 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	0adb      	lsrs	r3, r3, #11
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4904      	ldr	r1, [pc, #16]	@ (80028e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	08004cac 	.word	0x08004cac

080028e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028f4:	4b2a      	ldr	r3, [pc, #168]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002900:	f7ff f9b6 	bl	8001c70 <HAL_PWREx_GetVoltageRange>
 8002904:	6178      	str	r0, [r7, #20]
 8002906:	e014      	b.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	4b25      	ldr	r3, [pc, #148]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290c:	4a24      	ldr	r2, [pc, #144]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002912:	6593      	str	r3, [r2, #88]	@ 0x58
 8002914:	4b22      	ldr	r3, [pc, #136]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002920:	f7ff f9a6 	bl	8001c70 <HAL_PWREx_GetVoltageRange>
 8002924:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002926:	4b1e      	ldr	r3, [pc, #120]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292a:	4a1d      	ldr	r2, [pc, #116]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002930:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002938:	d10b      	bne.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b80      	cmp	r3, #128	@ 0x80
 800293e:	d919      	bls.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2ba0      	cmp	r3, #160	@ 0xa0
 8002944:	d902      	bls.n	800294c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002946:	2302      	movs	r3, #2
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	e013      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	e010      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b80      	cmp	r3, #128	@ 0x80
 8002956:	d902      	bls.n	800295e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002958:	2303      	movs	r3, #3
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	e00a      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b80      	cmp	r3, #128	@ 0x80
 8002962:	d102      	bne.n	800296a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002964:	2302      	movs	r3, #2
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	e004      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b70      	cmp	r3, #112	@ 0x70
 800296e:	d101      	bne.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002970:	2301      	movs	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 0207 	bic.w	r2, r3, #7
 800297c:	4909      	ldr	r1, [pc, #36]	@ (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002984:	4b07      	ldr	r3, [pc, #28]	@ (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40022000 	.word	0x40022000

080029a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029b0:	2300      	movs	r3, #0
 80029b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b4:	2300      	movs	r3, #0
 80029b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d031      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029cc:	d01a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80029ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029d2:	d814      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029dc:	d10f      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80029de:	4b5d      	ldr	r3, [pc, #372]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029ea:	e00c      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f9de 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029fc:	e003      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	74fb      	strb	r3, [r7, #19]
      break;
 8002a02:	e000      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a0c:	4b51      	ldr	r3, [pc, #324]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1a:	494e      	ldr	r1, [pc, #312]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a22:	e001      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 809e 	beq.w	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a3a:	4b46      	ldr	r3, [pc, #280]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	4b40      	ldr	r3, [pc, #256]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a54:	4a3f      	ldr	r2, [pc, #252]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a39      	ldr	r2, [pc, #228]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a78:	f7fe fbb0 	bl	80011dc <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a7e:	e009      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a80:	f7fe fbac 	bl	80011dc <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d902      	bls.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	74fb      	strb	r3, [r7, #19]
        break;
 8002a92:	e005      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a94:	4b30      	ldr	r3, [pc, #192]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ef      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d15a      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01e      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d019      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ac2:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002acc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ace:	4b21      	ldr	r3, [pc, #132]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ade:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002aee:	4a19      	ldr	r2, [pc, #100]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d016      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fb6c 	bl	80011dc <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b06:	e00b      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe fb68 	bl	80011dc <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d902      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	74fb      	strb	r3, [r7, #19]
            break;
 8002b1e:	e006      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0ec      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10b      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b34:	4b07      	ldr	r3, [pc, #28]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b42:	4904      	ldr	r1, [pc, #16]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b4a:	e009      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	74bb      	strb	r3, [r7, #18]
 8002b50:	e006      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b60:	7c7b      	ldrb	r3, [r7, #17]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4b8a      	ldr	r3, [pc, #552]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	4a89      	ldr	r2, [pc, #548]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b7e:	4b84      	ldr	r3, [pc, #528]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b84:	f023 0203 	bic.w	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4980      	ldr	r1, [pc, #512]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ba0:	4b7b      	ldr	r3, [pc, #492]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba6:	f023 020c 	bic.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	4978      	ldr	r1, [pc, #480]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bc2:	4b73      	ldr	r3, [pc, #460]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	496f      	ldr	r1, [pc, #444]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002be4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bea:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf2:	4967      	ldr	r1, [pc, #412]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c06:	4b62      	ldr	r3, [pc, #392]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c14:	495e      	ldr	r1, [pc, #376]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c28:	4b59      	ldr	r3, [pc, #356]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	4956      	ldr	r1, [pc, #344]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c4a:	4b51      	ldr	r3, [pc, #324]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	494d      	ldr	r1, [pc, #308]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d028      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c6c:	4b48      	ldr	r3, [pc, #288]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	4945      	ldr	r1, [pc, #276]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c8a:	d106      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c8c:	4b40      	ldr	r3, [pc, #256]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a3f      	ldr	r2, [pc, #252]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c96:	60d3      	str	r3, [r2, #12]
 8002c98:	e011      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ca2:	d10c      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	2101      	movs	r1, #1
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f882 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d028      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cca:	4b31      	ldr	r3, [pc, #196]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd8:	492d      	ldr	r1, [pc, #180]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ce8:	d106      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cea:	4b29      	ldr	r3, [pc, #164]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	4a28      	ldr	r2, [pc, #160]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cf4:	60d3      	str	r3, [r2, #12]
 8002cf6:	e011      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2101      	movs	r1, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 f853 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d12:	7cfb      	ldrb	r3, [r7, #19]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01c      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d28:	4b19      	ldr	r3, [pc, #100]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d36:	4916      	ldr	r1, [pc, #88]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f830 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002d5e:	7cfb      	ldrb	r3, [r7, #19]
 8002d60:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d6e:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d74:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7c:	4904      	ldr	r1, [pc, #16]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d84:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000

08002d94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000

08002db4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dc2:	4b74      	ldr	r3, [pc, #464]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d018      	beq.n	8002e00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dce:	4b71      	ldr	r3, [pc, #452]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0203 	and.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d10d      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
       ||
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002de6:	4b6b      	ldr	r3, [pc, #428]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
       ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d047      	beq.n	8002e8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	e044      	b.n	8002e8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d018      	beq.n	8002e3a <RCCEx_PLLSAI1_Config+0x86>
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d825      	bhi.n	8002e58 <RCCEx_PLLSAI1_Config+0xa4>
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d002      	beq.n	8002e16 <RCCEx_PLLSAI1_Config+0x62>
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d009      	beq.n	8002e28 <RCCEx_PLLSAI1_Config+0x74>
 8002e14:	e020      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e16:	4b5f      	ldr	r3, [pc, #380]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11d      	bne.n	8002e5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e26:	e01a      	b.n	8002e5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e28:	4b5a      	ldr	r3, [pc, #360]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d116      	bne.n	8002e62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e38:	e013      	b.n	8002e62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e3a:	4b56      	ldr	r3, [pc, #344]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e46:	4b53      	ldr	r3, [pc, #332]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e56:	e006      	b.n	8002e66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5c:	e004      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10d      	bne.n	8002e8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e6e:	4b49      	ldr	r3, [pc, #292]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	430b      	orrs	r3, r1
 8002e84:	4943      	ldr	r1, [pc, #268]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d17c      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e90:	4b40      	ldr	r3, [pc, #256]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a3f      	ldr	r2, [pc, #252]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e9c:	f7fe f99e 	bl	80011dc <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ea2:	e009      	b.n	8002eb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ea4:	f7fe f99a 	bl	80011dc <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d902      	bls.n	8002eb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	73fb      	strb	r3, [r7, #15]
        break;
 8002eb6:	e005      	b.n	8002ec4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eb8:	4b36      	ldr	r3, [pc, #216]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ef      	bne.n	8002ea4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d15f      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d110      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ed0:	4b30      	ldr	r3, [pc, #192]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002ed8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6892      	ldr	r2, [r2, #8]
 8002ee0:	0211      	lsls	r1, r2, #8
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68d2      	ldr	r2, [r2, #12]
 8002ee6:	06d2      	lsls	r2, r2, #27
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	492a      	ldr	r1, [pc, #168]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	610b      	str	r3, [r1, #16]
 8002ef0:	e027      	b.n	8002f42 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d112      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ef8:	4b26      	ldr	r3, [pc, #152]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002f00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6892      	ldr	r2, [r2, #8]
 8002f08:	0211      	lsls	r1, r2, #8
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6912      	ldr	r2, [r2, #16]
 8002f0e:	0852      	lsrs	r2, r2, #1
 8002f10:	3a01      	subs	r2, #1
 8002f12:	0552      	lsls	r2, r2, #21
 8002f14:	430a      	orrs	r2, r1
 8002f16:	491f      	ldr	r1, [pc, #124]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	610b      	str	r3, [r1, #16]
 8002f1c:	e011      	b.n	8002f42 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f26:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6892      	ldr	r2, [r2, #8]
 8002f2e:	0211      	lsls	r1, r2, #8
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6952      	ldr	r2, [r2, #20]
 8002f34:	0852      	lsrs	r2, r2, #1
 8002f36:	3a01      	subs	r2, #1
 8002f38:	0652      	lsls	r2, r2, #25
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	4915      	ldr	r1, [pc, #84]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f42:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a13      	ldr	r2, [pc, #76]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fe f945 	bl	80011dc <HAL_GetTick>
 8002f52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f54:	e009      	b.n	8002f6a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f56:	f7fe f941 	bl	80011dc <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d902      	bls.n	8002f6a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	73fb      	strb	r3, [r7, #15]
          break;
 8002f68:	e005      	b.n	8002f76 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0ef      	beq.n	8002f56 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d106      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f7c:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	4903      	ldr	r1, [pc, #12]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e040      	b.n	800302c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fd fe58 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2224      	movs	r2, #36	@ 0x24
 8002fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fe80 	bl	8003ce4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fc51 	bl	800388c <UART_SetConfig>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e01b      	b.n	800302c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 feff 	bl	8003e28 <UART_CheckIdleState>
 800302a:	4603      	mov	r3, r0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	@ 0x28
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003048:	2b20      	cmp	r3, #32
 800304a:	d177      	bne.n	800313c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_UART_Transmit+0x24>
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e070      	b.n	800313e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2221      	movs	r2, #33	@ 0x21
 8003068:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800306a:	f7fe f8b7 	bl	80011dc <HAL_GetTick>
 800306e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003088:	d108      	bne.n	800309c <HAL_UART_Transmit+0x68>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d104      	bne.n	800309c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	e003      	b.n	80030a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030a4:	e02f      	b.n	8003106 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2180      	movs	r1, #128	@ 0x80
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 ff61 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e03b      	b.n	800313e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10b      	bne.n	80030e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	881a      	ldrh	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d8:	b292      	uxth	r2, r2
 80030da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	3302      	adds	r3, #2
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e007      	b.n	80030f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	781a      	ldrb	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1c9      	bne.n	80030a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2200      	movs	r2, #0
 800311a:	2140      	movs	r1, #64	@ 0x40
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 ff2b 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e005      	b.n	800313e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	e000      	b.n	800313e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800313c:	2302      	movs	r3, #2
  }
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	@ 0x28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	4613      	mov	r3, r2
 8003154:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800315a:	2b20      	cmp	r3, #32
 800315c:	d165      	bne.n	800322a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_UART_Transmit_DMA+0x22>
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e05e      	b.n	800322c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2221      	movs	r2, #33	@ 0x21
 8003190:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003196:	2b00      	cmp	r3, #0
 8003198:	d027      	beq.n	80031ea <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319e:	4a25      	ldr	r2, [pc, #148]	@ (8003234 <HAL_UART_Transmit_DMA+0xec>)
 80031a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	4a24      	ldr	r2, [pc, #144]	@ (8003238 <HAL_UART_Transmit_DMA+0xf0>)
 80031a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	4a23      	ldr	r2, [pc, #140]	@ (800323c <HAL_UART_Transmit_DMA+0xf4>)
 80031b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b6:	2200      	movs	r2, #0
 80031b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c2:	4619      	mov	r1, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3328      	adds	r3, #40	@ 0x28
 80031ca:	461a      	mov	r2, r3
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	f7fe f9ff 	bl	80015d0 <HAL_DMA_Start_IT>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2210      	movs	r2, #16
 80031dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e020      	b.n	800322c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2240      	movs	r2, #64	@ 0x40
 80031f0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3308      	adds	r3, #8
 80031f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	613b      	str	r3, [r7, #16]
   return(result);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3308      	adds	r3, #8
 8003210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003212:	623a      	str	r2, [r7, #32]
 8003214:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	69f9      	ldr	r1, [r7, #28]
 8003218:	6a3a      	ldr	r2, [r7, #32]
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e5      	bne.n	80031f2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e000      	b.n	800322c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800322a:	2302      	movs	r3, #2
  }
}
 800322c:	4618      	mov	r0, r3
 800322e:	3728      	adds	r7, #40	@ 0x28
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	08004167 	.word	0x08004167
 8003238:	08004201 	.word	0x08004201
 800323c:	0800421d 	.word	0x0800421d

08003240 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b0ba      	sub	sp, #232	@ 0xe8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003266:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800326a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800326e:	4013      	ands	r3, r2
 8003270:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d115      	bne.n	80032a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800327c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00f      	beq.n	80032a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 82ca 	beq.w	8003832 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	4798      	blx	r3
      }
      return;
 80032a6:	e2c4      	b.n	8003832 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80032a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8117 	beq.w	80034e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80032c2:	4b85      	ldr	r3, [pc, #532]	@ (80034d8 <HAL_UART_IRQHandler+0x298>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 810a 	beq.w	80034e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d011      	beq.n	80032fc <HAL_UART_IRQHandler+0xbc>
 80032d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00b      	beq.n	80032fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2201      	movs	r2, #1
 80032ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032f2:	f043 0201 	orr.w	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d011      	beq.n	800332c <HAL_UART_IRQHandler+0xec>
 8003308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00b      	beq.n	800332c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2202      	movs	r2, #2
 800331a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003322:	f043 0204 	orr.w	r2, r3, #4
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800332c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d011      	beq.n	800335c <HAL_UART_IRQHandler+0x11c>
 8003338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00b      	beq.n	800335c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2204      	movs	r2, #4
 800334a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003352:	f043 0202 	orr.w	r2, r3, #2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800335c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d017      	beq.n	8003398 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003378:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00b      	beq.n	8003398 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2208      	movs	r2, #8
 8003386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800338e:	f043 0208 	orr.w	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800339c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d012      	beq.n	80033ca <HAL_UART_IRQHandler+0x18a>
 80033a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00c      	beq.n	80033ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8230 	beq.w	8003836 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003404:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003412:	2b40      	cmp	r3, #64	@ 0x40
 8003414:	d005      	beq.n	8003422 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800341a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800341e:	2b00      	cmp	r3, #0
 8003420:	d04f      	beq.n	80034c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fe3b 	bl	800409e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b40      	cmp	r3, #64	@ 0x40
 8003434:	d141      	bne.n	80034ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3308      	adds	r3, #8
 800343c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800344c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003454:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3308      	adds	r3, #8
 800345e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003462:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003466:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800346e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800347a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1d9      	bne.n	8003436 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003486:	2b00      	cmp	r3, #0
 8003488:	d013      	beq.n	80034b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348e:	4a13      	ldr	r2, [pc, #76]	@ (80034dc <HAL_UART_IRQHandler+0x29c>)
 8003490:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe f938 	bl	800170c <HAL_DMA_Abort_IT>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d017      	beq.n	80034d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034ac:	4610      	mov	r0, r2
 80034ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	e00f      	b.n	80034d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd f9ce 	bl	8000854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b8:	e00b      	b.n	80034d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd f9ca 	bl	8000854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c0:	e007      	b.n	80034d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd f9c6 	bl	8000854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80034d0:	e1b1      	b.n	8003836 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d2:	bf00      	nop
    return;
 80034d4:	e1af      	b.n	8003836 <HAL_UART_IRQHandler+0x5f6>
 80034d6:	bf00      	nop
 80034d8:	04000120 	.word	0x04000120
 80034dc:	0800429b 	.word	0x0800429b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	f040 816a 	bne.w	80037be <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8163 	beq.w	80037be <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 815c 	beq.w	80037be <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2210      	movs	r2, #16
 800350c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003518:	2b40      	cmp	r3, #64	@ 0x40
 800351a:	f040 80d4 	bne.w	80036c6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800352a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80ad 	beq.w	800368e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800353a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800353e:	429a      	cmp	r2, r3
 8003540:	f080 80a5 	bcs.w	800368e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800354a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	f040 8086 	bne.w	800366c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800356c:	e853 3f00 	ldrex	r3, [r3]
 8003570:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003574:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800357c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800358a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800358e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003596:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800359a:	e841 2300 	strex	r3, r2, [r1]
 800359e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80035a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1da      	bne.n	8003560 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3308      	adds	r3, #8
 80035b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035b4:	e853 3f00 	ldrex	r3, [r3]
 80035b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80035ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3308      	adds	r3, #8
 80035ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80035d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80035d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80035e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e1      	bne.n	80035aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3308      	adds	r3, #8
 80035ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80035f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3308      	adds	r3, #8
 8003606:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800360a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800360c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003610:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003618:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e3      	bne.n	80035e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800363a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800363c:	f023 0310 	bic.w	r3, r3, #16
 8003640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800364e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003650:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003654:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800365c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e4      	bne.n	800362c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe f812 	bl	8001690 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800367e:	b29b      	uxth	r3, r3
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	b29b      	uxth	r3, r3
 8003684:	4619      	mov	r1, r3
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8f4 	bl	8003874 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800368c:	e0d5      	b.n	800383a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003694:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003698:	429a      	cmp	r2, r3
 800369a:	f040 80ce 	bne.w	800383a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	f040 80c5 	bne.w	800383a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f8d8 	bl	8003874 <HAL_UARTEx_RxEventCallback>
      return;
 80036c4:	e0b9      	b.n	800383a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80ab 	beq.w	800383e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80036e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a6 	beq.w	800383e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fa:	e853 3f00 	ldrex	r3, [r3]
 80036fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003702:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003706:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003714:	647b      	str	r3, [r7, #68]	@ 0x44
 8003716:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003718:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800371a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800371c:	e841 2300 	strex	r3, r2, [r1]
 8003720:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e4      	bne.n	80036f2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3308      	adds	r3, #8
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	623b      	str	r3, [r7, #32]
   return(result);
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3308      	adds	r3, #8
 8003748:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800374c:	633a      	str	r2, [r7, #48]	@ 0x30
 800374e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800375a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e3      	bne.n	8003728 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	e853 3f00 	ldrex	r3, [r3]
 8003780:	60fb      	str	r3, [r7, #12]
   return(result);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f023 0310 	bic.w	r3, r3, #16
 8003788:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	69b9      	ldr	r1, [r7, #24]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	617b      	str	r3, [r7, #20]
   return(result);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e4      	bne.n	8003774 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2202      	movs	r2, #2
 80037ae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037b4:	4619      	mov	r1, r3
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f85c 	bl	8003874 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037bc:	e03f      	b.n	800383e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00e      	beq.n	80037e8 <HAL_UART_IRQHandler+0x5a8>
 80037ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80037de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fd9a 	bl	800431a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037e6:	e02d      	b.n	8003844 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00e      	beq.n	8003812 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01c      	beq.n	8003842 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
    }
    return;
 8003810:	e017      	b.n	8003842 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d012      	beq.n	8003844 <HAL_UART_IRQHandler+0x604>
 800381e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fd4b 	bl	80042c6 <UART_EndTransmit_IT>
    return;
 8003830:	e008      	b.n	8003844 <HAL_UART_IRQHandler+0x604>
      return;
 8003832:	bf00      	nop
 8003834:	e006      	b.n	8003844 <HAL_UART_IRQHandler+0x604>
    return;
 8003836:	bf00      	nop
 8003838:	e004      	b.n	8003844 <HAL_UART_IRQHandler+0x604>
      return;
 800383a:	bf00      	nop
 800383c:	e002      	b.n	8003844 <HAL_UART_IRQHandler+0x604>
      return;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <HAL_UART_IRQHandler+0x604>
    return;
 8003842:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003844:	37e8      	adds	r7, #232	@ 0xe8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop

0800384c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800388c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003890:	b08a      	sub	sp, #40	@ 0x28
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	431a      	orrs	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4bb4      	ldr	r3, [pc, #720]	@ (8003b8c <UART_SetConfig+0x300>)
 80038bc:	4013      	ands	r3, r2
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4aa9      	ldr	r2, [pc, #676]	@ (8003b90 <UART_SetConfig+0x304>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f4:	4313      	orrs	r3, r2
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003908:	430a      	orrs	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4aa0      	ldr	r2, [pc, #640]	@ (8003b94 <UART_SetConfig+0x308>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d126      	bne.n	8003964 <UART_SetConfig+0xd8>
 8003916:	4ba0      	ldr	r3, [pc, #640]	@ (8003b98 <UART_SetConfig+0x30c>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b03      	cmp	r3, #3
 8003922:	d81b      	bhi.n	800395c <UART_SetConfig+0xd0>
 8003924:	a201      	add	r2, pc, #4	@ (adr r2, 800392c <UART_SetConfig+0xa0>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	0800393d 	.word	0x0800393d
 8003930:	0800394d 	.word	0x0800394d
 8003934:	08003945 	.word	0x08003945
 8003938:	08003955 	.word	0x08003955
 800393c:	2301      	movs	r3, #1
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003942:	e080      	b.n	8003a46 <UART_SetConfig+0x1ba>
 8003944:	2302      	movs	r3, #2
 8003946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800394a:	e07c      	b.n	8003a46 <UART_SetConfig+0x1ba>
 800394c:	2304      	movs	r3, #4
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003952:	e078      	b.n	8003a46 <UART_SetConfig+0x1ba>
 8003954:	2308      	movs	r3, #8
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800395a:	e074      	b.n	8003a46 <UART_SetConfig+0x1ba>
 800395c:	2310      	movs	r3, #16
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003962:	e070      	b.n	8003a46 <UART_SetConfig+0x1ba>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a8c      	ldr	r2, [pc, #560]	@ (8003b9c <UART_SetConfig+0x310>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d138      	bne.n	80039e0 <UART_SetConfig+0x154>
 800396e:	4b8a      	ldr	r3, [pc, #552]	@ (8003b98 <UART_SetConfig+0x30c>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b0c      	cmp	r3, #12
 800397a:	d82d      	bhi.n	80039d8 <UART_SetConfig+0x14c>
 800397c:	a201      	add	r2, pc, #4	@ (adr r2, 8003984 <UART_SetConfig+0xf8>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	080039b9 	.word	0x080039b9
 8003988:	080039d9 	.word	0x080039d9
 800398c:	080039d9 	.word	0x080039d9
 8003990:	080039d9 	.word	0x080039d9
 8003994:	080039c9 	.word	0x080039c9
 8003998:	080039d9 	.word	0x080039d9
 800399c:	080039d9 	.word	0x080039d9
 80039a0:	080039d9 	.word	0x080039d9
 80039a4:	080039c1 	.word	0x080039c1
 80039a8:	080039d9 	.word	0x080039d9
 80039ac:	080039d9 	.word	0x080039d9
 80039b0:	080039d9 	.word	0x080039d9
 80039b4:	080039d1 	.word	0x080039d1
 80039b8:	2300      	movs	r3, #0
 80039ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039be:	e042      	b.n	8003a46 <UART_SetConfig+0x1ba>
 80039c0:	2302      	movs	r3, #2
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039c6:	e03e      	b.n	8003a46 <UART_SetConfig+0x1ba>
 80039c8:	2304      	movs	r3, #4
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ce:	e03a      	b.n	8003a46 <UART_SetConfig+0x1ba>
 80039d0:	2308      	movs	r3, #8
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d6:	e036      	b.n	8003a46 <UART_SetConfig+0x1ba>
 80039d8:	2310      	movs	r3, #16
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039de:	e032      	b.n	8003a46 <UART_SetConfig+0x1ba>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003b90 <UART_SetConfig+0x304>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d12a      	bne.n	8003a40 <UART_SetConfig+0x1b4>
 80039ea:	4b6b      	ldr	r3, [pc, #428]	@ (8003b98 <UART_SetConfig+0x30c>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039f8:	d01a      	beq.n	8003a30 <UART_SetConfig+0x1a4>
 80039fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039fe:	d81b      	bhi.n	8003a38 <UART_SetConfig+0x1ac>
 8003a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a04:	d00c      	beq.n	8003a20 <UART_SetConfig+0x194>
 8003a06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a0a:	d815      	bhi.n	8003a38 <UART_SetConfig+0x1ac>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <UART_SetConfig+0x18c>
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a14:	d008      	beq.n	8003a28 <UART_SetConfig+0x19c>
 8003a16:	e00f      	b.n	8003a38 <UART_SetConfig+0x1ac>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a1e:	e012      	b.n	8003a46 <UART_SetConfig+0x1ba>
 8003a20:	2302      	movs	r3, #2
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a26:	e00e      	b.n	8003a46 <UART_SetConfig+0x1ba>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a2e:	e00a      	b.n	8003a46 <UART_SetConfig+0x1ba>
 8003a30:	2308      	movs	r3, #8
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a36:	e006      	b.n	8003a46 <UART_SetConfig+0x1ba>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a3e:	e002      	b.n	8003a46 <UART_SetConfig+0x1ba>
 8003a40:	2310      	movs	r3, #16
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a51      	ldr	r2, [pc, #324]	@ (8003b90 <UART_SetConfig+0x304>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d17a      	bne.n	8003b46 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d824      	bhi.n	8003aa2 <UART_SetConfig+0x216>
 8003a58:	a201      	add	r2, pc, #4	@ (adr r2, 8003a60 <UART_SetConfig+0x1d4>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a85 	.word	0x08003a85
 8003a64:	08003aa3 	.word	0x08003aa3
 8003a68:	08003a8d 	.word	0x08003a8d
 8003a6c:	08003aa3 	.word	0x08003aa3
 8003a70:	08003a93 	.word	0x08003a93
 8003a74:	08003aa3 	.word	0x08003aa3
 8003a78:	08003aa3 	.word	0x08003aa3
 8003a7c:	08003aa3 	.word	0x08003aa3
 8003a80:	08003a9b 	.word	0x08003a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a84:	f7fe ff04 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 8003a88:	61f8      	str	r0, [r7, #28]
        break;
 8003a8a:	e010      	b.n	8003aae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a8c:	4b44      	ldr	r3, [pc, #272]	@ (8003ba0 <UART_SetConfig+0x314>)
 8003a8e:	61fb      	str	r3, [r7, #28]
        break;
 8003a90:	e00d      	b.n	8003aae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a92:	f7fe fe65 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8003a96:	61f8      	str	r0, [r7, #28]
        break;
 8003a98:	e009      	b.n	8003aae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a9e:	61fb      	str	r3, [r7, #28]
        break;
 8003aa0:	e005      	b.n	8003aae <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003aac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8107 	beq.w	8003cc4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d305      	bcc.n	8003ad2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d903      	bls.n	8003ada <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ad8:	e0f4      	b.n	8003cc4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	2200      	movs	r2, #0
 8003ade:	461c      	mov	r4, r3
 8003ae0:	4615      	mov	r5, r2
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	022b      	lsls	r3, r5, #8
 8003aec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003af0:	0222      	lsls	r2, r4, #8
 8003af2:	68f9      	ldr	r1, [r7, #12]
 8003af4:	6849      	ldr	r1, [r1, #4]
 8003af6:	0849      	lsrs	r1, r1, #1
 8003af8:	2000      	movs	r0, #0
 8003afa:	4688      	mov	r8, r1
 8003afc:	4681      	mov	r9, r0
 8003afe:	eb12 0a08 	adds.w	sl, r2, r8
 8003b02:	eb43 0b09 	adc.w	fp, r3, r9
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b14:	4650      	mov	r0, sl
 8003b16:	4659      	mov	r1, fp
 8003b18:	f7fc fbb2 	bl	8000280 <__aeabi_uldivmod>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4613      	mov	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b2a:	d308      	bcc.n	8003b3e <UART_SetConfig+0x2b2>
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b32:	d204      	bcs.n	8003b3e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	60da      	str	r2, [r3, #12]
 8003b3c:	e0c2      	b.n	8003cc4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b44:	e0be      	b.n	8003cc4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b4e:	d16a      	bne.n	8003c26 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003b50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d834      	bhi.n	8003bc2 <UART_SetConfig+0x336>
 8003b58:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <UART_SetConfig+0x2d4>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003b85 	.word	0x08003b85
 8003b64:	08003ba5 	.word	0x08003ba5
 8003b68:	08003bad 	.word	0x08003bad
 8003b6c:	08003bc3 	.word	0x08003bc3
 8003b70:	08003bb3 	.word	0x08003bb3
 8003b74:	08003bc3 	.word	0x08003bc3
 8003b78:	08003bc3 	.word	0x08003bc3
 8003b7c:	08003bc3 	.word	0x08003bc3
 8003b80:	08003bbb 	.word	0x08003bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b84:	f7fe fe84 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 8003b88:	61f8      	str	r0, [r7, #28]
        break;
 8003b8a:	e020      	b.n	8003bce <UART_SetConfig+0x342>
 8003b8c:	efff69f3 	.word	0xefff69f3
 8003b90:	40008000 	.word	0x40008000
 8003b94:	40013800 	.word	0x40013800
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40004400 	.word	0x40004400
 8003ba0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ba4:	f7fe fe8a 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 8003ba8:	61f8      	str	r0, [r7, #28]
        break;
 8003baa:	e010      	b.n	8003bce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bac:	4b4c      	ldr	r3, [pc, #304]	@ (8003ce0 <UART_SetConfig+0x454>)
 8003bae:	61fb      	str	r3, [r7, #28]
        break;
 8003bb0:	e00d      	b.n	8003bce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bb2:	f7fe fdd5 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8003bb6:	61f8      	str	r0, [r7, #28]
        break;
 8003bb8:	e009      	b.n	8003bce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bbe:	61fb      	str	r3, [r7, #28]
        break;
 8003bc0:	e005      	b.n	8003bce <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003bcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d077      	beq.n	8003cc4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	005a      	lsls	r2, r3, #1
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	441a      	add	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b0f      	cmp	r3, #15
 8003bee:	d916      	bls.n	8003c1e <UART_SetConfig+0x392>
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf6:	d212      	bcs.n	8003c1e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f023 030f 	bic.w	r3, r3, #15
 8003c00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	8afb      	ldrh	r3, [r7, #22]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	8afa      	ldrh	r2, [r7, #22]
 8003c1a:	60da      	str	r2, [r3, #12]
 8003c1c:	e052      	b.n	8003cc4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c24:	e04e      	b.n	8003cc4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d827      	bhi.n	8003c7e <UART_SetConfig+0x3f2>
 8003c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c34 <UART_SetConfig+0x3a8>)
 8003c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c69 	.word	0x08003c69
 8003c40:	08003c7f 	.word	0x08003c7f
 8003c44:	08003c6f 	.word	0x08003c6f
 8003c48:	08003c7f 	.word	0x08003c7f
 8003c4c:	08003c7f 	.word	0x08003c7f
 8003c50:	08003c7f 	.word	0x08003c7f
 8003c54:	08003c77 	.word	0x08003c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c58:	f7fe fe1a 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 8003c5c:	61f8      	str	r0, [r7, #28]
        break;
 8003c5e:	e014      	b.n	8003c8a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c60:	f7fe fe2c 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 8003c64:	61f8      	str	r0, [r7, #28]
        break;
 8003c66:	e010      	b.n	8003c8a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce0 <UART_SetConfig+0x454>)
 8003c6a:	61fb      	str	r3, [r7, #28]
        break;
 8003c6c:	e00d      	b.n	8003c8a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c6e:	f7fe fd77 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8003c72:	61f8      	str	r0, [r7, #28]
        break;
 8003c74:	e009      	b.n	8003c8a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c7a:	61fb      	str	r3, [r7, #28]
        break;
 8003c7c:	e005      	b.n	8003c8a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c88:	bf00      	nop
    }

    if (pclk != 0U)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d019      	beq.n	8003cc4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	085a      	lsrs	r2, r3, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	441a      	add	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b0f      	cmp	r3, #15
 8003ca8:	d909      	bls.n	8003cbe <UART_SetConfig+0x432>
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb0:	d205      	bcs.n	8003cbe <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60da      	str	r2, [r3, #12]
 8003cbc:	e002      	b.n	8003cc4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003cd0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3728      	adds	r7, #40	@ 0x28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cde:	bf00      	nop
 8003ce0:	00f42400 	.word	0x00f42400

08003ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01a      	beq.n	8003dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003de2:	d10a      	bne.n	8003dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b098      	sub	sp, #96	@ 0x60
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e38:	f7fd f9d0 	bl	80011dc <HAL_GetTick>
 8003e3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d12e      	bne.n	8003eaa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e54:	2200      	movs	r2, #0
 8003e56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f88c 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d021      	beq.n	8003eaa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6e:	e853 3f00 	ldrex	r3, [r3]
 8003e72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e8c:	e841 2300 	strex	r3, r2, [r1]
 8003e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e6      	bne.n	8003e66 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e062      	b.n	8003f70 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d149      	bne.n	8003f4c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f856 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d03c      	beq.n	8003f4c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	623b      	str	r3, [r7, #32]
   return(result);
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e6      	bne.n	8003ed2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3308      	adds	r3, #8
 8003f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3308      	adds	r3, #8
 8003f22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f24:	61fa      	str	r2, [r7, #28]
 8003f26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	69b9      	ldr	r1, [r7, #24]
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	617b      	str	r3, [r7, #20]
   return(result);
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e5      	bne.n	8003f04 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e011      	b.n	8003f70 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3758      	adds	r7, #88	@ 0x58
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	4613      	mov	r3, r2
 8003f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f88:	e04f      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d04b      	beq.n	800402a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f92:	f7fd f923 	bl	80011dc <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d302      	bcc.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e04e      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d037      	beq.n	800402a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b80      	cmp	r3, #128	@ 0x80
 8003fbe:	d034      	beq.n	800402a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b40      	cmp	r3, #64	@ 0x40
 8003fc4:	d031      	beq.n	800402a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d110      	bne.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f85e 	bl	800409e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e029      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004004:	d111      	bne.n	800402a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800400e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f844 	bl	800409e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e00f      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4013      	ands	r3, r2
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	429a      	cmp	r2, r3
 8004038:	bf0c      	ite	eq
 800403a:	2301      	moveq	r3, #1
 800403c:	2300      	movne	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	429a      	cmp	r2, r3
 8004046:	d0a0      	beq.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004052:	b480      	push	{r7}
 8004054:	b089      	sub	sp, #36	@ 0x24
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	60bb      	str	r3, [r7, #8]
   return(result);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800406e:	61fb      	str	r3, [r7, #28]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	6979      	ldr	r1, [r7, #20]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	613b      	str	r3, [r7, #16]
   return(result);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e6      	bne.n	800405a <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004092:	bf00      	nop
 8004094:	3724      	adds	r7, #36	@ 0x24
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800409e:	b480      	push	{r7}
 80040a0:	b095      	sub	sp, #84	@ 0x54
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80040c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e6      	bne.n	80040a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3308      	adds	r3, #8
 80040de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3308      	adds	r3, #8
 80040f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e5      	bne.n	80040d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004110:	2b01      	cmp	r3, #1
 8004112:	d118      	bne.n	8004146 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	60bb      	str	r3, [r7, #8]
   return(result);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f023 0310 	bic.w	r3, r3, #16
 8004128:	647b      	str	r3, [r7, #68]	@ 0x44
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6979      	ldr	r1, [r7, #20]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	613b      	str	r3, [r7, #16]
   return(result);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e6      	bne.n	8004114 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800415a:	bf00      	nop
 800415c:	3754      	adds	r7, #84	@ 0x54
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b090      	sub	sp, #64	@ 0x40
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004172:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d137      	bne.n	80041f2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004184:	2200      	movs	r2, #0
 8004186:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800418a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3308      	adds	r3, #8
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	623b      	str	r3, [r7, #32]
   return(result);
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80041ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e5      	bne.n	800418a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80041d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	69b9      	ldr	r1, [r7, #24]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	617b      	str	r3, [r7, #20]
   return(result);
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e6      	bne.n	80041be <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041f0:	e002      	b.n	80041f8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80041f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80041f4:	f7ff fb2a 	bl	800384c <HAL_UART_TxCpltCallback>
}
 80041f8:	bf00      	nop
 80041fa:	3740      	adds	r7, #64	@ 0x40
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7ff fb26 	bl	8003860 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004228:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800422e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004236:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004242:	2b80      	cmp	r3, #128	@ 0x80
 8004244:	d109      	bne.n	800425a <UART_DMAError+0x3e>
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b21      	cmp	r3, #33	@ 0x21
 800424a:	d106      	bne.n	800425a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2200      	movs	r2, #0
 8004250:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004254:	6978      	ldr	r0, [r7, #20]
 8004256:	f7ff fefc 	bl	8004052 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004264:	2b40      	cmp	r3, #64	@ 0x40
 8004266:	d109      	bne.n	800427c <UART_DMAError+0x60>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b22      	cmp	r3, #34	@ 0x22
 800426c:	d106      	bne.n	800427c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2200      	movs	r2, #0
 8004272:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	f7ff ff11 	bl	800409e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004282:	f043 0210 	orr.w	r2, r3, #16
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800428c:	6978      	ldr	r0, [r7, #20]
 800428e:	f7fc fae1 	bl	8000854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004292:	bf00      	nop
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7fc facb 	bl	8000854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042be:	bf00      	nop
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b088      	sub	sp, #32
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	60bb      	str	r3, [r7, #8]
   return(result);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6979      	ldr	r1, [r7, #20]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	613b      	str	r3, [r7, #16]
   return(result);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e6      	bne.n	80042ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff fa9d 	bl	800384c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004312:	bf00      	nop
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <siprintf>:
 8004330:	b40e      	push	{r1, r2, r3}
 8004332:	b500      	push	{lr}
 8004334:	b09c      	sub	sp, #112	@ 0x70
 8004336:	ab1d      	add	r3, sp, #116	@ 0x74
 8004338:	9002      	str	r0, [sp, #8]
 800433a:	9006      	str	r0, [sp, #24]
 800433c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004340:	4809      	ldr	r0, [pc, #36]	@ (8004368 <siprintf+0x38>)
 8004342:	9107      	str	r1, [sp, #28]
 8004344:	9104      	str	r1, [sp, #16]
 8004346:	4909      	ldr	r1, [pc, #36]	@ (800436c <siprintf+0x3c>)
 8004348:	f853 2b04 	ldr.w	r2, [r3], #4
 800434c:	9105      	str	r1, [sp, #20]
 800434e:	6800      	ldr	r0, [r0, #0]
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	a902      	add	r1, sp, #8
 8004354:	f000 f994 	bl	8004680 <_svfiprintf_r>
 8004358:	9b02      	ldr	r3, [sp, #8]
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	b01c      	add	sp, #112	@ 0x70
 8004360:	f85d eb04 	ldr.w	lr, [sp], #4
 8004364:	b003      	add	sp, #12
 8004366:	4770      	bx	lr
 8004368:	20000024 	.word	0x20000024
 800436c:	ffff0208 	.word	0xffff0208

08004370 <memset>:
 8004370:	4402      	add	r2, r0
 8004372:	4603      	mov	r3, r0
 8004374:	4293      	cmp	r3, r2
 8004376:	d100      	bne.n	800437a <memset+0xa>
 8004378:	4770      	bx	lr
 800437a:	f803 1b01 	strb.w	r1, [r3], #1
 800437e:	e7f9      	b.n	8004374 <memset+0x4>

08004380 <__errno>:
 8004380:	4b01      	ldr	r3, [pc, #4]	@ (8004388 <__errno+0x8>)
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000024 	.word	0x20000024

0800438c <__libc_init_array>:
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	4d0d      	ldr	r5, [pc, #52]	@ (80043c4 <__libc_init_array+0x38>)
 8004390:	4c0d      	ldr	r4, [pc, #52]	@ (80043c8 <__libc_init_array+0x3c>)
 8004392:	1b64      	subs	r4, r4, r5
 8004394:	10a4      	asrs	r4, r4, #2
 8004396:	2600      	movs	r6, #0
 8004398:	42a6      	cmp	r6, r4
 800439a:	d109      	bne.n	80043b0 <__libc_init_array+0x24>
 800439c:	4d0b      	ldr	r5, [pc, #44]	@ (80043cc <__libc_init_array+0x40>)
 800439e:	4c0c      	ldr	r4, [pc, #48]	@ (80043d0 <__libc_init_array+0x44>)
 80043a0:	f000 fc66 	bl	8004c70 <_init>
 80043a4:	1b64      	subs	r4, r4, r5
 80043a6:	10a4      	asrs	r4, r4, #2
 80043a8:	2600      	movs	r6, #0
 80043aa:	42a6      	cmp	r6, r4
 80043ac:	d105      	bne.n	80043ba <__libc_init_array+0x2e>
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
 80043b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b4:	4798      	blx	r3
 80043b6:	3601      	adds	r6, #1
 80043b8:	e7ee      	b.n	8004398 <__libc_init_array+0xc>
 80043ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80043be:	4798      	blx	r3
 80043c0:	3601      	adds	r6, #1
 80043c2:	e7f2      	b.n	80043aa <__libc_init_array+0x1e>
 80043c4:	08004d20 	.word	0x08004d20
 80043c8:	08004d20 	.word	0x08004d20
 80043cc:	08004d20 	.word	0x08004d20
 80043d0:	08004d24 	.word	0x08004d24

080043d4 <__retarget_lock_acquire_recursive>:
 80043d4:	4770      	bx	lr

080043d6 <__retarget_lock_release_recursive>:
 80043d6:	4770      	bx	lr

080043d8 <_free_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	4605      	mov	r5, r0
 80043dc:	2900      	cmp	r1, #0
 80043de:	d041      	beq.n	8004464 <_free_r+0x8c>
 80043e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e4:	1f0c      	subs	r4, r1, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	bfb8      	it	lt
 80043ea:	18e4      	addlt	r4, r4, r3
 80043ec:	f000 f8e0 	bl	80045b0 <__malloc_lock>
 80043f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004468 <_free_r+0x90>)
 80043f2:	6813      	ldr	r3, [r2, #0]
 80043f4:	b933      	cbnz	r3, 8004404 <_free_r+0x2c>
 80043f6:	6063      	str	r3, [r4, #4]
 80043f8:	6014      	str	r4, [r2, #0]
 80043fa:	4628      	mov	r0, r5
 80043fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004400:	f000 b8dc 	b.w	80045bc <__malloc_unlock>
 8004404:	42a3      	cmp	r3, r4
 8004406:	d908      	bls.n	800441a <_free_r+0x42>
 8004408:	6820      	ldr	r0, [r4, #0]
 800440a:	1821      	adds	r1, r4, r0
 800440c:	428b      	cmp	r3, r1
 800440e:	bf01      	itttt	eq
 8004410:	6819      	ldreq	r1, [r3, #0]
 8004412:	685b      	ldreq	r3, [r3, #4]
 8004414:	1809      	addeq	r1, r1, r0
 8004416:	6021      	streq	r1, [r4, #0]
 8004418:	e7ed      	b.n	80043f6 <_free_r+0x1e>
 800441a:	461a      	mov	r2, r3
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	b10b      	cbz	r3, 8004424 <_free_r+0x4c>
 8004420:	42a3      	cmp	r3, r4
 8004422:	d9fa      	bls.n	800441a <_free_r+0x42>
 8004424:	6811      	ldr	r1, [r2, #0]
 8004426:	1850      	adds	r0, r2, r1
 8004428:	42a0      	cmp	r0, r4
 800442a:	d10b      	bne.n	8004444 <_free_r+0x6c>
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	4401      	add	r1, r0
 8004430:	1850      	adds	r0, r2, r1
 8004432:	4283      	cmp	r3, r0
 8004434:	6011      	str	r1, [r2, #0]
 8004436:	d1e0      	bne.n	80043fa <_free_r+0x22>
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	6053      	str	r3, [r2, #4]
 800443e:	4408      	add	r0, r1
 8004440:	6010      	str	r0, [r2, #0]
 8004442:	e7da      	b.n	80043fa <_free_r+0x22>
 8004444:	d902      	bls.n	800444c <_free_r+0x74>
 8004446:	230c      	movs	r3, #12
 8004448:	602b      	str	r3, [r5, #0]
 800444a:	e7d6      	b.n	80043fa <_free_r+0x22>
 800444c:	6820      	ldr	r0, [r4, #0]
 800444e:	1821      	adds	r1, r4, r0
 8004450:	428b      	cmp	r3, r1
 8004452:	bf04      	itt	eq
 8004454:	6819      	ldreq	r1, [r3, #0]
 8004456:	685b      	ldreq	r3, [r3, #4]
 8004458:	6063      	str	r3, [r4, #4]
 800445a:	bf04      	itt	eq
 800445c:	1809      	addeq	r1, r1, r0
 800445e:	6021      	streq	r1, [r4, #0]
 8004460:	6054      	str	r4, [r2, #4]
 8004462:	e7ca      	b.n	80043fa <_free_r+0x22>
 8004464:	bd38      	pop	{r3, r4, r5, pc}
 8004466:	bf00      	nop
 8004468:	2000040c 	.word	0x2000040c

0800446c <sbrk_aligned>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	4e0f      	ldr	r6, [pc, #60]	@ (80044ac <sbrk_aligned+0x40>)
 8004470:	460c      	mov	r4, r1
 8004472:	6831      	ldr	r1, [r6, #0]
 8004474:	4605      	mov	r5, r0
 8004476:	b911      	cbnz	r1, 800447e <sbrk_aligned+0x12>
 8004478:	f000 fba6 	bl	8004bc8 <_sbrk_r>
 800447c:	6030      	str	r0, [r6, #0]
 800447e:	4621      	mov	r1, r4
 8004480:	4628      	mov	r0, r5
 8004482:	f000 fba1 	bl	8004bc8 <_sbrk_r>
 8004486:	1c43      	adds	r3, r0, #1
 8004488:	d103      	bne.n	8004492 <sbrk_aligned+0x26>
 800448a:	f04f 34ff 	mov.w	r4, #4294967295
 800448e:	4620      	mov	r0, r4
 8004490:	bd70      	pop	{r4, r5, r6, pc}
 8004492:	1cc4      	adds	r4, r0, #3
 8004494:	f024 0403 	bic.w	r4, r4, #3
 8004498:	42a0      	cmp	r0, r4
 800449a:	d0f8      	beq.n	800448e <sbrk_aligned+0x22>
 800449c:	1a21      	subs	r1, r4, r0
 800449e:	4628      	mov	r0, r5
 80044a0:	f000 fb92 	bl	8004bc8 <_sbrk_r>
 80044a4:	3001      	adds	r0, #1
 80044a6:	d1f2      	bne.n	800448e <sbrk_aligned+0x22>
 80044a8:	e7ef      	b.n	800448a <sbrk_aligned+0x1e>
 80044aa:	bf00      	nop
 80044ac:	20000408 	.word	0x20000408

080044b0 <_malloc_r>:
 80044b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b4:	1ccd      	adds	r5, r1, #3
 80044b6:	f025 0503 	bic.w	r5, r5, #3
 80044ba:	3508      	adds	r5, #8
 80044bc:	2d0c      	cmp	r5, #12
 80044be:	bf38      	it	cc
 80044c0:	250c      	movcc	r5, #12
 80044c2:	2d00      	cmp	r5, #0
 80044c4:	4606      	mov	r6, r0
 80044c6:	db01      	blt.n	80044cc <_malloc_r+0x1c>
 80044c8:	42a9      	cmp	r1, r5
 80044ca:	d904      	bls.n	80044d6 <_malloc_r+0x26>
 80044cc:	230c      	movs	r3, #12
 80044ce:	6033      	str	r3, [r6, #0]
 80044d0:	2000      	movs	r0, #0
 80044d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045ac <_malloc_r+0xfc>
 80044da:	f000 f869 	bl	80045b0 <__malloc_lock>
 80044de:	f8d8 3000 	ldr.w	r3, [r8]
 80044e2:	461c      	mov	r4, r3
 80044e4:	bb44      	cbnz	r4, 8004538 <_malloc_r+0x88>
 80044e6:	4629      	mov	r1, r5
 80044e8:	4630      	mov	r0, r6
 80044ea:	f7ff ffbf 	bl	800446c <sbrk_aligned>
 80044ee:	1c43      	adds	r3, r0, #1
 80044f0:	4604      	mov	r4, r0
 80044f2:	d158      	bne.n	80045a6 <_malloc_r+0xf6>
 80044f4:	f8d8 4000 	ldr.w	r4, [r8]
 80044f8:	4627      	mov	r7, r4
 80044fa:	2f00      	cmp	r7, #0
 80044fc:	d143      	bne.n	8004586 <_malloc_r+0xd6>
 80044fe:	2c00      	cmp	r4, #0
 8004500:	d04b      	beq.n	800459a <_malloc_r+0xea>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	4639      	mov	r1, r7
 8004506:	4630      	mov	r0, r6
 8004508:	eb04 0903 	add.w	r9, r4, r3
 800450c:	f000 fb5c 	bl	8004bc8 <_sbrk_r>
 8004510:	4581      	cmp	r9, r0
 8004512:	d142      	bne.n	800459a <_malloc_r+0xea>
 8004514:	6821      	ldr	r1, [r4, #0]
 8004516:	1a6d      	subs	r5, r5, r1
 8004518:	4629      	mov	r1, r5
 800451a:	4630      	mov	r0, r6
 800451c:	f7ff ffa6 	bl	800446c <sbrk_aligned>
 8004520:	3001      	adds	r0, #1
 8004522:	d03a      	beq.n	800459a <_malloc_r+0xea>
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	442b      	add	r3, r5
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	f8d8 3000 	ldr.w	r3, [r8]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	bb62      	cbnz	r2, 800458c <_malloc_r+0xdc>
 8004532:	f8c8 7000 	str.w	r7, [r8]
 8004536:	e00f      	b.n	8004558 <_malloc_r+0xa8>
 8004538:	6822      	ldr	r2, [r4, #0]
 800453a:	1b52      	subs	r2, r2, r5
 800453c:	d420      	bmi.n	8004580 <_malloc_r+0xd0>
 800453e:	2a0b      	cmp	r2, #11
 8004540:	d917      	bls.n	8004572 <_malloc_r+0xc2>
 8004542:	1961      	adds	r1, r4, r5
 8004544:	42a3      	cmp	r3, r4
 8004546:	6025      	str	r5, [r4, #0]
 8004548:	bf18      	it	ne
 800454a:	6059      	strne	r1, [r3, #4]
 800454c:	6863      	ldr	r3, [r4, #4]
 800454e:	bf08      	it	eq
 8004550:	f8c8 1000 	streq.w	r1, [r8]
 8004554:	5162      	str	r2, [r4, r5]
 8004556:	604b      	str	r3, [r1, #4]
 8004558:	4630      	mov	r0, r6
 800455a:	f000 f82f 	bl	80045bc <__malloc_unlock>
 800455e:	f104 000b 	add.w	r0, r4, #11
 8004562:	1d23      	adds	r3, r4, #4
 8004564:	f020 0007 	bic.w	r0, r0, #7
 8004568:	1ac2      	subs	r2, r0, r3
 800456a:	bf1c      	itt	ne
 800456c:	1a1b      	subne	r3, r3, r0
 800456e:	50a3      	strne	r3, [r4, r2]
 8004570:	e7af      	b.n	80044d2 <_malloc_r+0x22>
 8004572:	6862      	ldr	r2, [r4, #4]
 8004574:	42a3      	cmp	r3, r4
 8004576:	bf0c      	ite	eq
 8004578:	f8c8 2000 	streq.w	r2, [r8]
 800457c:	605a      	strne	r2, [r3, #4]
 800457e:	e7eb      	b.n	8004558 <_malloc_r+0xa8>
 8004580:	4623      	mov	r3, r4
 8004582:	6864      	ldr	r4, [r4, #4]
 8004584:	e7ae      	b.n	80044e4 <_malloc_r+0x34>
 8004586:	463c      	mov	r4, r7
 8004588:	687f      	ldr	r7, [r7, #4]
 800458a:	e7b6      	b.n	80044fa <_malloc_r+0x4a>
 800458c:	461a      	mov	r2, r3
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	42a3      	cmp	r3, r4
 8004592:	d1fb      	bne.n	800458c <_malloc_r+0xdc>
 8004594:	2300      	movs	r3, #0
 8004596:	6053      	str	r3, [r2, #4]
 8004598:	e7de      	b.n	8004558 <_malloc_r+0xa8>
 800459a:	230c      	movs	r3, #12
 800459c:	6033      	str	r3, [r6, #0]
 800459e:	4630      	mov	r0, r6
 80045a0:	f000 f80c 	bl	80045bc <__malloc_unlock>
 80045a4:	e794      	b.n	80044d0 <_malloc_r+0x20>
 80045a6:	6005      	str	r5, [r0, #0]
 80045a8:	e7d6      	b.n	8004558 <_malloc_r+0xa8>
 80045aa:	bf00      	nop
 80045ac:	2000040c 	.word	0x2000040c

080045b0 <__malloc_lock>:
 80045b0:	4801      	ldr	r0, [pc, #4]	@ (80045b8 <__malloc_lock+0x8>)
 80045b2:	f7ff bf0f 	b.w	80043d4 <__retarget_lock_acquire_recursive>
 80045b6:	bf00      	nop
 80045b8:	20000404 	.word	0x20000404

080045bc <__malloc_unlock>:
 80045bc:	4801      	ldr	r0, [pc, #4]	@ (80045c4 <__malloc_unlock+0x8>)
 80045be:	f7ff bf0a 	b.w	80043d6 <__retarget_lock_release_recursive>
 80045c2:	bf00      	nop
 80045c4:	20000404 	.word	0x20000404

080045c8 <__ssputs_r>:
 80045c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045cc:	688e      	ldr	r6, [r1, #8]
 80045ce:	461f      	mov	r7, r3
 80045d0:	42be      	cmp	r6, r7
 80045d2:	680b      	ldr	r3, [r1, #0]
 80045d4:	4682      	mov	sl, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	4690      	mov	r8, r2
 80045da:	d82d      	bhi.n	8004638 <__ssputs_r+0x70>
 80045dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80045e4:	d026      	beq.n	8004634 <__ssputs_r+0x6c>
 80045e6:	6965      	ldr	r5, [r4, #20]
 80045e8:	6909      	ldr	r1, [r1, #16]
 80045ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045ee:	eba3 0901 	sub.w	r9, r3, r1
 80045f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045f6:	1c7b      	adds	r3, r7, #1
 80045f8:	444b      	add	r3, r9
 80045fa:	106d      	asrs	r5, r5, #1
 80045fc:	429d      	cmp	r5, r3
 80045fe:	bf38      	it	cc
 8004600:	461d      	movcc	r5, r3
 8004602:	0553      	lsls	r3, r2, #21
 8004604:	d527      	bpl.n	8004656 <__ssputs_r+0x8e>
 8004606:	4629      	mov	r1, r5
 8004608:	f7ff ff52 	bl	80044b0 <_malloc_r>
 800460c:	4606      	mov	r6, r0
 800460e:	b360      	cbz	r0, 800466a <__ssputs_r+0xa2>
 8004610:	6921      	ldr	r1, [r4, #16]
 8004612:	464a      	mov	r2, r9
 8004614:	f000 fae8 	bl	8004be8 <memcpy>
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800461e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004622:	81a3      	strh	r3, [r4, #12]
 8004624:	6126      	str	r6, [r4, #16]
 8004626:	6165      	str	r5, [r4, #20]
 8004628:	444e      	add	r6, r9
 800462a:	eba5 0509 	sub.w	r5, r5, r9
 800462e:	6026      	str	r6, [r4, #0]
 8004630:	60a5      	str	r5, [r4, #8]
 8004632:	463e      	mov	r6, r7
 8004634:	42be      	cmp	r6, r7
 8004636:	d900      	bls.n	800463a <__ssputs_r+0x72>
 8004638:	463e      	mov	r6, r7
 800463a:	6820      	ldr	r0, [r4, #0]
 800463c:	4632      	mov	r2, r6
 800463e:	4641      	mov	r1, r8
 8004640:	f000 faa8 	bl	8004b94 <memmove>
 8004644:	68a3      	ldr	r3, [r4, #8]
 8004646:	1b9b      	subs	r3, r3, r6
 8004648:	60a3      	str	r3, [r4, #8]
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	4433      	add	r3, r6
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	2000      	movs	r0, #0
 8004652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004656:	462a      	mov	r2, r5
 8004658:	f000 fad4 	bl	8004c04 <_realloc_r>
 800465c:	4606      	mov	r6, r0
 800465e:	2800      	cmp	r0, #0
 8004660:	d1e0      	bne.n	8004624 <__ssputs_r+0x5c>
 8004662:	6921      	ldr	r1, [r4, #16]
 8004664:	4650      	mov	r0, sl
 8004666:	f7ff feb7 	bl	80043d8 <_free_r>
 800466a:	230c      	movs	r3, #12
 800466c:	f8ca 3000 	str.w	r3, [sl]
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004676:	81a3      	strh	r3, [r4, #12]
 8004678:	f04f 30ff 	mov.w	r0, #4294967295
 800467c:	e7e9      	b.n	8004652 <__ssputs_r+0x8a>
	...

08004680 <_svfiprintf_r>:
 8004680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004684:	4698      	mov	r8, r3
 8004686:	898b      	ldrh	r3, [r1, #12]
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	b09d      	sub	sp, #116	@ 0x74
 800468c:	4607      	mov	r7, r0
 800468e:	460d      	mov	r5, r1
 8004690:	4614      	mov	r4, r2
 8004692:	d510      	bpl.n	80046b6 <_svfiprintf_r+0x36>
 8004694:	690b      	ldr	r3, [r1, #16]
 8004696:	b973      	cbnz	r3, 80046b6 <_svfiprintf_r+0x36>
 8004698:	2140      	movs	r1, #64	@ 0x40
 800469a:	f7ff ff09 	bl	80044b0 <_malloc_r>
 800469e:	6028      	str	r0, [r5, #0]
 80046a0:	6128      	str	r0, [r5, #16]
 80046a2:	b930      	cbnz	r0, 80046b2 <_svfiprintf_r+0x32>
 80046a4:	230c      	movs	r3, #12
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	b01d      	add	sp, #116	@ 0x74
 80046ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b2:	2340      	movs	r3, #64	@ 0x40
 80046b4:	616b      	str	r3, [r5, #20]
 80046b6:	2300      	movs	r3, #0
 80046b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ba:	2320      	movs	r3, #32
 80046bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80046c4:	2330      	movs	r3, #48	@ 0x30
 80046c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004864 <_svfiprintf_r+0x1e4>
 80046ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046ce:	f04f 0901 	mov.w	r9, #1
 80046d2:	4623      	mov	r3, r4
 80046d4:	469a      	mov	sl, r3
 80046d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046da:	b10a      	cbz	r2, 80046e0 <_svfiprintf_r+0x60>
 80046dc:	2a25      	cmp	r2, #37	@ 0x25
 80046de:	d1f9      	bne.n	80046d4 <_svfiprintf_r+0x54>
 80046e0:	ebba 0b04 	subs.w	fp, sl, r4
 80046e4:	d00b      	beq.n	80046fe <_svfiprintf_r+0x7e>
 80046e6:	465b      	mov	r3, fp
 80046e8:	4622      	mov	r2, r4
 80046ea:	4629      	mov	r1, r5
 80046ec:	4638      	mov	r0, r7
 80046ee:	f7ff ff6b 	bl	80045c8 <__ssputs_r>
 80046f2:	3001      	adds	r0, #1
 80046f4:	f000 80a7 	beq.w	8004846 <_svfiprintf_r+0x1c6>
 80046f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046fa:	445a      	add	r2, fp
 80046fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80046fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 809f 	beq.w	8004846 <_svfiprintf_r+0x1c6>
 8004708:	2300      	movs	r3, #0
 800470a:	f04f 32ff 	mov.w	r2, #4294967295
 800470e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004712:	f10a 0a01 	add.w	sl, sl, #1
 8004716:	9304      	str	r3, [sp, #16]
 8004718:	9307      	str	r3, [sp, #28]
 800471a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800471e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004720:	4654      	mov	r4, sl
 8004722:	2205      	movs	r2, #5
 8004724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004728:	484e      	ldr	r0, [pc, #312]	@ (8004864 <_svfiprintf_r+0x1e4>)
 800472a:	f7fb fd59 	bl	80001e0 <memchr>
 800472e:	9a04      	ldr	r2, [sp, #16]
 8004730:	b9d8      	cbnz	r0, 800476a <_svfiprintf_r+0xea>
 8004732:	06d0      	lsls	r0, r2, #27
 8004734:	bf44      	itt	mi
 8004736:	2320      	movmi	r3, #32
 8004738:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800473c:	0711      	lsls	r1, r2, #28
 800473e:	bf44      	itt	mi
 8004740:	232b      	movmi	r3, #43	@ 0x2b
 8004742:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004746:	f89a 3000 	ldrb.w	r3, [sl]
 800474a:	2b2a      	cmp	r3, #42	@ 0x2a
 800474c:	d015      	beq.n	800477a <_svfiprintf_r+0xfa>
 800474e:	9a07      	ldr	r2, [sp, #28]
 8004750:	4654      	mov	r4, sl
 8004752:	2000      	movs	r0, #0
 8004754:	f04f 0c0a 	mov.w	ip, #10
 8004758:	4621      	mov	r1, r4
 800475a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800475e:	3b30      	subs	r3, #48	@ 0x30
 8004760:	2b09      	cmp	r3, #9
 8004762:	d94b      	bls.n	80047fc <_svfiprintf_r+0x17c>
 8004764:	b1b0      	cbz	r0, 8004794 <_svfiprintf_r+0x114>
 8004766:	9207      	str	r2, [sp, #28]
 8004768:	e014      	b.n	8004794 <_svfiprintf_r+0x114>
 800476a:	eba0 0308 	sub.w	r3, r0, r8
 800476e:	fa09 f303 	lsl.w	r3, r9, r3
 8004772:	4313      	orrs	r3, r2
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	46a2      	mov	sl, r4
 8004778:	e7d2      	b.n	8004720 <_svfiprintf_r+0xa0>
 800477a:	9b03      	ldr	r3, [sp, #12]
 800477c:	1d19      	adds	r1, r3, #4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	9103      	str	r1, [sp, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	bfbb      	ittet	lt
 8004786:	425b      	neglt	r3, r3
 8004788:	f042 0202 	orrlt.w	r2, r2, #2
 800478c:	9307      	strge	r3, [sp, #28]
 800478e:	9307      	strlt	r3, [sp, #28]
 8004790:	bfb8      	it	lt
 8004792:	9204      	strlt	r2, [sp, #16]
 8004794:	7823      	ldrb	r3, [r4, #0]
 8004796:	2b2e      	cmp	r3, #46	@ 0x2e
 8004798:	d10a      	bne.n	80047b0 <_svfiprintf_r+0x130>
 800479a:	7863      	ldrb	r3, [r4, #1]
 800479c:	2b2a      	cmp	r3, #42	@ 0x2a
 800479e:	d132      	bne.n	8004806 <_svfiprintf_r+0x186>
 80047a0:	9b03      	ldr	r3, [sp, #12]
 80047a2:	1d1a      	adds	r2, r3, #4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	9203      	str	r2, [sp, #12]
 80047a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047ac:	3402      	adds	r4, #2
 80047ae:	9305      	str	r3, [sp, #20]
 80047b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004874 <_svfiprintf_r+0x1f4>
 80047b4:	7821      	ldrb	r1, [r4, #0]
 80047b6:	2203      	movs	r2, #3
 80047b8:	4650      	mov	r0, sl
 80047ba:	f7fb fd11 	bl	80001e0 <memchr>
 80047be:	b138      	cbz	r0, 80047d0 <_svfiprintf_r+0x150>
 80047c0:	9b04      	ldr	r3, [sp, #16]
 80047c2:	eba0 000a 	sub.w	r0, r0, sl
 80047c6:	2240      	movs	r2, #64	@ 0x40
 80047c8:	4082      	lsls	r2, r0
 80047ca:	4313      	orrs	r3, r2
 80047cc:	3401      	adds	r4, #1
 80047ce:	9304      	str	r3, [sp, #16]
 80047d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d4:	4824      	ldr	r0, [pc, #144]	@ (8004868 <_svfiprintf_r+0x1e8>)
 80047d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047da:	2206      	movs	r2, #6
 80047dc:	f7fb fd00 	bl	80001e0 <memchr>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d036      	beq.n	8004852 <_svfiprintf_r+0x1d2>
 80047e4:	4b21      	ldr	r3, [pc, #132]	@ (800486c <_svfiprintf_r+0x1ec>)
 80047e6:	bb1b      	cbnz	r3, 8004830 <_svfiprintf_r+0x1b0>
 80047e8:	9b03      	ldr	r3, [sp, #12]
 80047ea:	3307      	adds	r3, #7
 80047ec:	f023 0307 	bic.w	r3, r3, #7
 80047f0:	3308      	adds	r3, #8
 80047f2:	9303      	str	r3, [sp, #12]
 80047f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047f6:	4433      	add	r3, r6
 80047f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80047fa:	e76a      	b.n	80046d2 <_svfiprintf_r+0x52>
 80047fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004800:	460c      	mov	r4, r1
 8004802:	2001      	movs	r0, #1
 8004804:	e7a8      	b.n	8004758 <_svfiprintf_r+0xd8>
 8004806:	2300      	movs	r3, #0
 8004808:	3401      	adds	r4, #1
 800480a:	9305      	str	r3, [sp, #20]
 800480c:	4619      	mov	r1, r3
 800480e:	f04f 0c0a 	mov.w	ip, #10
 8004812:	4620      	mov	r0, r4
 8004814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004818:	3a30      	subs	r2, #48	@ 0x30
 800481a:	2a09      	cmp	r2, #9
 800481c:	d903      	bls.n	8004826 <_svfiprintf_r+0x1a6>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0c6      	beq.n	80047b0 <_svfiprintf_r+0x130>
 8004822:	9105      	str	r1, [sp, #20]
 8004824:	e7c4      	b.n	80047b0 <_svfiprintf_r+0x130>
 8004826:	fb0c 2101 	mla	r1, ip, r1, r2
 800482a:	4604      	mov	r4, r0
 800482c:	2301      	movs	r3, #1
 800482e:	e7f0      	b.n	8004812 <_svfiprintf_r+0x192>
 8004830:	ab03      	add	r3, sp, #12
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	462a      	mov	r2, r5
 8004836:	4b0e      	ldr	r3, [pc, #56]	@ (8004870 <_svfiprintf_r+0x1f0>)
 8004838:	a904      	add	r1, sp, #16
 800483a:	4638      	mov	r0, r7
 800483c:	f3af 8000 	nop.w
 8004840:	1c42      	adds	r2, r0, #1
 8004842:	4606      	mov	r6, r0
 8004844:	d1d6      	bne.n	80047f4 <_svfiprintf_r+0x174>
 8004846:	89ab      	ldrh	r3, [r5, #12]
 8004848:	065b      	lsls	r3, r3, #25
 800484a:	f53f af2d 	bmi.w	80046a8 <_svfiprintf_r+0x28>
 800484e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004850:	e72c      	b.n	80046ac <_svfiprintf_r+0x2c>
 8004852:	ab03      	add	r3, sp, #12
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	462a      	mov	r2, r5
 8004858:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <_svfiprintf_r+0x1f0>)
 800485a:	a904      	add	r1, sp, #16
 800485c:	4638      	mov	r0, r7
 800485e:	f000 f879 	bl	8004954 <_printf_i>
 8004862:	e7ed      	b.n	8004840 <_svfiprintf_r+0x1c0>
 8004864:	08004ce4 	.word	0x08004ce4
 8004868:	08004cee 	.word	0x08004cee
 800486c:	00000000 	.word	0x00000000
 8004870:	080045c9 	.word	0x080045c9
 8004874:	08004cea 	.word	0x08004cea

08004878 <_printf_common>:
 8004878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800487c:	4616      	mov	r6, r2
 800487e:	4698      	mov	r8, r3
 8004880:	688a      	ldr	r2, [r1, #8]
 8004882:	690b      	ldr	r3, [r1, #16]
 8004884:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004888:	4293      	cmp	r3, r2
 800488a:	bfb8      	it	lt
 800488c:	4613      	movlt	r3, r2
 800488e:	6033      	str	r3, [r6, #0]
 8004890:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004894:	4607      	mov	r7, r0
 8004896:	460c      	mov	r4, r1
 8004898:	b10a      	cbz	r2, 800489e <_printf_common+0x26>
 800489a:	3301      	adds	r3, #1
 800489c:	6033      	str	r3, [r6, #0]
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	0699      	lsls	r1, r3, #26
 80048a2:	bf42      	ittt	mi
 80048a4:	6833      	ldrmi	r3, [r6, #0]
 80048a6:	3302      	addmi	r3, #2
 80048a8:	6033      	strmi	r3, [r6, #0]
 80048aa:	6825      	ldr	r5, [r4, #0]
 80048ac:	f015 0506 	ands.w	r5, r5, #6
 80048b0:	d106      	bne.n	80048c0 <_printf_common+0x48>
 80048b2:	f104 0a19 	add.w	sl, r4, #25
 80048b6:	68e3      	ldr	r3, [r4, #12]
 80048b8:	6832      	ldr	r2, [r6, #0]
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	42ab      	cmp	r3, r5
 80048be:	dc26      	bgt.n	800490e <_printf_common+0x96>
 80048c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	3b00      	subs	r3, #0
 80048c8:	bf18      	it	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	0692      	lsls	r2, r2, #26
 80048ce:	d42b      	bmi.n	8004928 <_printf_common+0xb0>
 80048d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048d4:	4641      	mov	r1, r8
 80048d6:	4638      	mov	r0, r7
 80048d8:	47c8      	blx	r9
 80048da:	3001      	adds	r0, #1
 80048dc:	d01e      	beq.n	800491c <_printf_common+0xa4>
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	6922      	ldr	r2, [r4, #16]
 80048e2:	f003 0306 	and.w	r3, r3, #6
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	bf02      	ittt	eq
 80048ea:	68e5      	ldreq	r5, [r4, #12]
 80048ec:	6833      	ldreq	r3, [r6, #0]
 80048ee:	1aed      	subeq	r5, r5, r3
 80048f0:	68a3      	ldr	r3, [r4, #8]
 80048f2:	bf0c      	ite	eq
 80048f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048f8:	2500      	movne	r5, #0
 80048fa:	4293      	cmp	r3, r2
 80048fc:	bfc4      	itt	gt
 80048fe:	1a9b      	subgt	r3, r3, r2
 8004900:	18ed      	addgt	r5, r5, r3
 8004902:	2600      	movs	r6, #0
 8004904:	341a      	adds	r4, #26
 8004906:	42b5      	cmp	r5, r6
 8004908:	d11a      	bne.n	8004940 <_printf_common+0xc8>
 800490a:	2000      	movs	r0, #0
 800490c:	e008      	b.n	8004920 <_printf_common+0xa8>
 800490e:	2301      	movs	r3, #1
 8004910:	4652      	mov	r2, sl
 8004912:	4641      	mov	r1, r8
 8004914:	4638      	mov	r0, r7
 8004916:	47c8      	blx	r9
 8004918:	3001      	adds	r0, #1
 800491a:	d103      	bne.n	8004924 <_printf_common+0xac>
 800491c:	f04f 30ff 	mov.w	r0, #4294967295
 8004920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004924:	3501      	adds	r5, #1
 8004926:	e7c6      	b.n	80048b6 <_printf_common+0x3e>
 8004928:	18e1      	adds	r1, r4, r3
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	2030      	movs	r0, #48	@ 0x30
 800492e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004932:	4422      	add	r2, r4
 8004934:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004938:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800493c:	3302      	adds	r3, #2
 800493e:	e7c7      	b.n	80048d0 <_printf_common+0x58>
 8004940:	2301      	movs	r3, #1
 8004942:	4622      	mov	r2, r4
 8004944:	4641      	mov	r1, r8
 8004946:	4638      	mov	r0, r7
 8004948:	47c8      	blx	r9
 800494a:	3001      	adds	r0, #1
 800494c:	d0e6      	beq.n	800491c <_printf_common+0xa4>
 800494e:	3601      	adds	r6, #1
 8004950:	e7d9      	b.n	8004906 <_printf_common+0x8e>
	...

08004954 <_printf_i>:
 8004954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004958:	7e0f      	ldrb	r7, [r1, #24]
 800495a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800495c:	2f78      	cmp	r7, #120	@ 0x78
 800495e:	4691      	mov	r9, r2
 8004960:	4680      	mov	r8, r0
 8004962:	460c      	mov	r4, r1
 8004964:	469a      	mov	sl, r3
 8004966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800496a:	d807      	bhi.n	800497c <_printf_i+0x28>
 800496c:	2f62      	cmp	r7, #98	@ 0x62
 800496e:	d80a      	bhi.n	8004986 <_printf_i+0x32>
 8004970:	2f00      	cmp	r7, #0
 8004972:	f000 80d2 	beq.w	8004b1a <_printf_i+0x1c6>
 8004976:	2f58      	cmp	r7, #88	@ 0x58
 8004978:	f000 80b9 	beq.w	8004aee <_printf_i+0x19a>
 800497c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004984:	e03a      	b.n	80049fc <_printf_i+0xa8>
 8004986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800498a:	2b15      	cmp	r3, #21
 800498c:	d8f6      	bhi.n	800497c <_printf_i+0x28>
 800498e:	a101      	add	r1, pc, #4	@ (adr r1, 8004994 <_printf_i+0x40>)
 8004990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004994:	080049ed 	.word	0x080049ed
 8004998:	08004a01 	.word	0x08004a01
 800499c:	0800497d 	.word	0x0800497d
 80049a0:	0800497d 	.word	0x0800497d
 80049a4:	0800497d 	.word	0x0800497d
 80049a8:	0800497d 	.word	0x0800497d
 80049ac:	08004a01 	.word	0x08004a01
 80049b0:	0800497d 	.word	0x0800497d
 80049b4:	0800497d 	.word	0x0800497d
 80049b8:	0800497d 	.word	0x0800497d
 80049bc:	0800497d 	.word	0x0800497d
 80049c0:	08004b01 	.word	0x08004b01
 80049c4:	08004a2b 	.word	0x08004a2b
 80049c8:	08004abb 	.word	0x08004abb
 80049cc:	0800497d 	.word	0x0800497d
 80049d0:	0800497d 	.word	0x0800497d
 80049d4:	08004b23 	.word	0x08004b23
 80049d8:	0800497d 	.word	0x0800497d
 80049dc:	08004a2b 	.word	0x08004a2b
 80049e0:	0800497d 	.word	0x0800497d
 80049e4:	0800497d 	.word	0x0800497d
 80049e8:	08004ac3 	.word	0x08004ac3
 80049ec:	6833      	ldr	r3, [r6, #0]
 80049ee:	1d1a      	adds	r2, r3, #4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6032      	str	r2, [r6, #0]
 80049f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049fc:	2301      	movs	r3, #1
 80049fe:	e09d      	b.n	8004b3c <_printf_i+0x1e8>
 8004a00:	6833      	ldr	r3, [r6, #0]
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	1d19      	adds	r1, r3, #4
 8004a06:	6031      	str	r1, [r6, #0]
 8004a08:	0606      	lsls	r6, r0, #24
 8004a0a:	d501      	bpl.n	8004a10 <_printf_i+0xbc>
 8004a0c:	681d      	ldr	r5, [r3, #0]
 8004a0e:	e003      	b.n	8004a18 <_printf_i+0xc4>
 8004a10:	0645      	lsls	r5, r0, #25
 8004a12:	d5fb      	bpl.n	8004a0c <_printf_i+0xb8>
 8004a14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a18:	2d00      	cmp	r5, #0
 8004a1a:	da03      	bge.n	8004a24 <_printf_i+0xd0>
 8004a1c:	232d      	movs	r3, #45	@ 0x2d
 8004a1e:	426d      	negs	r5, r5
 8004a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a24:	4859      	ldr	r0, [pc, #356]	@ (8004b8c <_printf_i+0x238>)
 8004a26:	230a      	movs	r3, #10
 8004a28:	e011      	b.n	8004a4e <_printf_i+0xfa>
 8004a2a:	6821      	ldr	r1, [r4, #0]
 8004a2c:	6833      	ldr	r3, [r6, #0]
 8004a2e:	0608      	lsls	r0, r1, #24
 8004a30:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a34:	d402      	bmi.n	8004a3c <_printf_i+0xe8>
 8004a36:	0649      	lsls	r1, r1, #25
 8004a38:	bf48      	it	mi
 8004a3a:	b2ad      	uxthmi	r5, r5
 8004a3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a3e:	4853      	ldr	r0, [pc, #332]	@ (8004b8c <_printf_i+0x238>)
 8004a40:	6033      	str	r3, [r6, #0]
 8004a42:	bf14      	ite	ne
 8004a44:	230a      	movne	r3, #10
 8004a46:	2308      	moveq	r3, #8
 8004a48:	2100      	movs	r1, #0
 8004a4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a4e:	6866      	ldr	r6, [r4, #4]
 8004a50:	60a6      	str	r6, [r4, #8]
 8004a52:	2e00      	cmp	r6, #0
 8004a54:	bfa2      	ittt	ge
 8004a56:	6821      	ldrge	r1, [r4, #0]
 8004a58:	f021 0104 	bicge.w	r1, r1, #4
 8004a5c:	6021      	strge	r1, [r4, #0]
 8004a5e:	b90d      	cbnz	r5, 8004a64 <_printf_i+0x110>
 8004a60:	2e00      	cmp	r6, #0
 8004a62:	d04b      	beq.n	8004afc <_printf_i+0x1a8>
 8004a64:	4616      	mov	r6, r2
 8004a66:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a6a:	fb03 5711 	mls	r7, r3, r1, r5
 8004a6e:	5dc7      	ldrb	r7, [r0, r7]
 8004a70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a74:	462f      	mov	r7, r5
 8004a76:	42bb      	cmp	r3, r7
 8004a78:	460d      	mov	r5, r1
 8004a7a:	d9f4      	bls.n	8004a66 <_printf_i+0x112>
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d10b      	bne.n	8004a98 <_printf_i+0x144>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	07df      	lsls	r7, r3, #31
 8004a84:	d508      	bpl.n	8004a98 <_printf_i+0x144>
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	6861      	ldr	r1, [r4, #4]
 8004a8a:	4299      	cmp	r1, r3
 8004a8c:	bfde      	ittt	le
 8004a8e:	2330      	movle	r3, #48	@ 0x30
 8004a90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a98:	1b92      	subs	r2, r2, r6
 8004a9a:	6122      	str	r2, [r4, #16]
 8004a9c:	f8cd a000 	str.w	sl, [sp]
 8004aa0:	464b      	mov	r3, r9
 8004aa2:	aa03      	add	r2, sp, #12
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	f7ff fee6 	bl	8004878 <_printf_common>
 8004aac:	3001      	adds	r0, #1
 8004aae:	d14a      	bne.n	8004b46 <_printf_i+0x1f2>
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab4:	b004      	add	sp, #16
 8004ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	f043 0320 	orr.w	r3, r3, #32
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	4833      	ldr	r0, [pc, #204]	@ (8004b90 <_printf_i+0x23c>)
 8004ac4:	2778      	movs	r7, #120	@ 0x78
 8004ac6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	6831      	ldr	r1, [r6, #0]
 8004ace:	061f      	lsls	r7, r3, #24
 8004ad0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ad4:	d402      	bmi.n	8004adc <_printf_i+0x188>
 8004ad6:	065f      	lsls	r7, r3, #25
 8004ad8:	bf48      	it	mi
 8004ada:	b2ad      	uxthmi	r5, r5
 8004adc:	6031      	str	r1, [r6, #0]
 8004ade:	07d9      	lsls	r1, r3, #31
 8004ae0:	bf44      	itt	mi
 8004ae2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ae6:	6023      	strmi	r3, [r4, #0]
 8004ae8:	b11d      	cbz	r5, 8004af2 <_printf_i+0x19e>
 8004aea:	2310      	movs	r3, #16
 8004aec:	e7ac      	b.n	8004a48 <_printf_i+0xf4>
 8004aee:	4827      	ldr	r0, [pc, #156]	@ (8004b8c <_printf_i+0x238>)
 8004af0:	e7e9      	b.n	8004ac6 <_printf_i+0x172>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	f023 0320 	bic.w	r3, r3, #32
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	e7f6      	b.n	8004aea <_printf_i+0x196>
 8004afc:	4616      	mov	r6, r2
 8004afe:	e7bd      	b.n	8004a7c <_printf_i+0x128>
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	6825      	ldr	r5, [r4, #0]
 8004b04:	6961      	ldr	r1, [r4, #20]
 8004b06:	1d18      	adds	r0, r3, #4
 8004b08:	6030      	str	r0, [r6, #0]
 8004b0a:	062e      	lsls	r6, r5, #24
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	d501      	bpl.n	8004b14 <_printf_i+0x1c0>
 8004b10:	6019      	str	r1, [r3, #0]
 8004b12:	e002      	b.n	8004b1a <_printf_i+0x1c6>
 8004b14:	0668      	lsls	r0, r5, #25
 8004b16:	d5fb      	bpl.n	8004b10 <_printf_i+0x1bc>
 8004b18:	8019      	strh	r1, [r3, #0]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	6123      	str	r3, [r4, #16]
 8004b1e:	4616      	mov	r6, r2
 8004b20:	e7bc      	b.n	8004a9c <_printf_i+0x148>
 8004b22:	6833      	ldr	r3, [r6, #0]
 8004b24:	1d1a      	adds	r2, r3, #4
 8004b26:	6032      	str	r2, [r6, #0]
 8004b28:	681e      	ldr	r6, [r3, #0]
 8004b2a:	6862      	ldr	r2, [r4, #4]
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f7fb fb56 	bl	80001e0 <memchr>
 8004b34:	b108      	cbz	r0, 8004b3a <_printf_i+0x1e6>
 8004b36:	1b80      	subs	r0, r0, r6
 8004b38:	6060      	str	r0, [r4, #4]
 8004b3a:	6863      	ldr	r3, [r4, #4]
 8004b3c:	6123      	str	r3, [r4, #16]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b44:	e7aa      	b.n	8004a9c <_printf_i+0x148>
 8004b46:	6923      	ldr	r3, [r4, #16]
 8004b48:	4632      	mov	r2, r6
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	47d0      	blx	sl
 8004b50:	3001      	adds	r0, #1
 8004b52:	d0ad      	beq.n	8004ab0 <_printf_i+0x15c>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	079b      	lsls	r3, r3, #30
 8004b58:	d413      	bmi.n	8004b82 <_printf_i+0x22e>
 8004b5a:	68e0      	ldr	r0, [r4, #12]
 8004b5c:	9b03      	ldr	r3, [sp, #12]
 8004b5e:	4298      	cmp	r0, r3
 8004b60:	bfb8      	it	lt
 8004b62:	4618      	movlt	r0, r3
 8004b64:	e7a6      	b.n	8004ab4 <_printf_i+0x160>
 8004b66:	2301      	movs	r3, #1
 8004b68:	4632      	mov	r2, r6
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	47d0      	blx	sl
 8004b70:	3001      	adds	r0, #1
 8004b72:	d09d      	beq.n	8004ab0 <_printf_i+0x15c>
 8004b74:	3501      	adds	r5, #1
 8004b76:	68e3      	ldr	r3, [r4, #12]
 8004b78:	9903      	ldr	r1, [sp, #12]
 8004b7a:	1a5b      	subs	r3, r3, r1
 8004b7c:	42ab      	cmp	r3, r5
 8004b7e:	dcf2      	bgt.n	8004b66 <_printf_i+0x212>
 8004b80:	e7eb      	b.n	8004b5a <_printf_i+0x206>
 8004b82:	2500      	movs	r5, #0
 8004b84:	f104 0619 	add.w	r6, r4, #25
 8004b88:	e7f5      	b.n	8004b76 <_printf_i+0x222>
 8004b8a:	bf00      	nop
 8004b8c:	08004cf5 	.word	0x08004cf5
 8004b90:	08004d06 	.word	0x08004d06

08004b94 <memmove>:
 8004b94:	4288      	cmp	r0, r1
 8004b96:	b510      	push	{r4, lr}
 8004b98:	eb01 0402 	add.w	r4, r1, r2
 8004b9c:	d902      	bls.n	8004ba4 <memmove+0x10>
 8004b9e:	4284      	cmp	r4, r0
 8004ba0:	4623      	mov	r3, r4
 8004ba2:	d807      	bhi.n	8004bb4 <memmove+0x20>
 8004ba4:	1e43      	subs	r3, r0, #1
 8004ba6:	42a1      	cmp	r1, r4
 8004ba8:	d008      	beq.n	8004bbc <memmove+0x28>
 8004baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bb2:	e7f8      	b.n	8004ba6 <memmove+0x12>
 8004bb4:	4402      	add	r2, r0
 8004bb6:	4601      	mov	r1, r0
 8004bb8:	428a      	cmp	r2, r1
 8004bba:	d100      	bne.n	8004bbe <memmove+0x2a>
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bc6:	e7f7      	b.n	8004bb8 <memmove+0x24>

08004bc8 <_sbrk_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d06      	ldr	r5, [pc, #24]	@ (8004be4 <_sbrk_r+0x1c>)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4604      	mov	r4, r0
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	602b      	str	r3, [r5, #0]
 8004bd4:	f7fc fa28 	bl	8001028 <_sbrk>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_sbrk_r+0x1a>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_sbrk_r+0x1a>
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	20000400 	.word	0x20000400

08004be8 <memcpy>:
 8004be8:	440a      	add	r2, r1
 8004bea:	4291      	cmp	r1, r2
 8004bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bf0:	d100      	bne.n	8004bf4 <memcpy+0xc>
 8004bf2:	4770      	bx	lr
 8004bf4:	b510      	push	{r4, lr}
 8004bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bfe:	4291      	cmp	r1, r2
 8004c00:	d1f9      	bne.n	8004bf6 <memcpy+0xe>
 8004c02:	bd10      	pop	{r4, pc}

08004c04 <_realloc_r>:
 8004c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c08:	4680      	mov	r8, r0
 8004c0a:	4615      	mov	r5, r2
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	b921      	cbnz	r1, 8004c1a <_realloc_r+0x16>
 8004c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c14:	4611      	mov	r1, r2
 8004c16:	f7ff bc4b 	b.w	80044b0 <_malloc_r>
 8004c1a:	b92a      	cbnz	r2, 8004c28 <_realloc_r+0x24>
 8004c1c:	f7ff fbdc 	bl	80043d8 <_free_r>
 8004c20:	2400      	movs	r4, #0
 8004c22:	4620      	mov	r0, r4
 8004c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c28:	f000 f81a 	bl	8004c60 <_malloc_usable_size_r>
 8004c2c:	4285      	cmp	r5, r0
 8004c2e:	4606      	mov	r6, r0
 8004c30:	d802      	bhi.n	8004c38 <_realloc_r+0x34>
 8004c32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c36:	d8f4      	bhi.n	8004c22 <_realloc_r+0x1e>
 8004c38:	4629      	mov	r1, r5
 8004c3a:	4640      	mov	r0, r8
 8004c3c:	f7ff fc38 	bl	80044b0 <_malloc_r>
 8004c40:	4607      	mov	r7, r0
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d0ec      	beq.n	8004c20 <_realloc_r+0x1c>
 8004c46:	42b5      	cmp	r5, r6
 8004c48:	462a      	mov	r2, r5
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	bf28      	it	cs
 8004c4e:	4632      	movcs	r2, r6
 8004c50:	f7ff ffca 	bl	8004be8 <memcpy>
 8004c54:	4621      	mov	r1, r4
 8004c56:	4640      	mov	r0, r8
 8004c58:	f7ff fbbe 	bl	80043d8 <_free_r>
 8004c5c:	463c      	mov	r4, r7
 8004c5e:	e7e0      	b.n	8004c22 <_realloc_r+0x1e>

08004c60 <_malloc_usable_size_r>:
 8004c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c64:	1f18      	subs	r0, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bfbc      	itt	lt
 8004c6a:	580b      	ldrlt	r3, [r1, r0]
 8004c6c:	18c0      	addlt	r0, r0, r3
 8004c6e:	4770      	bx	lr

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr
