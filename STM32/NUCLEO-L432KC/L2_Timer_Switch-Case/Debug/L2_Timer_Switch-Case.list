
L2_Timer_Switch-Case.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004830  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001048  080049bc  080049bc  000059bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a04  08005a04  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a04  08005a04  00006a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a0c  08005a0c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a0c  08005a0c  00006a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a10  08005a10  00006a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005a14  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  08005a20  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08005a20  000071a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112cb  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286f  00000000  00000000  00018307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001ab78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5b  00000000  00000000  0001bb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b8b  00000000  00000000  0001c7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014149  00000000  00000000  0003d366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6041  00000000  00000000  000514af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001174f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004160  00000000  00000000  00117534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0011b694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080049a4 	.word	0x080049a4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080049a4 	.word	0x080049a4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c2:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <MX_DMA_Init+0x38>)
 80004c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004c6:	4a0b      	ldr	r2, [pc, #44]	@ (80004f4 <MX_DMA_Init+0x38>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <MX_DMA_Init+0x38>)
 80004d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2100      	movs	r1, #0
 80004de:	200f      	movs	r0, #15
 80004e0:	f000 fd1f 	bl	8000f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004e4:	200f      	movs	r0, #15
 80004e6:	f000 fd38 	bl	8000f5a <HAL_NVIC_EnableIRQ>

}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000

080004f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <MX_GPIO_Init+0x8c>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000512:	4a1c      	ldr	r2, [pc, #112]	@ (8000584 <MX_GPIO_Init+0x8c>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800051a:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <MX_GPIO_Init+0x8c>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b17      	ldr	r3, [pc, #92]	@ (8000584 <MX_GPIO_Init+0x8c>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	4a16      	ldr	r2, [pc, #88]	@ (8000584 <MX_GPIO_Init+0x8c>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000532:	4b14      	ldr	r3, [pc, #80]	@ (8000584 <MX_GPIO_Init+0x8c>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <MX_GPIO_Init+0x8c>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000542:	4a10      	ldr	r2, [pc, #64]	@ (8000584 <MX_GPIO_Init+0x8c>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800054a:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <MX_GPIO_Init+0x8c>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lt_pos_Pin|lt_ac_Pin|lt_lan_Pin|lt_sea_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	213a      	movs	r1, #58	@ 0x3a
 800055a:	480b      	ldr	r0, [pc, #44]	@ (8000588 <MX_GPIO_Init+0x90>)
 800055c:	f001 f87a 	bl	8001654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = lt_pos_Pin|lt_ac_Pin|lt_lan_Pin|lt_sea_Pin;
 8000560:	233a      	movs	r3, #58	@ 0x3a
 8000562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	4619      	mov	r1, r3
 8000576:	4804      	ldr	r0, [pc, #16]	@ (8000588 <MX_GPIO_Init+0x90>)
 8000578:	f000 ff02 	bl	8001380 <HAL_GPIO_Init>

}
 800057c:	bf00      	nop
 800057e:	3720      	adds	r7, #32
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	48000400 	.word	0x48000400

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fb76 	bl	8000c82 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_status(false, false, false, false, false);
 8000596:	2300      	movs	r3, #0
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 f8a7 	bl	80006f4 <init_status>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f81d 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f7ff ffa5 	bl	80004f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ae:	f7ff ff85 	bl	80004bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 faa3 	bl	8000afc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005b6:	f000 f93d 	bl	8000834 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005ba:	f000 f98f 	bl	80008dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005be:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <main+0x4c>)
 80005c0:	f002 fa5c 	bl	8002a7c <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, data, 1024);
 80005c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005c8:	4a04      	ldr	r2, [pc, #16]	@ (80005dc <main+0x50>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <main+0x54>)
 80005ce:	f002 fb0b 	bl	8002be8 <HAL_TIM_PWM_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d2:	bf00      	nop
 80005d4:	e7fd      	b.n	80005d2 <main+0x46>
 80005d6:	bf00      	nop
 80005d8:	20000034 	.word	0x20000034
 80005dc:	080049bc 	.word	0x080049bc
 80005e0:	20000080 	.word	0x20000080

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b096      	sub	sp, #88	@ 0x58
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2244      	movs	r2, #68	@ 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 f9a9 	bl	800494a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000606:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800060a:	f001 f859 	bl	80016c0 <HAL_PWREx_ControlVoltageScaling>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000614:	f000 f868 	bl	80006e8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000618:	f001 f834 	bl	8001684 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800061c:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <SystemClock_Config+0xc0>)
 800061e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000622:	4a20      	ldr	r2, [pc, #128]	@ (80006a4 <SystemClock_Config+0xc0>)
 8000624:	f023 0318 	bic.w	r3, r3, #24
 8000628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800062c:	2314      	movs	r3, #20
 800062e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800063c:	2360      	movs	r3, #96	@ 0x60
 800063e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000644:	2301      	movs	r3, #1
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800064c:	2310      	movs	r3, #16
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f883 	bl	800176c <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800066c:	f000 f83c 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2303      	movs	r3, #3
 8000676:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	2101      	movs	r1, #1
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fc83 	bl	8001f94 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000694:	f000 f828 	bl	80006e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000698:	f002 f896 	bl	80027c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800069c:	bf00      	nop
 800069e:	3758      	adds	r7, #88	@ 0x58
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0a      	ldr	r2, [pc, #40]	@ (80006e0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d10c      	bne.n	80006d4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		cnt++;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80006c4:	801a      	strh	r2, [r3, #0]
		if(cnt >= 100)
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	2b63      	cmp	r3, #99	@ 0x63
 80006cc:	d902      	bls.n	80006d4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			cnt = 0;
 80006ce:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	40012c00 	.word	0x40012c00
 80006e4:	20000028 	.word	0x20000028

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <Error_Handler+0x8>

080006f4 <init_status>:

static LtStatus status;


void init_status(bool stat_bea, bool stat_pos, bool stat_ac, bool stat_lan, bool stat_sea)
{
 80006f4:	b490      	push	{r4, r7}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4604      	mov	r4, r0
 80006fc:	4608      	mov	r0, r1
 80006fe:	4611      	mov	r1, r2
 8000700:	461a      	mov	r2, r3
 8000702:	4623      	mov	r3, r4
 8000704:	71fb      	strb	r3, [r7, #7]
 8000706:	4603      	mov	r3, r0
 8000708:	71bb      	strb	r3, [r7, #6]
 800070a:	460b      	mov	r3, r1
 800070c:	717b      	strb	r3, [r7, #5]
 800070e:	4613      	mov	r3, r2
 8000710:	713b      	strb	r3, [r7, #4]
	status.status_lt_bea = stat_bea;
 8000712:	4a0a      	ldr	r2, [pc, #40]	@ (800073c <init_status+0x48>)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	7013      	strb	r3, [r2, #0]
	status.status_lt_pos = stat_pos;
 8000718:	4a08      	ldr	r2, [pc, #32]	@ (800073c <init_status+0x48>)
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	7053      	strb	r3, [r2, #1]
	status.status_lt_ac = stat_ac;
 800071e:	4a07      	ldr	r2, [pc, #28]	@ (800073c <init_status+0x48>)
 8000720:	797b      	ldrb	r3, [r7, #5]
 8000722:	7093      	strb	r3, [r2, #2]
	status.status_lt_lan = stat_lan;
 8000724:	4a05      	ldr	r2, [pc, #20]	@ (800073c <init_status+0x48>)
 8000726:	793b      	ldrb	r3, [r7, #4]
 8000728:	70d3      	strb	r3, [r2, #3]
	status.status_lt_sea = stat_sea;
 800072a:	4a04      	ldr	r2, [pc, #16]	@ (800073c <init_status+0x48>)
 800072c:	7c3b      	ldrb	r3, [r7, #16]
 800072e:	7113      	strb	r3, [r2, #4]
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bc90      	pop	{r4, r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	2000002c 	.word	0x2000002c

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <HAL_MspInit+0x44>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800074a:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <HAL_MspInit+0x44>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6613      	str	r3, [r2, #96]	@ 0x60
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <HAL_MspInit+0x44>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <HAL_MspInit+0x44>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <HAL_MspInit+0x44>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000768:	6593      	str	r3, [r2, #88]	@ 0x58
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_MspInit+0x44>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <NMI_Handler+0x4>

08000790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <MemManage_Handler+0x4>

080007a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <UsageFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007de:	f000 faa5 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80007ec:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <DMA1_Channel5_IRQHandler+0x10>)
 80007ee:	f000 fce7 	bl	80011c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000cc 	.word	0x200000cc

080007fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000800:	4802      	ldr	r0, [pc, #8]	@ (800080c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000802:	f002 fbe9 	bl	8002fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000034 	.word	0x20000034

08000810 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <SystemInit+0x20>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800081a:	4a05      	ldr	r2, [pc, #20]	@ (8000830 <SystemInit+0x20>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <MX_TIM1_Init+0xa0>)
 8000854:	4a20      	ldr	r2, [pc, #128]	@ (80008d8 <MX_TIM1_Init+0xa4>)
 8000856:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 8000858:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <MX_TIM1_Init+0xa0>)
 800085a:	f240 123f 	movw	r2, #319	@ 0x13f
 800085e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <MX_TIM1_Init+0xa0>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000-1;
 8000866:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <MX_TIM1_Init+0xa0>)
 8000868:	f241 3287 	movw	r2, #4999	@ 0x1387
 800086c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <MX_TIM1_Init+0xa0>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000874:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_TIM1_Init+0xa0>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <MX_TIM1_Init+0xa0>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000880:	4814      	ldr	r0, [pc, #80]	@ (80008d4 <MX_TIM1_Init+0xa0>)
 8000882:	f002 f8a3 	bl	80029cc <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800088c:	f7ff ff2c 	bl	80006e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000894:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	4619      	mov	r1, r3
 800089c:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <MX_TIM1_Init+0xa0>)
 800089e:	f002 fdb7 	bl	8003410 <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80008a8:	f7ff ff1e 	bl	80006e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_TIM1_Init+0xa0>)
 80008be:	f003 fb2b 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008c8:	f7ff ff0e 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000034 	.word	0x20000034
 80008d8:	40012c00 	.word	0x40012c00

080008dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	@ 0x38
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
 800090a:	615a      	str	r2, [r3, #20]
 800090c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090e:	4b2d      	ldr	r3, [pc, #180]	@ (80009c4 <MX_TIM2_Init+0xe8>)
 8000910:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000916:	4b2b      	ldr	r3, [pc, #172]	@ (80009c4 <MX_TIM2_Init+0xe8>)
 8000918:	221f      	movs	r2, #31
 800091a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b29      	ldr	r3, [pc, #164]	@ (80009c4 <MX_TIM2_Init+0xe8>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000922:	4b28      	ldr	r3, [pc, #160]	@ (80009c4 <MX_TIM2_Init+0xe8>)
 8000924:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092a:	4b26      	ldr	r3, [pc, #152]	@ (80009c4 <MX_TIM2_Init+0xe8>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000930:	4b24      	ldr	r3, [pc, #144]	@ (80009c4 <MX_TIM2_Init+0xe8>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000936:	4823      	ldr	r0, [pc, #140]	@ (80009c4 <MX_TIM2_Init+0xe8>)
 8000938:	f002 f848 	bl	80029cc <HAL_TIM_Base_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000942:	f7ff fed1 	bl	80006e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800094c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000950:	4619      	mov	r1, r3
 8000952:	481c      	ldr	r0, [pc, #112]	@ (80009c4 <MX_TIM2_Init+0xe8>)
 8000954:	f002 fd5c 	bl	8003410 <HAL_TIM_ConfigClockSource>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800095e:	f7ff fec3 	bl	80006e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000962:	4818      	ldr	r0, [pc, #96]	@ (80009c4 <MX_TIM2_Init+0xe8>)
 8000964:	f002 f8de 	bl	8002b24 <HAL_TIM_PWM_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800096e:	f7ff febb 	bl	80006e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4810      	ldr	r0, [pc, #64]	@ (80009c4 <MX_TIM2_Init+0xe8>)
 8000982:	f003 fac9 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800098c:	f7ff feac 	bl	80006e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000990:	2360      	movs	r3, #96	@ 0x60
 8000992:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	4619      	mov	r1, r3
 80009a6:	4807      	ldr	r0, [pc, #28]	@ (80009c4 <MX_TIM2_Init+0xe8>)
 80009a8:	f002 fc1e 	bl	80031e8 <HAL_TIM_PWM_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009b2:	f7ff fe99 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009b6:	4803      	ldr	r0, [pc, #12]	@ (80009c4 <MX_TIM2_Init+0xe8>)
 80009b8:	f000 f86c 	bl	8000a94 <HAL_TIM_MspPostInit>

}
 80009bc:	bf00      	nop
 80009be:	3738      	adds	r7, #56	@ 0x38
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000080 	.word	0x20000080

080009c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a84 <HAL_TIM_Base_MspInit+0xbc>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d114      	bne.n	8000a04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009da:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <HAL_TIM_Base_MspInit+0xc0>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009de:	4a2a      	ldr	r2, [pc, #168]	@ (8000a88 <HAL_TIM_Base_MspInit+0xc0>)
 80009e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009e6:	4b28      	ldr	r3, [pc, #160]	@ (8000a88 <HAL_TIM_Base_MspInit+0xc0>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2019      	movs	r0, #25
 80009f8:	f000 fa93 	bl	8000f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009fc:	2019      	movs	r0, #25
 80009fe:	f000 faac 	bl	8000f5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a02:	e03b      	b.n	8000a7c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a0c:	d136      	bne.n	8000a7c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <HAL_TIM_Base_MspInit+0xc0>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a12:	4a1d      	ldr	r2, [pc, #116]	@ (8000a88 <HAL_TIM_Base_MspInit+0xc0>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <HAL_TIM_Base_MspInit+0xc0>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <HAL_TIM_Base_MspInit+0xc4>)
 8000a28:	4a19      	ldr	r2, [pc, #100]	@ (8000a90 <HAL_TIM_Base_MspInit+0xc8>)
 8000a2a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <HAL_TIM_Base_MspInit+0xc4>)
 8000a2e:	2204      	movs	r2, #4
 8000a30:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a32:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <HAL_TIM_Base_MspInit+0xc4>)
 8000a34:	2210      	movs	r2, #16
 8000a36:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a38:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <HAL_TIM_Base_MspInit+0xc4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <HAL_TIM_Base_MspInit+0xc4>)
 8000a40:	2280      	movs	r2, #128	@ 0x80
 8000a42:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <HAL_TIM_Base_MspInit+0xc4>)
 8000a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a4a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <HAL_TIM_Base_MspInit+0xc4>)
 8000a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a52:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000a54:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <HAL_TIM_Base_MspInit+0xc4>)
 8000a56:	2220      	movs	r2, #32
 8000a58:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <HAL_TIM_Base_MspInit+0xc4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000a60:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <HAL_TIM_Base_MspInit+0xc4>)
 8000a62:	f000 fa95 	bl	8000f90 <HAL_DMA_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_TIM_Base_MspInit+0xa8>
      Error_Handler();
 8000a6c:	f7ff fe3c 	bl	80006e8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a06      	ldr	r2, [pc, #24]	@ (8000a8c <HAL_TIM_Base_MspInit+0xc4>)
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a76:	4a05      	ldr	r2, [pc, #20]	@ (8000a8c <HAL_TIM_Base_MspInit+0xc4>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40012c00 	.word	0x40012c00
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	200000cc 	.word	0x200000cc
 8000a90:	40020058 	.word	0x40020058

08000a94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ab4:	d11c      	bne.n	8000af0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <HAL_TIM_MspPostInit+0x64>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	4a0f      	ldr	r2, [pc, #60]	@ (8000af8 <HAL_TIM_MspPostInit+0x64>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <HAL_TIM_MspPostInit+0x64>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = lt_bea_Pin;
 8000ace:	2320      	movs	r3, #32
 8000ad0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(lt_bea_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aec:	f000 fc48 	bl	8001380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40021000 	.word	0x40021000

08000afc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <MX_USART2_UART_Init+0x58>)
 8000b02:	4a15      	ldr	r2, [pc, #84]	@ (8000b58 <MX_USART2_UART_Init+0x5c>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <MX_USART2_UART_Init+0x58>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_USART2_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_USART2_UART_Init+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_USART2_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_USART2_UART_Init+0x58>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <MX_USART2_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_USART2_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <MX_USART2_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_USART2_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_USART2_UART_Init+0x58>)
 8000b40:	f003 fa6e 	bl	8004020 <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b4a:	f7ff fdcd 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000114 	.word	0x20000114
 8000b58:	40004400 	.word	0x40004400

08000b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b09e      	sub	sp, #120	@ 0x78
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	2254      	movs	r2, #84	@ 0x54
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f003 fee4 	bl	800494a <memset>
  if(uartHandle->Instance==USART2)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a28      	ldr	r2, [pc, #160]	@ (8000c28 <HAL_UART_MspInit+0xcc>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d148      	bne.n	8000c1e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fc1f 	bl	80023dc <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ba4:	f7ff fda0 	bl	80006e8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba8:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <HAL_UART_MspInit+0xd0>)
 8000baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bac:	4a1f      	ldr	r2, [pc, #124]	@ (8000c2c <HAL_UART_MspInit+0xd0>)
 8000bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <HAL_UART_MspInit+0xd0>)
 8000bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <HAL_UART_MspInit+0xd0>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc4:	4a19      	ldr	r2, [pc, #100]	@ (8000c2c <HAL_UART_MspInit+0xd0>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <HAL_UART_MspInit+0xd0>)
 8000bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be8:	2307      	movs	r3, #7
 8000bea:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf6:	f000 fbc3 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bfe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1a:	f000 fbb1 	bl	8001380 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3778      	adds	r7, #120	@ 0x78
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40004400 	.word	0x40004400
 8000c2c:	40021000 	.word	0x40021000

08000c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c34:	f7ff fdec 	bl	8000810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3a:	490d      	ldr	r1, [pc, #52]	@ (8000c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c74 <LoopForever+0xe>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c50:	4c0a      	ldr	r4, [pc, #40]	@ (8000c7c <LoopForever+0x16>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f003 fe7d 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c62:	f7ff fc93 	bl	800058c <main>

08000c66 <LoopForever>:

LoopForever:
    b LoopForever
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c68:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c74:	08005a14 	.word	0x08005a14
  ldr r2, =_sbss
 8000c78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c7c:	200001a0 	.word	0x200001a0

08000c80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC1_IRQHandler>

08000c82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f93d 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f80e 	bl	8000cb4 <HAL_InitTick>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	e001      	b.n	8000ca8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca4:	f7ff fd4c 	bl	8000740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <HAL_InitTick+0x6c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d023      	beq.n	8000d10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cc8:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <HAL_InitTick+0x70>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <HAL_InitTick+0x6c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f949 	bl	8000f76 <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10f      	bne.n	8000d0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d809      	bhi.n	8000d04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f913 	bl	8000f22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_InitTick+0x74>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e007      	b.n	8000d14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	e004      	b.n	8000d14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	e001      	b.n	8000d14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	2000019c 	.word	0x2000019c

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	2000019c 	.word	0x2000019c

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4907      	ldr	r1, [pc, #28]	@ (8000e08 <__NVIC_EnableIRQ+0x38>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	@ (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	@ (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	@ 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed8:	d301      	bcc.n	8000ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <SysTick_Config+0x40>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f7ff ff8e 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <SysTick_Config+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <SysTick_Config+0x40>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff29 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff3e 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff8e 	bl	8000e60 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5d 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff31 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffa2 	bl	8000ec8 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e098      	b.n	80010d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80010e0 <HAL_DMA_Init+0x150>)
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d80f      	bhi.n	8000fce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80010e4 <HAL_DMA_Init+0x154>)
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80010e8 <HAL_DMA_Init+0x158>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	009a      	lsls	r2, r3, #2
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a48      	ldr	r2, [pc, #288]	@ (80010ec <HAL_DMA_Init+0x15c>)
 8000fca:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fcc:	e00e      	b.n	8000fec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b46      	ldr	r3, [pc, #280]	@ (80010f0 <HAL_DMA_Init+0x160>)
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a43      	ldr	r2, [pc, #268]	@ (80010e8 <HAL_DMA_Init+0x158>)
 8000fda:	fba2 2303 	umull	r2, r3, r2, r3
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	009a      	lsls	r2, r3, #2
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a42      	ldr	r2, [pc, #264]	@ (80010f4 <HAL_DMA_Init+0x164>)
 8000fea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2202      	movs	r2, #2
 8000ff0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001006:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800101c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001046:	d039      	beq.n	80010bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	4a27      	ldr	r2, [pc, #156]	@ (80010ec <HAL_DMA_Init+0x15c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d11a      	bne.n	8001088 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001052:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <HAL_DMA_Init+0x168>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	f003 031c 	and.w	r3, r3, #28
 800105e:	210f      	movs	r1, #15
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	4924      	ldr	r1, [pc, #144]	@ (80010f8 <HAL_DMA_Init+0x168>)
 8001068:	4013      	ands	r3, r2
 800106a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800106c:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <HAL_DMA_Init+0x168>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6859      	ldr	r1, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001078:	f003 031c 	and.w	r3, r3, #28
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	491d      	ldr	r1, [pc, #116]	@ (80010f8 <HAL_DMA_Init+0x168>)
 8001082:	4313      	orrs	r3, r2
 8001084:	600b      	str	r3, [r1, #0]
 8001086:	e019      	b.n	80010bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_DMA_Init+0x16c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001090:	f003 031c 	and.w	r3, r3, #28
 8001094:	210f      	movs	r1, #15
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	4917      	ldr	r1, [pc, #92]	@ (80010fc <HAL_DMA_Init+0x16c>)
 800109e:	4013      	ands	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80010a2:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <HAL_DMA_Init+0x16c>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6859      	ldr	r1, [r3, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	f003 031c 	and.w	r3, r3, #28
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	4911      	ldr	r1, [pc, #68]	@ (80010fc <HAL_DMA_Init+0x16c>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40020407 	.word	0x40020407
 80010e4:	bffdfff8 	.word	0xbffdfff8
 80010e8:	cccccccd 	.word	0xcccccccd
 80010ec:	40020000 	.word	0x40020000
 80010f0:	bffdfbf8 	.word	0xbffdfbf8
 80010f4:	40020400 	.word	0x40020400
 80010f8:	400200a8 	.word	0x400200a8
 80010fc:	400204a8 	.word	0x400204a8

08001100 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001118:	2b01      	cmp	r3, #1
 800111a:	d101      	bne.n	8001120 <HAL_DMA_Start_IT+0x20>
 800111c:	2302      	movs	r3, #2
 800111e:	e04b      	b.n	80011b8 <HAL_DMA_Start_IT+0xb8>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d13a      	bne.n	80011aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2202      	movs	r2, #2
 8001138:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2200      	movs	r2, #0
 8001140:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0201 	bic.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 f8e0 	bl	800131e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	2b00      	cmp	r3, #0
 8001164:	d008      	beq.n	8001178 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 020e 	orr.w	r2, r2, #14
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e00f      	b.n	8001198 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0204 	bic.w	r2, r2, #4
 8001186:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 020a 	orr.w	r2, r2, #10
 8001196:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0201 	orr.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e005      	b.n	80011b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80011b2:	2302      	movs	r3, #2
 80011b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011dc:	f003 031c 	and.w	r3, r3, #28
 80011e0:	2204      	movs	r2, #4
 80011e2:	409a      	lsls	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d026      	beq.n	800123a <HAL_DMA_IRQHandler+0x7a>
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d021      	beq.n	800123a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0320 	and.w	r3, r3, #32
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0204 	bic.w	r2, r2, #4
 8001212:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001218:	f003 021c 	and.w	r2, r3, #28
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	2104      	movs	r1, #4
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122c:	2b00      	cmp	r3, #0
 800122e:	d071      	beq.n	8001314 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001238:	e06c      	b.n	8001314 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	f003 031c 	and.w	r3, r3, #28
 8001242:	2202      	movs	r2, #2
 8001244:	409a      	lsls	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d02e      	beq.n	80012ac <HAL_DMA_IRQHandler+0xec>
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d029      	beq.n	80012ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10b      	bne.n	800127e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 020a 	bic.w	r2, r2, #10
 8001274:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	f003 021c 	and.w	r2, r3, #28
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	2102      	movs	r1, #2
 800128c:	fa01 f202 	lsl.w	r2, r1, r2
 8001290:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d038      	beq.n	8001314 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80012aa:	e033      	b.n	8001314 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b0:	f003 031c 	and.w	r3, r3, #28
 80012b4:	2208      	movs	r2, #8
 80012b6:	409a      	lsls	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d02a      	beq.n	8001316 <HAL_DMA_IRQHandler+0x156>
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d025      	beq.n	8001316 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 020e 	bic.w	r2, r2, #14
 80012d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f003 021c 	and.w	r2, r3, #28
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001308:	2b00      	cmp	r3, #0
 800130a:	d004      	beq.n	8001316 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001314:	bf00      	nop
 8001316:	bf00      	nop
}
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800131e:	b480      	push	{r7}
 8001320:	b085      	sub	sp, #20
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001330:	f003 021c 	and.w	r2, r3, #28
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	2101      	movs	r1, #1
 800133a:	fa01 f202 	lsl.w	r2, r1, r2
 800133e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b10      	cmp	r3, #16
 800134e:	d108      	bne.n	8001362 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001360:	e007      	b.n	8001372 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	60da      	str	r2, [r3, #12]
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138e:	e148      	b.n	8001622 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 813a 	beq.w	800161c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d005      	beq.n	80013c0 <HAL_GPIO_Init+0x40>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d130      	bne.n	8001422 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013f6:	2201      	movs	r2, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	f003 0201 	and.w	r2, r3, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b03      	cmp	r3, #3
 800142c:	d017      	beq.n	800145e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d123      	bne.n	80014b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	08da      	lsrs	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	6939      	ldr	r1, [r7, #16]
 80014ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0203 	and.w	r2, r3, #3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8094 	beq.w	800161c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f4:	4b52      	ldr	r3, [pc, #328]	@ (8001640 <HAL_GPIO_Init+0x2c0>)
 80014f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f8:	4a51      	ldr	r2, [pc, #324]	@ (8001640 <HAL_GPIO_Init+0x2c0>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001500:	4b4f      	ldr	r3, [pc, #316]	@ (8001640 <HAL_GPIO_Init+0x2c0>)
 8001502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800150c:	4a4d      	ldr	r2, [pc, #308]	@ (8001644 <HAL_GPIO_Init+0x2c4>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001536:	d00d      	beq.n	8001554 <HAL_GPIO_Init+0x1d4>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a43      	ldr	r2, [pc, #268]	@ (8001648 <HAL_GPIO_Init+0x2c8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x1d0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a42      	ldr	r2, [pc, #264]	@ (800164c <HAL_GPIO_Init+0x2cc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_GPIO_Init+0x1cc>
 8001548:	2302      	movs	r3, #2
 800154a:	e004      	b.n	8001556 <HAL_GPIO_Init+0x1d6>
 800154c:	2307      	movs	r3, #7
 800154e:	e002      	b.n	8001556 <HAL_GPIO_Init+0x1d6>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_GPIO_Init+0x1d6>
 8001554:	2300      	movs	r3, #0
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	f002 0203 	and.w	r2, r2, #3
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	4093      	lsls	r3, r2
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001566:	4937      	ldr	r1, [pc, #220]	@ (8001644 <HAL_GPIO_Init+0x2c4>)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001574:	4b36      	ldr	r3, [pc, #216]	@ (8001650 <HAL_GPIO_Init+0x2d0>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001598:	4a2d      	ldr	r2, [pc, #180]	@ (8001650 <HAL_GPIO_Init+0x2d0>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800159e:	4b2c      	ldr	r3, [pc, #176]	@ (8001650 <HAL_GPIO_Init+0x2d0>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015c2:	4a23      	ldr	r2, [pc, #140]	@ (8001650 <HAL_GPIO_Init+0x2d0>)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015c8:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <HAL_GPIO_Init+0x2d0>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ec:	4a18      	ldr	r2, [pc, #96]	@ (8001650 <HAL_GPIO_Init+0x2d0>)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015f2:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <HAL_GPIO_Init+0x2d0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001616:	4a0e      	ldr	r2, [pc, #56]	@ (8001650 <HAL_GPIO_Init+0x2d0>)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa22 f303 	lsr.w	r3, r2, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	f47f aeaf 	bne.w	8001390 <HAL_GPIO_Init+0x10>
  }
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40021000 	.word	0x40021000
 8001644:	40010000 	.word	0x40010000
 8001648:	48000400 	.word	0x48000400
 800164c:	48000800 	.word	0x48000800
 8001650:	40010400 	.word	0x40010400

08001654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
 8001660:	4613      	mov	r3, r2
 8001662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001664:	787b      	ldrb	r3, [r7, #1]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001670:	e002      	b.n	8001678 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001692:	6013      	str	r3, [r2, #0]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40007000 	.word	0x40007000

080016a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016a8:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <HAL_PWREx_GetVoltageRange+0x18>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40007000 	.word	0x40007000

080016c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016ce:	d130      	bne.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d0:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016dc:	d038      	beq.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016de:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2232      	movs	r2, #50	@ 0x32
 80016f4:	fb02 f303 	mul.w	r3, r2, r3
 80016f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001768 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0c9b      	lsrs	r3, r3, #18
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001704:	e002      	b.n	800170c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3b01      	subs	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001718:	d102      	bne.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x60>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f2      	bne.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800172c:	d110      	bne.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e00f      	b.n	8001752 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800173a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800173e:	d007      	beq.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001740:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001748:	4a05      	ldr	r2, [pc, #20]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800174e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40007000 	.word	0x40007000
 8001764:	20000000 	.word	0x20000000
 8001768:	431bde83 	.word	0x431bde83

0800176c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	f000 bc02 	b.w	8001f84 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001780:	4b96      	ldr	r3, [pc, #600]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800178a:	4b94      	ldr	r3, [pc, #592]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80e4 	beq.w	800196a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <HAL_RCC_OscConfig+0x4c>
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	f040 808b 	bne.w	80018c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	f040 8087 	bne.w	80018c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b8:	4b88      	ldr	r3, [pc, #544]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_OscConfig+0x64>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e3d9      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1a      	ldr	r2, [r3, #32]
 80017d4:	4b81      	ldr	r3, [pc, #516]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <HAL_RCC_OscConfig+0x7e>
 80017e0:	4b7e      	ldr	r3, [pc, #504]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017e8:	e005      	b.n	80017f6 <HAL_RCC_OscConfig+0x8a>
 80017ea:	4b7c      	ldr	r3, [pc, #496]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d223      	bcs.n	8001842 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fd8c 	bl	800231c <RCC_SetFlashLatencyFromMSIRange>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e3ba      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800180e:	4b73      	ldr	r3, [pc, #460]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a72      	ldr	r2, [pc, #456]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b70      	ldr	r3, [pc, #448]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	496d      	ldr	r1, [pc, #436]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182c:	4b6b      	ldr	r3, [pc, #428]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	4968      	ldr	r1, [pc, #416]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
 8001840:	e025      	b.n	800188e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001842:	4b66      	ldr	r3, [pc, #408]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a65      	ldr	r2, [pc, #404]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b63      	ldr	r3, [pc, #396]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4960      	ldr	r1, [pc, #384]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001860:	4b5e      	ldr	r3, [pc, #376]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	495b      	ldr	r1, [pc, #364]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fd4c 	bl	800231c <RCC_SetFlashLatencyFromMSIRange>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e37a      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800188e:	f000 fc81 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8001892:	4602      	mov	r2, r0
 8001894:	4b51      	ldr	r3, [pc, #324]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	4950      	ldr	r1, [pc, #320]	@ (80019e0 <HAL_RCC_OscConfig+0x274>)
 80018a0:	5ccb      	ldrb	r3, [r1, r3]
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	fa22 f303 	lsr.w	r3, r2, r3
 80018aa:	4a4e      	ldr	r2, [pc, #312]	@ (80019e4 <HAL_RCC_OscConfig+0x278>)
 80018ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018ae:	4b4e      	ldr	r3, [pc, #312]	@ (80019e8 <HAL_RCC_OscConfig+0x27c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff f9fe 	bl	8000cb4 <HAL_InitTick>
 80018b8:	4603      	mov	r3, r0
 80018ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d052      	beq.n	8001968 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	e35e      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d032      	beq.n	8001934 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018ce:	4b43      	ldr	r3, [pc, #268]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a42      	ldr	r2, [pc, #264]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018da:	f7ff fa3b 	bl	8000d54 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018e2:	f7ff fa37 	bl	8000d54 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e347      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018f4:	4b39      	ldr	r3, [pc, #228]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001900:	4b36      	ldr	r3, [pc, #216]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a35      	ldr	r2, [pc, #212]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b33      	ldr	r3, [pc, #204]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4930      	ldr	r1, [pc, #192]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800191e:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	492b      	ldr	r1, [pc, #172]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
 8001932:	e01a      	b.n	800196a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001934:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001940:	f7ff fa08 	bl	8000d54 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001948:	f7ff fa04 	bl	8000d54 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e314      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800195a:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x1dc>
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001968:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d073      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x21c>
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d10e      	bne.n	80019a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d10b      	bne.n	80019a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d063      	beq.n	8001a5c <HAL_RCC_OscConfig+0x2f0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d15f      	bne.n	8001a5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e2f1      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019a8:	d106      	bne.n	80019b8 <HAL_RCC_OscConfig+0x24c>
 80019aa:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e025      	b.n	8001a04 <HAL_RCC_OscConfig+0x298>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019c0:	d114      	bne.n	80019ec <HAL_RCC_OscConfig+0x280>
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b03      	ldr	r3, [pc, #12]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a02      	ldr	r2, [pc, #8]	@ (80019dc <HAL_RCC_OscConfig+0x270>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e013      	b.n	8001a04 <HAL_RCC_OscConfig+0x298>
 80019dc:	40021000 	.word	0x40021000
 80019e0:	080059bc 	.word	0x080059bc
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000004 	.word	0x20000004
 80019ec:	4ba0      	ldr	r3, [pc, #640]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a9f      	ldr	r2, [pc, #636]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a9c      	ldr	r2, [pc, #624]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f9a2 	bl	8000d54 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff f99e 	bl	8000d54 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	@ 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e2ae      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a26:	4b92      	ldr	r3, [pc, #584]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x2a8>
 8001a32:	e014      	b.n	8001a5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f98e 	bl	8000d54 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f98a 	bl	8000d54 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	@ 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e29a      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a4e:	4b88      	ldr	r3, [pc, #544]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2d0>
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d060      	beq.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_OscConfig+0x310>
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	d119      	bne.n	8001aaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d116      	bne.n	8001aaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a7c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_OscConfig+0x328>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e277      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	4b76      	ldr	r3, [pc, #472]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	4973      	ldr	r1, [pc, #460]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa8:	e040      	b.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d023      	beq.n	8001afa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab2:	4b6f      	ldr	r3, [pc, #444]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6e      	ldr	r2, [pc, #440]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7ff f949 	bl	8000d54 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac6:	f7ff f945 	bl	8000d54 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e255      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad8:	4b65      	ldr	r3, [pc, #404]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae4:	4b62      	ldr	r3, [pc, #392]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	061b      	lsls	r3, r3, #24
 8001af2:	495f      	ldr	r1, [pc, #380]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
 8001af8:	e018      	b.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afa:	4b5d      	ldr	r3, [pc, #372]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a5c      	ldr	r2, [pc, #368]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff f925 	bl	8000d54 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f921 	bl	8000d54 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e231      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b20:	4b53      	ldr	r3, [pc, #332]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d03c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b40:	4b4b      	ldr	r3, [pc, #300]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b46:	4a4a      	ldr	r2, [pc, #296]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff f900 	bl	8000d54 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b58:	f7ff f8fc 	bl	8000d54 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e20c      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b6a:	4b41      	ldr	r3, [pc, #260]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0ef      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3ec>
 8001b78:	e01b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b80:	4a3b      	ldr	r2, [pc, #236]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7ff f8e3 	bl	8000d54 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b92:	f7ff f8df 	bl	8000d54 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e1ef      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba4:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ef      	bne.n	8001b92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80a6 	beq.w	8001d0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10d      	bne.n	8001bec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd0:	4b27      	ldr	r3, [pc, #156]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	4a26      	ldr	r2, [pc, #152]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bdc:	4b24      	ldr	r3, [pc, #144]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be8:	2301      	movs	r3, #1
 8001bea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bec:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <HAL_RCC_OscConfig+0x508>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d118      	bne.n	8001c2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <HAL_RCC_OscConfig+0x508>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c74 <HAL_RCC_OscConfig+0x508>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c04:	f7ff f8a6 	bl	8000d54 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0c:	f7ff f8a2 	bl	8000d54 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1b2      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <HAL_RCC_OscConfig+0x508>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d108      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4d8>
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c38:	4a0d      	ldr	r2, [pc, #52]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c42:	e029      	b.n	8001c98 <HAL_RCC_OscConfig+0x52c>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b05      	cmp	r3, #5
 8001c4a:	d115      	bne.n	8001c78 <HAL_RCC_OscConfig+0x50c>
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c52:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c5c:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c62:	4a03      	ldr	r2, [pc, #12]	@ (8001c70 <HAL_RCC_OscConfig+0x504>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c6c:	e014      	b.n	8001c98 <HAL_RCC_OscConfig+0x52c>
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40007000 	.word	0x40007000
 8001c78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c7e:	4a99      	ldr	r2, [pc, #612]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c88:	4b96      	ldr	r3, [pc, #600]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8e:	4a95      	ldr	r2, [pc, #596]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d016      	beq.n	8001cce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff f858 	bl	8000d54 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f854 	bl	8000d54 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e162      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cbe:	4b89      	ldr	r3, [pc, #548]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0ed      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x53c>
 8001ccc:	e015      	b.n	8001cfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cce:	f7ff f841 	bl	8000d54 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd4:	e00a      	b.n	8001cec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7ff f83d 	bl	8000d54 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e14b      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cec:	4b7d      	ldr	r3, [pc, #500]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ed      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cfa:	7ffb      	ldrb	r3, [r7, #31]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d105      	bne.n	8001d0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d00:	4b78      	ldr	r3, [pc, #480]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d04:	4a77      	ldr	r2, [pc, #476]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d03c      	beq.n	8001d92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d20:	4b70      	ldr	r3, [pc, #448]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d26:	4a6f      	ldr	r2, [pc, #444]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff f810 	bl	8000d54 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d38:	f7ff f80c 	bl	8000d54 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e11c      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d4a:	4b66      	ldr	r3, [pc, #408]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ef      	beq.n	8001d38 <HAL_RCC_OscConfig+0x5cc>
 8001d58:	e01b      	b.n	8001d92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d5a:	4b62      	ldr	r3, [pc, #392]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d60:	4a60      	ldr	r2, [pc, #384]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7fe fff3 	bl	8000d54 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d72:	f7fe ffef 	bl	8000d54 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0ff      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d84:	4b57      	ldr	r3, [pc, #348]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1ef      	bne.n	8001d72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80f3 	beq.w	8001f82 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	f040 80c9 	bne.w	8001f38 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001da6:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 0203 	and.w	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d12c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d123      	bne.n	8001e14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d11b      	bne.n	8001e14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d113      	bne.n	8001e14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d109      	bne.n	8001e14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	085b      	lsrs	r3, r3, #1
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d06b      	beq.n	8001eec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d062      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e1a:	4b32      	ldr	r3, [pc, #200]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0ac      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001e30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e36:	f7fe ff8d 	bl	8000d54 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7fe ff89 	bl	8000d54 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e099      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e50:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <HAL_RCC_OscConfig+0x77c>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e6c:	3a01      	subs	r2, #1
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	4311      	orrs	r1, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e76:	0212      	lsls	r2, r2, #8
 8001e78:	4311      	orrs	r1, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e7e:	0852      	lsrs	r2, r2, #1
 8001e80:	3a01      	subs	r2, #1
 8001e82:	0552      	lsls	r2, r2, #21
 8001e84:	4311      	orrs	r1, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e8a:	0852      	lsrs	r2, r2, #1
 8001e8c:	3a01      	subs	r2, #1
 8001e8e:	0652      	lsls	r2, r2, #25
 8001e90:	4311      	orrs	r1, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e96:	06d2      	lsls	r2, r2, #27
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	4912      	ldr	r1, [pc, #72]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001ea6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eb8:	f7fe ff4c 	bl	8000d54 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe ff48 	bl	8000d54 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e058      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed2:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <HAL_RCC_OscConfig+0x778>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ede:	e050      	b.n	8001f82 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e04f      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eec:	4b27      	ldr	r3, [pc, #156]	@ (8001f8c <HAL_RCC_OscConfig+0x820>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d144      	bne.n	8001f82 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ef8:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <HAL_RCC_OscConfig+0x820>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a23      	ldr	r2, [pc, #140]	@ (8001f8c <HAL_RCC_OscConfig+0x820>)
 8001efe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f04:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <HAL_RCC_OscConfig+0x820>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4a20      	ldr	r2, [pc, #128]	@ (8001f8c <HAL_RCC_OscConfig+0x820>)
 8001f0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f10:	f7fe ff20 	bl	8000d54 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7fe ff1c 	bl	8000d54 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e02c      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2a:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <HAL_RCC_OscConfig+0x820>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x7ac>
 8001f36:	e024      	b.n	8001f82 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d01f      	beq.n	8001f7e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <HAL_RCC_OscConfig+0x820>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <HAL_RCC_OscConfig+0x820>)
 8001f44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7fe ff03 	bl	8000d54 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f52:	f7fe feff 	bl	8000d54 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e00f      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f64:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <HAL_RCC_OscConfig+0x820>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f0      	bne.n	8001f52 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_RCC_OscConfig+0x820>)
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	4905      	ldr	r1, [pc, #20]	@ (8001f8c <HAL_RCC_OscConfig+0x820>)
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_RCC_OscConfig+0x824>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
 8001f7c:	e001      	b.n	8001f82 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	feeefffc 	.word	0xfeeefffc

08001f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0e7      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b75      	ldr	r3, [pc, #468]	@ (8002180 <HAL_RCC_ClockConfig+0x1ec>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d910      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b72      	ldr	r3, [pc, #456]	@ (8002180 <HAL_RCC_ClockConfig+0x1ec>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4970      	ldr	r1, [pc, #448]	@ (8002180 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8002180 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0cf      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4b66      	ldr	r3, [pc, #408]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d908      	bls.n	8002006 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff4:	4b63      	ldr	r3, [pc, #396]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4960      	ldr	r1, [pc, #384]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d04c      	beq.n	80020ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201a:	4b5a      	ldr	r3, [pc, #360]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d121      	bne.n	800206a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0a6      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002032:	4b54      	ldr	r3, [pc, #336]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d115      	bne.n	800206a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e09a      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800204a:	4b4e      	ldr	r3, [pc, #312]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e08e      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205a:	4b4a      	ldr	r3, [pc, #296]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e086      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800206a:	4b46      	ldr	r3, [pc, #280]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f023 0203 	bic.w	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4943      	ldr	r1, [pc, #268]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	4313      	orrs	r3, r2
 800207a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800207c:	f7fe fe6a 	bl	8000d54 <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	e00a      	b.n	800209a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002084:	f7fe fe66 	bl	8000d54 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e06e      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209a:	4b3a      	ldr	r3, [pc, #232]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 020c 	and.w	r2, r3, #12
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d1eb      	bne.n	8002084 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	4b31      	ldr	r3, [pc, #196]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d208      	bcs.n	80020da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	492b      	ldr	r1, [pc, #172]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020da:	4b29      	ldr	r3, [pc, #164]	@ (8002180 <HAL_RCC_ClockConfig+0x1ec>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d210      	bcs.n	800210a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <HAL_RCC_ClockConfig+0x1ec>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f023 0207 	bic.w	r2, r3, #7
 80020f0:	4923      	ldr	r1, [pc, #140]	@ (8002180 <HAL_RCC_ClockConfig+0x1ec>)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f8:	4b21      	ldr	r3, [pc, #132]	@ (8002180 <HAL_RCC_ClockConfig+0x1ec>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e036      	b.n	8002178 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002116:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	4918      	ldr	r1, [pc, #96]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 8002124:	4313      	orrs	r3, r2
 8002126:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d009      	beq.n	8002148 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002134:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4910      	ldr	r1, [pc, #64]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002148:	f000 f824 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <HAL_RCC_ClockConfig+0x1f0>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	490b      	ldr	r1, [pc, #44]	@ (8002188 <HAL_RCC_ClockConfig+0x1f4>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	4a09      	ldr	r2, [pc, #36]	@ (800218c <HAL_RCC_ClockConfig+0x1f8>)
 8002166:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <HAL_RCC_ClockConfig+0x1fc>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fda1 	bl	8000cb4 <HAL_InitTick>
 8002172:	4603      	mov	r3, r0
 8002174:	72fb      	strb	r3, [r7, #11]

  return status;
 8002176:	7afb      	ldrb	r3, [r7, #11]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40022000 	.word	0x40022000
 8002184:	40021000 	.word	0x40021000
 8002188:	080059bc 	.word	0x080059bc
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004

08002194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	@ 0x24
 8002198:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a2:	4b3e      	ldr	r3, [pc, #248]	@ (800229c <HAL_RCC_GetSysClockFreq+0x108>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ac:	4b3b      	ldr	r3, [pc, #236]	@ (800229c <HAL_RCC_GetSysClockFreq+0x108>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x34>
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d121      	bne.n	8002206 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d11e      	bne.n	8002206 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021c8:	4b34      	ldr	r3, [pc, #208]	@ (800229c <HAL_RCC_GetSysClockFreq+0x108>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021d4:	4b31      	ldr	r3, [pc, #196]	@ (800229c <HAL_RCC_GetSysClockFreq+0x108>)
 80021d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	e005      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021e4:	4b2d      	ldr	r3, [pc, #180]	@ (800229c <HAL_RCC_GetSysClockFreq+0x108>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021f0:	4a2b      	ldr	r2, [pc, #172]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10d      	bne.n	800221c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002204:	e00a      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d102      	bne.n	8002212 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800220c:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	e004      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d101      	bne.n	800221c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800221a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b0c      	cmp	r3, #12
 8002220:	d134      	bne.n	800228c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002222:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <HAL_RCC_GetSysClockFreq+0x108>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0xa6>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d003      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0xac>
 8002238:	e005      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800223a:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800223c:	617b      	str	r3, [r7, #20]
      break;
 800223e:	e005      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002240:	4b19      	ldr	r3, [pc, #100]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002242:	617b      	str	r3, [r7, #20]
      break;
 8002244:	e002      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	617b      	str	r3, [r7, #20]
      break;
 800224a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800224c:	4b13      	ldr	r3, [pc, #76]	@ (800229c <HAL_RCC_GetSysClockFreq+0x108>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	3301      	adds	r3, #1
 8002258:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <HAL_RCC_GetSysClockFreq+0x108>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	fb03 f202 	mul.w	r2, r3, r2
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002272:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <HAL_RCC_GetSysClockFreq+0x108>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	0e5b      	lsrs	r3, r3, #25
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	3301      	adds	r3, #1
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800228c:	69bb      	ldr	r3, [r7, #24]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	@ 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	080059d4 	.word	0x080059d4
 80022a4:	00f42400 	.word	0x00f42400
 80022a8:	007a1200 	.word	0x007a1200

080022ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000000 	.word	0x20000000

080022c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022c8:	f7ff fff0 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	4904      	ldr	r1, [pc, #16]	@ (80022ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	080059cc 	.word	0x080059cc

080022f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022f4:	f7ff ffda 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	0adb      	lsrs	r3, r3, #11
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4904      	ldr	r1, [pc, #16]	@ (8002318 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002306:	5ccb      	ldrb	r3, [r1, r3]
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	080059cc 	.word	0x080059cc

0800231c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002328:	4b2a      	ldr	r3, [pc, #168]	@ (80023d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002334:	f7ff f9b6 	bl	80016a4 <HAL_PWREx_GetVoltageRange>
 8002338:	6178      	str	r0, [r7, #20]
 800233a:	e014      	b.n	8002366 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800233c:	4b25      	ldr	r3, [pc, #148]	@ (80023d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	4a24      	ldr	r2, [pc, #144]	@ (80023d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002346:	6593      	str	r3, [r2, #88]	@ 0x58
 8002348:	4b22      	ldr	r3, [pc, #136]	@ (80023d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002354:	f7ff f9a6 	bl	80016a4 <HAL_PWREx_GetVoltageRange>
 8002358:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800235a:	4b1e      	ldr	r3, [pc, #120]	@ (80023d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235e:	4a1d      	ldr	r2, [pc, #116]	@ (80023d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002364:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800236c:	d10b      	bne.n	8002386 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b80      	cmp	r3, #128	@ 0x80
 8002372:	d919      	bls.n	80023a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2ba0      	cmp	r3, #160	@ 0xa0
 8002378:	d902      	bls.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800237a:	2302      	movs	r3, #2
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	e013      	b.n	80023a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002380:	2301      	movs	r3, #1
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	e010      	b.n	80023a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b80      	cmp	r3, #128	@ 0x80
 800238a:	d902      	bls.n	8002392 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800238c:	2303      	movs	r3, #3
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	e00a      	b.n	80023a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b80      	cmp	r3, #128	@ 0x80
 8002396:	d102      	bne.n	800239e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002398:	2302      	movs	r3, #2
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	e004      	b.n	80023a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b70      	cmp	r3, #112	@ 0x70
 80023a2:	d101      	bne.n	80023a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023a4:	2301      	movs	r3, #1
 80023a6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023a8:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 0207 	bic.w	r2, r3, #7
 80023b0:	4909      	ldr	r1, [pc, #36]	@ (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023b8:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d001      	beq.n	80023ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40022000 	.word	0x40022000

080023dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023e4:	2300      	movs	r3, #0
 80023e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023e8:	2300      	movs	r3, #0
 80023ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d031      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002400:	d01a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002402:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002406:	d814      	bhi.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800240c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002410:	d10f      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002412:	4b5d      	ldr	r3, [pc, #372]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	4a5c      	ldr	r2, [pc, #368]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800241e:	e00c      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3304      	adds	r3, #4
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f9de 	bl	80027e8 <RCCEx_PLLSAI1_Config>
 800242c:	4603      	mov	r3, r0
 800242e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002430:	e003      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	74fb      	strb	r3, [r7, #19]
      break;
 8002436:	e000      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002440:	4b51      	ldr	r3, [pc, #324]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002446:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244e:	494e      	ldr	r1, [pc, #312]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002456:	e001      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 809e 	beq.w	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800246e:	4b46      	ldr	r3, [pc, #280]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800247e:	2300      	movs	r3, #0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00d      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002484:	4b40      	ldr	r3, [pc, #256]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	4a3f      	ldr	r2, [pc, #252]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800248a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800248e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002490:	4b3d      	ldr	r3, [pc, #244]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249c:	2301      	movs	r3, #1
 800249e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024a0:	4b3a      	ldr	r3, [pc, #232]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a39      	ldr	r2, [pc, #228]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024ac:	f7fe fc52 	bl	8000d54 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024b2:	e009      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b4:	f7fe fc4e 	bl	8000d54 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d902      	bls.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	74fb      	strb	r3, [r7, #19]
        break;
 80024c6:	e005      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024c8:	4b30      	ldr	r3, [pc, #192]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ef      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d15a      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024da:	4b2b      	ldr	r3, [pc, #172]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01e      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d019      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024f6:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002500:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002502:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002508:	4a1f      	ldr	r2, [pc, #124]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002512:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002518:	4a1b      	ldr	r2, [pc, #108]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800251a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800251e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002522:	4a19      	ldr	r2, [pc, #100]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d016      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fc0e 	bl	8000d54 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800253a:	e00b      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7fe fc0a 	bl	8000d54 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d902      	bls.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	74fb      	strb	r3, [r7, #19]
            break;
 8002552:	e006      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002554:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0ec      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002568:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002576:	4904      	ldr	r1, [pc, #16]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800257e:	e009      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	74bb      	strb	r3, [r7, #18]
 8002584:	e006      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002594:	7c7b      	ldrb	r3, [r7, #17]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d105      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259a:	4b8a      	ldr	r3, [pc, #552]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	4a89      	ldr	r2, [pc, #548]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025b2:	4b84      	ldr	r3, [pc, #528]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b8:	f023 0203 	bic.w	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4980      	ldr	r1, [pc, #512]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025d4:	4b7b      	ldr	r3, [pc, #492]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025da:	f023 020c 	bic.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	4978      	ldr	r1, [pc, #480]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025f6:	4b73      	ldr	r3, [pc, #460]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002604:	496f      	ldr	r1, [pc, #444]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002618:	4b6a      	ldr	r3, [pc, #424]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002626:	4967      	ldr	r1, [pc, #412]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800263a:	4b62      	ldr	r3, [pc, #392]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002640:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002648:	495e      	ldr	r1, [pc, #376]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800265c:	4b59      	ldr	r3, [pc, #356]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002662:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266a:	4956      	ldr	r1, [pc, #344]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800267e:	4b51      	ldr	r3, [pc, #324]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002684:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	494d      	ldr	r1, [pc, #308]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d028      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026a0:	4b48      	ldr	r3, [pc, #288]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	4945      	ldr	r1, [pc, #276]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026be:	d106      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c0:	4b40      	ldr	r3, [pc, #256]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a3f      	ldr	r2, [pc, #252]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026ca:	60d3      	str	r3, [r2, #12]
 80026cc:	e011      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3304      	adds	r3, #4
 80026dc:	2101      	movs	r1, #1
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f882 	bl	80027e8 <RCCEx_PLLSAI1_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d028      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026fe:	4b31      	ldr	r3, [pc, #196]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002704:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	492d      	ldr	r1, [pc, #180]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002718:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800271c:	d106      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800271e:	4b29      	ldr	r3, [pc, #164]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	4a28      	ldr	r2, [pc, #160]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002728:	60d3      	str	r3, [r2, #12]
 800272a:	e011      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002730:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002734:	d10c      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3304      	adds	r3, #4
 800273a:	2101      	movs	r1, #1
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f853 	bl	80027e8 <RCCEx_PLLSAI1_Config>
 8002742:	4603      	mov	r3, r0
 8002744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01c      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800275c:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800276a:	4916      	ldr	r1, [pc, #88]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800277a:	d10c      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3304      	adds	r3, #4
 8002780:	2102      	movs	r1, #2
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f830 	bl	80027e8 <RCCEx_PLLSAI1_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002792:	7cfb      	ldrb	r3, [r7, #19]
 8002794:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027a2:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b0:	4904      	ldr	r1, [pc, #16]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000

080027c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000

080027e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027f6:	4b74      	ldr	r3, [pc, #464]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d018      	beq.n	8002834 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002802:	4b71      	ldr	r3, [pc, #452]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0203 	and.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d10d      	bne.n	800282e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
       ||
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800281a:	4b6b      	ldr	r3, [pc, #428]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
       ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d047      	beq.n	80028be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	e044      	b.n	80028be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d018      	beq.n	800286e <RCCEx_PLLSAI1_Config+0x86>
 800283c:	2b03      	cmp	r3, #3
 800283e:	d825      	bhi.n	800288c <RCCEx_PLLSAI1_Config+0xa4>
 8002840:	2b01      	cmp	r3, #1
 8002842:	d002      	beq.n	800284a <RCCEx_PLLSAI1_Config+0x62>
 8002844:	2b02      	cmp	r3, #2
 8002846:	d009      	beq.n	800285c <RCCEx_PLLSAI1_Config+0x74>
 8002848:	e020      	b.n	800288c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800284a:	4b5f      	ldr	r3, [pc, #380]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d11d      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285a:	e01a      	b.n	8002892 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800285c:	4b5a      	ldr	r3, [pc, #360]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d116      	bne.n	8002896 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800286c:	e013      	b.n	8002896 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800286e:	4b56      	ldr	r3, [pc, #344]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10f      	bne.n	800289a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800287a:	4b53      	ldr	r3, [pc, #332]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800288a:	e006      	b.n	800289a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      break;
 8002890:	e004      	b.n	800289c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002892:	bf00      	nop
 8002894:	e002      	b.n	800289c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800289a:	bf00      	nop
    }

    if(status == HAL_OK)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028a2:	4b49      	ldr	r3, [pc, #292]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6819      	ldr	r1, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	430b      	orrs	r3, r1
 80028b8:	4943      	ldr	r1, [pc, #268]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d17c      	bne.n	80029be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028c4:	4b40      	ldr	r3, [pc, #256]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3f      	ldr	r2, [pc, #252]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d0:	f7fe fa40 	bl	8000d54 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028d6:	e009      	b.n	80028ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028d8:	f7fe fa3c 	bl	8000d54 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d902      	bls.n	80028ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	73fb      	strb	r3, [r7, #15]
        break;
 80028ea:	e005      	b.n	80028f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028ec:	4b36      	ldr	r3, [pc, #216]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ef      	bne.n	80028d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d15f      	bne.n	80029be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d110      	bne.n	8002926 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002904:	4b30      	ldr	r3, [pc, #192]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800290c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6892      	ldr	r2, [r2, #8]
 8002914:	0211      	lsls	r1, r2, #8
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68d2      	ldr	r2, [r2, #12]
 800291a:	06d2      	lsls	r2, r2, #27
 800291c:	430a      	orrs	r2, r1
 800291e:	492a      	ldr	r1, [pc, #168]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	610b      	str	r3, [r1, #16]
 8002924:	e027      	b.n	8002976 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d112      	bne.n	8002952 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800292c:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002934:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6892      	ldr	r2, [r2, #8]
 800293c:	0211      	lsls	r1, r2, #8
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6912      	ldr	r2, [r2, #16]
 8002942:	0852      	lsrs	r2, r2, #1
 8002944:	3a01      	subs	r2, #1
 8002946:	0552      	lsls	r2, r2, #21
 8002948:	430a      	orrs	r2, r1
 800294a:	491f      	ldr	r1, [pc, #124]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	610b      	str	r3, [r1, #16]
 8002950:	e011      	b.n	8002976 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002952:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800295a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6892      	ldr	r2, [r2, #8]
 8002962:	0211      	lsls	r1, r2, #8
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6952      	ldr	r2, [r2, #20]
 8002968:	0852      	lsrs	r2, r2, #1
 800296a:	3a01      	subs	r2, #1
 800296c:	0652      	lsls	r2, r2, #25
 800296e:	430a      	orrs	r2, r1
 8002970:	4915      	ldr	r1, [pc, #84]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002972:	4313      	orrs	r3, r2
 8002974:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002976:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a13      	ldr	r2, [pc, #76]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800297c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002980:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe f9e7 	bl	8000d54 <HAL_GetTick>
 8002986:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002988:	e009      	b.n	800299e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800298a:	f7fe f9e3 	bl	8000d54 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d902      	bls.n	800299e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	73fb      	strb	r3, [r7, #15]
          break;
 800299c:	e005      	b.n	80029aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800299e:	4b0a      	ldr	r3, [pc, #40]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0ef      	beq.n	800298a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029b0:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	4903      	ldr	r1, [pc, #12]	@ (80029c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000

080029cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e049      	b.n	8002a72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fd ffe8 	bl	80009c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f000 fed6 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d001      	beq.n	8002a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e03b      	b.n	8002b0c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a19      	ldr	r2, [pc, #100]	@ (8002b18 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d009      	beq.n	8002aca <HAL_TIM_Base_Start_IT+0x4e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002abe:	d004      	beq.n	8002aca <HAL_TIM_Base_Start_IT+0x4e>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a15      	ldr	r2, [pc, #84]	@ (8002b1c <HAL_TIM_Base_Start_IT+0xa0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d115      	bne.n	8002af6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	4b13      	ldr	r3, [pc, #76]	@ (8002b20 <HAL_TIM_Base_Start_IT+0xa4>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b06      	cmp	r3, #6
 8002ada:	d015      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x8c>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae2:	d011      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af4:	e008      	b.n	8002b08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e000      	b.n	8002b0a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40014000 	.word	0x40014000
 8002b20:	00010007 	.word	0x00010007

08002b24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e049      	b.n	8002bca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f841 	bl	8002bd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f000 fe2a 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e03c      	b.n	8002c8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d109      	bne.n	8002c2e <HAL_TIM_PWM_Start_DMA+0x46>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	bf0c      	ite	eq
 8002c26:	2301      	moveq	r3, #1
 8002c28:	2300      	movne	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e02f      	b.n	8002c8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d109      	bne.n	8002c48 <HAL_TIM_PWM_Start_DMA+0x60>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e022      	b.n	8002c8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d109      	bne.n	8002c62 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	bf0c      	ite	eq
 8002c5a:	2301      	moveq	r3, #1
 8002c5c:	2300      	movne	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	e015      	b.n	8002c8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d109      	bne.n	8002c7c <HAL_TIM_PWM_Start_DMA+0x94>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e008      	b.n	8002c8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	e18d      	b.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e03c      	b.n	8002d2a <HAL_TIM_PWM_Start_DMA+0x142>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d109      	bne.n	8002cca <HAL_TIM_PWM_Start_DMA+0xe2>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	bf0c      	ite	eq
 8002cc2:	2301      	moveq	r3, #1
 8002cc4:	2300      	movne	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	e02f      	b.n	8002d2a <HAL_TIM_PWM_Start_DMA+0x142>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d109      	bne.n	8002ce4 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e022      	b.n	8002d2a <HAL_TIM_PWM_Start_DMA+0x142>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d109      	bne.n	8002cfe <HAL_TIM_PWM_Start_DMA+0x116>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	bf0c      	ite	eq
 8002cf6:	2301      	moveq	r3, #1
 8002cf8:	2300      	movne	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	e015      	b.n	8002d2a <HAL_TIM_PWM_Start_DMA+0x142>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b10      	cmp	r3, #16
 8002d02:	d109      	bne.n	8002d18 <HAL_TIM_PWM_Start_DMA+0x130>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e008      	b.n	8002d2a <HAL_TIM_PWM_Start_DMA+0x142>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d034      	beq.n	8002d98 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_TIM_PWM_Start_DMA+0x152>
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e139      	b.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <HAL_TIM_PWM_Start_DMA+0x166>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d4c:	e026      	b.n	8002d9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d104      	bne.n	8002d5e <HAL_TIM_PWM_Start_DMA+0x176>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d5c:	e01e      	b.n	8002d9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d104      	bne.n	8002d6e <HAL_TIM_PWM_Start_DMA+0x186>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d6c:	e016      	b.n	8002d9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	d104      	bne.n	8002d7e <HAL_TIM_PWM_Start_DMA+0x196>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d7c:	e00e      	b.n	8002d9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d104      	bne.n	8002d8e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d8c:	e006      	b.n	8002d9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2202      	movs	r2, #2
 8002d92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d96:	e001      	b.n	8002d9c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e10a      	b.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	f200 80ae 	bhi.w	8002f00 <HAL_TIM_PWM_Start_DMA+0x318>
 8002da4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dac <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002de1 	.word	0x08002de1
 8002db0:	08002f01 	.word	0x08002f01
 8002db4:	08002f01 	.word	0x08002f01
 8002db8:	08002f01 	.word	0x08002f01
 8002dbc:	08002e29 	.word	0x08002e29
 8002dc0:	08002f01 	.word	0x08002f01
 8002dc4:	08002f01 	.word	0x08002f01
 8002dc8:	08002f01 	.word	0x08002f01
 8002dcc:	08002e71 	.word	0x08002e71
 8002dd0:	08002f01 	.word	0x08002f01
 8002dd4:	08002f01 	.word	0x08002f01
 8002dd8:	08002f01 	.word	0x08002f01
 8002ddc:	08002eb9 	.word	0x08002eb9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	4a75      	ldr	r2, [pc, #468]	@ (8002fbc <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002de6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	4a74      	ldr	r2, [pc, #464]	@ (8002fc0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002dee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	4a73      	ldr	r2, [pc, #460]	@ (8002fc4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8002df6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	3334      	adds	r3, #52	@ 0x34
 8002e04:	461a      	mov	r2, r3
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	f7fe f97a 	bl	8001100 <HAL_DMA_Start_IT>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0cd      	b.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e24:	60da      	str	r2, [r3, #12]
      break;
 8002e26:	e06e      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	4a63      	ldr	r2, [pc, #396]	@ (8002fbc <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	4a62      	ldr	r2, [pc, #392]	@ (8002fc0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002e36:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3c:	4a61      	ldr	r2, [pc, #388]	@ (8002fc4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8002e3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3338      	adds	r3, #56	@ 0x38
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	f7fe f956 	bl	8001100 <HAL_DMA_Start_IT>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0a9      	b.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e6c:	60da      	str	r2, [r3, #12]
      break;
 8002e6e:	e04a      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	4a51      	ldr	r2, [pc, #324]	@ (8002fbc <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002e76:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	4a50      	ldr	r2, [pc, #320]	@ (8002fc0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002e7e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	4a4f      	ldr	r2, [pc, #316]	@ (8002fc4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8002e86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	333c      	adds	r3, #60	@ 0x3c
 8002e94:	461a      	mov	r2, r3
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	f7fe f932 	bl	8001100 <HAL_DMA_Start_IT>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e085      	b.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eb4:	60da      	str	r2, [r3, #12]
      break;
 8002eb6:	e026      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	4a3f      	ldr	r2, [pc, #252]	@ (8002fbc <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	4a3e      	ldr	r2, [pc, #248]	@ (8002fc0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	4a3d      	ldr	r2, [pc, #244]	@ (8002fc4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8002ece:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3340      	adds	r3, #64	@ 0x40
 8002edc:	461a      	mov	r2, r3
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	f7fe f90e 	bl	8001100 <HAL_DMA_Start_IT>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e061      	b.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002efc:	60da      	str	r2, [r3, #12]
      break;
 8002efe:	e002      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	75fb      	strb	r3, [r7, #23]
      break;
 8002f04:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d151      	bne.n	8002fb0 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2201      	movs	r2, #1
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 ffd9 	bl	8003ecc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_TIM_PWM_Start_DMA+0x350>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a28      	ldr	r2, [pc, #160]	@ (8002fcc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_TIM_PWM_Start_DMA+0x350>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a27      	ldr	r2, [pc, #156]	@ (8002fd0 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d101      	bne.n	8002f3c <HAL_TIM_PWM_Start_DMA+0x354>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_TIM_PWM_Start_DMA+0x356>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d009      	beq.n	8002f70 <HAL_TIM_PWM_Start_DMA+0x388>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f64:	d004      	beq.n	8002f70 <HAL_TIM_PWM_Start_DMA+0x388>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a18      	ldr	r2, [pc, #96]	@ (8002fcc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d115      	bne.n	8002f9c <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	4b17      	ldr	r3, [pc, #92]	@ (8002fd4 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d015      	beq.n	8002fae <HAL_TIM_PWM_Start_DMA+0x3c6>
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f88:	d011      	beq.n	8002fae <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	e008      	b.n	8002fae <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e000      	b.n	8002fb0 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fae:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	080036ad 	.word	0x080036ad
 8002fc0:	08003755 	.word	0x08003755
 8002fc4:	0800361b 	.word	0x0800361b
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40014400 	.word	0x40014400
 8002fd4:	00010007 	.word	0x00010007

08002fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d020      	beq.n	800303c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01b      	beq.n	800303c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0202 	mvn.w	r2, #2
 800300c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fac7 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fab9 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 faca 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	d020      	beq.n	8003088 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01b      	beq.n	8003088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0204 	mvn.w	r2, #4
 8003058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 faa1 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 8003074:	e005      	b.n	8003082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fa93 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 faa4 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d020      	beq.n	80030d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01b      	beq.n	80030d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0208 	mvn.w	r2, #8
 80030a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2204      	movs	r2, #4
 80030aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fa7b 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fa6d 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fa7e 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d020      	beq.n	8003120 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01b      	beq.n	8003120 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0210 	mvn.w	r2, #16
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2208      	movs	r2, #8
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fa55 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa47 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fa58 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0201 	mvn.w	r2, #1
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fab2 	bl	80006a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00c      	beq.n	8003172 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800316a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 ff43 	bl	8003ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00c      	beq.n	8003196 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800318e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 ff3b 	bl	800400c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00c      	beq.n	80031ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fa1c 	bl	80035f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00c      	beq.n	80031de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 0220 	mvn.w	r2, #32
 80031d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 ff03 	bl	8003fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003202:	2302      	movs	r3, #2
 8003204:	e0ff      	b.n	8003406 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b14      	cmp	r3, #20
 8003212:	f200 80f0 	bhi.w	80033f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003216:	a201      	add	r2, pc, #4	@ (adr r2, 800321c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003271 	.word	0x08003271
 8003220:	080033f7 	.word	0x080033f7
 8003224:	080033f7 	.word	0x080033f7
 8003228:	080033f7 	.word	0x080033f7
 800322c:	080032b1 	.word	0x080032b1
 8003230:	080033f7 	.word	0x080033f7
 8003234:	080033f7 	.word	0x080033f7
 8003238:	080033f7 	.word	0x080033f7
 800323c:	080032f3 	.word	0x080032f3
 8003240:	080033f7 	.word	0x080033f7
 8003244:	080033f7 	.word	0x080033f7
 8003248:	080033f7 	.word	0x080033f7
 800324c:	08003333 	.word	0x08003333
 8003250:	080033f7 	.word	0x080033f7
 8003254:	080033f7 	.word	0x080033f7
 8003258:	080033f7 	.word	0x080033f7
 800325c:	08003375 	.word	0x08003375
 8003260:	080033f7 	.word	0x080033f7
 8003264:	080033f7 	.word	0x080033f7
 8003268:	080033f7 	.word	0x080033f7
 800326c:	080033b5 	.word	0x080033b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fb10 	bl	800389c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0208 	orr.w	r2, r2, #8
 800328a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0204 	bic.w	r2, r2, #4
 800329a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6999      	ldr	r1, [r3, #24]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	619a      	str	r2, [r3, #24]
      break;
 80032ae:	e0a5      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fb6c 	bl	8003994 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6999      	ldr	r1, [r3, #24]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	021a      	lsls	r2, r3, #8
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	619a      	str	r2, [r3, #24]
      break;
 80032f0:	e084      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fbc5 	bl	8003a88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0208 	orr.w	r2, r2, #8
 800330c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0204 	bic.w	r2, r2, #4
 800331c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69d9      	ldr	r1, [r3, #28]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	61da      	str	r2, [r3, #28]
      break;
 8003330:	e064      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fc1d 	bl	8003b78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800334c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800335c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69d9      	ldr	r1, [r3, #28]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	021a      	lsls	r2, r3, #8
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	61da      	str	r2, [r3, #28]
      break;
 8003372:	e043      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fc5a 	bl	8003c34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0208 	orr.w	r2, r2, #8
 800338e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0204 	bic.w	r2, r2, #4
 800339e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033b2:	e023      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fc92 	bl	8003ce4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	021a      	lsls	r2, r3, #8
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033f4:	e002      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
      break;
 80033fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003404:	7dfb      	ldrb	r3, [r7, #23]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop

08003410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_TIM_ConfigClockSource+0x1c>
 8003428:	2302      	movs	r3, #2
 800342a:	e0b6      	b.n	800359a <HAL_TIM_ConfigClockSource+0x18a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800344e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003468:	d03e      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0xd8>
 800346a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800346e:	f200 8087 	bhi.w	8003580 <HAL_TIM_ConfigClockSource+0x170>
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003476:	f000 8086 	beq.w	8003586 <HAL_TIM_ConfigClockSource+0x176>
 800347a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347e:	d87f      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 8003480:	2b70      	cmp	r3, #112	@ 0x70
 8003482:	d01a      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0xaa>
 8003484:	2b70      	cmp	r3, #112	@ 0x70
 8003486:	d87b      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 8003488:	2b60      	cmp	r3, #96	@ 0x60
 800348a:	d050      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x11e>
 800348c:	2b60      	cmp	r3, #96	@ 0x60
 800348e:	d877      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 8003490:	2b50      	cmp	r3, #80	@ 0x50
 8003492:	d03c      	beq.n	800350e <HAL_TIM_ConfigClockSource+0xfe>
 8003494:	2b50      	cmp	r3, #80	@ 0x50
 8003496:	d873      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 8003498:	2b40      	cmp	r3, #64	@ 0x40
 800349a:	d058      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x13e>
 800349c:	2b40      	cmp	r3, #64	@ 0x40
 800349e:	d86f      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 80034a0:	2b30      	cmp	r3, #48	@ 0x30
 80034a2:	d064      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x15e>
 80034a4:	2b30      	cmp	r3, #48	@ 0x30
 80034a6:	d86b      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d060      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x15e>
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d867      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d05c      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x15e>
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d05a      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x15e>
 80034b8:	e062      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ca:	f000 fcdf 	bl	8003e8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	609a      	str	r2, [r3, #8]
      break;
 80034e6:	e04f      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034f8:	f000 fcc8 	bl	8003e8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800350a:	609a      	str	r2, [r3, #8]
      break;
 800350c:	e03c      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800351a:	461a      	mov	r2, r3
 800351c:	f000 fc3c 	bl	8003d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2150      	movs	r1, #80	@ 0x50
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fc95 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 800352c:	e02c      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800353a:	461a      	mov	r2, r3
 800353c:	f000 fc5b 	bl	8003df6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2160      	movs	r1, #96	@ 0x60
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fc85 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 800354c:	e01c      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800355a:	461a      	mov	r2, r3
 800355c:	f000 fc1c 	bl	8003d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2140      	movs	r1, #64	@ 0x40
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fc75 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 800356c:	e00c      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f000 fc6c 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 800357e:	e003      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      break;
 8003584:	e000      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003626:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	d107      	bne.n	8003642 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003640:	e02a      	b.n	8003698 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	d107      	bne.n	800365c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2202      	movs	r2, #2
 8003650:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800365a:	e01d      	b.n	8003698 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d107      	bne.n	8003676 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2204      	movs	r2, #4
 800366a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003674:	e010      	b.n	8003698 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d107      	bne.n	8003690 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2208      	movs	r2, #8
 8003684:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800368e:	e003      	b.n	8003698 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7ff ffb4 	bl	8003606 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	771a      	strb	r2, [r3, #28]
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d10b      	bne.n	80036dc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d136      	bne.n	8003740 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036da:	e031      	b.n	8003740 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d10b      	bne.n	80036fe <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2202      	movs	r2, #2
 80036ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d125      	bne.n	8003740 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036fc:	e020      	b.n	8003740 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	d10b      	bne.n	8003720 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2204      	movs	r2, #4
 800370c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d114      	bne.n	8003740 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800371e:	e00f      	b.n	8003740 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	429a      	cmp	r2, r3
 8003728:	d10a      	bne.n	8003740 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2208      	movs	r2, #8
 800372e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d103      	bne.n	8003740 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff ff42 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d103      	bne.n	8003774 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	771a      	strb	r2, [r3, #28]
 8003772:	e019      	b.n	80037a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	d103      	bne.n	8003786 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2202      	movs	r2, #2
 8003782:	771a      	strb	r2, [r3, #28]
 8003784:	e010      	b.n	80037a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	d103      	bne.n	8003798 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2204      	movs	r2, #4
 8003794:	771a      	strb	r2, [r3, #28]
 8003796:	e007      	b.n	80037a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d102      	bne.n	80037a8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2208      	movs	r2, #8
 80037a6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff ff18 	bl	80035de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a30      	ldr	r2, [pc, #192]	@ (8003890 <TIM_Base_SetConfig+0xd4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <TIM_Base_SetConfig+0x20>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037da:	d108      	bne.n	80037ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a27      	ldr	r2, [pc, #156]	@ (8003890 <TIM_Base_SetConfig+0xd4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00b      	beq.n	800380e <TIM_Base_SetConfig+0x52>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fc:	d007      	beq.n	800380e <TIM_Base_SetConfig+0x52>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a24      	ldr	r2, [pc, #144]	@ (8003894 <TIM_Base_SetConfig+0xd8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d003      	beq.n	800380e <TIM_Base_SetConfig+0x52>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a23      	ldr	r2, [pc, #140]	@ (8003898 <TIM_Base_SetConfig+0xdc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d108      	bne.n	8003820 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a12      	ldr	r2, [pc, #72]	@ (8003890 <TIM_Base_SetConfig+0xd4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d007      	beq.n	800385c <TIM_Base_SetConfig+0xa0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a11      	ldr	r2, [pc, #68]	@ (8003894 <TIM_Base_SetConfig+0xd8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d003      	beq.n	800385c <TIM_Base_SetConfig+0xa0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a10      	ldr	r2, [pc, #64]	@ (8003898 <TIM_Base_SetConfig+0xdc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d103      	bne.n	8003864 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f023 0201 	bic.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]
  }
}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400

0800389c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f023 0201 	bic.w	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f023 0302 	bic.w	r3, r3, #2
 80038e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a24      	ldr	r2, [pc, #144]	@ (8003988 <TIM_OC1_SetConfig+0xec>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d007      	beq.n	800390c <TIM_OC1_SetConfig+0x70>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a23      	ldr	r2, [pc, #140]	@ (800398c <TIM_OC1_SetConfig+0xf0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_OC1_SetConfig+0x70>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a22      	ldr	r2, [pc, #136]	@ (8003990 <TIM_OC1_SetConfig+0xf4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10c      	bne.n	8003926 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f023 0308 	bic.w	r3, r3, #8
 8003912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f023 0304 	bic.w	r3, r3, #4
 8003924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a17      	ldr	r2, [pc, #92]	@ (8003988 <TIM_OC1_SetConfig+0xec>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d007      	beq.n	800393e <TIM_OC1_SetConfig+0xa2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a16      	ldr	r2, [pc, #88]	@ (800398c <TIM_OC1_SetConfig+0xf0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d003      	beq.n	800393e <TIM_OC1_SetConfig+0xa2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a15      	ldr	r2, [pc, #84]	@ (8003990 <TIM_OC1_SetConfig+0xf4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d111      	bne.n	8003962 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800394c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	621a      	str	r2, [r3, #32]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40014000 	.word	0x40014000
 8003990:	40014400 	.word	0x40014400

08003994 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f023 0210 	bic.w	r2, r3, #16
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0320 	bic.w	r3, r3, #32
 80039e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a22      	ldr	r2, [pc, #136]	@ (8003a7c <TIM_OC2_SetConfig+0xe8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d10d      	bne.n	8003a14 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a19      	ldr	r2, [pc, #100]	@ (8003a7c <TIM_OC2_SetConfig+0xe8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d007      	beq.n	8003a2c <TIM_OC2_SetConfig+0x98>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	@ (8003a80 <TIM_OC2_SetConfig+0xec>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_OC2_SetConfig+0x98>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a17      	ldr	r2, [pc, #92]	@ (8003a84 <TIM_OC2_SetConfig+0xf0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d113      	bne.n	8003a54 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40014000 	.word	0x40014000
 8003a84:	40014400 	.word	0x40014400

08003a88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a21      	ldr	r2, [pc, #132]	@ (8003b6c <TIM_OC3_SetConfig+0xe4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10d      	bne.n	8003b06 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a18      	ldr	r2, [pc, #96]	@ (8003b6c <TIM_OC3_SetConfig+0xe4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <TIM_OC3_SetConfig+0x96>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a17      	ldr	r2, [pc, #92]	@ (8003b70 <TIM_OC3_SetConfig+0xe8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_OC3_SetConfig+0x96>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a16      	ldr	r2, [pc, #88]	@ (8003b74 <TIM_OC3_SetConfig+0xec>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d113      	bne.n	8003b46 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	621a      	str	r2, [r3, #32]
}
 8003b60:	bf00      	nop
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40014000 	.word	0x40014000
 8003b74:	40014400 	.word	0x40014400

08003b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	031b      	lsls	r3, r3, #12
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a14      	ldr	r2, [pc, #80]	@ (8003c28 <TIM_OC4_SetConfig+0xb0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <TIM_OC4_SetConfig+0x74>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a13      	ldr	r2, [pc, #76]	@ (8003c2c <TIM_OC4_SetConfig+0xb4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_OC4_SetConfig+0x74>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a12      	ldr	r2, [pc, #72]	@ (8003c30 <TIM_OC4_SetConfig+0xb8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d109      	bne.n	8003c00 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	019b      	lsls	r3, r3, #6
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40014400 	.word	0x40014400

08003c34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003c78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	041b      	lsls	r3, r3, #16
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a13      	ldr	r2, [pc, #76]	@ (8003cd8 <TIM_OC5_SetConfig+0xa4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <TIM_OC5_SetConfig+0x6a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a12      	ldr	r2, [pc, #72]	@ (8003cdc <TIM_OC5_SetConfig+0xa8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_OC5_SetConfig+0x6a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a11      	ldr	r2, [pc, #68]	@ (8003ce0 <TIM_OC5_SetConfig+0xac>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d109      	bne.n	8003cb2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	621a      	str	r2, [r3, #32]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400

08003ce4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	051b      	lsls	r3, r3, #20
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a14      	ldr	r2, [pc, #80]	@ (8003d8c <TIM_OC6_SetConfig+0xa8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_OC6_SetConfig+0x6c>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a13      	ldr	r2, [pc, #76]	@ (8003d90 <TIM_OC6_SetConfig+0xac>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC6_SetConfig+0x6c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a12      	ldr	r2, [pc, #72]	@ (8003d94 <TIM_OC6_SetConfig+0xb0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d109      	bne.n	8003d64 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	029b      	lsls	r3, r3, #10
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40014000 	.word	0x40014000
 8003d94:	40014400 	.word	0x40014400

08003d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f023 0201 	bic.w	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f023 030a 	bic.w	r3, r3, #10
 8003dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b087      	sub	sp, #28
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f023 0210 	bic.w	r2, r3, #16
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	031b      	lsls	r3, r3, #12
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	621a      	str	r2, [r3, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f043 0307 	orr.w	r3, r3, #7
 8003e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	609a      	str	r2, [r3, #8]
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	021a      	lsls	r2, r3, #8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	609a      	str	r2, [r3, #8]
}
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2201      	movs	r2, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	431a      	orrs	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e04f      	b.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a21      	ldr	r2, [pc, #132]	@ (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d108      	bne.n	8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a14      	ldr	r2, [pc, #80]	@ (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d009      	beq.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f98:	d004      	beq.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a10      	ldr	r2, [pc, #64]	@ (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10c      	bne.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003faa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40014000 	.word	0x40014000

08003fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e040      	b.n	80040b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fc fd8a 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2224      	movs	r2, #36	@ 0x24
 800404c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fa54 	bl	8004514 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f825 	bl	80040bc <UART_SetConfig>
 8004072:	4603      	mov	r3, r0
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e01b      	b.n	80040b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800408a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800409a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fad3 	bl	8004658 <UART_CheckIdleState>
 80040b2:	4603      	mov	r3, r0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c0:	b08a      	sub	sp, #40	@ 0x28
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	431a      	orrs	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4bb4      	ldr	r3, [pc, #720]	@ (80043bc <UART_SetConfig+0x300>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4aa9      	ldr	r2, [pc, #676]	@ (80043c0 <UART_SetConfig+0x304>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004124:	4313      	orrs	r3, r2
 8004126:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004138:	430a      	orrs	r2, r1
 800413a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4aa0      	ldr	r2, [pc, #640]	@ (80043c4 <UART_SetConfig+0x308>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d126      	bne.n	8004194 <UART_SetConfig+0xd8>
 8004146:	4ba0      	ldr	r3, [pc, #640]	@ (80043c8 <UART_SetConfig+0x30c>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	2b03      	cmp	r3, #3
 8004152:	d81b      	bhi.n	800418c <UART_SetConfig+0xd0>
 8004154:	a201      	add	r2, pc, #4	@ (adr r2, 800415c <UART_SetConfig+0xa0>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	0800416d 	.word	0x0800416d
 8004160:	0800417d 	.word	0x0800417d
 8004164:	08004175 	.word	0x08004175
 8004168:	08004185 	.word	0x08004185
 800416c:	2301      	movs	r3, #1
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004172:	e080      	b.n	8004276 <UART_SetConfig+0x1ba>
 8004174:	2302      	movs	r3, #2
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417a:	e07c      	b.n	8004276 <UART_SetConfig+0x1ba>
 800417c:	2304      	movs	r3, #4
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004182:	e078      	b.n	8004276 <UART_SetConfig+0x1ba>
 8004184:	2308      	movs	r3, #8
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800418a:	e074      	b.n	8004276 <UART_SetConfig+0x1ba>
 800418c:	2310      	movs	r3, #16
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004192:	e070      	b.n	8004276 <UART_SetConfig+0x1ba>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a8c      	ldr	r2, [pc, #560]	@ (80043cc <UART_SetConfig+0x310>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d138      	bne.n	8004210 <UART_SetConfig+0x154>
 800419e:	4b8a      	ldr	r3, [pc, #552]	@ (80043c8 <UART_SetConfig+0x30c>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	d82d      	bhi.n	8004208 <UART_SetConfig+0x14c>
 80041ac:	a201      	add	r2, pc, #4	@ (adr r2, 80041b4 <UART_SetConfig+0xf8>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	080041e9 	.word	0x080041e9
 80041b8:	08004209 	.word	0x08004209
 80041bc:	08004209 	.word	0x08004209
 80041c0:	08004209 	.word	0x08004209
 80041c4:	080041f9 	.word	0x080041f9
 80041c8:	08004209 	.word	0x08004209
 80041cc:	08004209 	.word	0x08004209
 80041d0:	08004209 	.word	0x08004209
 80041d4:	080041f1 	.word	0x080041f1
 80041d8:	08004209 	.word	0x08004209
 80041dc:	08004209 	.word	0x08004209
 80041e0:	08004209 	.word	0x08004209
 80041e4:	08004201 	.word	0x08004201
 80041e8:	2300      	movs	r3, #0
 80041ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ee:	e042      	b.n	8004276 <UART_SetConfig+0x1ba>
 80041f0:	2302      	movs	r3, #2
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041f6:	e03e      	b.n	8004276 <UART_SetConfig+0x1ba>
 80041f8:	2304      	movs	r3, #4
 80041fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041fe:	e03a      	b.n	8004276 <UART_SetConfig+0x1ba>
 8004200:	2308      	movs	r3, #8
 8004202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004206:	e036      	b.n	8004276 <UART_SetConfig+0x1ba>
 8004208:	2310      	movs	r3, #16
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800420e:	e032      	b.n	8004276 <UART_SetConfig+0x1ba>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a6a      	ldr	r2, [pc, #424]	@ (80043c0 <UART_SetConfig+0x304>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d12a      	bne.n	8004270 <UART_SetConfig+0x1b4>
 800421a:	4b6b      	ldr	r3, [pc, #428]	@ (80043c8 <UART_SetConfig+0x30c>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004220:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004224:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004228:	d01a      	beq.n	8004260 <UART_SetConfig+0x1a4>
 800422a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800422e:	d81b      	bhi.n	8004268 <UART_SetConfig+0x1ac>
 8004230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004234:	d00c      	beq.n	8004250 <UART_SetConfig+0x194>
 8004236:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800423a:	d815      	bhi.n	8004268 <UART_SetConfig+0x1ac>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <UART_SetConfig+0x18c>
 8004240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004244:	d008      	beq.n	8004258 <UART_SetConfig+0x19c>
 8004246:	e00f      	b.n	8004268 <UART_SetConfig+0x1ac>
 8004248:	2300      	movs	r3, #0
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800424e:	e012      	b.n	8004276 <UART_SetConfig+0x1ba>
 8004250:	2302      	movs	r3, #2
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004256:	e00e      	b.n	8004276 <UART_SetConfig+0x1ba>
 8004258:	2304      	movs	r3, #4
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425e:	e00a      	b.n	8004276 <UART_SetConfig+0x1ba>
 8004260:	2308      	movs	r3, #8
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004266:	e006      	b.n	8004276 <UART_SetConfig+0x1ba>
 8004268:	2310      	movs	r3, #16
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426e:	e002      	b.n	8004276 <UART_SetConfig+0x1ba>
 8004270:	2310      	movs	r3, #16
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a51      	ldr	r2, [pc, #324]	@ (80043c0 <UART_SetConfig+0x304>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d17a      	bne.n	8004376 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004280:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004284:	2b08      	cmp	r3, #8
 8004286:	d824      	bhi.n	80042d2 <UART_SetConfig+0x216>
 8004288:	a201      	add	r2, pc, #4	@ (adr r2, 8004290 <UART_SetConfig+0x1d4>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042b5 	.word	0x080042b5
 8004294:	080042d3 	.word	0x080042d3
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042d3 	.word	0x080042d3
 80042a0:	080042c3 	.word	0x080042c3
 80042a4:	080042d3 	.word	0x080042d3
 80042a8:	080042d3 	.word	0x080042d3
 80042ac:	080042d3 	.word	0x080042d3
 80042b0:	080042cb 	.word	0x080042cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b4:	f7fe f806 	bl	80022c4 <HAL_RCC_GetPCLK1Freq>
 80042b8:	61f8      	str	r0, [r7, #28]
        break;
 80042ba:	e010      	b.n	80042de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042bc:	4b44      	ldr	r3, [pc, #272]	@ (80043d0 <UART_SetConfig+0x314>)
 80042be:	61fb      	str	r3, [r7, #28]
        break;
 80042c0:	e00d      	b.n	80042de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c2:	f7fd ff67 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 80042c6:	61f8      	str	r0, [r7, #28]
        break;
 80042c8:	e009      	b.n	80042de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ce:	61fb      	str	r3, [r7, #28]
        break;
 80042d0:	e005      	b.n	80042de <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8107 	beq.w	80044f4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	4413      	add	r3, r2
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d305      	bcc.n	8004302 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d903      	bls.n	800430a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004308:	e0f4      	b.n	80044f4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	2200      	movs	r2, #0
 800430e:	461c      	mov	r4, r3
 8004310:	4615      	mov	r5, r2
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	022b      	lsls	r3, r5, #8
 800431c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004320:	0222      	lsls	r2, r4, #8
 8004322:	68f9      	ldr	r1, [r7, #12]
 8004324:	6849      	ldr	r1, [r1, #4]
 8004326:	0849      	lsrs	r1, r1, #1
 8004328:	2000      	movs	r0, #0
 800432a:	4688      	mov	r8, r1
 800432c:	4681      	mov	r9, r0
 800432e:	eb12 0a08 	adds.w	sl, r2, r8
 8004332:	eb43 0b09 	adc.w	fp, r3, r9
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004344:	4650      	mov	r0, sl
 8004346:	4659      	mov	r1, fp
 8004348:	f7fb ff40 	bl	80001cc <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800435a:	d308      	bcc.n	800436e <UART_SetConfig+0x2b2>
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004362:	d204      	bcs.n	800436e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	e0c2      	b.n	80044f4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004374:	e0be      	b.n	80044f4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800437e:	d16a      	bne.n	8004456 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004380:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004384:	2b08      	cmp	r3, #8
 8004386:	d834      	bhi.n	80043f2 <UART_SetConfig+0x336>
 8004388:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <UART_SetConfig+0x2d4>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043d5 	.word	0x080043d5
 8004398:	080043dd 	.word	0x080043dd
 800439c:	080043f3 	.word	0x080043f3
 80043a0:	080043e3 	.word	0x080043e3
 80043a4:	080043f3 	.word	0x080043f3
 80043a8:	080043f3 	.word	0x080043f3
 80043ac:	080043f3 	.word	0x080043f3
 80043b0:	080043eb 	.word	0x080043eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b4:	f7fd ff86 	bl	80022c4 <HAL_RCC_GetPCLK1Freq>
 80043b8:	61f8      	str	r0, [r7, #28]
        break;
 80043ba:	e020      	b.n	80043fe <UART_SetConfig+0x342>
 80043bc:	efff69f3 	.word	0xefff69f3
 80043c0:	40008000 	.word	0x40008000
 80043c4:	40013800 	.word	0x40013800
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40004400 	.word	0x40004400
 80043d0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043d4:	f7fd ff8c 	bl	80022f0 <HAL_RCC_GetPCLK2Freq>
 80043d8:	61f8      	str	r0, [r7, #28]
        break;
 80043da:	e010      	b.n	80043fe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043dc:	4b4c      	ldr	r3, [pc, #304]	@ (8004510 <UART_SetConfig+0x454>)
 80043de:	61fb      	str	r3, [r7, #28]
        break;
 80043e0:	e00d      	b.n	80043fe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043e2:	f7fd fed7 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 80043e6:	61f8      	str	r0, [r7, #28]
        break;
 80043e8:	e009      	b.n	80043fe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ee:	61fb      	str	r3, [r7, #28]
        break;
 80043f0:	e005      	b.n	80043fe <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d077      	beq.n	80044f4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	005a      	lsls	r2, r3, #1
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	441a      	add	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b0f      	cmp	r3, #15
 800441e:	d916      	bls.n	800444e <UART_SetConfig+0x392>
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004426:	d212      	bcs.n	800444e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	b29b      	uxth	r3, r3
 800442c:	f023 030f 	bic.w	r3, r3, #15
 8004430:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	b29a      	uxth	r2, r3
 800443e:	8afb      	ldrh	r3, [r7, #22]
 8004440:	4313      	orrs	r3, r2
 8004442:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	8afa      	ldrh	r2, [r7, #22]
 800444a:	60da      	str	r2, [r3, #12]
 800444c:	e052      	b.n	80044f4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004454:	e04e      	b.n	80044f4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004456:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800445a:	2b08      	cmp	r3, #8
 800445c:	d827      	bhi.n	80044ae <UART_SetConfig+0x3f2>
 800445e:	a201      	add	r2, pc, #4	@ (adr r2, 8004464 <UART_SetConfig+0x3a8>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	08004489 	.word	0x08004489
 8004468:	08004491 	.word	0x08004491
 800446c:	08004499 	.word	0x08004499
 8004470:	080044af 	.word	0x080044af
 8004474:	0800449f 	.word	0x0800449f
 8004478:	080044af 	.word	0x080044af
 800447c:	080044af 	.word	0x080044af
 8004480:	080044af 	.word	0x080044af
 8004484:	080044a7 	.word	0x080044a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004488:	f7fd ff1c 	bl	80022c4 <HAL_RCC_GetPCLK1Freq>
 800448c:	61f8      	str	r0, [r7, #28]
        break;
 800448e:	e014      	b.n	80044ba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004490:	f7fd ff2e 	bl	80022f0 <HAL_RCC_GetPCLK2Freq>
 8004494:	61f8      	str	r0, [r7, #28]
        break;
 8004496:	e010      	b.n	80044ba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004498:	4b1d      	ldr	r3, [pc, #116]	@ (8004510 <UART_SetConfig+0x454>)
 800449a:	61fb      	str	r3, [r7, #28]
        break;
 800449c:	e00d      	b.n	80044ba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449e:	f7fd fe79 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 80044a2:	61f8      	str	r0, [r7, #28]
        break;
 80044a4:	e009      	b.n	80044ba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044aa:	61fb      	str	r3, [r7, #28]
        break;
 80044ac:	e005      	b.n	80044ba <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044b8:	bf00      	nop
    }

    if (pclk != 0U)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d019      	beq.n	80044f4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	085a      	lsrs	r2, r3, #1
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	441a      	add	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b0f      	cmp	r3, #15
 80044d8:	d909      	bls.n	80044ee <UART_SetConfig+0x432>
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e0:	d205      	bcs.n	80044ee <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60da      	str	r2, [r3, #12]
 80044ec:	e002      	b.n	80044f4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004500:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004504:	4618      	mov	r0, r3
 8004506:	3728      	adds	r7, #40	@ 0x28
 8004508:	46bd      	mov	sp, r7
 800450a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800450e:	bf00      	nop
 8004510:	00f42400 	.word	0x00f42400

08004514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01a      	beq.n	800462a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004612:	d10a      	bne.n	800462a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  }
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b098      	sub	sp, #96	@ 0x60
 800465c:	af02      	add	r7, sp, #8
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004668:	f7fc fb74 	bl	8000d54 <HAL_GetTick>
 800466c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b08      	cmp	r3, #8
 800467a:	d12e      	bne.n	80046da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800467c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004684:	2200      	movs	r2, #0
 8004686:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f88c 	bl	80047a8 <UART_WaitOnFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d021      	beq.n	80046da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e6      	bne.n	8004696 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e062      	b.n	80047a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d149      	bne.n	800477c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f0:	2200      	movs	r2, #0
 80046f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f856 	bl	80047a8 <UART_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d03c      	beq.n	800477c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	623b      	str	r3, [r7, #32]
   return(result);
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004720:	633b      	str	r3, [r7, #48]	@ 0x30
 8004722:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800472e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e6      	bne.n	8004702 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3308      	adds	r3, #8
 800473a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	60fb      	str	r3, [r7, #12]
   return(result);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3308      	adds	r3, #8
 8004752:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004754:	61fa      	str	r2, [r7, #28]
 8004756:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	69b9      	ldr	r1, [r7, #24]
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	617b      	str	r3, [r7, #20]
   return(result);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e5      	bne.n	8004734 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e011      	b.n	80047a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3758      	adds	r7, #88	@ 0x58
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b8:	e04f      	b.n	800485a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d04b      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c2:	f7fc fac7 	bl	8000d54 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d302      	bcc.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e04e      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d037      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0xb2>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b80      	cmp	r3, #128	@ 0x80
 80047ee:	d034      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0xb2>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b40      	cmp	r3, #64	@ 0x40
 80047f4:	d031      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b08      	cmp	r3, #8
 8004802:	d110      	bne.n	8004826 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2208      	movs	r2, #8
 800480a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f838 	bl	8004882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2208      	movs	r2, #8
 8004816:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e029      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004834:	d111      	bne.n	800485a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800483e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f81e 	bl	8004882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e00f      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	429a      	cmp	r2, r3
 8004876:	d0a0      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004882:	b480      	push	{r7}
 8004884:	b095      	sub	sp, #84	@ 0x54
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800489e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80048aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e6      	bne.n	800488a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3308      	adds	r3, #8
 80048c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3308      	adds	r3, #8
 80048da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e5      	bne.n	80048bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d118      	bne.n	800492a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	60bb      	str	r3, [r7, #8]
   return(result);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f023 0310 	bic.w	r3, r3, #16
 800490c:	647b      	str	r3, [r7, #68]	@ 0x44
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004916:	61bb      	str	r3, [r7, #24]
 8004918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	6979      	ldr	r1, [r7, #20]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	613b      	str	r3, [r7, #16]
   return(result);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e6      	bne.n	80048f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800493e:	bf00      	nop
 8004940:	3754      	adds	r7, #84	@ 0x54
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <memset>:
 800494a:	4402      	add	r2, r0
 800494c:	4603      	mov	r3, r0
 800494e:	4293      	cmp	r3, r2
 8004950:	d100      	bne.n	8004954 <memset+0xa>
 8004952:	4770      	bx	lr
 8004954:	f803 1b01 	strb.w	r1, [r3], #1
 8004958:	e7f9      	b.n	800494e <memset+0x4>
	...

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4d0d      	ldr	r5, [pc, #52]	@ (8004994 <__libc_init_array+0x38>)
 8004960:	4c0d      	ldr	r4, [pc, #52]	@ (8004998 <__libc_init_array+0x3c>)
 8004962:	1b64      	subs	r4, r4, r5
 8004964:	10a4      	asrs	r4, r4, #2
 8004966:	2600      	movs	r6, #0
 8004968:	42a6      	cmp	r6, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	4d0b      	ldr	r5, [pc, #44]	@ (800499c <__libc_init_array+0x40>)
 800496e:	4c0c      	ldr	r4, [pc, #48]	@ (80049a0 <__libc_init_array+0x44>)
 8004970:	f000 f818 	bl	80049a4 <_init>
 8004974:	1b64      	subs	r4, r4, r5
 8004976:	10a4      	asrs	r4, r4, #2
 8004978:	2600      	movs	r6, #0
 800497a:	42a6      	cmp	r6, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f855 3b04 	ldr.w	r3, [r5], #4
 8004984:	4798      	blx	r3
 8004986:	3601      	adds	r6, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f855 3b04 	ldr.w	r3, [r5], #4
 800498e:	4798      	blx	r3
 8004990:	3601      	adds	r6, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	08005a0c 	.word	0x08005a0c
 8004998:	08005a0c 	.word	0x08005a0c
 800499c:	08005a0c 	.word	0x08005a0c
 80049a0:	08005a10 	.word	0x08005a10

080049a4 <_init>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	bf00      	nop
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr

080049b0 <_fini>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	bf00      	nop
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr
