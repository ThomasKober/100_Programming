
L3_sBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000481c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080049a8  080049a8  000059a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a54  08004a54  00006050  2**0
                  CONTENTS
  4 .ARM          00000008  08004a54  08004a54  00005a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a5c  08004a5c  00006050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a5c  08004a5c  00005a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a60  08004a60  00005a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08004a64  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000050  08004ab4  00006050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08004ab4  00006250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011681  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002481  00000000  00000000  00017701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00019b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5c  00000000  00000000  0001ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201a3  00000000  00000000  0001b7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121ae  00000000  00000000  0003b957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6037  00000000  00000000  0004db05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113b3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000425c  00000000  00000000  00113b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00117ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000050 	.word	0x20000050
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004990 	.word	0x08004990

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000054 	.word	0x20000054
 80001c8:	08004990 	.word	0x08004990

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <parseSBUSData>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//function for parsing sBUS data
void parseSBUSData(uint8_t *buffer)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
    // Check for valid start byte (0x0F)
    if (buffer[0] != 0x0F || buffer[SBUS_FRAME_LENGTH - 1] != 0x00)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b0f      	cmp	r3, #15
 80004ca:	d104      	bne.n	80004d6 <parseSBUSData+0x1a>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3318      	adds	r3, #24
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d006      	beq.n	80004e4 <parseSBUSData+0x28>
    {
        // Invalid frame, return
    	HAL_UART_Transmit(&huart2, data_sBusRxNok, sizeof(data_sBusRxNok), 100);
 80004d6:	2364      	movs	r3, #100	@ 0x64
 80004d8:	221a      	movs	r2, #26
 80004da:	492a      	ldr	r1, [pc, #168]	@ (8000584 <parseSBUSData+0xc8>)
 80004dc:	482a      	ldr	r0, [pc, #168]	@ (8000588 <parseSBUSData+0xcc>)
 80004de:	f002 ffdd 	bl	800349c <HAL_UART_Transmit>
        return;
 80004e2:	e04b      	b.n	800057c <parseSBUSData+0xc0>
    }

    // Valid frame
    HAL_UART_Transmit(&huart2, data_sBusRxOk, sizeof(data_sBusRxOk), 100);
 80004e4:	2364      	movs	r3, #100	@ 0x64
 80004e6:	2216      	movs	r2, #22
 80004e8:	4928      	ldr	r1, [pc, #160]	@ (800058c <parseSBUSData+0xd0>)
 80004ea:	4827      	ldr	r0, [pc, #156]	@ (8000588 <parseSBUSData+0xcc>)
 80004ec:	f002 ffd6 	bl	800349c <HAL_UART_Transmit>

    // Extract channel values
    for (int i = 0; i < SBUS_CHANNEL_COUNT; i++)
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	e03c      	b.n	8000570 <parseSBUSData+0xb4>
    {
        if (i < 8)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b07      	cmp	r3, #7
 80004fa:	dc1b      	bgt.n	8000534 <parseSBUSData+0x78>
        {
            // First 8 channels: use first 16 bytes
            channelValues[i] = (buffer[1 + (i * 2)] & 0x07) | (buffer[2 + (i * 2)] << 3);
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	3301      	adds	r3, #1
 8000502:	461a      	mov	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b21b      	sxth	r3, r3
 800050c:	f003 0307 	and.w	r3, r3, #7
 8000510:	b21a      	sxth	r2, r3
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	4619      	mov	r1, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	440b      	add	r3, r1
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	b21b      	sxth	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b21b      	sxth	r3, r3
 8000528:	b299      	uxth	r1, r3
 800052a:	4a19      	ldr	r2, [pc, #100]	@ (8000590 <parseSBUSData+0xd4>)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000532:	e01a      	b.n	800056a <parseSBUSData+0xae>
        }
        else
        {
            // Next 8 channels: use last 9 bytes
            channelValues[i] = (buffer[2 + ((i - 8) * 2)] >> 5) | ((buffer[3 + ((i - 8) * 2)] & 0xFF) << 3);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3b07      	subs	r3, #7
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	461a      	mov	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4413      	add	r3, r2
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	095b      	lsrs	r3, r3, #5
 8000544:	b2db      	uxtb	r3, r3
 8000546:	b21a      	sxth	r2, r3
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	3b08      	subs	r3, #8
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	3303      	adds	r3, #3
 8000550:	4619      	mov	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	440b      	add	r3, r1
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	00db      	lsls	r3, r3, #3
 800055a:	b21b      	sxth	r3, r3
 800055c:	4313      	orrs	r3, r2
 800055e:	b21b      	sxth	r3, r3
 8000560:	b299      	uxth	r1, r3
 8000562:	4a0b      	ldr	r2, [pc, #44]	@ (8000590 <parseSBUSData+0xd4>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < SBUS_CHANNEL_COUNT; i++)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3301      	adds	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b0f      	cmp	r3, #15
 8000574:	ddbf      	ble.n	80004f6 <parseSBUSData+0x3a>
        }
    }

    // Process flags (if necessary)
    uint8_t flags = buffer[SBUS_FRAME_LENGTH - 2];
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	7ddb      	ldrb	r3, [r3, #23]
 800057a:	72fb      	strb	r3, [r7, #11]
    {
        // Frame lost
    	// Handle frame loss condition
    	// You may want to log this or take action to recover
    }
}
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028
 8000588:	20000140 	.word	0x20000140
 800058c:	20000010 	.word	0x20000010
 8000590:	2000022c 	.word	0x2000022c

08000594 <HAL_UARTEx_RxEventCallback>:


//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <HAL_UARTEx_RxEventCallback+0x3c>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d10d      	bne.n	80005c6 <HAL_UARTEx_RxEventCallback+0x32>
    {
    	// Process the received data
    	parseSBUSData(sbusBuffer);
 80005aa:	480a      	ldr	r0, [pc, #40]	@ (80005d4 <HAL_UARTEx_RxEventCallback+0x40>)
 80005ac:	f7ff ff86 	bl	80004bc <parseSBUSData>

        // Restart DMA reception
    	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, sbusBuffer, SBUS_FRAME_LENGTH);
 80005b0:	2219      	movs	r2, #25
 80005b2:	4908      	ldr	r1, [pc, #32]	@ (80005d4 <HAL_UARTEx_RxEventCallback+0x40>)
 80005b4:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <HAL_UARTEx_RxEventCallback+0x44>)
 80005b6:	f004 f96b 	bl	8004890 <HAL_UARTEx_ReceiveToIdle_DMA>

    	HAL_UART_Transmit(&huart2, data_sBusOK, sizeof(data_sBusOK), 100);
 80005ba:	2364      	movs	r3, #100	@ 0x64
 80005bc:	220e      	movs	r2, #14
 80005be:	4907      	ldr	r1, [pc, #28]	@ (80005dc <HAL_UARTEx_RxEventCallback+0x48>)
 80005c0:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <HAL_UARTEx_RxEventCallback+0x4c>)
 80005c2:	f002 ff6b 	bl	800349c <HAL_UART_Transmit>
    }
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40013800 	.word	0x40013800
 80005d4:	20000210 	.word	0x20000210
 80005d8:	200000b8 	.word	0x200000b8
 80005dc:	20000000 	.word	0x20000000
 80005e0:	20000140 	.word	0x20000140

080005e4 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000668 <HAL_UART_ErrorCallback+0x84>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d133      	bne.n	800065e <HAL_UART_ErrorCallback+0x7a>
    {
        // Handle UART2 errors
        if (huart->ErrorCode & HAL_UART_ERROR_ORE)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80005fc:	f003 0308 	and.w	r3, r3, #8
 8000600:	2b00      	cmp	r3, #0
 8000602:	d005      	beq.n	8000610 <HAL_UART_ErrorCallback+0x2c>
        {
            // Overrun Error
        	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nOverrun Error UART1!", 50, 100);
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	2232      	movs	r2, #50	@ 0x32
 8000608:	4918      	ldr	r1, [pc, #96]	@ (800066c <HAL_UART_ErrorCallback+0x88>)
 800060a:	4819      	ldr	r0, [pc, #100]	@ (8000670 <HAL_UART_ErrorCallback+0x8c>)
 800060c:	f002 ff46 	bl	800349c <HAL_UART_Transmit>
        }
        if (huart->ErrorCode & HAL_UART_ERROR_FE)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	2b00      	cmp	r3, #0
 800061c:	d005      	beq.n	800062a <HAL_UART_ErrorCallback+0x46>
        {
            // Framing Error
        	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nFraming Error UART1!", 50, 100);
 800061e:	2364      	movs	r3, #100	@ 0x64
 8000620:	2232      	movs	r2, #50	@ 0x32
 8000622:	4914      	ldr	r1, [pc, #80]	@ (8000674 <HAL_UART_ErrorCallback+0x90>)
 8000624:	4812      	ldr	r0, [pc, #72]	@ (8000670 <HAL_UART_ErrorCallback+0x8c>)
 8000626:	f002 ff39 	bl	800349c <HAL_UART_Transmit>
        }
        if (huart->ErrorCode & HAL_UART_ERROR_NE)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	2b00      	cmp	r3, #0
 8000636:	d005      	beq.n	8000644 <HAL_UART_ErrorCallback+0x60>
        {
            // Noise Error
        	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nNoise Error UART1!", 50, 100);
 8000638:	2364      	movs	r3, #100	@ 0x64
 800063a:	2232      	movs	r2, #50	@ 0x32
 800063c:	490e      	ldr	r1, [pc, #56]	@ (8000678 <HAL_UART_ErrorCallback+0x94>)
 800063e:	480c      	ldr	r0, [pc, #48]	@ (8000670 <HAL_UART_ErrorCallback+0x8c>)
 8000640:	f002 ff2c 	bl	800349c <HAL_UART_Transmit>
        }
        if (huart->ErrorCode & HAL_UART_ERROR_PE)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d005      	beq.n	800065e <HAL_UART_ErrorCallback+0x7a>
        {
            // Parity Error
        	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nParity Error UART1!", 50, 100);
 8000652:	2364      	movs	r3, #100	@ 0x64
 8000654:	2232      	movs	r2, #50	@ 0x32
 8000656:	4909      	ldr	r1, [pc, #36]	@ (800067c <HAL_UART_ErrorCallback+0x98>)
 8000658:	4805      	ldr	r0, [pc, #20]	@ (8000670 <HAL_UART_ErrorCallback+0x8c>)
 800065a:	f002 ff1f 	bl	800349c <HAL_UART_Transmit>

        // Optionally reset the UART
        //HAL_UART_DeInit(huart);
        //HAL_UART_Init(huart);  // Reinitialize if necessary
    }
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40013800 	.word	0x40013800
 800066c:	080049ac 	.word	0x080049ac
 8000670:	20000140 	.word	0x20000140
 8000674:	080049c4 	.word	0x080049c4
 8000678:	080049dc 	.word	0x080049dc
 800067c:	080049f4 	.word	0x080049f4

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fb67 	bl	8000d56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f81a 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f94c 	bl	8000928 <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 f92c 	bl	80008ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000694:	f000 f8fa 	bl	800088c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000698:	f000 f8c8 	bl	800082c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800069c:	f000 f872 	bl	8000784 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // Start TIM1 in interrupt mode
  HAL_TIM_Base_Start_IT(&htim1);
 80006a0:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <main+0x34>)
 80006a2:	f002 fad3 	bl	8002c4c <HAL_TIM_Base_Start_IT>
  // Start UART1 reception with DMA
//  HAL_UART_Receive_DMA(&huart1, sbusBuffer, SBUS_FRAME_LENGTH);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, sbusBuffer, SBUS_FRAME_LENGTH);
 80006a6:	2219      	movs	r2, #25
 80006a8:	4903      	ldr	r1, [pc, #12]	@ (80006b8 <main+0x38>)
 80006aa:	4804      	ldr	r0, [pc, #16]	@ (80006bc <main+0x3c>)
 80006ac:	f004 f8f0 	bl	8004890 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <main+0x30>
 80006b4:	2000006c 	.word	0x2000006c
 80006b8:	20000210 	.word	0x20000210
 80006bc:	200000b8 	.word	0x200000b8

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b096      	sub	sp, #88	@ 0x58
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2244      	movs	r2, #68	@ 0x44
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 f932 	bl	8004938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	463b      	mov	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006e6:	f001 f8d3 	bl	8001890 <HAL_PWREx_ControlVoltageScaling>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f0:	f000 f978 	bl	80009e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f4:	f001 f8ae 	bl	8001854 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <SystemClock_Config+0xc0>)
 80006fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006fe:	4a20      	ldr	r2, [pc, #128]	@ (8000780 <SystemClock_Config+0xc0>)
 8000700:	f023 0318 	bic.w	r3, r3, #24
 8000704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000708:	2314      	movs	r3, #20
 800070a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000718:	2360      	movs	r3, #96	@ 0x60
 800071a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000720:	2301      	movs	r3, #1
 8000722:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000728:	2310      	movs	r3, #16
 800072a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800072c:	2307      	movs	r3, #7
 800072e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4618      	mov	r0, r3
 800073e:	f001 f8fd 	bl	800193c <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000748:	f000 f94c 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2303      	movs	r3, #3
 8000752:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	2101      	movs	r1, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fcfd 	bl	8002164 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000770:	f000 f938 	bl	80009e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000774:	f002 f910 	bl	8002998 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000778:	bf00      	nop
 800077a:	3758      	adds	r7, #88	@ 0x58
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000

08000784 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a2:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <MX_TIM1_Init+0xa0>)
 80007a4:	4a20      	ldr	r2, [pc, #128]	@ (8000828 <MX_TIM1_Init+0xa4>)
 80007a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000-1;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <MX_TIM1_Init+0xa0>)
 80007aa:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80007ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <MX_TIM1_Init+0xa0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500-1;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_TIM1_Init+0xa0>)
 80007b8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80007bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <MX_TIM1_Init+0xa0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_TIM1_Init+0xa0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_TIM1_Init+0xa0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d0:	4814      	ldr	r0, [pc, #80]	@ (8000824 <MX_TIM1_Init+0xa0>)
 80007d2:	f002 f9e3 	bl	8002b9c <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f000 f902 	bl	80009e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	480d      	ldr	r0, [pc, #52]	@ (8000824 <MX_TIM1_Init+0xa0>)
 80007ee:	f002 fb88 	bl	8002f02 <HAL_TIM_ConfigClockSource>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80007f8:	f000 f8f4 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_TIM1_Init+0xa0>)
 800080e:	f002 fd73 	bl	80032f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000818:	f000 f8e4 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000006c 	.word	0x2000006c
 8000828:	40012c00 	.word	0x40012c00

0800082c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_USART1_UART_Init+0x54>)
 8000832:	4a14      	ldr	r2, [pc, #80]	@ (8000884 <MX_USART1_UART_Init+0x58>)
 8000834:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000836:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_USART1_UART_Init+0x54>)
 8000838:	4a13      	ldr	r2, [pc, #76]	@ (8000888 <MX_USART1_UART_Init+0x5c>)
 800083a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083c:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <MX_USART1_UART_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_USART1_UART_Init+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000848:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <MX_USART1_UART_Init+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_USART1_UART_Init+0x54>)
 8000850:	220c      	movs	r2, #12
 8000852:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_USART1_UART_Init+0x54>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_USART1_UART_Init+0x54>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <MX_USART1_UART_Init+0x54>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_USART1_UART_Init+0x54>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_USART1_UART_Init+0x54>)
 800086e:	f002 fdc7 	bl	8003400 <HAL_UART_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000878:	f000 f8b4 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000b8 	.word	0x200000b8
 8000884:	40013800 	.word	0x40013800
 8000888:	000186a0 	.word	0x000186a0

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_USART2_UART_Init+0x54>)
 8000892:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <MX_USART2_UART_Init+0x58>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_USART2_UART_Init+0x54>)
 8000898:	4a13      	ldr	r2, [pc, #76]	@ (80008e8 <MX_USART2_UART_Init+0x5c>)
 800089a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089c:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <MX_USART2_UART_Init+0x54>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_USART2_UART_Init+0x54>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <MX_USART2_UART_Init+0x54>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_USART2_UART_Init+0x54>)
 80008b0:	220c      	movs	r2, #12
 80008b2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <MX_USART2_UART_Init+0x54>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_USART2_UART_Init+0x54>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <MX_USART2_UART_Init+0x54>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_USART2_UART_Init+0x54>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <MX_USART2_UART_Init+0x54>)
 80008ce:	f002 fd97 	bl	8003400 <HAL_UART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80008d8:	f000 f884 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000140 	.word	0x20000140
 80008e4:	40004400 	.word	0x40004400
 80008e8:	000186a0 	.word	0x000186a0

080008ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_DMA_Init+0x38>)
 80008f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <MX_DMA_Init+0x38>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_DMA_Init+0x38>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	200f      	movs	r0, #15
 8000910:	f000 fb71 	bl	8000ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000914:	200f      	movs	r0, #15
 8000916:	f000 fb8a 	bl	800102e <HAL_NVIC_EnableIRQ>

}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <MX_GPIO_Init+0x8c>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	4a1c      	ldr	r2, [pc, #112]	@ (80009b4 <MX_GPIO_Init+0x8c>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094a:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_GPIO_Init+0x8c>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_GPIO_Init+0x8c>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	4a16      	ldr	r2, [pc, #88]	@ (80009b4 <MX_GPIO_Init+0x8c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_GPIO_Init+0x8c>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_GPIO_Init+0x8c>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	4a10      	ldr	r2, [pc, #64]	@ (80009b4 <MX_GPIO_Init+0x8c>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_GPIO_Init+0x8c>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2108      	movs	r1, #8
 800098a:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <MX_GPIO_Init+0x90>)
 800098c:	f000 ff4a 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000990:	2308      	movs	r3, #8
 8000992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_GPIO_Init+0x90>)
 80009a8:	f000 fdd2 	bl	8001550 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000400 	.word	0x48000400

080009bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d102      	bne.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
//  	  HAL_UART_Transmit(&huart2, data_sBusTest, sizeof(data_sBusTest), 100);
  	  HAL_UART_ErrorCallback(&huart1);
 80009ce:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80009d0:	f7ff fe08 	bl	80005e4 <HAL_UART_ErrorCallback>
    }
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40012c00 	.word	0x40012c00
 80009e0:	200000b8 	.word	0x200000b8

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <HAL_MspInit+0x44>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000a34 <HAL_MspInit+0x44>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <HAL_TIM_Base_MspInit+0x44>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d113      	bne.n	8000a72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <HAL_TIM_Base_MspInit+0x48>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a80 <HAL_TIM_Base_MspInit+0x48>)
 8000a50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a56:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <HAL_TIM_Base_MspInit+0x48>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2019      	movs	r0, #25
 8000a68:	f000 fac5 	bl	8000ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a6c:	2019      	movs	r0, #25
 8000a6e:	f000 fade 	bl	800102e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40012c00 	.word	0x40012c00
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0a0      	sub	sp, #128	@ 0x80
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	2254      	movs	r2, #84	@ 0x54
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 ff47 	bl	8004938 <memset>
  if(huart->Instance==USART1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a60      	ldr	r2, [pc, #384]	@ (8000c30 <HAL_UART_MspInit+0x1ac>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d16a      	bne.n	8000b8a <HAL_UART_MspInit+0x106>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fd73 	bl	80025ac <HAL_RCCEx_PeriphCLKConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000acc:	f7ff ff8a 	bl	80009e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ad0:	4b58      	ldr	r3, [pc, #352]	@ (8000c34 <HAL_UART_MspInit+0x1b0>)
 8000ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad4:	4a57      	ldr	r2, [pc, #348]	@ (8000c34 <HAL_UART_MspInit+0x1b0>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ada:	6613      	str	r3, [r2, #96]	@ 0x60
 8000adc:	4b55      	ldr	r3, [pc, #340]	@ (8000c34 <HAL_UART_MspInit+0x1b0>)
 8000ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b52      	ldr	r3, [pc, #328]	@ (8000c34 <HAL_UART_MspInit+0x1b0>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aec:	4a51      	ldr	r2, [pc, #324]	@ (8000c34 <HAL_UART_MspInit+0x1b0>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af4:	4b4f      	ldr	r3, [pc, #316]	@ (8000c34 <HAL_UART_MspInit+0x1b0>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b00:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b12:	2307      	movs	r3, #7
 8000b14:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b20:	f000 fd16 	bl	8001550 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000b24:	4b44      	ldr	r3, [pc, #272]	@ (8000c38 <HAL_UART_MspInit+0x1b4>)
 8000b26:	4a45      	ldr	r2, [pc, #276]	@ (8000c3c <HAL_UART_MspInit+0x1b8>)
 8000b28:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000b2a:	4b43      	ldr	r3, [pc, #268]	@ (8000c38 <HAL_UART_MspInit+0x1b4>)
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b30:	4b41      	ldr	r3, [pc, #260]	@ (8000c38 <HAL_UART_MspInit+0x1b4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b36:	4b40      	ldr	r3, [pc, #256]	@ (8000c38 <HAL_UART_MspInit+0x1b4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c38 <HAL_UART_MspInit+0x1b4>)
 8000b3e:	2280      	movs	r2, #128	@ 0x80
 8000b40:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b42:	4b3d      	ldr	r3, [pc, #244]	@ (8000c38 <HAL_UART_MspInit+0x1b4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b48:	4b3b      	ldr	r3, [pc, #236]	@ (8000c38 <HAL_UART_MspInit+0x1b4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <HAL_UART_MspInit+0x1b4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b54:	4b38      	ldr	r3, [pc, #224]	@ (8000c38 <HAL_UART_MspInit+0x1b4>)
 8000b56:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000b5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b5c:	4836      	ldr	r0, [pc, #216]	@ (8000c38 <HAL_UART_MspInit+0x1b4>)
 8000b5e:	f000 fa81 	bl	8001064 <HAL_DMA_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8000b68:	f7ff ff3c 	bl	80009e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a32      	ldr	r2, [pc, #200]	@ (8000c38 <HAL_UART_MspInit+0x1b4>)
 8000b70:	675a      	str	r2, [r3, #116]	@ 0x74
 8000b72:	4a31      	ldr	r2, [pc, #196]	@ (8000c38 <HAL_UART_MspInit+0x1b4>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2025      	movs	r0, #37	@ 0x25
 8000b7e:	f000 fa3a 	bl	8000ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b82:	2025      	movs	r0, #37	@ 0x25
 8000b84:	f000 fa53 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b88:	e04d      	b.n	8000c26 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART2)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c40 <HAL_UART_MspInit+0x1bc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d148      	bne.n	8000c26 <HAL_UART_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fd03 	bl	80025ac <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_UART_MspInit+0x12c>
      Error_Handler();
 8000bac:	f7ff ff1a 	bl	80009e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb0:	4b20      	ldr	r3, [pc, #128]	@ (8000c34 <HAL_UART_MspInit+0x1b0>)
 8000bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c34 <HAL_UART_MspInit+0x1b0>)
 8000bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <HAL_UART_MspInit+0x1b0>)
 8000bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_UART_MspInit+0x1b0>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bcc:	4a19      	ldr	r2, [pc, #100]	@ (8000c34 <HAL_UART_MspInit+0x1b0>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd4:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <HAL_UART_MspInit+0x1b0>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000be0:	2304      	movs	r3, #4
 8000be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfe:	f000 fca7 	bl	8001550 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c14:	2303      	movs	r3, #3
 8000c16:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c22:	f000 fc95 	bl	8001550 <HAL_GPIO_Init>
}
 8000c26:	bf00      	nop
 8000c28:	3780      	adds	r7, #128	@ 0x80
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40013800 	.word	0x40013800
 8000c34:	40021000 	.word	0x40021000
 8000c38:	200001c8 	.word	0x200001c8
 8000c3c:	40020058 	.word	0x40020058
 8000c40:	40004400 	.word	0x40004400

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <NMI_Handler+0x4>

08000c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9a:	f000 f8b1 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ca8:	4802      	ldr	r0, [pc, #8]	@ (8000cb4 <DMA1_Channel5_IRQHandler+0x10>)
 8000caa:	f000 fb72 	bl	8001392 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200001c8 	.word	0x200001c8

08000cb8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000cbe:	f002 f819 	bl	8002cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000006c 	.word	0x2000006c

08000ccc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <USART1_IRQHandler+0x10>)
 8000cd2:	f002 fc6d 	bl	80035b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000b8 	.word	0x200000b8

08000ce0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d08:	f7ff ffea 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	@ (8000d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <LoopForever+0xe>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	@ (8000d50 <LoopForever+0x16>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d32:	f003 fe09 	bl	8004948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d36:	f7ff fca3 	bl	8000680 <main>

08000d3a <LoopForever>:

LoopForever:
    b LoopForever
 8000d3a:	e7fe      	b.n	8000d3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d3c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000d48:	08004a64 	.word	0x08004a64
  ldr r2, =_sbss
 8000d4c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000d50:	20000250 	.word	0x20000250

08000d54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC1_IRQHandler>

08000d56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f93d 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d66:	2000      	movs	r0, #0
 8000d68:	f000 f80e 	bl	8000d88 <HAL_InitTick>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d002      	beq.n	8000d78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	71fb      	strb	r3, [r7, #7]
 8000d76:	e001      	b.n	8000d7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d78:	f7ff fe3a 	bl	80009f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d94:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <HAL_InitTick+0x6c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d023      	beq.n	8000de4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <HAL_InitTick+0x70>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <HAL_InitTick+0x6c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f949 	bl	800104a <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10f      	bne.n	8000dde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d809      	bhi.n	8000dd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f000 f913 	bl	8000ff6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_InitTick+0x74>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e007      	b.n	8000de8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e004      	b.n	8000de8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	73fb      	strb	r3, [r7, #15]
 8000de2:	e001      	b.n	8000de8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000004c 	.word	0x2000004c
 8000df8:	20000044 	.word	0x20000044
 8000dfc:	20000048 	.word	0x20000048

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	2000004c 	.word	0x2000004c
 8000e24:	2000024c 	.word	0x2000024c

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	2000024c 	.word	0x2000024c

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	@ (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	@ (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	@ 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff29 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff3e 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff31 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffa2 	bl	8000f9c <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e098      	b.n	80011a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b4d      	ldr	r3, [pc, #308]	@ (80011b4 <HAL_DMA_Init+0x150>)
 800107e:	429a      	cmp	r2, r3
 8001080:	d80f      	bhi.n	80010a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	4b4b      	ldr	r3, [pc, #300]	@ (80011b8 <HAL_DMA_Init+0x154>)
 800108a:	4413      	add	r3, r2
 800108c:	4a4b      	ldr	r2, [pc, #300]	@ (80011bc <HAL_DMA_Init+0x158>)
 800108e:	fba2 2303 	umull	r2, r3, r2, r3
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	009a      	lsls	r2, r3, #2
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a48      	ldr	r2, [pc, #288]	@ (80011c0 <HAL_DMA_Init+0x15c>)
 800109e:	641a      	str	r2, [r3, #64]	@ 0x40
 80010a0:	e00e      	b.n	80010c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b46      	ldr	r3, [pc, #280]	@ (80011c4 <HAL_DMA_Init+0x160>)
 80010aa:	4413      	add	r3, r2
 80010ac:	4a43      	ldr	r2, [pc, #268]	@ (80011bc <HAL_DMA_Init+0x158>)
 80010ae:	fba2 2303 	umull	r2, r3, r2, r3
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	009a      	lsls	r2, r3, #2
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a42      	ldr	r2, [pc, #264]	@ (80011c8 <HAL_DMA_Init+0x164>)
 80010be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2202      	movs	r2, #2
 80010c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80010d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80010da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800111a:	d039      	beq.n	8001190 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	4a27      	ldr	r2, [pc, #156]	@ (80011c0 <HAL_DMA_Init+0x15c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d11a      	bne.n	800115c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001126:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <HAL_DMA_Init+0x168>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	f003 031c 	and.w	r3, r3, #28
 8001132:	210f      	movs	r1, #15
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	4924      	ldr	r1, [pc, #144]	@ (80011cc <HAL_DMA_Init+0x168>)
 800113c:	4013      	ands	r3, r2
 800113e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001140:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <HAL_DMA_Init+0x168>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6859      	ldr	r1, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114c:	f003 031c 	and.w	r3, r3, #28
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	491d      	ldr	r1, [pc, #116]	@ (80011cc <HAL_DMA_Init+0x168>)
 8001156:	4313      	orrs	r3, r2
 8001158:	600b      	str	r3, [r1, #0]
 800115a:	e019      	b.n	8001190 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800115c:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <HAL_DMA_Init+0x16c>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001164:	f003 031c 	and.w	r3, r3, #28
 8001168:	210f      	movs	r1, #15
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	4917      	ldr	r1, [pc, #92]	@ (80011d0 <HAL_DMA_Init+0x16c>)
 8001172:	4013      	ands	r3, r2
 8001174:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001176:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <HAL_DMA_Init+0x16c>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6859      	ldr	r1, [r3, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	f003 031c 	and.w	r3, r3, #28
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	4911      	ldr	r1, [pc, #68]	@ (80011d0 <HAL_DMA_Init+0x16c>)
 800118c:	4313      	orrs	r3, r2
 800118e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	40020407 	.word	0x40020407
 80011b8:	bffdfff8 	.word	0xbffdfff8
 80011bc:	cccccccd 	.word	0xcccccccd
 80011c0:	40020000 	.word	0x40020000
 80011c4:	bffdfbf8 	.word	0xbffdfbf8
 80011c8:	40020400 	.word	0x40020400
 80011cc:	400200a8 	.word	0x400200a8
 80011d0:	400204a8 	.word	0x400204a8

080011d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_DMA_Start_IT+0x20>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e04b      	b.n	800128c <HAL_DMA_Start_IT+0xb8>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d13a      	bne.n	800127e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2202      	movs	r2, #2
 800120c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2200      	movs	r2, #0
 8001214:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0201 	bic.w	r2, r2, #1
 8001224:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	68b9      	ldr	r1, [r7, #8]
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f000 f95f 	bl	80014f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	2b00      	cmp	r3, #0
 8001238:	d008      	beq.n	800124c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 020e 	orr.w	r2, r2, #14
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e00f      	b.n	800126c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0204 	bic.w	r2, r2, #4
 800125a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 020a 	orr.w	r2, r2, #10
 800126a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	e005      	b.n	800128a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001286:	2302      	movs	r3, #2
 8001288:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800128a:	7dfb      	ldrb	r3, [r7, #23]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d008      	beq.n	80012be <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2204      	movs	r2, #4
 80012b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e022      	b.n	8001304 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 020e 	bic.w	r2, r2, #14
 80012cc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	f003 021c 	and.w	r2, r3, #28
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	2101      	movs	r1, #1
 80012ec:	fa01 f202 	lsl.w	r2, r1, r2
 80012f0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d005      	beq.n	8001334 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2204      	movs	r2, #4
 800132c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e029      	b.n	8001388 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 020e 	bic.w	r2, r2, #14
 8001342:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001358:	f003 021c 	and.w	r2, r3, #28
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	2101      	movs	r1, #1
 8001362:	fa01 f202 	lsl.w	r2, r1, r2
 8001366:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	4798      	blx	r3
    }
  }
  return status;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	f003 031c 	and.w	r3, r3, #28
 80013b2:	2204      	movs	r2, #4
 80013b4:	409a      	lsls	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d026      	beq.n	800140c <HAL_DMA_IRQHandler+0x7a>
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d021      	beq.n	800140c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d107      	bne.n	80013e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0204 	bic.w	r2, r2, #4
 80013e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	f003 021c 	and.w	r2, r3, #28
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	2104      	movs	r1, #4
 80013f4:	fa01 f202 	lsl.w	r2, r1, r2
 80013f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d071      	beq.n	80014e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800140a:	e06c      	b.n	80014e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001410:	f003 031c 	and.w	r3, r3, #28
 8001414:	2202      	movs	r2, #2
 8001416:	409a      	lsls	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4013      	ands	r3, r2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d02e      	beq.n	800147e <HAL_DMA_IRQHandler+0xec>
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d029      	beq.n	800147e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10b      	bne.n	8001450 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 020a 	bic.w	r2, r2, #10
 8001446:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001454:	f003 021c 	and.w	r2, r3, #28
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	2102      	movs	r1, #2
 800145e:	fa01 f202 	lsl.w	r2, r1, r2
 8001462:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001470:	2b00      	cmp	r3, #0
 8001472:	d038      	beq.n	80014e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800147c:	e033      	b.n	80014e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f003 031c 	and.w	r3, r3, #28
 8001486:	2208      	movs	r2, #8
 8001488:	409a      	lsls	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d02a      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x156>
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d025      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 020e 	bic.w	r2, r2, #14
 80014aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b0:	f003 021c 	and.w	r2, r3, #28
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	2101      	movs	r1, #1
 80014ba:	fa01 f202 	lsl.w	r2, r1, r2
 80014be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
}
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	f003 021c 	and.w	r2, r3, #28
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b10      	cmp	r3, #16
 8001520:	d108      	bne.n	8001534 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001532:	e007      	b.n	8001544 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	60da      	str	r2, [r3, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155e:	e148      	b.n	80017f2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 813a 	beq.w	80017ec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b01      	cmp	r3, #1
 8001582:	d005      	beq.n	8001590 <HAL_GPIO_Init+0x40>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d130      	bne.n	80015f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015c6:	2201      	movs	r2, #1
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	f003 0201 	and.w	r2, r3, #1
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d017      	beq.n	800162e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2203      	movs	r2, #3
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d123      	bne.n	8001682 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	08da      	lsrs	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3208      	adds	r2, #8
 8001642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	6939      	ldr	r1, [r7, #16]
 800167e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0203 	and.w	r2, r3, #3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8094 	beq.w	80017ec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c4:	4b52      	ldr	r3, [pc, #328]	@ (8001810 <HAL_GPIO_Init+0x2c0>)
 80016c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c8:	4a51      	ldr	r2, [pc, #324]	@ (8001810 <HAL_GPIO_Init+0x2c0>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80016d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001810 <HAL_GPIO_Init+0x2c0>)
 80016d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001814 <HAL_GPIO_Init+0x2c4>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001706:	d00d      	beq.n	8001724 <HAL_GPIO_Init+0x1d4>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a43      	ldr	r2, [pc, #268]	@ (8001818 <HAL_GPIO_Init+0x2c8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d007      	beq.n	8001720 <HAL_GPIO_Init+0x1d0>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a42      	ldr	r2, [pc, #264]	@ (800181c <HAL_GPIO_Init+0x2cc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d101      	bne.n	800171c <HAL_GPIO_Init+0x1cc>
 8001718:	2302      	movs	r3, #2
 800171a:	e004      	b.n	8001726 <HAL_GPIO_Init+0x1d6>
 800171c:	2307      	movs	r3, #7
 800171e:	e002      	b.n	8001726 <HAL_GPIO_Init+0x1d6>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_GPIO_Init+0x1d6>
 8001724:	2300      	movs	r3, #0
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	4093      	lsls	r3, r2
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001736:	4937      	ldr	r1, [pc, #220]	@ (8001814 <HAL_GPIO_Init+0x2c4>)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001744:	4b36      	ldr	r3, [pc, #216]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001768:	4a2d      	ldr	r2, [pc, #180]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800176e:	4b2c      	ldr	r3, [pc, #176]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001792:	4a23      	ldr	r2, [pc, #140]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001798:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017bc:	4a18      	ldr	r2, [pc, #96]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f47f aeaf 	bne.w	8001560 <HAL_GPIO_Init+0x10>
  }
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000
 8001818:	48000400 	.word	0x48000400
 800181c:	48000800 	.word	0x48000800
 8001820:	40010400 	.word	0x40010400

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001834:	787b      	ldrb	r3, [r7, #1]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001840:	e002      	b.n	8001848 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001858:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40007000 	.word	0x40007000

08001874 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001878:	4b04      	ldr	r3, [pc, #16]	@ (800188c <HAL_PWREx_GetVoltageRange+0x18>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40007000 	.word	0x40007000

08001890 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800189e:	d130      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a0:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018ac:	d038      	beq.n	8001920 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2232      	movs	r2, #50	@ 0x32
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	0c9b      	lsrs	r3, r3, #18
 80018d0:	3301      	adds	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d4:	e002      	b.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3b01      	subs	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018dc:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018e8:	d102      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f2      	bne.n	80018d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018fc:	d110      	bne.n	8001920 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e00f      	b.n	8001922 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001902:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800190a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800190e:	d007      	beq.n	8001920 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001910:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001918:	4a05      	ldr	r2, [pc, #20]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800191e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40007000 	.word	0x40007000
 8001934:	20000044 	.word	0x20000044
 8001938:	431bde83 	.word	0x431bde83

0800193c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	f000 bc02 	b.w	8002154 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001950:	4b96      	ldr	r3, [pc, #600]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800195a:	4b94      	ldr	r3, [pc, #592]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80e4 	beq.w	8001b3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d007      	beq.n	8001988 <HAL_RCC_OscConfig+0x4c>
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2b0c      	cmp	r3, #12
 800197c:	f040 808b 	bne.w	8001a96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b01      	cmp	r3, #1
 8001984:	f040 8087 	bne.w	8001a96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001988:	4b88      	ldr	r3, [pc, #544]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_OscConfig+0x64>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e3d9      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1a      	ldr	r2, [r3, #32]
 80019a4:	4b81      	ldr	r3, [pc, #516]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_RCC_OscConfig+0x7e>
 80019b0:	4b7e      	ldr	r3, [pc, #504]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019b8:	e005      	b.n	80019c6 <HAL_RCC_OscConfig+0x8a>
 80019ba:	4b7c      	ldr	r3, [pc, #496]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 80019bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d223      	bcs.n	8001a12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fd8c 	bl	80024ec <RCC_SetFlashLatencyFromMSIRange>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e3ba      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019de:	4b73      	ldr	r3, [pc, #460]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a72      	ldr	r2, [pc, #456]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b70      	ldr	r3, [pc, #448]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	496d      	ldr	r1, [pc, #436]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019fc:	4b6b      	ldr	r3, [pc, #428]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	4968      	ldr	r1, [pc, #416]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
 8001a10:	e025      	b.n	8001a5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a12:	4b66      	ldr	r3, [pc, #408]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a65      	ldr	r2, [pc, #404]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b63      	ldr	r3, [pc, #396]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4960      	ldr	r1, [pc, #384]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a30:	4b5e      	ldr	r3, [pc, #376]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	495b      	ldr	r1, [pc, #364]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fd4c 	bl	80024ec <RCC_SetFlashLatencyFromMSIRange>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e37a      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a5e:	f000 fc81 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8001a62:	4602      	mov	r2, r0
 8001a64:	4b51      	ldr	r3, [pc, #324]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	4950      	ldr	r1, [pc, #320]	@ (8001bb0 <HAL_RCC_OscConfig+0x274>)
 8001a70:	5ccb      	ldrb	r3, [r1, r3]
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	4a4e      	ldr	r2, [pc, #312]	@ (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb8 <HAL_RCC_OscConfig+0x27c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f980 	bl	8000d88 <HAL_InitTick>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d052      	beq.n	8001b38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	e35e      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d032      	beq.n	8001b04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a9e:	4b43      	ldr	r3, [pc, #268]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a42      	ldr	r2, [pc, #264]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f9bd 	bl	8000e28 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ab2:	f7ff f9b9 	bl	8000e28 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e347      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ac4:	4b39      	ldr	r3, [pc, #228]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad0:	4b36      	ldr	r3, [pc, #216]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a35      	ldr	r2, [pc, #212]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001ad6:	f043 0308 	orr.w	r3, r3, #8
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b33      	ldr	r3, [pc, #204]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4930      	ldr	r1, [pc, #192]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aee:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	492b      	ldr	r1, [pc, #172]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
 8001b02:	e01a      	b.n	8001b3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b04:	4b29      	ldr	r3, [pc, #164]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a28      	ldr	r2, [pc, #160]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b10:	f7ff f98a 	bl	8000e28 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b18:	f7ff f986 	bl	8000e28 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e314      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b2a:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x1dc>
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d073      	beq.n	8001c2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_OscConfig+0x21c>
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d10e      	bne.n	8001b70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d10b      	bne.n	8001b70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d063      	beq.n	8001c2c <HAL_RCC_OscConfig+0x2f0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d15f      	bne.n	8001c2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e2f1      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b78:	d106      	bne.n	8001b88 <HAL_RCC_OscConfig+0x24c>
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e025      	b.n	8001bd4 <HAL_RCC_OscConfig+0x298>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b90:	d114      	bne.n	8001bbc <HAL_RCC_OscConfig+0x280>
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a02      	ldr	r2, [pc, #8]	@ (8001bac <HAL_RCC_OscConfig+0x270>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e013      	b.n	8001bd4 <HAL_RCC_OscConfig+0x298>
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	08004a0c 	.word	0x08004a0c
 8001bb4:	20000044 	.word	0x20000044
 8001bb8:	20000048 	.word	0x20000048
 8001bbc:	4ba0      	ldr	r3, [pc, #640]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a9f      	ldr	r2, [pc, #636]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b9d      	ldr	r3, [pc, #628]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a9c      	ldr	r2, [pc, #624]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f924 	bl	8000e28 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff f920 	bl	8000e28 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	@ 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e2ae      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf6:	4b92      	ldr	r3, [pc, #584]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x2a8>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff f910 	bl	8000e28 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff f90c 	bl	8000e28 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	@ 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e29a      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c1e:	4b88      	ldr	r3, [pc, #544]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x2d0>
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d060      	beq.n	8001cfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_OscConfig+0x310>
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d119      	bne.n	8001c7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d116      	bne.n	8001c7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c4c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_OscConfig+0x328>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e277      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	4b76      	ldr	r3, [pc, #472]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	061b      	lsls	r3, r3, #24
 8001c72:	4973      	ldr	r1, [pc, #460]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c78:	e040      	b.n	8001cfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d023      	beq.n	8001cca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c82:	4b6f      	ldr	r3, [pc, #444]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a6e      	ldr	r2, [pc, #440]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f8cb 	bl	8000e28 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c96:	f7ff f8c7 	bl	8000e28 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e255      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca8:	4b65      	ldr	r3, [pc, #404]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b62      	ldr	r3, [pc, #392]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	495f      	ldr	r1, [pc, #380]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
 8001cc8:	e018      	b.n	8001cfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cca:	4b5d      	ldr	r3, [pc, #372]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a5c      	ldr	r2, [pc, #368]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7ff f8a7 	bl	8000e28 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff f8a3 	bl	8000e28 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e231      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf0:	4b53      	ldr	r3, [pc, #332]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d03c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d01c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d10:	4b4b      	ldr	r3, [pc, #300]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d16:	4a4a      	ldr	r2, [pc, #296]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d20:	f7ff f882 	bl	8000e28 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff f87e 	bl	8000e28 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e20c      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d3a:	4b41      	ldr	r3, [pc, #260]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ef      	beq.n	8001d28 <HAL_RCC_OscConfig+0x3ec>
 8001d48:	e01b      	b.n	8001d82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d50:	4a3b      	ldr	r2, [pc, #236]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff f865 	bl	8000e28 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d62:	f7ff f861 	bl	8000e28 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e1ef      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d74:	4b32      	ldr	r3, [pc, #200]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ef      	bne.n	8001d62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80a6 	beq.w	8001edc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d94:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10d      	bne.n	8001dbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da0:	4b27      	ldr	r3, [pc, #156]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da4:	4a26      	ldr	r2, [pc, #152]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dac:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db8:	2301      	movs	r3, #1
 8001dba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbc:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <HAL_RCC_OscConfig+0x508>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d118      	bne.n	8001dfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <HAL_RCC_OscConfig+0x508>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001e44 <HAL_RCC_OscConfig+0x508>)
 8001dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd4:	f7ff f828 	bl	8000e28 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ddc:	f7ff f824 	bl	8000e28 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1b2      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_RCC_OscConfig+0x508>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d108      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4d8>
 8001e02:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e12:	e029      	b.n	8001e68 <HAL_RCC_OscConfig+0x52c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d115      	bne.n	8001e48 <HAL_RCC_OscConfig+0x50c>
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e22:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e2c:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e32:	4a03      	ldr	r2, [pc, #12]	@ (8001e40 <HAL_RCC_OscConfig+0x504>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e3c:	e014      	b.n	8001e68 <HAL_RCC_OscConfig+0x52c>
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40007000 	.word	0x40007000
 8001e48:	4b9a      	ldr	r3, [pc, #616]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4e:	4a99      	ldr	r2, [pc, #612]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e58:	4b96      	ldr	r3, [pc, #600]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	4a95      	ldr	r2, [pc, #596]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d016      	beq.n	8001e9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7fe ffda 	bl	8000e28 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7fe ffd6 	bl	8000e28 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e162      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8e:	4b89      	ldr	r3, [pc, #548]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ed      	beq.n	8001e78 <HAL_RCC_OscConfig+0x53c>
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7fe ffc3 	bl	8000e28 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7fe ffbf 	bl	8000e28 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e14b      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ebc:	4b7d      	ldr	r3, [pc, #500]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1ed      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eca:	7ffb      	ldrb	r3, [r7, #31]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4b78      	ldr	r3, [pc, #480]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	4a77      	ldr	r2, [pc, #476]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001ed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d03c      	beq.n	8001f62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ef0:	4b70      	ldr	r3, [pc, #448]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ef6:	4a6f      	ldr	r2, [pc, #444]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7fe ff92 	bl	8000e28 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f08:	f7fe ff8e 	bl	8000e28 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e11c      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f1a:	4b66      	ldr	r3, [pc, #408]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ef      	beq.n	8001f08 <HAL_RCC_OscConfig+0x5cc>
 8001f28:	e01b      	b.n	8001f62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f2a:	4b62      	ldr	r3, [pc, #392]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f30:	4a60      	ldr	r2, [pc, #384]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7fe ff75 	bl	8000e28 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f42:	f7fe ff71 	bl	8000e28 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0ff      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f54:	4b57      	ldr	r3, [pc, #348]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ef      	bne.n	8001f42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80f3 	beq.w	8002152 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	f040 80c9 	bne.w	8002108 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f76:	4b4f      	ldr	r3, [pc, #316]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0203 	and.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d12c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	3b01      	subs	r3, #1
 8001f96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d123      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d11b      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d113      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc6:	085b      	lsrs	r3, r3, #1
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d109      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d06b      	beq.n	80020bc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	d062      	beq.n	80020b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fea:	4b32      	ldr	r3, [pc, #200]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e0ac      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a2d      	ldr	r2, [pc, #180]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8002000:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002004:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002006:	f7fe ff0f 	bl	8000e28 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe ff0b 	bl	8000e28 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e099      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002020:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4b21      	ldr	r3, [pc, #132]	@ (80020b8 <HAL_RCC_OscConfig+0x77c>)
 8002032:	4013      	ands	r3, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800203c:	3a01      	subs	r2, #1
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	4311      	orrs	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002046:	0212      	lsls	r2, r2, #8
 8002048:	4311      	orrs	r1, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800204e:	0852      	lsrs	r2, r2, #1
 8002050:	3a01      	subs	r2, #1
 8002052:	0552      	lsls	r2, r2, #21
 8002054:	4311      	orrs	r1, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800205a:	0852      	lsrs	r2, r2, #1
 800205c:	3a01      	subs	r2, #1
 800205e:	0652      	lsls	r2, r2, #25
 8002060:	4311      	orrs	r1, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002066:	06d2      	lsls	r2, r2, #27
 8002068:	430a      	orrs	r2, r1
 800206a:	4912      	ldr	r1, [pc, #72]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 800206c:	4313      	orrs	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002070:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0f      	ldr	r2, [pc, #60]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8002076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800207a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800207c:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a0c      	ldr	r2, [pc, #48]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 8002082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002086:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002088:	f7fe fece 	bl	8000e28 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7fe feca 	bl	8000e28 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e058      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a2:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <HAL_RCC_OscConfig+0x778>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ae:	e050      	b.n	8002152 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e04f      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
 80020b4:	40021000 	.word	0x40021000
 80020b8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020bc:	4b27      	ldr	r3, [pc, #156]	@ (800215c <HAL_RCC_OscConfig+0x820>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d144      	bne.n	8002152 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020c8:	4b24      	ldr	r3, [pc, #144]	@ (800215c <HAL_RCC_OscConfig+0x820>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a23      	ldr	r2, [pc, #140]	@ (800215c <HAL_RCC_OscConfig+0x820>)
 80020ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d4:	4b21      	ldr	r3, [pc, #132]	@ (800215c <HAL_RCC_OscConfig+0x820>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a20      	ldr	r2, [pc, #128]	@ (800215c <HAL_RCC_OscConfig+0x820>)
 80020da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020e0:	f7fe fea2 	bl	8000e28 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe fe9e 	bl	8000e28 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e02c      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fa:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HAL_RCC_OscConfig+0x820>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x7ac>
 8002106:	e024      	b.n	8002152 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d01f      	beq.n	800214e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HAL_RCC_OscConfig+0x820>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a12      	ldr	r2, [pc, #72]	@ (800215c <HAL_RCC_OscConfig+0x820>)
 8002114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7fe fe85 	bl	8000e28 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe fe81 	bl	8000e28 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e00f      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002134:	4b09      	ldr	r3, [pc, #36]	@ (800215c <HAL_RCC_OscConfig+0x820>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_RCC_OscConfig+0x820>)
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	4905      	ldr	r1, [pc, #20]	@ (800215c <HAL_RCC_OscConfig+0x820>)
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_RCC_OscConfig+0x824>)
 8002148:	4013      	ands	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
 800214c:	e001      	b.n	8002152 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	feeefffc 	.word	0xfeeefffc

08002164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0e7      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b75      	ldr	r3, [pc, #468]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d910      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b72      	ldr	r3, [pc, #456]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	4970      	ldr	r1, [pc, #448]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b6e      	ldr	r3, [pc, #440]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0cf      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4b66      	ldr	r3, [pc, #408]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d908      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c4:	4b63      	ldr	r3, [pc, #396]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4960      	ldr	r1, [pc, #384]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d04c      	beq.n	800227c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d121      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0a6      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002202:	4b54      	ldr	r3, [pc, #336]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d115      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e09a      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800221a:	4b4e      	ldr	r3, [pc, #312]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e08e      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222a:	4b4a      	ldr	r3, [pc, #296]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e086      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b46      	ldr	r3, [pc, #280]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4943      	ldr	r1, [pc, #268]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002248:	4313      	orrs	r3, r2
 800224a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800224c:	f7fe fdec 	bl	8000e28 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7fe fde8 	bl	8000e28 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e06e      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b3a      	ldr	r3, [pc, #232]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d010      	beq.n	80022aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	4b31      	ldr	r3, [pc, #196]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002294:	429a      	cmp	r2, r3
 8002296:	d208      	bcs.n	80022aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002298:	4b2e      	ldr	r3, [pc, #184]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	492b      	ldr	r1, [pc, #172]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022aa:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d210      	bcs.n	80022da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b8:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 0207 	bic.w	r2, r3, #7
 80022c0:	4923      	ldr	r1, [pc, #140]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c8:	4b21      	ldr	r3, [pc, #132]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e036      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	4918      	ldr	r1, [pc, #96]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002304:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4910      	ldr	r1, [pc, #64]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002318:	f000 f824 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	490b      	ldr	r1, [pc, #44]	@ (8002358 <HAL_RCC_ClockConfig+0x1f4>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	4a09      	ldr	r2, [pc, #36]	@ (800235c <HAL_RCC_ClockConfig+0x1f8>)
 8002336:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002338:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_RCC_ClockConfig+0x1fc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe fd23 	bl	8000d88 <HAL_InitTick>
 8002342:	4603      	mov	r3, r0
 8002344:	72fb      	strb	r3, [r7, #11]

  return status;
 8002346:	7afb      	ldrb	r3, [r7, #11]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40022000 	.word	0x40022000
 8002354:	40021000 	.word	0x40021000
 8002358:	08004a0c 	.word	0x08004a0c
 800235c:	20000044 	.word	0x20000044
 8002360:	20000048 	.word	0x20000048

08002364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002372:	4b3e      	ldr	r3, [pc, #248]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800237c:	4b3b      	ldr	r3, [pc, #236]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x34>
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d121      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d11e      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002398:	4b34      	ldr	r3, [pc, #208]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023a4:	4b31      	ldr	r3, [pc, #196]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 80023a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	e005      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023b4:	4b2d      	ldr	r3, [pc, #180]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10d      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023dc:	4b25      	ldr	r3, [pc, #148]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x110>)
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	e004      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023e8:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d134      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023f2:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d003      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0xa6>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d003      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0xac>
 8002408:	e005      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800240a:	4b1a      	ldr	r3, [pc, #104]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x110>)
 800240c:	617b      	str	r3, [r7, #20]
      break;
 800240e:	e005      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002410:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x114>)
 8002412:	617b      	str	r3, [r7, #20]
      break;
 8002414:	e002      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	617b      	str	r3, [r7, #20]
      break;
 800241a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800241c:	4b13      	ldr	r3, [pc, #76]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	3301      	adds	r3, #1
 8002428:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800242a:	4b10      	ldr	r3, [pc, #64]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	fb03 f202 	mul.w	r2, r3, r2
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002442:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	0e5b      	lsrs	r3, r3, #25
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	3301      	adds	r3, #1
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800245c:	69bb      	ldr	r3, [r7, #24]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	@ 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	08004a24 	.word	0x08004a24
 8002474:	00f42400 	.word	0x00f42400
 8002478:	007a1200 	.word	0x007a1200

0800247c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <HAL_RCC_GetHCLKFreq+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000044 	.word	0x20000044

08002494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002498:	f7ff fff0 	bl	800247c <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4904      	ldr	r1, [pc, #16]	@ (80024bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08004a1c 	.word	0x08004a1c

080024c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024c4:	f7ff ffda 	bl	800247c <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0adb      	lsrs	r3, r3, #11
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4904      	ldr	r1, [pc, #16]	@ (80024e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08004a1c 	.word	0x08004a1c

080024ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024f8:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002504:	f7ff f9b6 	bl	8001874 <HAL_PWREx_GetVoltageRange>
 8002508:	6178      	str	r0, [r7, #20]
 800250a:	e014      	b.n	8002536 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800250c:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	4a24      	ldr	r2, [pc, #144]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002516:	6593      	str	r3, [r2, #88]	@ 0x58
 8002518:	4b22      	ldr	r3, [pc, #136]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002524:	f7ff f9a6 	bl	8001874 <HAL_PWREx_GetVoltageRange>
 8002528:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	4a1d      	ldr	r2, [pc, #116]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002534:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800253c:	d10b      	bne.n	8002556 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b80      	cmp	r3, #128	@ 0x80
 8002542:	d919      	bls.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2ba0      	cmp	r3, #160	@ 0xa0
 8002548:	d902      	bls.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800254a:	2302      	movs	r3, #2
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	e013      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002550:	2301      	movs	r3, #1
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	e010      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b80      	cmp	r3, #128	@ 0x80
 800255a:	d902      	bls.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800255c:	2303      	movs	r3, #3
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e00a      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b80      	cmp	r3, #128	@ 0x80
 8002566:	d102      	bne.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002568:	2302      	movs	r3, #2
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e004      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b70      	cmp	r3, #112	@ 0x70
 8002572:	d101      	bne.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002574:	2301      	movs	r3, #1
 8002576:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 0207 	bic.w	r2, r3, #7
 8002580:	4909      	ldr	r1, [pc, #36]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002588:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	429a      	cmp	r2, r3
 8002594:	d001      	beq.n	800259a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40022000 	.word	0x40022000

080025ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025b4:	2300      	movs	r3, #0
 80025b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025b8:	2300      	movs	r3, #0
 80025ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d031      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025d0:	d01a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80025d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025d6:	d814      	bhi.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d009      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025e0:	d10f      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80025e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025ee:	e00c      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f9de 	bl	80029b8 <RCCEx_PLLSAI1_Config>
 80025fc:	4603      	mov	r3, r0
 80025fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002600:	e003      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	74fb      	strb	r3, [r7, #19]
      break;
 8002606:	e000      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10b      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002610:	4b51      	ldr	r3, [pc, #324]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002616:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261e:	494e      	ldr	r1, [pc, #312]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002626:	e001      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 809e 	beq.w	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800263e:	4b46      	ldr	r3, [pc, #280]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800264e:	2300      	movs	r3, #0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00d      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002654:	4b40      	ldr	r3, [pc, #256]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002658:	4a3f      	ldr	r2, [pc, #252]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002660:	4b3d      	ldr	r3, [pc, #244]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266c:	2301      	movs	r3, #1
 800266e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002670:	4b3a      	ldr	r3, [pc, #232]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a39      	ldr	r2, [pc, #228]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800267a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800267c:	f7fe fbd4 	bl	8000e28 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002682:	e009      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002684:	f7fe fbd0 	bl	8000e28 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d902      	bls.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	74fb      	strb	r3, [r7, #19]
        break;
 8002696:	e005      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002698:	4b30      	ldr	r3, [pc, #192]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ef      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d15a      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01e      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d019      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026c6:	4b24      	ldr	r3, [pc, #144]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026d2:	4b21      	ldr	r3, [pc, #132]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026f2:	4a19      	ldr	r2, [pc, #100]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d016      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fb90 	bl	8000e28 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800270a:	e00b      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7fe fb8c 	bl	8000e28 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d902      	bls.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	74fb      	strb	r3, [r7, #19]
            break;
 8002722:	e006      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0ec      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10b      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002738:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002746:	4904      	ldr	r1, [pc, #16]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800274e:	e009      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	74bb      	strb	r3, [r7, #18]
 8002754:	e006      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002764:	7c7b      	ldrb	r3, [r7, #17]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d105      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276a:	4b8a      	ldr	r3, [pc, #552]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276e:	4a89      	ldr	r2, [pc, #548]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002774:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002782:	4b84      	ldr	r3, [pc, #528]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002788:	f023 0203 	bic.w	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4980      	ldr	r1, [pc, #512]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027aa:	f023 020c 	bic.w	r2, r3, #12
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	4978      	ldr	r1, [pc, #480]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027c6:	4b73      	ldr	r3, [pc, #460]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d4:	496f      	ldr	r1, [pc, #444]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ee:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f6:	4967      	ldr	r1, [pc, #412]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800280a:	4b62      	ldr	r3, [pc, #392]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002810:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002818:	495e      	ldr	r1, [pc, #376]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800282c:	4b59      	ldr	r3, [pc, #356]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002832:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	4956      	ldr	r1, [pc, #344]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800284e:	4b51      	ldr	r3, [pc, #324]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002854:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285c:	494d      	ldr	r1, [pc, #308]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d028      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002870:	4b48      	ldr	r3, [pc, #288]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002876:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	4945      	ldr	r1, [pc, #276]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800288e:	d106      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002890:	4b40      	ldr	r3, [pc, #256]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4a3f      	ldr	r2, [pc, #252]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800289a:	60d3      	str	r3, [r2, #12]
 800289c:	e011      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028a6:	d10c      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	2101      	movs	r1, #1
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f882 	bl	80029b8 <RCCEx_PLLSAI1_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80028be:	7cfb      	ldrb	r3, [r7, #19]
 80028c0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d028      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028ce:	4b31      	ldr	r3, [pc, #196]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028dc:	492d      	ldr	r1, [pc, #180]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ec:	d106      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ee:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	4a28      	ldr	r2, [pc, #160]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028f8:	60d3      	str	r3, [r2, #12]
 80028fa:	e011      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002900:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002904:	d10c      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3304      	adds	r3, #4
 800290a:	2101      	movs	r1, #1
 800290c:	4618      	mov	r0, r3
 800290e:	f000 f853 	bl	80029b8 <RCCEx_PLLSAI1_Config>
 8002912:	4603      	mov	r3, r0
 8002914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01c      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800292c:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002932:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293a:	4916      	ldr	r1, [pc, #88]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800294a:	d10c      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	2102      	movs	r1, #2
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f830 	bl	80029b8 <RCCEx_PLLSAI1_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002962:	7cfb      	ldrb	r3, [r7, #19]
 8002964:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002972:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002978:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002980:	4904      	ldr	r1, [pc, #16]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002988:	7cbb      	ldrb	r3, [r7, #18]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000

08002998 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a04      	ldr	r2, [pc, #16]	@ (80029b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000

080029b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029c6:	4b74      	ldr	r3, [pc, #464]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d018      	beq.n	8002a04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029d2:	4b71      	ldr	r3, [pc, #452]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0203 	and.w	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d10d      	bne.n	80029fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
       ||
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
       ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d047      	beq.n	8002a8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	e044      	b.n	8002a8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d018      	beq.n	8002a3e <RCCEx_PLLSAI1_Config+0x86>
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d825      	bhi.n	8002a5c <RCCEx_PLLSAI1_Config+0xa4>
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d002      	beq.n	8002a1a <RCCEx_PLLSAI1_Config+0x62>
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d009      	beq.n	8002a2c <RCCEx_PLLSAI1_Config+0x74>
 8002a18:	e020      	b.n	8002a5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11d      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2a:	e01a      	b.n	8002a62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d116      	bne.n	8002a66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3c:	e013      	b.n	8002a66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a3e:	4b56      	ldr	r3, [pc, #344]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a4a:	4b53      	ldr	r3, [pc, #332]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a5a:	e006      	b.n	8002a6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a60:	e004      	b.n	8002a6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a62:	bf00      	nop
 8002a64:	e002      	b.n	8002a6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10d      	bne.n	8002a8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a72:	4b49      	ldr	r3, [pc, #292]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	430b      	orrs	r3, r1
 8002a88:	4943      	ldr	r1, [pc, #268]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d17c      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a94:	4b40      	ldr	r3, [pc, #256]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a3f      	ldr	r2, [pc, #252]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa0:	f7fe f9c2 	bl	8000e28 <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aa6:	e009      	b.n	8002abc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aa8:	f7fe f9be 	bl	8000e28 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8002aba:	e005      	b.n	8002ac8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002abc:	4b36      	ldr	r3, [pc, #216]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ef      	bne.n	8002aa8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d15f      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d110      	bne.n	8002af6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad4:	4b30      	ldr	r3, [pc, #192]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002adc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6892      	ldr	r2, [r2, #8]
 8002ae4:	0211      	lsls	r1, r2, #8
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68d2      	ldr	r2, [r2, #12]
 8002aea:	06d2      	lsls	r2, r2, #27
 8002aec:	430a      	orrs	r2, r1
 8002aee:	492a      	ldr	r1, [pc, #168]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	610b      	str	r3, [r1, #16]
 8002af4:	e027      	b.n	8002b46 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d112      	bne.n	8002b22 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002afc:	4b26      	ldr	r3, [pc, #152]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6892      	ldr	r2, [r2, #8]
 8002b0c:	0211      	lsls	r1, r2, #8
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6912      	ldr	r2, [r2, #16]
 8002b12:	0852      	lsrs	r2, r2, #1
 8002b14:	3a01      	subs	r2, #1
 8002b16:	0552      	lsls	r2, r2, #21
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	491f      	ldr	r1, [pc, #124]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	610b      	str	r3, [r1, #16]
 8002b20:	e011      	b.n	8002b46 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b22:	4b1d      	ldr	r3, [pc, #116]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b2a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6892      	ldr	r2, [r2, #8]
 8002b32:	0211      	lsls	r1, r2, #8
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6952      	ldr	r2, [r2, #20]
 8002b38:	0852      	lsrs	r2, r2, #1
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	0652      	lsls	r2, r2, #25
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	4915      	ldr	r1, [pc, #84]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b46:	4b14      	ldr	r3, [pc, #80]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a13      	ldr	r2, [pc, #76]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fe f969 	bl	8000e28 <HAL_GetTick>
 8002b56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b58:	e009      	b.n	8002b6e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b5a:	f7fe f965 	bl	8000e28 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d902      	bls.n	8002b6e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	73fb      	strb	r3, [r7, #15]
          break;
 8002b6c:	e005      	b.n	8002b7a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0ef      	beq.n	8002b5a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d106      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b80:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	4903      	ldr	r1, [pc, #12]	@ (8002b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000

08002b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e049      	b.n	8002c42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fd ff38 	bl	8000a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4610      	mov	r0, r2
 8002bdc:	f000 fa82 	bl	80030e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d001      	beq.n	8002c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e03b      	b.n	8002cdc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a19      	ldr	r2, [pc, #100]	@ (8002ce8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d009      	beq.n	8002c9a <HAL_TIM_Base_Start_IT+0x4e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c8e:	d004      	beq.n	8002c9a <HAL_TIM_Base_Start_IT+0x4e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a15      	ldr	r2, [pc, #84]	@ (8002cec <HAL_TIM_Base_Start_IT+0xa0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d115      	bne.n	8002cc6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	4b13      	ldr	r3, [pc, #76]	@ (8002cf0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	d015      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x8c>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb2:	d011      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc4:	e008      	b.n	8002cd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e000      	b.n	8002cda <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40014000 	.word	0x40014000
 8002cf0:	00010007 	.word	0x00010007

08002cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d020      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01b      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0202 	mvn.w	r2, #2
 8002d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f9b2 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f9a4 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f9b5 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d020      	beq.n	8002da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01b      	beq.n	8002da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0204 	mvn.w	r2, #4
 8002d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f98c 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002d90:	e005      	b.n	8002d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f97e 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f98f 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d020      	beq.n	8002df0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01b      	beq.n	8002df0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0208 	mvn.w	r2, #8
 8002dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f966 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002ddc:	e005      	b.n	8002dea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f958 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f969 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d020      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01b      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0210 	mvn.w	r2, #16
 8002e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2208      	movs	r2, #8
 8002e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f940 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002e28:	e005      	b.n	8002e36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f932 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f943 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0201 	mvn.w	r2, #1
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fdae 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00c      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 faa5 	bl	80033d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00c      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fa9d 	bl	80033ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00c      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f8fd 	bl	80030d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00c      	beq.n	8002efa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f06f 0220 	mvn.w	r2, #32
 8002ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fa65 	bl	80033c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_ConfigClockSource+0x1c>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0b6      	b.n	800308c <HAL_TIM_ConfigClockSource+0x18a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f3c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f48:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f5a:	d03e      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0xd8>
 8002f5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f60:	f200 8087 	bhi.w	8003072 <HAL_TIM_ConfigClockSource+0x170>
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f68:	f000 8086 	beq.w	8003078 <HAL_TIM_ConfigClockSource+0x176>
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f70:	d87f      	bhi.n	8003072 <HAL_TIM_ConfigClockSource+0x170>
 8002f72:	2b70      	cmp	r3, #112	@ 0x70
 8002f74:	d01a      	beq.n	8002fac <HAL_TIM_ConfigClockSource+0xaa>
 8002f76:	2b70      	cmp	r3, #112	@ 0x70
 8002f78:	d87b      	bhi.n	8003072 <HAL_TIM_ConfigClockSource+0x170>
 8002f7a:	2b60      	cmp	r3, #96	@ 0x60
 8002f7c:	d050      	beq.n	8003020 <HAL_TIM_ConfigClockSource+0x11e>
 8002f7e:	2b60      	cmp	r3, #96	@ 0x60
 8002f80:	d877      	bhi.n	8003072 <HAL_TIM_ConfigClockSource+0x170>
 8002f82:	2b50      	cmp	r3, #80	@ 0x50
 8002f84:	d03c      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0xfe>
 8002f86:	2b50      	cmp	r3, #80	@ 0x50
 8002f88:	d873      	bhi.n	8003072 <HAL_TIM_ConfigClockSource+0x170>
 8002f8a:	2b40      	cmp	r3, #64	@ 0x40
 8002f8c:	d058      	beq.n	8003040 <HAL_TIM_ConfigClockSource+0x13e>
 8002f8e:	2b40      	cmp	r3, #64	@ 0x40
 8002f90:	d86f      	bhi.n	8003072 <HAL_TIM_ConfigClockSource+0x170>
 8002f92:	2b30      	cmp	r3, #48	@ 0x30
 8002f94:	d064      	beq.n	8003060 <HAL_TIM_ConfigClockSource+0x15e>
 8002f96:	2b30      	cmp	r3, #48	@ 0x30
 8002f98:	d86b      	bhi.n	8003072 <HAL_TIM_ConfigClockSource+0x170>
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d060      	beq.n	8003060 <HAL_TIM_ConfigClockSource+0x15e>
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d867      	bhi.n	8003072 <HAL_TIM_ConfigClockSource+0x170>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d05c      	beq.n	8003060 <HAL_TIM_ConfigClockSource+0x15e>
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d05a      	beq.n	8003060 <HAL_TIM_ConfigClockSource+0x15e>
 8002faa:	e062      	b.n	8003072 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fbc:	f000 f97c 	bl	80032b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002fce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	609a      	str	r2, [r3, #8]
      break;
 8002fd8:	e04f      	b.n	800307a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fea:	f000 f965 	bl	80032b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ffc:	609a      	str	r2, [r3, #8]
      break;
 8002ffe:	e03c      	b.n	800307a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300c:	461a      	mov	r2, r3
 800300e:	f000 f8d9 	bl	80031c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2150      	movs	r1, #80	@ 0x50
 8003018:	4618      	mov	r0, r3
 800301a:	f000 f932 	bl	8003282 <TIM_ITRx_SetConfig>
      break;
 800301e:	e02c      	b.n	800307a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800302c:	461a      	mov	r2, r3
 800302e:	f000 f8f8 	bl	8003222 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2160      	movs	r1, #96	@ 0x60
 8003038:	4618      	mov	r0, r3
 800303a:	f000 f922 	bl	8003282 <TIM_ITRx_SetConfig>
      break;
 800303e:	e01c      	b.n	800307a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304c:	461a      	mov	r2, r3
 800304e:	f000 f8b9 	bl	80031c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2140      	movs	r1, #64	@ 0x40
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f912 	bl	8003282 <TIM_ITRx_SetConfig>
      break;
 800305e:	e00c      	b.n	800307a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f000 f909 	bl	8003282 <TIM_ITRx_SetConfig>
      break;
 8003070:	e003      	b.n	800307a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
      break;
 8003076:	e000      	b.n	800307a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003078:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a30      	ldr	r2, [pc, #192]	@ (80031b8 <TIM_Base_SetConfig+0xd4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d003      	beq.n	8003104 <TIM_Base_SetConfig+0x20>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003102:	d108      	bne.n	8003116 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800310a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a27      	ldr	r2, [pc, #156]	@ (80031b8 <TIM_Base_SetConfig+0xd4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00b      	beq.n	8003136 <TIM_Base_SetConfig+0x52>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003124:	d007      	beq.n	8003136 <TIM_Base_SetConfig+0x52>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a24      	ldr	r2, [pc, #144]	@ (80031bc <TIM_Base_SetConfig+0xd8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_Base_SetConfig+0x52>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a23      	ldr	r2, [pc, #140]	@ (80031c0 <TIM_Base_SetConfig+0xdc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d108      	bne.n	8003148 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800313c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a12      	ldr	r2, [pc, #72]	@ (80031b8 <TIM_Base_SetConfig+0xd4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d007      	beq.n	8003184 <TIM_Base_SetConfig+0xa0>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a11      	ldr	r2, [pc, #68]	@ (80031bc <TIM_Base_SetConfig+0xd8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_Base_SetConfig+0xa0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a10      	ldr	r2, [pc, #64]	@ (80031c0 <TIM_Base_SetConfig+0xdc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d103      	bne.n	800318c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f023 0201 	bic.w	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	611a      	str	r2, [r3, #16]
  }
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40014000 	.word	0x40014000
 80031c0:	40014400 	.word	0x40014400

080031c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f023 0201 	bic.w	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f023 030a 	bic.w	r3, r3, #10
 8003200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003222:	b480      	push	{r7}
 8003224:	b087      	sub	sp, #28
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f023 0210 	bic.w	r2, r3, #16
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800324c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	031b      	lsls	r3, r3, #12
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800325e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003282:	b480      	push	{r7}
 8003284:	b085      	sub	sp, #20
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	f043 0307 	orr.w	r3, r3, #7
 80032a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	021a      	lsls	r2, r3, #8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	431a      	orrs	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800330c:	2302      	movs	r3, #2
 800330e:	e04f      	b.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a21      	ldr	r2, [pc, #132]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d108      	bne.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003340:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a14      	ldr	r2, [pc, #80]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003378:	d004      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a10      	ldr	r2, [pc, #64]	@ (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d10c      	bne.n	800339e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800338a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	4313      	orrs	r3, r2
 8003394:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40014000 	.word	0x40014000

080033c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e040      	b.n	8003494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd fb2e 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	@ 0x24
 800342c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fe02 	bl	8004050 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fbd3 	bl	8003bf8 <UART_SetConfig>
 8003452:	4603      	mov	r3, r0
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e01b      	b.n	8003494 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800346a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800347a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fe81 	bl	8004194 <UART_CheckIdleState>
 8003492:	4603      	mov	r3, r0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	@ 0x28
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d177      	bne.n	80035a4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_UART_Transmit+0x24>
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e070      	b.n	80035a6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2221      	movs	r2, #33	@ 0x21
 80034d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034d2:	f7fd fca9 	bl	8000e28 <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	88fa      	ldrh	r2, [r7, #6]
 80034dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f0:	d108      	bne.n	8003504 <HAL_UART_Transmit+0x68>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e003      	b.n	800350c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800350c:	e02f      	b.n	800356e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2180      	movs	r1, #128	@ 0x80
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fee3 	bl	80042e4 <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d004      	beq.n	800352e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e03b      	b.n	80035a6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	881a      	ldrh	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003540:	b292      	uxth	r2, r2
 8003542:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	3302      	adds	r3, #2
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e007      	b.n	800355c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	781a      	ldrb	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3301      	adds	r3, #1
 800355a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1c9      	bne.n	800350e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2200      	movs	r2, #0
 8003582:	2140      	movs	r1, #64	@ 0x40
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fead 	bl	80042e4 <UART_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e005      	b.n	80035a6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	e000      	b.n	80035a6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
  }
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b0ba      	sub	sp, #232	@ 0xe8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80035da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80035de:	4013      	ands	r3, r2
 80035e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80035e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d115      	bne.n	8003618 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00f      	beq.n	8003618 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d009      	beq.n	8003618 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 82ca 	beq.w	8003ba2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
      }
      return;
 8003616:	e2c4      	b.n	8003ba2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8117 	beq.w	8003850 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800362e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003632:	4b85      	ldr	r3, [pc, #532]	@ (8003848 <HAL_UART_IRQHandler+0x298>)
 8003634:	4013      	ands	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 810a 	beq.w	8003850 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800363c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d011      	beq.n	800366c <HAL_UART_IRQHandler+0xbc>
 8003648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800364c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00b      	beq.n	800366c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2201      	movs	r2, #1
 800365a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003662:	f043 0201 	orr.w	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800366c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d011      	beq.n	800369c <HAL_UART_IRQHandler+0xec>
 8003678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2202      	movs	r2, #2
 800368a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003692:	f043 0204 	orr.w	r2, r3, #4
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800369c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d011      	beq.n	80036cc <HAL_UART_IRQHandler+0x11c>
 80036a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2204      	movs	r2, #4
 80036ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d017      	beq.n	8003708 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00b      	beq.n	8003708 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2208      	movs	r2, #8
 80036f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036fe:	f043 0208 	orr.w	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003710:	2b00      	cmp	r3, #0
 8003712:	d012      	beq.n	800373a <HAL_UART_IRQHandler+0x18a>
 8003714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003718:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00c      	beq.n	800373a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003728:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8230 	beq.w	8003ba6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003774:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003782:	2b40      	cmp	r3, #64	@ 0x40
 8003784:	d005      	beq.n	8003792 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800378a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800378e:	2b00      	cmp	r3, #0
 8003790:	d04f      	beq.n	8003832 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 feda 	bl	800454c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a2:	2b40      	cmp	r3, #64	@ 0x40
 80037a4:	d141      	bne.n	800382a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3308      	adds	r3, #8
 80037ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3308      	adds	r3, #8
 80037ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1d9      	bne.n	80037a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d013      	beq.n	8003822 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037fe:	4a13      	ldr	r2, [pc, #76]	@ (800384c <HAL_UART_IRQHandler+0x29c>)
 8003800:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd fd82 	bl	8001310 <HAL_DMA_Abort_IT>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d017      	beq.n	8003842 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800381c:	4610      	mov	r0, r2
 800381e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	e00f      	b.n	8003842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fc fede 	bl	80005e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	e00b      	b.n	8003842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fc feda 	bl	80005e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	e007      	b.n	8003842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fc fed6 	bl	80005e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003840:	e1b1      	b.n	8003ba6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003842:	bf00      	nop
    return;
 8003844:	e1af      	b.n	8003ba6 <HAL_UART_IRQHandler+0x5f6>
 8003846:	bf00      	nop
 8003848:	04000120 	.word	0x04000120
 800384c:	080047fd 	.word	0x080047fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003854:	2b01      	cmp	r3, #1
 8003856:	f040 816a 	bne.w	8003b2e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800385a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8163 	beq.w	8003b2e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 815c 	beq.w	8003b2e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2210      	movs	r2, #16
 800387c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003888:	2b40      	cmp	r3, #64	@ 0x40
 800388a:	f040 80d4 	bne.w	8003a36 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800389a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80ad 	beq.w	80039fe <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ae:	429a      	cmp	r2, r3
 80038b0:	f080 80a5 	bcs.w	80039fe <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 8086 	bne.w	80039dc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003906:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1da      	bne.n	80038d0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3308      	adds	r3, #8
 8003920:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800392a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3308      	adds	r3, #8
 800393a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800393e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003942:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003946:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e1      	bne.n	800391a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3308      	adds	r3, #8
 800395c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800396c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3308      	adds	r3, #8
 8003976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800397a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800397c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003980:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e3      	bne.n	8003956 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039ac:	f023 0310 	bic.w	r3, r3, #16
 80039b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e4      	bne.n	800399c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd fc5c 	bl	8001294 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fc fdcc 	bl	8000594 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80039fc:	e0d5      	b.n	8003baa <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	f040 80ce 	bne.w	8003baa <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	f040 80c5 	bne.w	8003baa <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fc fdb0 	bl	8000594 <HAL_UARTEx_RxEventCallback>
      return;
 8003a34:	e0b9      	b.n	8003baa <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80ab 	beq.w	8003bae <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80a6 	beq.w	8003bae <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e4      	bne.n	8003a62 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003abc:	633a      	str	r2, [r7, #48]	@ 0x30
 8003abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e3      	bne.n	8003a98 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f023 0310 	bic.w	r3, r3, #16
 8003af8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b06:	61fb      	str	r3, [r7, #28]
 8003b08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	69b9      	ldr	r1, [r7, #24]
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	e841 2300 	strex	r3, r2, [r1]
 8003b12:	617b      	str	r3, [r7, #20]
   return(result);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e4      	bne.n	8003ae4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b24:	4619      	mov	r1, r3
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fc fd34 	bl	8000594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b2c:	e03f      	b.n	8003bae <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00e      	beq.n	8003b58 <HAL_UART_IRQHandler+0x5a8>
 8003b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fe93 	bl	800487c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b56:	e02d      	b.n	8003bb4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00e      	beq.n	8003b82 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01c      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
    }
    return;
 8003b80:	e017      	b.n	8003bb2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d012      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x604>
 8003b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00c      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fe44 	bl	8004828 <UART_EndTransmit_IT>
    return;
 8003ba0:	e008      	b.n	8003bb4 <HAL_UART_IRQHandler+0x604>
      return;
 8003ba2:	bf00      	nop
 8003ba4:	e006      	b.n	8003bb4 <HAL_UART_IRQHandler+0x604>
    return;
 8003ba6:	bf00      	nop
 8003ba8:	e004      	b.n	8003bb4 <HAL_UART_IRQHandler+0x604>
      return;
 8003baa:	bf00      	nop
 8003bac:	e002      	b.n	8003bb4 <HAL_UART_IRQHandler+0x604>
      return;
 8003bae:	bf00      	nop
 8003bb0:	e000      	b.n	8003bb4 <HAL_UART_IRQHandler+0x604>
    return;
 8003bb2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003bb4:	37e8      	adds	r7, #232	@ 0xe8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop

08003bbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bfc:	b08a      	sub	sp, #40	@ 0x28
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4bb4      	ldr	r3, [pc, #720]	@ (8003ef8 <UART_SetConfig+0x300>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4aa9      	ldr	r2, [pc, #676]	@ (8003efc <UART_SetConfig+0x304>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c60:	4313      	orrs	r3, r2
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c74:	430a      	orrs	r2, r1
 8003c76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4aa0      	ldr	r2, [pc, #640]	@ (8003f00 <UART_SetConfig+0x308>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d126      	bne.n	8003cd0 <UART_SetConfig+0xd8>
 8003c82:	4ba0      	ldr	r3, [pc, #640]	@ (8003f04 <UART_SetConfig+0x30c>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d81b      	bhi.n	8003cc8 <UART_SetConfig+0xd0>
 8003c90:	a201      	add	r2, pc, #4	@ (adr r2, 8003c98 <UART_SetConfig+0xa0>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003ca9 	.word	0x08003ca9
 8003c9c:	08003cb9 	.word	0x08003cb9
 8003ca0:	08003cb1 	.word	0x08003cb1
 8003ca4:	08003cc1 	.word	0x08003cc1
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cae:	e080      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb6:	e07c      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003cb8:	2304      	movs	r3, #4
 8003cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cbe:	e078      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc6:	e074      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003cc8:	2310      	movs	r3, #16
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cce:	e070      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a8c      	ldr	r2, [pc, #560]	@ (8003f08 <UART_SetConfig+0x310>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d138      	bne.n	8003d4c <UART_SetConfig+0x154>
 8003cda:	4b8a      	ldr	r3, [pc, #552]	@ (8003f04 <UART_SetConfig+0x30c>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	d82d      	bhi.n	8003d44 <UART_SetConfig+0x14c>
 8003ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <UART_SetConfig+0xf8>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d25 	.word	0x08003d25
 8003cf4:	08003d45 	.word	0x08003d45
 8003cf8:	08003d45 	.word	0x08003d45
 8003cfc:	08003d45 	.word	0x08003d45
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08003d45 	.word	0x08003d45
 8003d08:	08003d45 	.word	0x08003d45
 8003d0c:	08003d45 	.word	0x08003d45
 8003d10:	08003d2d 	.word	0x08003d2d
 8003d14:	08003d45 	.word	0x08003d45
 8003d18:	08003d45 	.word	0x08003d45
 8003d1c:	08003d45 	.word	0x08003d45
 8003d20:	08003d3d 	.word	0x08003d3d
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d2a:	e042      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d32:	e03e      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003d34:	2304      	movs	r3, #4
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3a:	e03a      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d42:	e036      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003d44:	2310      	movs	r3, #16
 8003d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4a:	e032      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a6a      	ldr	r2, [pc, #424]	@ (8003efc <UART_SetConfig+0x304>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d12a      	bne.n	8003dac <UART_SetConfig+0x1b4>
 8003d56:	4b6b      	ldr	r3, [pc, #428]	@ (8003f04 <UART_SetConfig+0x30c>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d64:	d01a      	beq.n	8003d9c <UART_SetConfig+0x1a4>
 8003d66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d6a:	d81b      	bhi.n	8003da4 <UART_SetConfig+0x1ac>
 8003d6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d70:	d00c      	beq.n	8003d8c <UART_SetConfig+0x194>
 8003d72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d76:	d815      	bhi.n	8003da4 <UART_SetConfig+0x1ac>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <UART_SetConfig+0x18c>
 8003d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d80:	d008      	beq.n	8003d94 <UART_SetConfig+0x19c>
 8003d82:	e00f      	b.n	8003da4 <UART_SetConfig+0x1ac>
 8003d84:	2300      	movs	r3, #0
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d8a:	e012      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d92:	e00e      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003d94:	2304      	movs	r3, #4
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9a:	e00a      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da2:	e006      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003da4:	2310      	movs	r3, #16
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003daa:	e002      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003dac:	2310      	movs	r3, #16
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a51      	ldr	r2, [pc, #324]	@ (8003efc <UART_SetConfig+0x304>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d17a      	bne.n	8003eb2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d824      	bhi.n	8003e0e <UART_SetConfig+0x216>
 8003dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <UART_SetConfig+0x1d4>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003df1 	.word	0x08003df1
 8003dd0:	08003e0f 	.word	0x08003e0f
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003e0f 	.word	0x08003e0f
 8003ddc:	08003dff 	.word	0x08003dff
 8003de0:	08003e0f 	.word	0x08003e0f
 8003de4:	08003e0f 	.word	0x08003e0f
 8003de8:	08003e0f 	.word	0x08003e0f
 8003dec:	08003e07 	.word	0x08003e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df0:	f7fe fb50 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8003df4:	61f8      	str	r0, [r7, #28]
        break;
 8003df6:	e010      	b.n	8003e1a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df8:	4b44      	ldr	r3, [pc, #272]	@ (8003f0c <UART_SetConfig+0x314>)
 8003dfa:	61fb      	str	r3, [r7, #28]
        break;
 8003dfc:	e00d      	b.n	8003e1a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfe:	f7fe fab1 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003e02:	61f8      	str	r0, [r7, #28]
        break;
 8003e04:	e009      	b.n	8003e1a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e0a:	61fb      	str	r3, [r7, #28]
        break;
 8003e0c:	e005      	b.n	8003e1a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8107 	beq.w	8004030 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d305      	bcc.n	8003e3e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d903      	bls.n	8003e46 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e44:	e0f4      	b.n	8004030 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	461c      	mov	r4, r3
 8003e4c:	4615      	mov	r5, r2
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	022b      	lsls	r3, r5, #8
 8003e58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e5c:	0222      	lsls	r2, r4, #8
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	6849      	ldr	r1, [r1, #4]
 8003e62:	0849      	lsrs	r1, r1, #1
 8003e64:	2000      	movs	r0, #0
 8003e66:	4688      	mov	r8, r1
 8003e68:	4681      	mov	r9, r0
 8003e6a:	eb12 0a08 	adds.w	sl, r2, r8
 8003e6e:	eb43 0b09 	adc.w	fp, r3, r9
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e80:	4650      	mov	r0, sl
 8003e82:	4659      	mov	r1, fp
 8003e84:	f7fc f9a2 	bl	80001cc <__aeabi_uldivmod>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e96:	d308      	bcc.n	8003eaa <UART_SetConfig+0x2b2>
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e9e:	d204      	bcs.n	8003eaa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	e0c2      	b.n	8004030 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003eb0:	e0be      	b.n	8004030 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eba:	d16a      	bne.n	8003f92 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d834      	bhi.n	8003f2e <UART_SetConfig+0x336>
 8003ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ecc <UART_SetConfig+0x2d4>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003f11 	.word	0x08003f11
 8003ed4:	08003f19 	.word	0x08003f19
 8003ed8:	08003f2f 	.word	0x08003f2f
 8003edc:	08003f1f 	.word	0x08003f1f
 8003ee0:	08003f2f 	.word	0x08003f2f
 8003ee4:	08003f2f 	.word	0x08003f2f
 8003ee8:	08003f2f 	.word	0x08003f2f
 8003eec:	08003f27 	.word	0x08003f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f7fe fad0 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8003ef4:	61f8      	str	r0, [r7, #28]
        break;
 8003ef6:	e020      	b.n	8003f3a <UART_SetConfig+0x342>
 8003ef8:	efff69f3 	.word	0xefff69f3
 8003efc:	40008000 	.word	0x40008000
 8003f00:	40013800 	.word	0x40013800
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40004400 	.word	0x40004400
 8003f0c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f10:	f7fe fad6 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8003f14:	61f8      	str	r0, [r7, #28]
        break;
 8003f16:	e010      	b.n	8003f3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f18:	4b4c      	ldr	r3, [pc, #304]	@ (800404c <UART_SetConfig+0x454>)
 8003f1a:	61fb      	str	r3, [r7, #28]
        break;
 8003f1c:	e00d      	b.n	8003f3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1e:	f7fe fa21 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003f22:	61f8      	str	r0, [r7, #28]
        break;
 8003f24:	e009      	b.n	8003f3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f2a:	61fb      	str	r3, [r7, #28]
        break;
 8003f2c:	e005      	b.n	8003f3a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d077      	beq.n	8004030 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	005a      	lsls	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b0f      	cmp	r3, #15
 8003f5a:	d916      	bls.n	8003f8a <UART_SetConfig+0x392>
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f62:	d212      	bcs.n	8003f8a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f023 030f 	bic.w	r3, r3, #15
 8003f6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	8afb      	ldrh	r3, [r7, #22]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	8afa      	ldrh	r2, [r7, #22]
 8003f86:	60da      	str	r2, [r3, #12]
 8003f88:	e052      	b.n	8004030 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f90:	e04e      	b.n	8004030 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d827      	bhi.n	8003fea <UART_SetConfig+0x3f2>
 8003f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <UART_SetConfig+0x3a8>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fc5 	.word	0x08003fc5
 8003fa4:	08003fcd 	.word	0x08003fcd
 8003fa8:	08003fd5 	.word	0x08003fd5
 8003fac:	08003feb 	.word	0x08003feb
 8003fb0:	08003fdb 	.word	0x08003fdb
 8003fb4:	08003feb 	.word	0x08003feb
 8003fb8:	08003feb 	.word	0x08003feb
 8003fbc:	08003feb 	.word	0x08003feb
 8003fc0:	08003fe3 	.word	0x08003fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc4:	f7fe fa66 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8003fc8:	61f8      	str	r0, [r7, #28]
        break;
 8003fca:	e014      	b.n	8003ff6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fcc:	f7fe fa78 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8003fd0:	61f8      	str	r0, [r7, #28]
        break;
 8003fd2:	e010      	b.n	8003ff6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800404c <UART_SetConfig+0x454>)
 8003fd6:	61fb      	str	r3, [r7, #28]
        break;
 8003fd8:	e00d      	b.n	8003ff6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fda:	f7fe f9c3 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003fde:	61f8      	str	r0, [r7, #28]
        break;
 8003fe0:	e009      	b.n	8003ff6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fe6:	61fb      	str	r3, [r7, #28]
        break;
 8003fe8:	e005      	b.n	8003ff6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ff4:	bf00      	nop
    }

    if (pclk != 0U)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d019      	beq.n	8004030 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	085a      	lsrs	r2, r3, #1
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	441a      	add	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	fbb2 f3f3 	udiv	r3, r2, r3
 800400e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b0f      	cmp	r3, #15
 8004014:	d909      	bls.n	800402a <UART_SetConfig+0x432>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800401c:	d205      	bcs.n	800402a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60da      	str	r2, [r3, #12]
 8004028:	e002      	b.n	8004030 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800403c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004040:	4618      	mov	r0, r3
 8004042:	3728      	adds	r7, #40	@ 0x28
 8004044:	46bd      	mov	sp, r7
 8004046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800404a:	bf00      	nop
 800404c:	00f42400 	.word	0x00f42400

08004050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01a      	beq.n	8004166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800414e:	d10a      	bne.n	8004166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
  }
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b098      	sub	sp, #96	@ 0x60
 8004198:	af02      	add	r7, sp, #8
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041a4:	f7fc fe40 	bl	8000e28 <HAL_GetTick>
 80041a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d12e      	bne.n	8004216 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c0:	2200      	movs	r2, #0
 80041c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f88c 	bl	80042e4 <UART_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d021      	beq.n	8004216 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e062      	b.n	80042dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b04      	cmp	r3, #4
 8004222:	d149      	bne.n	80042b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004224:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800422c:	2200      	movs	r2, #0
 800422e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f856 	bl	80042e4 <UART_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d03c      	beq.n	80042b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	623b      	str	r3, [r7, #32]
   return(result);
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800425c:	633b      	str	r3, [r7, #48]	@ 0x30
 800425e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e6      	bne.n	800423e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3308      	adds	r3, #8
 8004276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004290:	61fa      	str	r2, [r7, #28]
 8004292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	69b9      	ldr	r1, [r7, #24]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	617b      	str	r3, [r7, #20]
   return(result);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e011      	b.n	80042dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3758      	adds	r7, #88	@ 0x58
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f4:	e04f      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d04b      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fc fd93 	bl	8000e28 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <UART_WaitOnFlagUntilTimeout+0x30>
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e04e      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d037      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b80      	cmp	r3, #128	@ 0x80
 800432a:	d034      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb2>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b40      	cmp	r3, #64	@ 0x40
 8004330:	d031      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b08      	cmp	r3, #8
 800433e:	d110      	bne.n	8004362 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2208      	movs	r2, #8
 8004346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f8ff 	bl	800454c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2208      	movs	r2, #8
 8004352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e029      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800436c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004370:	d111      	bne.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800437a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f8e5 	bl	800454c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e00f      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	bf0c      	ite	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	2300      	movne	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d0a0      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b096      	sub	sp, #88	@ 0x58
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	4613      	mov	r3, r2
 80043cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2222      	movs	r2, #34	@ 0x22
 80043e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d028      	beq.n	8004446 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f8:	4a3e      	ldr	r2, [pc, #248]	@ (80044f4 <UART_Start_Receive_DMA+0x134>)
 80043fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004400:	4a3d      	ldr	r2, [pc, #244]	@ (80044f8 <UART_Start_Receive_DMA+0x138>)
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004408:	4a3c      	ldr	r2, [pc, #240]	@ (80044fc <UART_Start_Receive_DMA+0x13c>)
 800440a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004410:	2200      	movs	r2, #0
 8004412:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3324      	adds	r3, #36	@ 0x24
 800441e:	4619      	mov	r1, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004424:	461a      	mov	r2, r3
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	f7fc fed4 	bl	80011d4 <HAL_DMA_Start_IT>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2210      	movs	r2, #16
 8004436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e051      	b.n	80044ea <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d018      	beq.n	8004480 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800445c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004462:	657b      	str	r3, [r7, #84]	@ 0x54
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800446c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800446e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004472:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800447a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e6      	bne.n	800444e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3308      	adds	r3, #8
 8004486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	653b      	str	r3, [r7, #80]	@ 0x50
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3308      	adds	r3, #8
 800449e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80044a0:	637a      	str	r2, [r7, #52]	@ 0x34
 80044a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80044ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e5      	bne.n	8004480 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3308      	adds	r3, #8
 80044ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	613b      	str	r3, [r7, #16]
   return(result);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044d4:	623a      	str	r2, [r7, #32]
 80044d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	69f9      	ldr	r1, [r7, #28]
 80044da:	6a3a      	ldr	r2, [r7, #32]
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e5      	bne.n	80044b4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3758      	adds	r7, #88	@ 0x58
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	08004615 	.word	0x08004615
 80044f8:	08004741 	.word	0x08004741
 80044fc:	0800477f 	.word	0x0800477f

08004500 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b089      	sub	sp, #36	@ 0x24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	60bb      	str	r3, [r7, #8]
   return(result);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6979      	ldr	r1, [r7, #20]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	613b      	str	r3, [r7, #16]
   return(result);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e6      	bne.n	8004508 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004540:	bf00      	nop
 8004542:	3724      	adds	r7, #36	@ 0x24
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b095      	sub	sp, #84	@ 0x54
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004568:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004572:	643b      	str	r3, [r7, #64]	@ 0x40
 8004574:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004578:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e6      	bne.n	8004554 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	61fb      	str	r3, [r7, #28]
   return(result);
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3308      	adds	r3, #8
 80045a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e5      	bne.n	8004586 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d118      	bne.n	80045f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f023 0310 	bic.w	r3, r3, #16
 80045d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6979      	ldr	r1, [r7, #20]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	613b      	str	r3, [r7, #16]
   return(result);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e6      	bne.n	80045c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004608:	bf00      	nop
 800460a:	3754      	adds	r7, #84	@ 0x54
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b09c      	sub	sp, #112	@ 0x70
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004620:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d171      	bne.n	8004714 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004632:	2200      	movs	r2, #0
 8004634:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800464c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800464e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004656:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004658:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800465c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e6      	bne.n	8004638 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3308      	adds	r3, #8
 8004670:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800467a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	667b      	str	r3, [r7, #100]	@ 0x64
 8004682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3308      	adds	r3, #8
 8004688:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800468a:	647a      	str	r2, [r7, #68]	@ 0x44
 800468c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004690:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e5      	bne.n	800466a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3308      	adds	r3, #8
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	623b      	str	r3, [r7, #32]
   return(result);
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80046b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3308      	adds	r3, #8
 80046bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046be:	633a      	str	r2, [r7, #48]	@ 0x30
 80046c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e5      	bne.n	800469e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046d4:	2220      	movs	r2, #32
 80046d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d118      	bne.n	8004714 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0310 	bic.w	r3, r3, #16
 80046f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	69b9      	ldr	r1, [r7, #24]
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	617b      	str	r3, [r7, #20]
   return(result);
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e6      	bne.n	80046e2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004716:	2200      	movs	r2, #0
 8004718:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800471c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471e:	2b01      	cmp	r3, #1
 8004720:	d107      	bne.n	8004732 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004724:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004728:	4619      	mov	r1, r3
 800472a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800472c:	f7fb ff32 	bl	8000594 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004730:	e002      	b.n	8004738 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004732:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004734:	f7ff fa4c 	bl	8003bd0 <HAL_UART_RxCpltCallback>
}
 8004738:	bf00      	nop
 800473a:	3770      	adds	r7, #112	@ 0x70
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004758:	2b01      	cmp	r3, #1
 800475a:	d109      	bne.n	8004770 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004762:	085b      	lsrs	r3, r3, #1
 8004764:	b29b      	uxth	r3, r3
 8004766:	4619      	mov	r1, r3
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7fb ff13 	bl	8000594 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800476e:	e002      	b.n	8004776 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff fa37 	bl	8003be4 <HAL_UART_RxHalfCpltCallback>
}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b086      	sub	sp, #24
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004790:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004798:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a4:	2b80      	cmp	r3, #128	@ 0x80
 80047a6:	d109      	bne.n	80047bc <UART_DMAError+0x3e>
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b21      	cmp	r3, #33	@ 0x21
 80047ac:	d106      	bne.n	80047bc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80047b6:	6978      	ldr	r0, [r7, #20]
 80047b8:	f7ff fea2 	bl	8004500 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c6:	2b40      	cmp	r3, #64	@ 0x40
 80047c8:	d109      	bne.n	80047de <UART_DMAError+0x60>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b22      	cmp	r3, #34	@ 0x22
 80047ce:	d106      	bne.n	80047de <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80047d8:	6978      	ldr	r0, [r7, #20]
 80047da:	f7ff feb7 	bl	800454c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e4:	f043 0210 	orr.w	r2, r3, #16
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ee:	6978      	ldr	r0, [r7, #20]
 80047f0:	f7fb fef8 	bl	80005e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f4:	bf00      	nop
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7fb fee2 	bl	80005e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	60bb      	str	r3, [r7, #8]
   return(result);
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	6979      	ldr	r1, [r7, #20]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	613b      	str	r3, [r7, #16]
   return(result);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e6      	bne.n	8004830 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff f9a4 	bl	8003bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004874:	bf00      	nop
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08c      	sub	sp, #48	@ 0x30
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d142      	bne.n	800492e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e03b      	b.n	8004930 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	461a      	mov	r2, r3
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff fd78 	bl	80043c0 <UART_Start_Receive_DMA>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80048d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d124      	bne.n	8004928 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d11d      	bne.n	8004922 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2210      	movs	r2, #16
 80048ec:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	617b      	str	r3, [r7, #20]
   return(result);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f043 0310 	orr.w	r3, r3, #16
 8004902:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490c:	627b      	str	r3, [r7, #36]	@ 0x24
 800490e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6a39      	ldr	r1, [r7, #32]
 8004912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	61fb      	str	r3, [r7, #28]
   return(result);
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e6      	bne.n	80048ee <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004920:	e002      	b.n	8004928 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004928:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800492c:	e000      	b.n	8004930 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
  }
}
 8004930:	4618      	mov	r0, r3
 8004932:	3730      	adds	r7, #48	@ 0x30
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <memset>:
 8004938:	4402      	add	r2, r0
 800493a:	4603      	mov	r3, r0
 800493c:	4293      	cmp	r3, r2
 800493e:	d100      	bne.n	8004942 <memset+0xa>
 8004940:	4770      	bx	lr
 8004942:	f803 1b01 	strb.w	r1, [r3], #1
 8004946:	e7f9      	b.n	800493c <memset+0x4>

08004948 <__libc_init_array>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4d0d      	ldr	r5, [pc, #52]	@ (8004980 <__libc_init_array+0x38>)
 800494c:	4c0d      	ldr	r4, [pc, #52]	@ (8004984 <__libc_init_array+0x3c>)
 800494e:	1b64      	subs	r4, r4, r5
 8004950:	10a4      	asrs	r4, r4, #2
 8004952:	2600      	movs	r6, #0
 8004954:	42a6      	cmp	r6, r4
 8004956:	d109      	bne.n	800496c <__libc_init_array+0x24>
 8004958:	4d0b      	ldr	r5, [pc, #44]	@ (8004988 <__libc_init_array+0x40>)
 800495a:	4c0c      	ldr	r4, [pc, #48]	@ (800498c <__libc_init_array+0x44>)
 800495c:	f000 f818 	bl	8004990 <_init>
 8004960:	1b64      	subs	r4, r4, r5
 8004962:	10a4      	asrs	r4, r4, #2
 8004964:	2600      	movs	r6, #0
 8004966:	42a6      	cmp	r6, r4
 8004968:	d105      	bne.n	8004976 <__libc_init_array+0x2e>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004970:	4798      	blx	r3
 8004972:	3601      	adds	r6, #1
 8004974:	e7ee      	b.n	8004954 <__libc_init_array+0xc>
 8004976:	f855 3b04 	ldr.w	r3, [r5], #4
 800497a:	4798      	blx	r3
 800497c:	3601      	adds	r6, #1
 800497e:	e7f2      	b.n	8004966 <__libc_init_array+0x1e>
 8004980:	08004a5c 	.word	0x08004a5c
 8004984:	08004a5c 	.word	0x08004a5c
 8004988:	08004a5c 	.word	0x08004a5c
 800498c:	08004a60 	.word	0x08004a60

08004990 <_init>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr

0800499c <_fini>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	bf00      	nop
 80049a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a2:	bc08      	pop	{r3}
 80049a4:	469e      	mov	lr, r3
 80049a6:	4770      	bx	lr
